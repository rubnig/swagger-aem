#
# Adobe Experience Manager (AEM) API
# Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
# Version: 3.5.0-pre.0
# Contact: opensource@shinesolutions.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Runmode
No description available.

.PARAMETER Name
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DeleteAgent {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Runmode},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Name},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DeleteAgent' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/etc/replication/agents.{runmode}/{name}'
        if (!$Runmode) {
            throw "Error! The required parameter `Runmode` missing when calling deleteAgent."
        }
        $LocalVarUri = $LocalVarUri.replace('{runmode}', [System.Web.HTTPUtility]::UrlEncode($Runmode))
        if (!$Name) {
            throw "Error! The required parameter `Name` missing when calling deleteAgent."
        }
        $LocalVarUri = $LocalVarUri.replace('{name}', [System.Web.HTTPUtility]::UrlEncode($Name))

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Path
No description available.

.PARAMETER Name
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DeleteNode {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Path},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Name},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DeleteNode' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/{path}/{name}'
        if (!$Path) {
            throw "Error! The required parameter `Path` missing when calling deleteNode."
        }
        $LocalVarUri = $LocalVarUri.replace('{path}', [System.Web.HTTPUtility]::UrlEncode($Path))
        if (!$Name) {
            throw "Error! The required parameter `Name` missing when calling deleteNode."
        }
        $LocalVarUri = $LocalVarUri.replace('{name}', [System.Web.HTTPUtility]::UrlEncode($Name))

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Runmode
No description available.

.PARAMETER Name
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Get-Agent {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Runmode},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Name},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-Agent' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/etc/replication/agents.{runmode}/{name}'
        if (!$Runmode) {
            throw "Error! The required parameter `Runmode` missing when calling getAgent."
        }
        $LocalVarUri = $LocalVarUri.replace('{runmode}', [System.Web.HTTPUtility]::UrlEncode($Runmode))
        if (!$Name) {
            throw "Error! The required parameter `Name` missing when calling getAgent."
        }
        $LocalVarUri = $LocalVarUri.replace('{name}', [System.Web.HTTPUtility]::UrlEncode($Name))

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Runmode
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

String
#>
function Get-Agents {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Runmode},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-Agents' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/etc/replication/agents.{runmode}.-1.json'
        if (!$Runmode) {
            throw "Error! The required parameter `Runmode` missing when calling getAgents."
        }
        $LocalVarUri = $LocalVarUri.replace('{runmode}', [System.Web.HTTPUtility]::UrlEncode($Runmode))

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "String" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER IntermediatePath
No description available.

.PARAMETER AuthorizableId
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

KeystoreInfo
#>
function Get-AuthorizableKeystore {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IntermediatePath},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AuthorizableId},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-AuthorizableKeystore' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain')

        $LocalVarUri = '/{intermediatePath}/{authorizableId}.ks.json'
        if (!$IntermediatePath) {
            throw "Error! The required parameter `IntermediatePath` missing when calling getAuthorizableKeystore."
        }
        $LocalVarUri = $LocalVarUri.replace('{intermediatePath}', [System.Web.HTTPUtility]::UrlEncode($IntermediatePath))
        if (!$AuthorizableId) {
            throw "Error! The required parameter `AuthorizableId` missing when calling getAuthorizableKeystore."
        }
        $LocalVarUri = $LocalVarUri.replace('{authorizableId}', [System.Web.HTTPUtility]::UrlEncode($AuthorizableId))

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "KeystoreInfo" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER IntermediatePath
No description available.

.PARAMETER AuthorizableId
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

System.IO.FileInfo
#>
function Get-Keystore {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IntermediatePath},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AuthorizableId},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-Keystore' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/octet-stream')

        $LocalVarUri = '/{intermediatePath}/{authorizableId}/keystore/store.p12'
        if (!$IntermediatePath) {
            throw "Error! The required parameter `IntermediatePath` missing when calling getKeystore."
        }
        $LocalVarUri = $LocalVarUri.replace('{intermediatePath}', [System.Web.HTTPUtility]::UrlEncode($IntermediatePath))
        if (!$AuthorizableId) {
            throw "Error! The required parameter `AuthorizableId` missing when calling getKeystore."
        }
        $LocalVarUri = $LocalVarUri.replace('{authorizableId}', [System.Web.HTTPUtility]::UrlEncode($AuthorizableId))

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "System.IO.FileInfo" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Path
No description available.

.PARAMETER Name
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Get-Node {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Path},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Name},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-Node' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/{path}/{name}'
        if (!$Path) {
            throw "Error! The required parameter `Path` missing when calling getNode."
        }
        $LocalVarUri = $LocalVarUri.replace('{path}', [System.Web.HTTPUtility]::UrlEncode($Path))
        if (!$Name) {
            throw "Error! The required parameter `Name` missing when calling getNode."
        }
        $LocalVarUri = $LocalVarUri.replace('{name}', [System.Web.HTTPUtility]::UrlEncode($Name))

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Group
No description available.

.PARAMETER Name
No description available.

.PARAMETER Version
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

System.IO.FileInfo
#>
function Get-Package {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Group},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Version},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-Package' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/octet-stream')

        $LocalVarUri = '/etc/packages/{group}/{name}-{version}.zip'
        if (!$Group) {
            throw "Error! The required parameter `Group` missing when calling getPackage."
        }
        $LocalVarUri = $LocalVarUri.replace('{group}', [System.Web.HTTPUtility]::UrlEncode($Group))
        if (!$Name) {
            throw "Error! The required parameter `Name` missing when calling getPackage."
        }
        $LocalVarUri = $LocalVarUri.replace('{name}', [System.Web.HTTPUtility]::UrlEncode($Name))
        if (!$Version) {
            throw "Error! The required parameter `Version` missing when calling getPackage."
        }
        $LocalVarUri = $LocalVarUri.replace('{version}', [System.Web.HTTPUtility]::UrlEncode($Version))

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "System.IO.FileInfo" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Group
No description available.

.PARAMETER Name
No description available.

.PARAMETER Version
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

String
#>
function Get-PackageFilter {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Group},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Version},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-PackageFilter' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json'
        if (!$Group) {
            throw "Error! The required parameter `Group` missing when calling getPackageFilter."
        }
        $LocalVarUri = $LocalVarUri.replace('{group}', [System.Web.HTTPUtility]::UrlEncode($Group))
        if (!$Name) {
            throw "Error! The required parameter `Name` missing when calling getPackageFilter."
        }
        $LocalVarUri = $LocalVarUri.replace('{name}', [System.Web.HTTPUtility]::UrlEncode($Name))
        if (!$Version) {
            throw "Error! The required parameter `Version` missing when calling getPackageFilter."
        }
        $LocalVarUri = $LocalVarUri.replace('{version}', [System.Web.HTTPUtility]::UrlEncode($Version))

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "String" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Path
No description available.

.PARAMETER PLimit
No description available.

.PARAMETER Var1Property
No description available.

.PARAMETER Var1PropertyValue
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

String
#>
function Get-Query {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Path},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Decimal]
        ${PLimit},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Var1Property},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Var1PropertyValue},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-Query' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/bin/querybuilder.json'

        if (!$Path) {
            throw "Error! The required parameter `Path` missing when calling getQuery."
        }
        $LocalVarQueryParameters['path'] = $Path

        if (!$PLimit) {
            throw "Error! The required parameter `PLimit` missing when calling getQuery."
        }
        $LocalVarQueryParameters['p.limit'] = $PLimit

        if (!$Var1Property) {
            throw "Error! The required parameter `Var1Property` missing when calling getQuery."
        }
        $LocalVarQueryParameters['1_property'] = $Var1Property

        if (!$Var1PropertyValue) {
            throw "Error! The required parameter `Var1PropertyValue` missing when calling getQuery."
        }
        $LocalVarQueryParameters['1_property.value'] = $Var1PropertyValue

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "String" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

System.IO.FileInfo
#>
function Get-Truststore {
    [CmdletBinding()]
    Param (
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-Truststore' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/octet-stream')

        $LocalVarUri = '/etc/truststore/truststore.p12'

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "System.IO.FileInfo" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

TruststoreInfo
#>
function Get-TruststoreInfo {
    [CmdletBinding()]
    Param (
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-TruststoreInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/libs/granite/security/truststore.json'

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "TruststoreInfo" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Runmode
No description available.

.PARAMETER Name
No description available.

.PARAMETER JcrcontentCqdistribute
No description available.

.PARAMETER JcrcontentCqdistributeTypeHint
No description available.

.PARAMETER JcrcontentCqname
No description available.

.PARAMETER JcrcontentCqtemplate
No description available.

.PARAMETER JcrcontentEnabled
No description available.

.PARAMETER JcrcontentJcrdescription
No description available.

.PARAMETER JcrcontentJcrlastModified
No description available.

.PARAMETER JcrcontentJcrlastModifiedBy
No description available.

.PARAMETER JcrcontentJcrmixinTypes
No description available.

.PARAMETER JcrcontentJcrtitle
No description available.

.PARAMETER JcrcontentLogLevel
No description available.

.PARAMETER JcrcontentNoStatusUpdate
No description available.

.PARAMETER JcrcontentNoVersioning
No description available.

.PARAMETER JcrcontentProtocolConnectTimeout
No description available.

.PARAMETER JcrcontentProtocolHTTPConnectionClosed
No description available.

.PARAMETER JcrcontentProtocolHTTPExpired
No description available.

.PARAMETER JcrcontentProtocolHTTPHeaders
No description available.

.PARAMETER JcrcontentProtocolHTTPHeadersTypeHint
No description available.

.PARAMETER JcrcontentProtocolHTTPMethod
No description available.

.PARAMETER JcrcontentProtocolHTTPSRelaxed
No description available.

.PARAMETER JcrcontentProtocolInterface
No description available.

.PARAMETER JcrcontentProtocolSocketTimeout
No description available.

.PARAMETER JcrcontentProtocolVersion
No description available.

.PARAMETER JcrcontentProxyNTLMDomain
No description available.

.PARAMETER JcrcontentProxyNTLMHost
No description available.

.PARAMETER JcrcontentProxyHost
No description available.

.PARAMETER JcrcontentProxyPassword
No description available.

.PARAMETER JcrcontentProxyPort
No description available.

.PARAMETER JcrcontentProxyUser
No description available.

.PARAMETER JcrcontentQueueBatchMaxSize
No description available.

.PARAMETER JcrcontentQueueBatchMode
No description available.

.PARAMETER JcrcontentQueueBatchWaitTime
No description available.

.PARAMETER JcrcontentRetryDelay
No description available.

.PARAMETER JcrcontentReverseReplication
No description available.

.PARAMETER JcrcontentSerializationType
No description available.

.PARAMETER JcrcontentSlingresourceType
No description available.

.PARAMETER JcrcontentSsl
No description available.

.PARAMETER JcrcontentTransportNTLMDomain
No description available.

.PARAMETER JcrcontentTransportNTLMHost
No description available.

.PARAMETER JcrcontentTransportPassword
No description available.

.PARAMETER JcrcontentTransportUri
No description available.

.PARAMETER JcrcontentTransportUser
No description available.

.PARAMETER JcrcontentTriggerDistribute
No description available.

.PARAMETER JcrcontentTriggerModified
No description available.

.PARAMETER JcrcontentTriggerOnOffTime
No description available.

.PARAMETER JcrcontentTriggerReceive
No description available.

.PARAMETER JcrcontentTriggerSpecific
No description available.

.PARAMETER JcrcontentUserId
No description available.

.PARAMETER JcrprimaryType
No description available.

.PARAMETER Operation
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Submit-Agent {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Runmode},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${JcrcontentCqdistribute},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentCqdistributeTypeHint},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentCqname},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentCqtemplate},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${JcrcontentEnabled},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentJcrdescription},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentJcrlastModified},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentJcrlastModifiedBy},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentJcrmixinTypes},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentJcrtitle},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentLogLevel},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${JcrcontentNoStatusUpdate},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${JcrcontentNoVersioning},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Decimal]]
        ${JcrcontentProtocolConnectTimeout},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${JcrcontentProtocolHTTPConnectionClosed},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentProtocolHTTPExpired},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${JcrcontentProtocolHTTPHeaders},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentProtocolHTTPHeadersTypeHint},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentProtocolHTTPMethod},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${JcrcontentProtocolHTTPSRelaxed},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentProtocolInterface},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Decimal]]
        ${JcrcontentProtocolSocketTimeout},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentProtocolVersion},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentProxyNTLMDomain},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentProxyNTLMHost},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentProxyHost},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentProxyPassword},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Decimal]]
        ${JcrcontentProxyPort},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentProxyUser},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Decimal]]
        ${JcrcontentQueueBatchMaxSize},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentQueueBatchMode},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Decimal]]
        ${JcrcontentQueueBatchWaitTime},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentRetryDelay},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${JcrcontentReverseReplication},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentSerializationType},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentSlingresourceType},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentSsl},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentTransportNTLMDomain},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentTransportNTLMHost},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentTransportPassword},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentTransportUri},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentTransportUser},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${JcrcontentTriggerDistribute},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${JcrcontentTriggerModified},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${JcrcontentTriggerOnOffTime},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${JcrcontentTriggerReceive},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${JcrcontentTriggerSpecific},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrcontentUserId},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrprimaryType},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Operation},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Submit-Agent' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/etc/replication/agents.{runmode}/{name}'
        if (!$Runmode) {
            throw "Error! The required parameter `Runmode` missing when calling postAgent."
        }
        $LocalVarUri = $LocalVarUri.replace('{runmode}', [System.Web.HTTPUtility]::UrlEncode($Runmode))
        if (!$Name) {
            throw "Error! The required parameter `Name` missing when calling postAgent."
        }
        $LocalVarUri = $LocalVarUri.replace('{name}', [System.Web.HTTPUtility]::UrlEncode($Name))

        if ($JcrcontentCqdistribute) {
            $LocalVarQueryParameters['jcr:content/cq:distribute'] = $JcrcontentCqdistribute
        }

        if ($JcrcontentCqdistributeTypeHint) {
            $LocalVarQueryParameters['jcr:content/cq:distribute@TypeHint'] = $JcrcontentCqdistributeTypeHint
        }

        if ($JcrcontentCqname) {
            $LocalVarQueryParameters['jcr:content/cq:name'] = $JcrcontentCqname
        }

        if ($JcrcontentCqtemplate) {
            $LocalVarQueryParameters['jcr:content/cq:template'] = $JcrcontentCqtemplate
        }

        if ($JcrcontentEnabled) {
            $LocalVarQueryParameters['jcr:content/enabled'] = $JcrcontentEnabled
        }

        if ($JcrcontentJcrdescription) {
            $LocalVarQueryParameters['jcr:content/jcr:description'] = $JcrcontentJcrdescription
        }

        if ($JcrcontentJcrlastModified) {
            $LocalVarQueryParameters['jcr:content/jcr:lastModified'] = $JcrcontentJcrlastModified
        }

        if ($JcrcontentJcrlastModifiedBy) {
            $LocalVarQueryParameters['jcr:content/jcr:lastModifiedBy'] = $JcrcontentJcrlastModifiedBy
        }

        if ($JcrcontentJcrmixinTypes) {
            $LocalVarQueryParameters['jcr:content/jcr:mixinTypes'] = $JcrcontentJcrmixinTypes
        }

        if ($JcrcontentJcrtitle) {
            $LocalVarQueryParameters['jcr:content/jcr:title'] = $JcrcontentJcrtitle
        }

        if ($JcrcontentLogLevel) {
            $LocalVarQueryParameters['jcr:content/logLevel'] = $JcrcontentLogLevel
        }

        if ($JcrcontentNoStatusUpdate) {
            $LocalVarQueryParameters['jcr:content/noStatusUpdate'] = $JcrcontentNoStatusUpdate
        }

        if ($JcrcontentNoVersioning) {
            $LocalVarQueryParameters['jcr:content/noVersioning'] = $JcrcontentNoVersioning
        }

        if ($JcrcontentProtocolConnectTimeout) {
            $LocalVarQueryParameters['jcr:content/protocolConnectTimeout'] = $JcrcontentProtocolConnectTimeout
        }

        if ($JcrcontentProtocolHTTPConnectionClosed) {
            $LocalVarQueryParameters['jcr:content/protocolHTTPConnectionClosed'] = $JcrcontentProtocolHTTPConnectionClosed
        }

        if ($JcrcontentProtocolHTTPExpired) {
            $LocalVarQueryParameters['jcr:content/protocolHTTPExpired'] = $JcrcontentProtocolHTTPExpired
        }

        if ($JcrcontentProtocolHTTPHeaders) {
            $LocalVarQueryParameters['jcr:content/protocolHTTPHeaders'] = $JcrcontentProtocolHTTPHeaders
        }

        if ($JcrcontentProtocolHTTPHeadersTypeHint) {
            $LocalVarQueryParameters['jcr:content/protocolHTTPHeaders@TypeHint'] = $JcrcontentProtocolHTTPHeadersTypeHint
        }

        if ($JcrcontentProtocolHTTPMethod) {
            $LocalVarQueryParameters['jcr:content/protocolHTTPMethod'] = $JcrcontentProtocolHTTPMethod
        }

        if ($JcrcontentProtocolHTTPSRelaxed) {
            $LocalVarQueryParameters['jcr:content/protocolHTTPSRelaxed'] = $JcrcontentProtocolHTTPSRelaxed
        }

        if ($JcrcontentProtocolInterface) {
            $LocalVarQueryParameters['jcr:content/protocolInterface'] = $JcrcontentProtocolInterface
        }

        if ($JcrcontentProtocolSocketTimeout) {
            $LocalVarQueryParameters['jcr:content/protocolSocketTimeout'] = $JcrcontentProtocolSocketTimeout
        }

        if ($JcrcontentProtocolVersion) {
            $LocalVarQueryParameters['jcr:content/protocolVersion'] = $JcrcontentProtocolVersion
        }

        if ($JcrcontentProxyNTLMDomain) {
            $LocalVarQueryParameters['jcr:content/proxyNTLMDomain'] = $JcrcontentProxyNTLMDomain
        }

        if ($JcrcontentProxyNTLMHost) {
            $LocalVarQueryParameters['jcr:content/proxyNTLMHost'] = $JcrcontentProxyNTLMHost
        }

        if ($JcrcontentProxyHost) {
            $LocalVarQueryParameters['jcr:content/proxyHost'] = $JcrcontentProxyHost
        }

        if ($JcrcontentProxyPassword) {
            $LocalVarQueryParameters['jcr:content/proxyPassword'] = $JcrcontentProxyPassword
        }

        if ($JcrcontentProxyPort) {
            $LocalVarQueryParameters['jcr:content/proxyPort'] = $JcrcontentProxyPort
        }

        if ($JcrcontentProxyUser) {
            $LocalVarQueryParameters['jcr:content/proxyUser'] = $JcrcontentProxyUser
        }

        if ($JcrcontentQueueBatchMaxSize) {
            $LocalVarQueryParameters['jcr:content/queueBatchMaxSize'] = $JcrcontentQueueBatchMaxSize
        }

        if ($JcrcontentQueueBatchMode) {
            $LocalVarQueryParameters['jcr:content/queueBatchMode'] = $JcrcontentQueueBatchMode
        }

        if ($JcrcontentQueueBatchWaitTime) {
            $LocalVarQueryParameters['jcr:content/queueBatchWaitTime'] = $JcrcontentQueueBatchWaitTime
        }

        if ($JcrcontentRetryDelay) {
            $LocalVarQueryParameters['jcr:content/retryDelay'] = $JcrcontentRetryDelay
        }

        if ($JcrcontentReverseReplication) {
            $LocalVarQueryParameters['jcr:content/reverseReplication'] = $JcrcontentReverseReplication
        }

        if ($JcrcontentSerializationType) {
            $LocalVarQueryParameters['jcr:content/serializationType'] = $JcrcontentSerializationType
        }

        if ($JcrcontentSlingresourceType) {
            $LocalVarQueryParameters['jcr:content/sling:resourceType'] = $JcrcontentSlingresourceType
        }

        if ($JcrcontentSsl) {
            $LocalVarQueryParameters['jcr:content/ssl'] = $JcrcontentSsl
        }

        if ($JcrcontentTransportNTLMDomain) {
            $LocalVarQueryParameters['jcr:content/transportNTLMDomain'] = $JcrcontentTransportNTLMDomain
        }

        if ($JcrcontentTransportNTLMHost) {
            $LocalVarQueryParameters['jcr:content/transportNTLMHost'] = $JcrcontentTransportNTLMHost
        }

        if ($JcrcontentTransportPassword) {
            $LocalVarQueryParameters['jcr:content/transportPassword'] = $JcrcontentTransportPassword
        }

        if ($JcrcontentTransportUri) {
            $LocalVarQueryParameters['jcr:content/transportUri'] = $JcrcontentTransportUri
        }

        if ($JcrcontentTransportUser) {
            $LocalVarQueryParameters['jcr:content/transportUser'] = $JcrcontentTransportUser
        }

        if ($JcrcontentTriggerDistribute) {
            $LocalVarQueryParameters['jcr:content/triggerDistribute'] = $JcrcontentTriggerDistribute
        }

        if ($JcrcontentTriggerModified) {
            $LocalVarQueryParameters['jcr:content/triggerModified'] = $JcrcontentTriggerModified
        }

        if ($JcrcontentTriggerOnOffTime) {
            $LocalVarQueryParameters['jcr:content/triggerOnOffTime'] = $JcrcontentTriggerOnOffTime
        }

        if ($JcrcontentTriggerReceive) {
            $LocalVarQueryParameters['jcr:content/triggerReceive'] = $JcrcontentTriggerReceive
        }

        if ($JcrcontentTriggerSpecific) {
            $LocalVarQueryParameters['jcr:content/triggerSpecific'] = $JcrcontentTriggerSpecific
        }

        if ($JcrcontentUserId) {
            $LocalVarQueryParameters['jcr:content/userId'] = $JcrcontentUserId
        }

        if ($JcrprimaryType) {
            $LocalVarQueryParameters['jcr:primaryType'] = $JcrprimaryType
        }

        if ($Operation) {
            $LocalVarQueryParameters[':operation'] = $Operation
        }

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER IntermediatePath
No description available.

.PARAMETER AuthorizableId
No description available.

.PARAMETER Operation
No description available.

.PARAMETER CurrentPassword
No description available.

.PARAMETER NewPassword
No description available.

.PARAMETER RePassword
No description available.

.PARAMETER KeyPassword
No description available.

.PARAMETER KeyStorePass
No description available.

.PARAMETER Alias
No description available.

.PARAMETER NewAlias
No description available.

.PARAMETER RemoveAlias
No description available.

.PARAMETER CertChain
No description available.

.PARAMETER Pk
No description available.

.PARAMETER KeyStore
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

KeystoreInfo
#>
function Submit-AuthorizableKeystore {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IntermediatePath},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AuthorizableId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Operation},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CurrentPassword},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${NewPassword},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${RePassword},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${KeyPassword},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${KeyStorePass},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Alias},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${NewAlias},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${RemoveAlias},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.IO.FileInfo]
        ${CertChain},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.IO.FileInfo]
        ${Pk},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.IO.FileInfo]
        ${KeyStore},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Submit-AuthorizableKeystore' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('multipart/form-data')

        $LocalVarUri = '/{intermediatePath}/{authorizableId}.ks.html'
        if (!$IntermediatePath) {
            throw "Error! The required parameter `IntermediatePath` missing when calling postAuthorizableKeystore."
        }
        $LocalVarUri = $LocalVarUri.replace('{intermediatePath}', [System.Web.HTTPUtility]::UrlEncode($IntermediatePath))
        if (!$AuthorizableId) {
            throw "Error! The required parameter `AuthorizableId` missing when calling postAuthorizableKeystore."
        }
        $LocalVarUri = $LocalVarUri.replace('{authorizableId}', [System.Web.HTTPUtility]::UrlEncode($AuthorizableId))

        if ($Operation) {
            $LocalVarQueryParameters[':operation'] = $Operation
        }

        if ($CurrentPassword) {
            $LocalVarQueryParameters['currentPassword'] = $CurrentPassword
        }

        if ($NewPassword) {
            $LocalVarQueryParameters['newPassword'] = $NewPassword
        }

        if ($RePassword) {
            $LocalVarQueryParameters['rePassword'] = $RePassword
        }

        if ($KeyPassword) {
            $LocalVarQueryParameters['keyPassword'] = $KeyPassword
        }

        if ($KeyStorePass) {
            $LocalVarQueryParameters['keyStorePass'] = $KeyStorePass
        }

        if ($Alias) {
            $LocalVarQueryParameters['alias'] = $Alias
        }

        if ($NewAlias) {
            $LocalVarQueryParameters['newAlias'] = $NewAlias
        }

        if ($RemoveAlias) {
            $LocalVarQueryParameters['removeAlias'] = $RemoveAlias
        }

        if ($CertChain) {
            $LocalVarFormParameters['cert-chain'] = $CertChain
        }

        if ($Pk) {
            $LocalVarFormParameters['pk'] = $Pk
        }

        if ($KeyStore) {
            $LocalVarFormParameters['keyStore'] = $KeyStore
        }

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "KeystoreInfo" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AuthorizableId
No description available.

.PARAMETER IntermediatePath
No description available.

.PARAMETER CreateUser
No description available.

.PARAMETER CreateGroup
No description available.

.PARAMETER Reppassword
No description available.

.PARAMETER ProfileGivenName
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

String
#>
function Submit-Authorizables {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AuthorizableId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IntermediatePath},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreateUser},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreateGroup},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Reppassword},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ProfileGivenName},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Submit-Authorizables' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/html')

        $LocalVarUri = '/libs/granite/security/post/authorizables'

        if (!$AuthorizableId) {
            throw "Error! The required parameter `AuthorizableId` missing when calling postAuthorizables."
        }
        $LocalVarQueryParameters['authorizableId'] = $AuthorizableId

        if (!$IntermediatePath) {
            throw "Error! The required parameter `IntermediatePath` missing when calling postAuthorizables."
        }
        $LocalVarQueryParameters['intermediatePath'] = $IntermediatePath

        if ($CreateUser) {
            $LocalVarQueryParameters['createUser'] = $CreateUser
        }

        if ($CreateGroup) {
            $LocalVarQueryParameters['createGroup'] = $CreateGroup
        }

        if ($Reppassword) {
            $LocalVarQueryParameters['rep:password'] = $Reppassword
        }

        if ($ProfileGivenName) {
            $LocalVarQueryParameters['profile/givenName'] = $ProfileGivenName
        }

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "String" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER KeyStorePassword
No description available.

.PARAMETER KeyStorePasswordTypeHint
No description available.

.PARAMETER ServiceRanking
No description available.

.PARAMETER ServiceRankingTypeHint
No description available.

.PARAMETER IdpHttpRedirect
No description available.

.PARAMETER IdpHttpRedirectTypeHint
No description available.

.PARAMETER CreateUser
No description available.

.PARAMETER CreateUserTypeHint
No description available.

.PARAMETER DefaultRedirectUrl
No description available.

.PARAMETER DefaultRedirectUrlTypeHint
No description available.

.PARAMETER UserIDAttribute
No description available.

.PARAMETER UserIDAttributeTypeHint
No description available.

.PARAMETER DefaultGroups
No description available.

.PARAMETER DefaultGroupsTypeHint
No description available.

.PARAMETER IdpCertAlias
No description available.

.PARAMETER IdpCertAliasTypeHint
No description available.

.PARAMETER AddGroupMemberships
No description available.

.PARAMETER AddGroupMembershipsTypeHint
No description available.

.PARAMETER Path
No description available.

.PARAMETER PathTypeHint
No description available.

.PARAMETER SynchronizeAttributes
No description available.

.PARAMETER SynchronizeAttributesTypeHint
No description available.

.PARAMETER ClockTolerance
No description available.

.PARAMETER ClockToleranceTypeHint
No description available.

.PARAMETER GroupMembershipAttribute
No description available.

.PARAMETER GroupMembershipAttributeTypeHint
No description available.

.PARAMETER IdpUrl
No description available.

.PARAMETER IdpUrlTypeHint
No description available.

.PARAMETER LogoutUrl
No description available.

.PARAMETER LogoutUrlTypeHint
No description available.

.PARAMETER ServiceProviderEntityId
No description available.

.PARAMETER ServiceProviderEntityIdTypeHint
No description available.

.PARAMETER AssertionConsumerServiceURL
No description available.

.PARAMETER AssertionConsumerServiceURLTypeHint
No description available.

.PARAMETER HandleLogout
No description available.

.PARAMETER HandleLogoutTypeHint
No description available.

.PARAMETER SpPrivateKeyAlias
No description available.

.PARAMETER SpPrivateKeyAliasTypeHint
No description available.

.PARAMETER UseEncryption
No description available.

.PARAMETER UseEncryptionTypeHint
No description available.

.PARAMETER NameIdFormat
No description available.

.PARAMETER NameIdFormatTypeHint
No description available.

.PARAMETER DigestMethod
No description available.

.PARAMETER DigestMethodTypeHint
No description available.

.PARAMETER SignatureMethod
No description available.

.PARAMETER SignatureMethodTypeHint
No description available.

.PARAMETER UserIntermediatePath
No description available.

.PARAMETER UserIntermediatePathTypeHint
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Submit-ConfigAdobeGraniteSamlAuthenticationHandler {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${KeyStorePassword},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${KeyStorePasswordTypeHint},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${ServiceRanking},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ServiceRankingTypeHint},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdpHttpRedirect},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IdpHttpRedirectTypeHint},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${CreateUser},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreateUserTypeHint},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DefaultRedirectUrl},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DefaultRedirectUrlTypeHint},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UserIDAttribute},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UserIDAttributeTypeHint},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DefaultGroups},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DefaultGroupsTypeHint},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IdpCertAlias},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IdpCertAliasTypeHint},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${AddGroupMemberships},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AddGroupMembershipsTypeHint},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Path},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${PathTypeHint},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SynchronizeAttributes},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SynchronizeAttributesTypeHint},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${ClockTolerance},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ClockToleranceTypeHint},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${GroupMembershipAttribute},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${GroupMembershipAttributeTypeHint},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IdpUrl},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IdpUrlTypeHint},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LogoutUrl},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LogoutUrlTypeHint},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ServiceProviderEntityId},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ServiceProviderEntityIdTypeHint},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AssertionConsumerServiceURL},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AssertionConsumerServiceURLTypeHint},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${HandleLogout},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${HandleLogoutTypeHint},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SpPrivateKeyAlias},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SpPrivateKeyAliasTypeHint},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${UseEncryption},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UseEncryptionTypeHint},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${NameIdFormat},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${NameIdFormatTypeHint},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DigestMethod},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DigestMethodTypeHint},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SignatureMethod},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SignatureMethodTypeHint},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UserIntermediatePath},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UserIntermediatePathTypeHint},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Submit-ConfigAdobeGraniteSamlAuthenticationHandler' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config'

        if ($KeyStorePassword) {
            $LocalVarQueryParameters['keyStorePassword'] = $KeyStorePassword
        }

        if ($KeyStorePasswordTypeHint) {
            $LocalVarQueryParameters['keyStorePassword@TypeHint'] = $KeyStorePasswordTypeHint
        }

        if ($ServiceRanking) {
            $LocalVarQueryParameters['service.ranking'] = $ServiceRanking
        }

        if ($ServiceRankingTypeHint) {
            $LocalVarQueryParameters['service.ranking@TypeHint'] = $ServiceRankingTypeHint
        }

        if ($IdpHttpRedirect) {
            $LocalVarQueryParameters['idpHttpRedirect'] = $IdpHttpRedirect
        }

        if ($IdpHttpRedirectTypeHint) {
            $LocalVarQueryParameters['idpHttpRedirect@TypeHint'] = $IdpHttpRedirectTypeHint
        }

        if ($CreateUser) {
            $LocalVarQueryParameters['createUser'] = $CreateUser
        }

        if ($CreateUserTypeHint) {
            $LocalVarQueryParameters['createUser@TypeHint'] = $CreateUserTypeHint
        }

        if ($DefaultRedirectUrl) {
            $LocalVarQueryParameters['defaultRedirectUrl'] = $DefaultRedirectUrl
        }

        if ($DefaultRedirectUrlTypeHint) {
            $LocalVarQueryParameters['defaultRedirectUrl@TypeHint'] = $DefaultRedirectUrlTypeHint
        }

        if ($UserIDAttribute) {
            $LocalVarQueryParameters['userIDAttribute'] = $UserIDAttribute
        }

        if ($UserIDAttributeTypeHint) {
            $LocalVarQueryParameters['userIDAttribute@TypeHint'] = $UserIDAttributeTypeHint
        }

        if ($DefaultGroups) {
            $LocalVarQueryParameters['defaultGroups'] = $DefaultGroups
        }

        if ($DefaultGroupsTypeHint) {
            $LocalVarQueryParameters['defaultGroups@TypeHint'] = $DefaultGroupsTypeHint
        }

        if ($IdpCertAlias) {
            $LocalVarQueryParameters['idpCertAlias'] = $IdpCertAlias
        }

        if ($IdpCertAliasTypeHint) {
            $LocalVarQueryParameters['idpCertAlias@TypeHint'] = $IdpCertAliasTypeHint
        }

        if ($AddGroupMemberships) {
            $LocalVarQueryParameters['addGroupMemberships'] = $AddGroupMemberships
        }

        if ($AddGroupMembershipsTypeHint) {
            $LocalVarQueryParameters['addGroupMemberships@TypeHint'] = $AddGroupMembershipsTypeHint
        }

        if ($Path) {
            $LocalVarQueryParameters['path'] = $Path
        }

        if ($PathTypeHint) {
            $LocalVarQueryParameters['path@TypeHint'] = $PathTypeHint
        }

        if ($SynchronizeAttributes) {
            $LocalVarQueryParameters['synchronizeAttributes'] = $SynchronizeAttributes
        }

        if ($SynchronizeAttributesTypeHint) {
            $LocalVarQueryParameters['synchronizeAttributes@TypeHint'] = $SynchronizeAttributesTypeHint
        }

        if ($ClockTolerance) {
            $LocalVarQueryParameters['clockTolerance'] = $ClockTolerance
        }

        if ($ClockToleranceTypeHint) {
            $LocalVarQueryParameters['clockTolerance@TypeHint'] = $ClockToleranceTypeHint
        }

        if ($GroupMembershipAttribute) {
            $LocalVarQueryParameters['groupMembershipAttribute'] = $GroupMembershipAttribute
        }

        if ($GroupMembershipAttributeTypeHint) {
            $LocalVarQueryParameters['groupMembershipAttribute@TypeHint'] = $GroupMembershipAttributeTypeHint
        }

        if ($IdpUrl) {
            $LocalVarQueryParameters['idpUrl'] = $IdpUrl
        }

        if ($IdpUrlTypeHint) {
            $LocalVarQueryParameters['idpUrl@TypeHint'] = $IdpUrlTypeHint
        }

        if ($LogoutUrl) {
            $LocalVarQueryParameters['logoutUrl'] = $LogoutUrl
        }

        if ($LogoutUrlTypeHint) {
            $LocalVarQueryParameters['logoutUrl@TypeHint'] = $LogoutUrlTypeHint
        }

        if ($ServiceProviderEntityId) {
            $LocalVarQueryParameters['serviceProviderEntityId'] = $ServiceProviderEntityId
        }

        if ($ServiceProviderEntityIdTypeHint) {
            $LocalVarQueryParameters['serviceProviderEntityId@TypeHint'] = $ServiceProviderEntityIdTypeHint
        }

        if ($AssertionConsumerServiceURL) {
            $LocalVarQueryParameters['assertionConsumerServiceURL'] = $AssertionConsumerServiceURL
        }

        if ($AssertionConsumerServiceURLTypeHint) {
            $LocalVarQueryParameters['assertionConsumerServiceURL@TypeHint'] = $AssertionConsumerServiceURLTypeHint
        }

        if ($HandleLogout) {
            $LocalVarQueryParameters['handleLogout'] = $HandleLogout
        }

        if ($HandleLogoutTypeHint) {
            $LocalVarQueryParameters['handleLogout@TypeHint'] = $HandleLogoutTypeHint
        }

        if ($SpPrivateKeyAlias) {
            $LocalVarQueryParameters['spPrivateKeyAlias'] = $SpPrivateKeyAlias
        }

        if ($SpPrivateKeyAliasTypeHint) {
            $LocalVarQueryParameters['spPrivateKeyAlias@TypeHint'] = $SpPrivateKeyAliasTypeHint
        }

        if ($UseEncryption) {
            $LocalVarQueryParameters['useEncryption'] = $UseEncryption
        }

        if ($UseEncryptionTypeHint) {
            $LocalVarQueryParameters['useEncryption@TypeHint'] = $UseEncryptionTypeHint
        }

        if ($NameIdFormat) {
            $LocalVarQueryParameters['nameIdFormat'] = $NameIdFormat
        }

        if ($NameIdFormatTypeHint) {
            $LocalVarQueryParameters['nameIdFormat@TypeHint'] = $NameIdFormatTypeHint
        }

        if ($DigestMethod) {
            $LocalVarQueryParameters['digestMethod'] = $DigestMethod
        }

        if ($DigestMethodTypeHint) {
            $LocalVarQueryParameters['digestMethod@TypeHint'] = $DigestMethodTypeHint
        }

        if ($SignatureMethod) {
            $LocalVarQueryParameters['signatureMethod'] = $SignatureMethod
        }

        if ($SignatureMethodTypeHint) {
            $LocalVarQueryParameters['signatureMethod@TypeHint'] = $SignatureMethodTypeHint
        }

        if ($UserIntermediatePath) {
            $LocalVarQueryParameters['userIntermediatePath'] = $UserIntermediatePath
        }

        if ($UserIntermediatePathTypeHint) {
            $LocalVarQueryParameters['userIntermediatePath@TypeHint'] = $UserIntermediatePathTypeHint
        }

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER OrgApacheFelixHttpsNio
No description available.

.PARAMETER OrgApacheFelixHttpsNioTypeHint
No description available.

.PARAMETER OrgApacheFelixHttpsKeystore
No description available.

.PARAMETER OrgApacheFelixHttpsKeystoreTypeHint
No description available.

.PARAMETER OrgApacheFelixHttpsKeystorePassword
No description available.

.PARAMETER OrgApacheFelixHttpsKeystorePasswordTypeHint
No description available.

.PARAMETER OrgApacheFelixHttpsKeystoreKey
No description available.

.PARAMETER OrgApacheFelixHttpsKeystoreKeyTypeHint
No description available.

.PARAMETER OrgApacheFelixHttpsKeystoreKeyPassword
No description available.

.PARAMETER OrgApacheFelixHttpsKeystoreKeyPasswordTypeHint
No description available.

.PARAMETER OrgApacheFelixHttpsTruststore
No description available.

.PARAMETER OrgApacheFelixHttpsTruststoreTypeHint
No description available.

.PARAMETER OrgApacheFelixHttpsTruststorePassword
No description available.

.PARAMETER OrgApacheFelixHttpsTruststorePasswordTypeHint
No description available.

.PARAMETER OrgApacheFelixHttpsClientcertificate
No description available.

.PARAMETER OrgApacheFelixHttpsClientcertificateTypeHint
No description available.

.PARAMETER OrgApacheFelixHttpsEnable
No description available.

.PARAMETER OrgApacheFelixHttpsEnableTypeHint
No description available.

.PARAMETER OrgOsgiServiceHttpPortSecure
No description available.

.PARAMETER OrgOsgiServiceHttpPortSecureTypeHint
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Submit-ConfigApacheFelixJettyBasedHttpService {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${OrgApacheFelixHttpsNio},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${OrgApacheFelixHttpsNioTypeHint},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${OrgApacheFelixHttpsKeystore},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${OrgApacheFelixHttpsKeystoreTypeHint},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${OrgApacheFelixHttpsKeystorePassword},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${OrgApacheFelixHttpsKeystorePasswordTypeHint},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${OrgApacheFelixHttpsKeystoreKey},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${OrgApacheFelixHttpsKeystoreKeyTypeHint},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${OrgApacheFelixHttpsKeystoreKeyPassword},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${OrgApacheFelixHttpsKeystoreKeyPasswordTypeHint},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${OrgApacheFelixHttpsTruststore},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${OrgApacheFelixHttpsTruststoreTypeHint},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${OrgApacheFelixHttpsTruststorePassword},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${OrgApacheFelixHttpsTruststorePasswordTypeHint},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${OrgApacheFelixHttpsClientcertificate},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${OrgApacheFelixHttpsClientcertificateTypeHint},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${OrgApacheFelixHttpsEnable},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${OrgApacheFelixHttpsEnableTypeHint},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${OrgOsgiServiceHttpPortSecure},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${OrgOsgiServiceHttpPortSecureTypeHint},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Submit-ConfigApacheFelixJettyBasedHttpService' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/apps/system/config/org.apache.felix.http'

        if ($OrgApacheFelixHttpsNio) {
            $LocalVarQueryParameters['org.apache.felix.https.nio'] = $OrgApacheFelixHttpsNio
        }

        if ($OrgApacheFelixHttpsNioTypeHint) {
            $LocalVarQueryParameters['org.apache.felix.https.nio@TypeHint'] = $OrgApacheFelixHttpsNioTypeHint
        }

        if ($OrgApacheFelixHttpsKeystore) {
            $LocalVarQueryParameters['org.apache.felix.https.keystore'] = $OrgApacheFelixHttpsKeystore
        }

        if ($OrgApacheFelixHttpsKeystoreTypeHint) {
            $LocalVarQueryParameters['org.apache.felix.https.keystore@TypeHint'] = $OrgApacheFelixHttpsKeystoreTypeHint
        }

        if ($OrgApacheFelixHttpsKeystorePassword) {
            $LocalVarQueryParameters['org.apache.felix.https.keystore.password'] = $OrgApacheFelixHttpsKeystorePassword
        }

        if ($OrgApacheFelixHttpsKeystorePasswordTypeHint) {
            $LocalVarQueryParameters['org.apache.felix.https.keystore.password@TypeHint'] = $OrgApacheFelixHttpsKeystorePasswordTypeHint
        }

        if ($OrgApacheFelixHttpsKeystoreKey) {
            $LocalVarQueryParameters['org.apache.felix.https.keystore.key'] = $OrgApacheFelixHttpsKeystoreKey
        }

        if ($OrgApacheFelixHttpsKeystoreKeyTypeHint) {
            $LocalVarQueryParameters['org.apache.felix.https.keystore.key@TypeHint'] = $OrgApacheFelixHttpsKeystoreKeyTypeHint
        }

        if ($OrgApacheFelixHttpsKeystoreKeyPassword) {
            $LocalVarQueryParameters['org.apache.felix.https.keystore.key.password'] = $OrgApacheFelixHttpsKeystoreKeyPassword
        }

        if ($OrgApacheFelixHttpsKeystoreKeyPasswordTypeHint) {
            $LocalVarQueryParameters['org.apache.felix.https.keystore.key.password@TypeHint'] = $OrgApacheFelixHttpsKeystoreKeyPasswordTypeHint
        }

        if ($OrgApacheFelixHttpsTruststore) {
            $LocalVarQueryParameters['org.apache.felix.https.truststore'] = $OrgApacheFelixHttpsTruststore
        }

        if ($OrgApacheFelixHttpsTruststoreTypeHint) {
            $LocalVarQueryParameters['org.apache.felix.https.truststore@TypeHint'] = $OrgApacheFelixHttpsTruststoreTypeHint
        }

        if ($OrgApacheFelixHttpsTruststorePassword) {
            $LocalVarQueryParameters['org.apache.felix.https.truststore.password'] = $OrgApacheFelixHttpsTruststorePassword
        }

        if ($OrgApacheFelixHttpsTruststorePasswordTypeHint) {
            $LocalVarQueryParameters['org.apache.felix.https.truststore.password@TypeHint'] = $OrgApacheFelixHttpsTruststorePasswordTypeHint
        }

        if ($OrgApacheFelixHttpsClientcertificate) {
            $LocalVarQueryParameters['org.apache.felix.https.clientcertificate'] = $OrgApacheFelixHttpsClientcertificate
        }

        if ($OrgApacheFelixHttpsClientcertificateTypeHint) {
            $LocalVarQueryParameters['org.apache.felix.https.clientcertificate@TypeHint'] = $OrgApacheFelixHttpsClientcertificateTypeHint
        }

        if ($OrgApacheFelixHttpsEnable) {
            $LocalVarQueryParameters['org.apache.felix.https.enable'] = $OrgApacheFelixHttpsEnable
        }

        if ($OrgApacheFelixHttpsEnableTypeHint) {
            $LocalVarQueryParameters['org.apache.felix.https.enable@TypeHint'] = $OrgApacheFelixHttpsEnableTypeHint
        }

        if ($OrgOsgiServiceHttpPortSecure) {
            $LocalVarQueryParameters['org.osgi.service.http.port.secure'] = $OrgOsgiServiceHttpPortSecure
        }

        if ($OrgOsgiServiceHttpPortSecureTypeHint) {
            $LocalVarQueryParameters['org.osgi.service.http.port.secure@TypeHint'] = $OrgOsgiServiceHttpPortSecureTypeHint
        }

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ProxyHost
No description available.

.PARAMETER ProxyHostTypeHint
No description available.

.PARAMETER ProxyPort
No description available.

.PARAMETER ProxyPortTypeHint
No description available.

.PARAMETER ProxyExceptions
No description available.

.PARAMETER ProxyExceptionsTypeHint
No description available.

.PARAMETER ProxyEnabled
No description available.

.PARAMETER ProxyEnabledTypeHint
No description available.

.PARAMETER ProxyUser
No description available.

.PARAMETER ProxyUserTypeHint
No description available.

.PARAMETER ProxyPassword
No description available.

.PARAMETER ProxyPasswordTypeHint
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Submit-ConfigApacheHttpComponentsProxyConfiguration {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ProxyHost},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ProxyHostTypeHint},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${ProxyPort},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ProxyPortTypeHint},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ProxyExceptions},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ProxyExceptionsTypeHint},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${ProxyEnabled},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ProxyEnabledTypeHint},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ProxyUser},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ProxyUserTypeHint},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ProxyPassword},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ProxyPasswordTypeHint},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Submit-ConfigApacheHttpComponentsProxyConfiguration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/apps/system/config/org.apache.http.proxyconfigurator.config'

        if ($ProxyHost) {
            $LocalVarQueryParameters['proxy.host'] = $ProxyHost
        }

        if ($ProxyHostTypeHint) {
            $LocalVarQueryParameters['proxy.host@TypeHint'] = $ProxyHostTypeHint
        }

        if ($ProxyPort) {
            $LocalVarQueryParameters['proxy.port'] = $ProxyPort
        }

        if ($ProxyPortTypeHint) {
            $LocalVarQueryParameters['proxy.port@TypeHint'] = $ProxyPortTypeHint
        }

        if ($ProxyExceptions) {
            $LocalVarQueryParameters['proxy.exceptions'] = $ProxyExceptions
        }

        if ($ProxyExceptionsTypeHint) {
            $LocalVarQueryParameters['proxy.exceptions@TypeHint'] = $ProxyExceptionsTypeHint
        }

        if ($ProxyEnabled) {
            $LocalVarQueryParameters['proxy.enabled'] = $ProxyEnabled
        }

        if ($ProxyEnabledTypeHint) {
            $LocalVarQueryParameters['proxy.enabled@TypeHint'] = $ProxyEnabledTypeHint
        }

        if ($ProxyUser) {
            $LocalVarQueryParameters['proxy.user'] = $ProxyUser
        }

        if ($ProxyUserTypeHint) {
            $LocalVarQueryParameters['proxy.user@TypeHint'] = $ProxyUserTypeHint
        }

        if ($ProxyPassword) {
            $LocalVarQueryParameters['proxy.password'] = $ProxyPassword
        }

        if ($ProxyPasswordTypeHint) {
            $LocalVarQueryParameters['proxy.password@TypeHint'] = $ProxyPasswordTypeHint
        }

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Alias
No description available.

.PARAMETER AliasTypeHint
No description available.

.PARAMETER DavCreateAbsoluteUri
No description available.

.PARAMETER DavCreateAbsoluteUriTypeHint
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Submit-ConfigApacheSlingDavExServlet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Alias},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AliasTypeHint},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DavCreateAbsoluteUri},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DavCreateAbsoluteUriTypeHint},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Submit-ConfigApacheSlingDavExServlet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet'

        if ($Alias) {
            $LocalVarQueryParameters['alias'] = $Alias
        }

        if ($AliasTypeHint) {
            $LocalVarQueryParameters['alias@TypeHint'] = $AliasTypeHint
        }

        if ($DavCreateAbsoluteUri) {
            $LocalVarQueryParameters['dav.create-absolute-uri'] = $DavCreateAbsoluteUri
        }

        if ($DavCreateAbsoluteUriTypeHint) {
            $LocalVarQueryParameters['dav.create-absolute-uri@TypeHint'] = $DavCreateAbsoluteUriTypeHint
        }

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER JsonMaximumresults
No description available.

.PARAMETER JsonMaximumresultsTypeHint
No description available.

.PARAMETER EnableHtml
No description available.

.PARAMETER EnableHtmlTypeHint
No description available.

.PARAMETER EnableTxt
No description available.

.PARAMETER EnableTxtTypeHint
No description available.

.PARAMETER EnableXml
No description available.

.PARAMETER EnableXmlTypeHint
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Submit-ConfigApacheSlingGetServlet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JsonMaximumresults},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JsonMaximumresultsTypeHint},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${EnableHtml},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EnableHtmlTypeHint},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${EnableTxt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EnableTxtTypeHint},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${EnableXml},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EnableXmlTypeHint},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Submit-ConfigApacheSlingGetServlet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet'

        if ($JsonMaximumresults) {
            $LocalVarQueryParameters['json.maximumresults'] = $JsonMaximumresults
        }

        if ($JsonMaximumresultsTypeHint) {
            $LocalVarQueryParameters['json.maximumresults@TypeHint'] = $JsonMaximumresultsTypeHint
        }

        if ($EnableHtml) {
            $LocalVarQueryParameters['enable.html'] = $EnableHtml
        }

        if ($EnableHtmlTypeHint) {
            $LocalVarQueryParameters['enable.html@TypeHint'] = $EnableHtmlTypeHint
        }

        if ($EnableTxt) {
            $LocalVarQueryParameters['enable.txt'] = $EnableTxt
        }

        if ($EnableTxtTypeHint) {
            $LocalVarQueryParameters['enable.txt@TypeHint'] = $EnableTxtTypeHint
        }

        if ($EnableXml) {
            $LocalVarQueryParameters['enable.xml'] = $EnableXml
        }

        if ($EnableXmlTypeHint) {
            $LocalVarQueryParameters['enable.xml@TypeHint'] = $EnableXmlTypeHint
        }

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AllowEmpty
No description available.

.PARAMETER AllowEmptyTypeHint
No description available.

.PARAMETER AllowHosts
No description available.

.PARAMETER AllowHostsTypeHint
No description available.

.PARAMETER AllowHostsRegexp
No description available.

.PARAMETER AllowHostsRegexpTypeHint
No description available.

.PARAMETER FilterMethods
No description available.

.PARAMETER FilterMethodsTypeHint
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Submit-ConfigApacheSlingReferrerFilter {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${AllowEmpty},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AllowEmptyTypeHint},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AllowHosts},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AllowHostsTypeHint},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AllowHostsRegexp},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AllowHostsRegexpTypeHint},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${FilterMethods},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${FilterMethodsTypeHint},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Submit-ConfigApacheSlingReferrerFilter' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/apps/system/config/org.apache.sling.security.impl.ReferrerFilter'

        if ($AllowEmpty) {
            $LocalVarQueryParameters['allow.empty'] = $AllowEmpty
        }

        if ($AllowEmptyTypeHint) {
            $LocalVarQueryParameters['allow.empty@TypeHint'] = $AllowEmptyTypeHint
        }

        if ($AllowHosts) {
            $LocalVarQueryParameters['allow.hosts'] = $AllowHosts
        }

        if ($AllowHostsTypeHint) {
            $LocalVarQueryParameters['allow.hosts@TypeHint'] = $AllowHostsTypeHint
        }

        if ($AllowHostsRegexp) {
            $LocalVarQueryParameters['allow.hosts.regexp'] = $AllowHostsRegexp
        }

        if ($AllowHostsRegexpTypeHint) {
            $LocalVarQueryParameters['allow.hosts.regexp@TypeHint'] = $AllowHostsRegexpTypeHint
        }

        if ($FilterMethods) {
            $LocalVarQueryParameters['filter.methods'] = $FilterMethods
        }

        if ($FilterMethodsTypeHint) {
            $LocalVarQueryParameters['filter.methods@TypeHint'] = $FilterMethodsTypeHint
        }

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ConfigNodeName
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Submit-ConfigProperty {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ConfigNodeName},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Submit-ConfigProperty' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/apps/system/config/{configNodeName}'
        if (!$ConfigNodeName) {
            throw "Error! The required parameter `ConfigNodeName` missing when calling postConfigProperty."
        }
        $LocalVarUri = $LocalVarUri.replace('{configNodeName}', [System.Web.HTTPUtility]::UrlEncode($ConfigNodeName))

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Path
No description available.

.PARAMETER Name
No description available.

.PARAMETER Operation
No description available.

.PARAMETER DeleteAuthorizable
No description available.

.PARAMETER File
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Submit-Node {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Path},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Operation},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DeleteAuthorizable},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.IO.FileInfo]
        ${File},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Submit-Node' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('multipart/form-data')

        $LocalVarUri = '/{path}/{name}'
        if (!$Path) {
            throw "Error! The required parameter `Path` missing when calling postNode."
        }
        $LocalVarUri = $LocalVarUri.replace('{path}', [System.Web.HTTPUtility]::UrlEncode($Path))
        if (!$Name) {
            throw "Error! The required parameter `Name` missing when calling postNode."
        }
        $LocalVarUri = $LocalVarUri.replace('{name}', [System.Web.HTTPUtility]::UrlEncode($Name))

        if ($Operation) {
            $LocalVarQueryParameters[':operation'] = $Operation
        }

        if ($DeleteAuthorizable) {
            $LocalVarQueryParameters['deleteAuthorizable'] = $DeleteAuthorizable
        }

        if ($File) {
            $LocalVarFormParameters['file'] = $File
        }

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Path
No description available.

.PARAMETER Name
No description available.

.PARAMETER AddMembers
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Submit-NodeRw {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Path},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AddMembers},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Submit-NodeRw' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/{path}/{name}.rw.html'
        if (!$Path) {
            throw "Error! The required parameter `Path` missing when calling postNodeRw."
        }
        $LocalVarUri = $LocalVarUri.replace('{path}', [System.Web.HTTPUtility]::UrlEncode($Path))
        if (!$Name) {
            throw "Error! The required parameter `Name` missing when calling postNodeRw."
        }
        $LocalVarUri = $LocalVarUri.replace('{name}', [System.Web.HTTPUtility]::UrlEncode($Name))

        if ($AddMembers) {
            $LocalVarQueryParameters['addMembers'] = $AddMembers
        }

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Path
No description available.

.PARAMETER JcrprimaryType
No description available.

.PARAMETER Name
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Submit-Path {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Path},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${JcrprimaryType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Name},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Submit-Path' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/{path}/'
        if (!$Path) {
            throw "Error! The required parameter `Path` missing when calling postPath."
        }
        $LocalVarUri = $LocalVarUri.replace('{path}', [System.Web.HTTPUtility]::UrlEncode($Path))

        if (!$JcrprimaryType) {
            throw "Error! The required parameter `JcrprimaryType` missing when calling postPath."
        }
        $LocalVarQueryParameters['jcr:primaryType'] = $JcrprimaryType

        if (!$Name) {
            throw "Error! The required parameter `Name` missing when calling postPath."
        }
        $LocalVarQueryParameters[':name'] = $Name

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Path
No description available.

.PARAMETER PLimit
No description available.

.PARAMETER Var1Property
No description available.

.PARAMETER Var1PropertyValue
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

String
#>
function Submit-Query {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Path},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Decimal]
        ${PLimit},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Var1Property},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Var1PropertyValue},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Submit-Query' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/bin/querybuilder.json'

        if (!$Path) {
            throw "Error! The required parameter `Path` missing when calling postQuery."
        }
        $LocalVarQueryParameters['path'] = $Path

        if (!$PLimit) {
            throw "Error! The required parameter `PLimit` missing when calling postQuery."
        }
        $LocalVarQueryParameters['p.limit'] = $PLimit

        if (!$Var1Property) {
            throw "Error! The required parameter `Var1Property` missing when calling postQuery."
        }
        $LocalVarQueryParameters['1_property'] = $Var1Property

        if (!$Var1PropertyValue) {
            throw "Error! The required parameter `Var1PropertyValue` missing when calling postQuery."
        }
        $LocalVarQueryParameters['1_property.value'] = $Var1PropertyValue

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "String" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Ignoredeactivated
No description available.

.PARAMETER Onlymodified
No description available.

.PARAMETER Path
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Submit-TreeActivation {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Boolean]
        ${Ignoredeactivated},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Boolean]
        ${Onlymodified},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Path},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Submit-TreeActivation' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/etc/replication/treeactivation.html'

        if (!$Ignoredeactivated) {
            throw "Error! The required parameter `Ignoredeactivated` missing when calling postTreeActivation."
        }
        $LocalVarQueryParameters['ignoredeactivated'] = $Ignoredeactivated

        if (!$Onlymodified) {
            throw "Error! The required parameter `Onlymodified` missing when calling postTreeActivation."
        }
        $LocalVarQueryParameters['onlymodified'] = $Onlymodified

        if (!$Path) {
            throw "Error! The required parameter `Path` missing when calling postTreeActivation."
        }
        $LocalVarQueryParameters['path'] = $Path

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Operation
No description available.

.PARAMETER NewPassword
No description available.

.PARAMETER RePassword
No description available.

.PARAMETER KeyStoreType
No description available.

.PARAMETER RemoveAlias
No description available.

.PARAMETER Certificate
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

String
#>
function Submit-Truststore {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Operation},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${NewPassword},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${RePassword},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${KeyStoreType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${RemoveAlias},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.IO.FileInfo]
        ${Certificate},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Submit-Truststore' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('multipart/form-data')

        $LocalVarUri = '/libs/granite/security/post/truststore'

        if ($Operation) {
            $LocalVarQueryParameters[':operation'] = $Operation
        }

        if ($NewPassword) {
            $LocalVarQueryParameters['newPassword'] = $NewPassword
        }

        if ($RePassword) {
            $LocalVarQueryParameters['rePassword'] = $RePassword
        }

        if ($KeyStoreType) {
            $LocalVarQueryParameters['keyStoreType'] = $KeyStoreType
        }

        if ($RemoveAlias) {
            $LocalVarQueryParameters['removeAlias'] = $RemoveAlias
        }

        if ($Certificate) {
            $LocalVarFormParameters['certificate'] = $Certificate
        }

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "String" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER TruststoreP12
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

String
#>
function Submit-TruststorePKCS12 {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.IO.FileInfo]
        ${TruststoreP12},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Submit-TruststorePKCS12' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('multipart/form-data')

        $LocalVarUri = '/etc/truststore'

        if ($TruststoreP12) {
            $LocalVarFormParameters['truststore.p12'] = $TruststoreP12
        }

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "String" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

