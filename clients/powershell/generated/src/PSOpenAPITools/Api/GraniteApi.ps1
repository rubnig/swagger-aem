#
# Adobe Experience Manager (AEM) API
# Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
# Version: 3.5.0-pre.0
# Contact: opensource@shinesolutions.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER KeystorePassword
No description available.

.PARAMETER KeystorePasswordConfirm
No description available.

.PARAMETER TruststorePassword
No description available.

.PARAMETER TruststorePasswordConfirm
No description available.

.PARAMETER HttpsHostname
No description available.

.PARAMETER HttpsPort
No description available.

.PARAMETER PrivatekeyFile
No description available.

.PARAMETER CertificateFile
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

String
#>
function Invoke-SslSetup {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${KeystorePassword},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${KeystorePasswordConfirm},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TruststorePassword},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TruststorePasswordConfirm},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${HttpsHostname},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${HttpsPort},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.IO.FileInfo]
        ${PrivatekeyFile},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.IO.FileInfo]
        ${CertificateFile},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-SslSetup' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('multipart/form-data')

        $LocalVarUri = '/libs/granite/security/post/sslSetup.html'

        if (!$KeystorePassword) {
            throw "Error! The required parameter `KeystorePassword` missing when calling sslSetup."
        }
        $LocalVarQueryParameters['keystorePassword'] = $KeystorePassword

        if (!$KeystorePasswordConfirm) {
            throw "Error! The required parameter `KeystorePasswordConfirm` missing when calling sslSetup."
        }
        $LocalVarQueryParameters['keystorePasswordConfirm'] = $KeystorePasswordConfirm

        if (!$TruststorePassword) {
            throw "Error! The required parameter `TruststorePassword` missing when calling sslSetup."
        }
        $LocalVarQueryParameters['truststorePassword'] = $TruststorePassword

        if (!$TruststorePasswordConfirm) {
            throw "Error! The required parameter `TruststorePasswordConfirm` missing when calling sslSetup."
        }
        $LocalVarQueryParameters['truststorePasswordConfirm'] = $TruststorePasswordConfirm

        if (!$HttpsHostname) {
            throw "Error! The required parameter `HttpsHostname` missing when calling sslSetup."
        }
        $LocalVarQueryParameters['httpsHostname'] = $HttpsHostname

        if (!$HttpsPort) {
            throw "Error! The required parameter `HttpsPort` missing when calling sslSetup."
        }
        $LocalVarQueryParameters['httpsPort'] = $HttpsPort

        if ($PrivatekeyFile) {
            $LocalVarFormParameters['privatekeyFile'] = $PrivatekeyFile
        }

        if ($CertificateFile) {
            $LocalVarFormParameters['certificateFile'] = $CertificateFile
        }

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "String" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

