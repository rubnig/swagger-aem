#
# Adobe Experience Manager (AEM) API
# Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
# Version: 3.5.0-pre.0
# Contact: opensource@shinesolutions.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

String[]
#>
function Get-AemProductInfo {
    [CmdletBinding()]
    Param (
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-AemProductInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/system/console/status-productinfo.json'

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "String[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

BundleInfo
#>
function Get-BundleInfo {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Name},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-BundleInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/system/console/bundles/{name}.json'
        if (!$Name) {
            throw "Error! The required parameter `Name` missing when calling getBundleInfo."
        }
        $LocalVarUri = $LocalVarUri.replace('{name}', [System.Web.HTTPUtility]::UrlEncode($Name))

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "BundleInfo" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

String
#>
function Get-ConfigMgr {
    [CmdletBinding()]
    Param (
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-ConfigMgr' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/xml')

        $LocalVarUri = '/system/console/configMgr'

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "String" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
No description available.

.PARAMETER Action
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Submit-Bundle {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Action},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Submit-Bundle' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/system/console/bundles/{name}'
        if (!$Name) {
            throw "Error! The required parameter `Name` missing when calling postBundle."
        }
        $LocalVarUri = $LocalVarUri.replace('{name}', [System.Web.HTTPUtility]::UrlEncode($Name))

        if (!$Action) {
            throw "Error! The required parameter `Action` missing when calling postBundle."
        }
        $LocalVarQueryParameters['action'] = $Action

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Action
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Submit-JmxRepository {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Action},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Submit-JmxRepository' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/system/console/jmx/com.adobe.granite:type=Repository/op/{action}'
        if (!$Action) {
            throw "Error! The required parameter `Action` missing when calling postJmxRepository."
        }
        $LocalVarUri = $LocalVarUri.replace('{action}', [System.Web.HTTPUtility]::UrlEncode($Action))

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Post
No description available.

.PARAMETER Apply
No description available.

.PARAMETER Delete
No description available.

.PARAMETER Action
No description available.

.PARAMETER Location
No description available.

.PARAMETER Path
No description available.

.PARAMETER ServiceRanking
No description available.

.PARAMETER IdpUrl
No description available.

.PARAMETER IdpCertAlias
No description available.

.PARAMETER IdpHttpRedirect
No description available.

.PARAMETER ServiceProviderEntityId
No description available.

.PARAMETER AssertionConsumerServiceURL
No description available.

.PARAMETER SpPrivateKeyAlias
No description available.

.PARAMETER KeyStorePassword
No description available.

.PARAMETER DefaultRedirectUrl
No description available.

.PARAMETER UserIDAttribute
No description available.

.PARAMETER UseEncryption
No description available.

.PARAMETER CreateUser
No description available.

.PARAMETER AddGroupMemberships
No description available.

.PARAMETER GroupMembershipAttribute
No description available.

.PARAMETER DefaultGroups
No description available.

.PARAMETER NameIdFormat
No description available.

.PARAMETER SynchronizeAttributes
No description available.

.PARAMETER HandleLogout
No description available.

.PARAMETER LogoutUrl
No description available.

.PARAMETER ClockTolerance
No description available.

.PARAMETER DigestMethod
No description available.

.PARAMETER SignatureMethod
No description available.

.PARAMETER UserIntermediatePath
No description available.

.PARAMETER Propertylist
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

SamlConfigurationInfo
#>
function Submit-SamlConfiguration {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Post},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Apply},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Delete},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Action},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Location},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Path},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${ServiceRanking},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IdpUrl},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IdpCertAlias},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdpHttpRedirect},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ServiceProviderEntityId},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AssertionConsumerServiceURL},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SpPrivateKeyAlias},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${KeyStorePassword},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DefaultRedirectUrl},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UserIDAttribute},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${UseEncryption},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${CreateUser},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${AddGroupMemberships},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${GroupMembershipAttribute},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DefaultGroups},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${NameIdFormat},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SynchronizeAttributes},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${HandleLogout},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LogoutUrl},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${ClockTolerance},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DigestMethod},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SignatureMethod},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UserIntermediatePath},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Propertylist},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Submit-SamlConfiguration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain')

        $LocalVarUri = '/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler'

        if ($Post) {
            $LocalVarQueryParameters['post'] = $Post
        }

        if ($Apply) {
            $LocalVarQueryParameters['apply'] = $Apply
        }

        if ($Delete) {
            $LocalVarQueryParameters['delete'] = $Delete
        }

        if ($Action) {
            $LocalVarQueryParameters['action'] = $Action
        }

        if ($Location) {
            $LocalVarQueryParameters['$location'] = $Location
        }

        if ($Path) {
            $LocalVarQueryParameters['path'] = $Path
        }

        if ($ServiceRanking) {
            $LocalVarQueryParameters['service.ranking'] = $ServiceRanking
        }

        if ($IdpUrl) {
            $LocalVarQueryParameters['idpUrl'] = $IdpUrl
        }

        if ($IdpCertAlias) {
            $LocalVarQueryParameters['idpCertAlias'] = $IdpCertAlias
        }

        if ($IdpHttpRedirect) {
            $LocalVarQueryParameters['idpHttpRedirect'] = $IdpHttpRedirect
        }

        if ($ServiceProviderEntityId) {
            $LocalVarQueryParameters['serviceProviderEntityId'] = $ServiceProviderEntityId
        }

        if ($AssertionConsumerServiceURL) {
            $LocalVarQueryParameters['assertionConsumerServiceURL'] = $AssertionConsumerServiceURL
        }

        if ($SpPrivateKeyAlias) {
            $LocalVarQueryParameters['spPrivateKeyAlias'] = $SpPrivateKeyAlias
        }

        if ($KeyStorePassword) {
            $LocalVarQueryParameters['keyStorePassword'] = $KeyStorePassword
        }

        if ($DefaultRedirectUrl) {
            $LocalVarQueryParameters['defaultRedirectUrl'] = $DefaultRedirectUrl
        }

        if ($UserIDAttribute) {
            $LocalVarQueryParameters['userIDAttribute'] = $UserIDAttribute
        }

        if ($UseEncryption) {
            $LocalVarQueryParameters['useEncryption'] = $UseEncryption
        }

        if ($CreateUser) {
            $LocalVarQueryParameters['createUser'] = $CreateUser
        }

        if ($AddGroupMemberships) {
            $LocalVarQueryParameters['addGroupMemberships'] = $AddGroupMemberships
        }

        if ($GroupMembershipAttribute) {
            $LocalVarQueryParameters['groupMembershipAttribute'] = $GroupMembershipAttribute
        }

        if ($DefaultGroups) {
            $LocalVarQueryParameters['defaultGroups'] = $DefaultGroups
        }

        if ($NameIdFormat) {
            $LocalVarQueryParameters['nameIdFormat'] = $NameIdFormat
        }

        if ($SynchronizeAttributes) {
            $LocalVarQueryParameters['synchronizeAttributes'] = $SynchronizeAttributes
        }

        if ($HandleLogout) {
            $LocalVarQueryParameters['handleLogout'] = $HandleLogout
        }

        if ($LogoutUrl) {
            $LocalVarQueryParameters['logoutUrl'] = $LogoutUrl
        }

        if ($ClockTolerance) {
            $LocalVarQueryParameters['clockTolerance'] = $ClockTolerance
        }

        if ($DigestMethod) {
            $LocalVarQueryParameters['digestMethod'] = $DigestMethod
        }

        if ($SignatureMethod) {
            $LocalVarQueryParameters['signatureMethod'] = $SignatureMethod
        }

        if ($UserIntermediatePath) {
            $LocalVarQueryParameters['userIntermediatePath'] = $UserIntermediatePath
        }

        if ($Propertylist) {
            $LocalVarQueryParameters['propertylist'] = $Propertylist
        }

        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "SamlConfigurationInfo" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

