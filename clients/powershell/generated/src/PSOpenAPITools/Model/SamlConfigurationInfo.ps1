#
# Adobe Experience Manager (AEM) API
# Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
# Version: 3.5.0-pre.0
# Contact: opensource@shinesolutions.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER VarPid
Persistent Identity (PID)
.PARAMETER Title
Title
.PARAMETER Description
Title
.PARAMETER BundleLocation
needed for configuration binding
.PARAMETER ServiceLocation
needed for configuraiton binding
.PARAMETER Properties
No description available.
.OUTPUTS

SamlConfigurationInfo<PSCustomObject>
#>

function Initialize-SamlConfigurationInfo {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VarPid},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Title},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BundleLocation},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServiceLocation},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Properties}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SamlConfigurationInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "pid" = ${VarPid}
            "title" = ${Title}
            "description" = ${Description}
            "bundle_location" = ${BundleLocation}
            "service_location" = ${ServiceLocation}
            "properties" = ${Properties}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SamlConfigurationInfo<PSCustomObject>

.DESCRIPTION

Convert from JSON to SamlConfigurationInfo<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SamlConfigurationInfo<PSCustomObject>
#>
function ConvertFrom-JsonToSamlConfigurationInfo {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SamlConfigurationInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SamlConfigurationInfo
        $AllProperties = ("pid", "title", "description", "bundle_location", "service_location", "properties")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pid"))) { #optional property not found
            $VarPid = $null
        } else {
            $VarPid = $JsonParameters.PSobject.Properties["pid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "title"))) { #optional property not found
            $Title = $null
        } else {
            $Title = $JsonParameters.PSobject.Properties["title"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bundle_location"))) { #optional property not found
            $BundleLocation = $null
        } else {
            $BundleLocation = $JsonParameters.PSobject.Properties["bundle_location"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "service_location"))) { #optional property not found
            $ServiceLocation = $null
        } else {
            $ServiceLocation = $JsonParameters.PSobject.Properties["service_location"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "properties"))) { #optional property not found
            $Properties = $null
        } else {
            $Properties = $JsonParameters.PSobject.Properties["properties"].value
        }

        $PSO = [PSCustomObject]@{
            "pid" = ${VarPid}
            "title" = ${Title}
            "description" = ${Description}
            "bundle_location" = ${BundleLocation}
            "service_location" = ${ServiceLocation}
            "properties" = ${Properties}
        }

        return $PSO
    }

}

