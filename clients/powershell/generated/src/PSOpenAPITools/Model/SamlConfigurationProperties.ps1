#
# Adobe Experience Manager (AEM) API
# Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
# Version: 3.5.0-pre.0
# Contact: opensource@shinesolutions.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Path
No description available.
.PARAMETER ServiceRanking
No description available.
.PARAMETER IdpUrl
No description available.
.PARAMETER IdpCertAlias
No description available.
.PARAMETER IdpHttpRedirect
No description available.
.PARAMETER ServiceProviderEntityId
No description available.
.PARAMETER AssertionConsumerServiceURL
No description available.
.PARAMETER SpPrivateKeyAlias
No description available.
.PARAMETER KeyStorePassword
No description available.
.PARAMETER DefaultRedirectUrl
No description available.
.PARAMETER UserIDAttribute
No description available.
.PARAMETER UseEncryption
No description available.
.PARAMETER CreateUser
No description available.
.PARAMETER AddGroupMemberships
No description available.
.PARAMETER GroupMembershipAttribute
No description available.
.PARAMETER DefaultGroups
No description available.
.PARAMETER NameIdFormat
No description available.
.PARAMETER SynchronizeAttributes
No description available.
.PARAMETER HandleLogout
No description available.
.PARAMETER LogoutUrl
No description available.
.PARAMETER ClockTolerance
No description available.
.PARAMETER DigestMethod
No description available.
.PARAMETER SignatureMethod
No description available.
.PARAMETER UserIntermediatePath
No description available.
.OUTPUTS

SamlConfigurationProperties<PSCustomObject>
#>

function Initialize-SamlConfigurationProperties {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Path},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ServiceRanking},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${IdpUrl},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${IdpCertAlias},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${IdpHttpRedirect},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ServiceProviderEntityId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AssertionConsumerServiceURL},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${SpPrivateKeyAlias},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${KeyStorePassword},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DefaultRedirectUrl},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${UserIDAttribute},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${UseEncryption},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CreateUser},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AddGroupMemberships},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${GroupMembershipAttribute},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DefaultGroups},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${NameIdFormat},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${SynchronizeAttributes},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${HandleLogout},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LogoutUrl},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ClockTolerance},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DigestMethod},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${SignatureMethod},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${UserIntermediatePath}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SamlConfigurationProperties' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "path" = ${Path}
            "service.ranking" = ${ServiceRanking}
            "idpUrl" = ${IdpUrl}
            "idpCertAlias" = ${IdpCertAlias}
            "idpHttpRedirect" = ${IdpHttpRedirect}
            "serviceProviderEntityId" = ${ServiceProviderEntityId}
            "assertionConsumerServiceURL" = ${AssertionConsumerServiceURL}
            "spPrivateKeyAlias" = ${SpPrivateKeyAlias}
            "keyStorePassword" = ${KeyStorePassword}
            "defaultRedirectUrl" = ${DefaultRedirectUrl}
            "userIDAttribute" = ${UserIDAttribute}
            "useEncryption" = ${UseEncryption}
            "createUser" = ${CreateUser}
            "addGroupMemberships" = ${AddGroupMemberships}
            "groupMembershipAttribute" = ${GroupMembershipAttribute}
            "defaultGroups" = ${DefaultGroups}
            "nameIdFormat" = ${NameIdFormat}
            "synchronizeAttributes" = ${SynchronizeAttributes}
            "handleLogout" = ${HandleLogout}
            "logoutUrl" = ${LogoutUrl}
            "clockTolerance" = ${ClockTolerance}
            "digestMethod" = ${DigestMethod}
            "signatureMethod" = ${SignatureMethod}
            "userIntermediatePath" = ${UserIntermediatePath}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SamlConfigurationProperties<PSCustomObject>

.DESCRIPTION

Convert from JSON to SamlConfigurationProperties<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SamlConfigurationProperties<PSCustomObject>
#>
function ConvertFrom-JsonToSamlConfigurationProperties {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SamlConfigurationProperties' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SamlConfigurationProperties
        $AllProperties = ("path", "service.ranking", "idpUrl", "idpCertAlias", "idpHttpRedirect", "serviceProviderEntityId", "assertionConsumerServiceURL", "spPrivateKeyAlias", "keyStorePassword", "defaultRedirectUrl", "userIDAttribute", "useEncryption", "createUser", "addGroupMemberships", "groupMembershipAttribute", "defaultGroups", "nameIdFormat", "synchronizeAttributes", "handleLogout", "logoutUrl", "clockTolerance", "digestMethod", "signatureMethod", "userIntermediatePath")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "path"))) { #optional property not found
            $Path = $null
        } else {
            $Path = $JsonParameters.PSobject.Properties["path"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "service.ranking"))) { #optional property not found
            $ServiceRanking = $null
        } else {
            $ServiceRanking = $JsonParameters.PSobject.Properties["service.ranking"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "idpUrl"))) { #optional property not found
            $IdpUrl = $null
        } else {
            $IdpUrl = $JsonParameters.PSobject.Properties["idpUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "idpCertAlias"))) { #optional property not found
            $IdpCertAlias = $null
        } else {
            $IdpCertAlias = $JsonParameters.PSobject.Properties["idpCertAlias"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "idpHttpRedirect"))) { #optional property not found
            $IdpHttpRedirect = $null
        } else {
            $IdpHttpRedirect = $JsonParameters.PSobject.Properties["idpHttpRedirect"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceProviderEntityId"))) { #optional property not found
            $ServiceProviderEntityId = $null
        } else {
            $ServiceProviderEntityId = $JsonParameters.PSobject.Properties["serviceProviderEntityId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "assertionConsumerServiceURL"))) { #optional property not found
            $AssertionConsumerServiceURL = $null
        } else {
            $AssertionConsumerServiceURL = $JsonParameters.PSobject.Properties["assertionConsumerServiceURL"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "spPrivateKeyAlias"))) { #optional property not found
            $SpPrivateKeyAlias = $null
        } else {
            $SpPrivateKeyAlias = $JsonParameters.PSobject.Properties["spPrivateKeyAlias"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "keyStorePassword"))) { #optional property not found
            $KeyStorePassword = $null
        } else {
            $KeyStorePassword = $JsonParameters.PSobject.Properties["keyStorePassword"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultRedirectUrl"))) { #optional property not found
            $DefaultRedirectUrl = $null
        } else {
            $DefaultRedirectUrl = $JsonParameters.PSobject.Properties["defaultRedirectUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userIDAttribute"))) { #optional property not found
            $UserIDAttribute = $null
        } else {
            $UserIDAttribute = $JsonParameters.PSobject.Properties["userIDAttribute"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "useEncryption"))) { #optional property not found
            $UseEncryption = $null
        } else {
            $UseEncryption = $JsonParameters.PSobject.Properties["useEncryption"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createUser"))) { #optional property not found
            $CreateUser = $null
        } else {
            $CreateUser = $JsonParameters.PSobject.Properties["createUser"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "addGroupMemberships"))) { #optional property not found
            $AddGroupMemberships = $null
        } else {
            $AddGroupMemberships = $JsonParameters.PSobject.Properties["addGroupMemberships"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "groupMembershipAttribute"))) { #optional property not found
            $GroupMembershipAttribute = $null
        } else {
            $GroupMembershipAttribute = $JsonParameters.PSobject.Properties["groupMembershipAttribute"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultGroups"))) { #optional property not found
            $DefaultGroups = $null
        } else {
            $DefaultGroups = $JsonParameters.PSobject.Properties["defaultGroups"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nameIdFormat"))) { #optional property not found
            $NameIdFormat = $null
        } else {
            $NameIdFormat = $JsonParameters.PSobject.Properties["nameIdFormat"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "synchronizeAttributes"))) { #optional property not found
            $SynchronizeAttributes = $null
        } else {
            $SynchronizeAttributes = $JsonParameters.PSobject.Properties["synchronizeAttributes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "handleLogout"))) { #optional property not found
            $HandleLogout = $null
        } else {
            $HandleLogout = $JsonParameters.PSobject.Properties["handleLogout"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "logoutUrl"))) { #optional property not found
            $LogoutUrl = $null
        } else {
            $LogoutUrl = $JsonParameters.PSobject.Properties["logoutUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "clockTolerance"))) { #optional property not found
            $ClockTolerance = $null
        } else {
            $ClockTolerance = $JsonParameters.PSobject.Properties["clockTolerance"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "digestMethod"))) { #optional property not found
            $DigestMethod = $null
        } else {
            $DigestMethod = $JsonParameters.PSobject.Properties["digestMethod"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "signatureMethod"))) { #optional property not found
            $SignatureMethod = $null
        } else {
            $SignatureMethod = $JsonParameters.PSobject.Properties["signatureMethod"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userIntermediatePath"))) { #optional property not found
            $UserIntermediatePath = $null
        } else {
            $UserIntermediatePath = $JsonParameters.PSobject.Properties["userIntermediatePath"].value
        }

        $PSO = [PSCustomObject]@{
            "path" = ${Path}
            "service.ranking" = ${ServiceRanking}
            "idpUrl" = ${IdpUrl}
            "idpCertAlias" = ${IdpCertAlias}
            "idpHttpRedirect" = ${IdpHttpRedirect}
            "serviceProviderEntityId" = ${ServiceProviderEntityId}
            "assertionConsumerServiceURL" = ${AssertionConsumerServiceURL}
            "spPrivateKeyAlias" = ${SpPrivateKeyAlias}
            "keyStorePassword" = ${KeyStorePassword}
            "defaultRedirectUrl" = ${DefaultRedirectUrl}
            "userIDAttribute" = ${UserIDAttribute}
            "useEncryption" = ${UseEncryption}
            "createUser" = ${CreateUser}
            "addGroupMemberships" = ${AddGroupMemberships}
            "groupMembershipAttribute" = ${GroupMembershipAttribute}
            "defaultGroups" = ${DefaultGroups}
            "nameIdFormat" = ${NameIdFormat}
            "synchronizeAttributes" = ${SynchronizeAttributes}
            "handleLogout" = ${HandleLogout}
            "logoutUrl" = ${LogoutUrl}
            "clockTolerance" = ${ClockTolerance}
            "digestMethod" = ${DigestMethod}
            "signatureMethod" = ${SignatureMethod}
            "userIntermediatePath" = ${UserIntermediatePath}
        }

        return $PSO
    }

}

