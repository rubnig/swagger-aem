/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.prokarma.pkmst.controller;

import com.prokarma.pkmst.model.BundleInfo;
import com.prokarma.pkmst.model.SamlConfigurationInfo;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import java.util.List;
/**
 * Provides the info about api methods
 * @author pkmst
 *
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaPKMSTServerCodegen", date = "2021-09-03T15:25:27.791+10:00[Australia/Melbourne]")
@Api(value = "Console", description = "the Console API")
public interface ConsoleApi {

    @ApiOperation(value = "", notes = "", response = String.class, responseContainer = "List", authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "console", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response", response = String.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/system/console/status-productinfo.json",
        produces = { "application/json" }
    )
    ResponseEntity<List<String>> getAemProductInfo( @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "", response = BundleInfo.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "console", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Retrieved bundle info", response = BundleInfo.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/system/console/bundles/{name}.json",
        produces = { "application/json" }
    )
    ResponseEntity<BundleInfo> getBundleInfo(@ApiParam(value = "",required=true ) @PathVariable("name") String name, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "", response = String.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "console", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 5XX, message = "Unexpected error.") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/system/console/configMgr",
        produces = { "text/xml" }
    )
    ResponseEntity<String> getConfigMgr( @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "", response = Void.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "console", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/system/console/bundles/{name}"
    )
    ResponseEntity<Void> postBundle(@ApiParam(value = "",required=true ) @PathVariable("name") String name,@ApiParam(value = "", required = true)  @RequestParam(value = "action", required = true) String action, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "", response = Void.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "console", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/system/console/jmx/com.adobe.granite:type=Repository/op/{action}"
    )
    ResponseEntity<Void> postJmxRepository(@ApiParam(value = "",required=true ) @PathVariable("action") String action, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "", response = SamlConfigurationInfo.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "console", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Retrieved AEM SAML Configuration", response = SamlConfigurationInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler",
        produces = { "text/plain" }
    )
    ResponseEntity<SamlConfigurationInfo> postSamlConfiguration(@ApiParam(value = "")  @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "")  @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "")  @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "")  @RequestParam(value = "action", required = false) String action,@ApiParam(value = "")  @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "")  @RequestParam(value = "path", required = false) List<String> path,@ApiParam(value = "")  @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "")  @RequestParam(value = "idpUrl", required = false) String idpUrl,@ApiParam(value = "")  @RequestParam(value = "idpCertAlias", required = false) String idpCertAlias,@ApiParam(value = "")  @RequestParam(value = "idpHttpRedirect", required = false) Boolean idpHttpRedirect,@ApiParam(value = "")  @RequestParam(value = "serviceProviderEntityId", required = false) String serviceProviderEntityId,@ApiParam(value = "")  @RequestParam(value = "assertionConsumerServiceURL", required = false) String assertionConsumerServiceURL,@ApiParam(value = "")  @RequestParam(value = "spPrivateKeyAlias", required = false) String spPrivateKeyAlias,@ApiParam(value = "")  @RequestParam(value = "keyStorePassword", required = false) String keyStorePassword,@ApiParam(value = "")  @RequestParam(value = "defaultRedirectUrl", required = false) String defaultRedirectUrl,@ApiParam(value = "")  @RequestParam(value = "userIDAttribute", required = false) String userIDAttribute,@ApiParam(value = "")  @RequestParam(value = "useEncryption", required = false) Boolean useEncryption,@ApiParam(value = "")  @RequestParam(value = "createUser", required = false) Boolean createUser,@ApiParam(value = "")  @RequestParam(value = "addGroupMemberships", required = false) Boolean addGroupMemberships,@ApiParam(value = "")  @RequestParam(value = "groupMembershipAttribute", required = false) String groupMembershipAttribute,@ApiParam(value = "")  @RequestParam(value = "defaultGroups", required = false) List<String> defaultGroups,@ApiParam(value = "")  @RequestParam(value = "nameIdFormat", required = false) String nameIdFormat,@ApiParam(value = "")  @RequestParam(value = "synchronizeAttributes", required = false) List<String> synchronizeAttributes,@ApiParam(value = "")  @RequestParam(value = "handleLogout", required = false) Boolean handleLogout,@ApiParam(value = "")  @RequestParam(value = "logoutUrl", required = false) String logoutUrl,@ApiParam(value = "")  @RequestParam(value = "clockTolerance", required = false) Integer clockTolerance,@ApiParam(value = "")  @RequestParam(value = "digestMethod", required = false) String digestMethod,@ApiParam(value = "")  @RequestParam(value = "signatureMethod", required = false) String signatureMethod,@ApiParam(value = "")  @RequestParam(value = "userIntermediatePath", required = false) String userIntermediatePath,@ApiParam(value = "")  @RequestParam(value = "propertylist", required = false) List<String> propertylist, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;

}
