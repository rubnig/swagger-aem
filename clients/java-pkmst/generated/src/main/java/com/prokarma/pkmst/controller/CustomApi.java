/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.prokarma.pkmst.controller;


import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import java.util.List;
/**
 * Provides the info about api methods
 * @author pkmst
 *
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaPKMSTServerCodegen", date = "2021-09-03T15:25:27.791+10:00[Australia/Melbourne]")
@Api(value = "Custom", description = "the Custom API")
public interface CustomApi {

    @ApiOperation(value = "", notes = "", response = String.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "custom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/system/health",
        produces = { "application/json" }
    )
    ResponseEntity<String> getAemHealthCheck(@ApiParam(value = "")  @RequestParam(value = "tags", required = false) String tags,@ApiParam(value = "")  @RequestParam(value = "combineTagsOr", required = false) Boolean combineTagsOr, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "", response = Void.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "custom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck"
    )
    ResponseEntity<Void> postConfigAemHealthCheckServlet(@ApiParam(value = "")  @RequestParam(value = "bundles.ignored", required = false) List<String> bundlesIgnored,@ApiParam(value = "")  @RequestParam(value = "bundles.ignored@TypeHint", required = false) String bundlesIgnoredAtTypeHint, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "", response = Void.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "custom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/apps/system/config/com.shinesolutions.aem.passwordreset.Activator"
    )
    ResponseEntity<Void> postConfigAemPasswordReset(@ApiParam(value = "")  @RequestParam(value = "pwdreset.authorizables", required = false) List<String> pwdresetAuthorizables,@ApiParam(value = "")  @RequestParam(value = "pwdreset.authorizables@TypeHint", required = false) String pwdresetAuthorizablesAtTypeHint, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;

}
