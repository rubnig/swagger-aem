/*
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * API version: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CrxApiController binds http requests to an api service and writes the service results to the http response
type CrxApiController struct {
	service CrxApiServicer
	errorHandler ErrorHandler
}

// CrxApiOption for how the controller is set up.
type CrxApiOption func(*CrxApiController)

// WithCrxApiErrorHandler inject ErrorHandler into controller
func WithCrxApiErrorHandler(h ErrorHandler) CrxApiOption {
	return func(c *CrxApiController) {
		c.errorHandler = h
	}
}

// NewCrxApiController creates a default api controller
func NewCrxApiController(s CrxApiServicer, opts ...CrxApiOption) Router {
	controller := &CrxApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the CrxApiController
func (c *CrxApiController) Routes() Routes {
	return Routes{ 
		{
			"GetCrxdeStatus",
			strings.ToUpper("Get"),
			"/crx/server/crx.default/jcr:root/.1.json",
			c.GetCrxdeStatus,
		},
		{
			"GetInstallStatus",
			strings.ToUpper("Get"),
			"/crx/packmgr/installstatus.jsp",
			c.GetInstallStatus,
		},
		{
			"GetPackageManagerServlet",
			strings.ToUpper("Get"),
			"/crx/packmgr/service/script.html",
			c.GetPackageManagerServlet,
		},
		{
			"PostPackageService",
			strings.ToUpper("Post"),
			"/crx/packmgr/service.jsp",
			c.PostPackageService,
		},
		{
			"PostPackageServiceJson",
			strings.ToUpper("Post"),
			"/crx/packmgr/service/.json/{path}",
			c.PostPackageServiceJson,
		},
		{
			"PostPackageUpdate",
			strings.ToUpper("Post"),
			"/crx/packmgr/update.jsp",
			c.PostPackageUpdate,
		},
		{
			"PostSetPassword",
			strings.ToUpper("Post"),
			"/crx/explorer/ui/setpassword.jsp",
			c.PostSetPassword,
		},
	}
}

// GetCrxdeStatus - 
func (c *CrxApiController) GetCrxdeStatus(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetCrxdeStatus(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetInstallStatus - 
func (c *CrxApiController) GetInstallStatus(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetInstallStatus(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetPackageManagerServlet - 
func (c *CrxApiController) GetPackageManagerServlet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetPackageManagerServlet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostPackageService - 
func (c *CrxApiController) PostPackageService(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	cmd := query.Get("cmd")
	result, err := c.service.PostPackageService(r.Context(), cmd)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostPackageServiceJson - 
func (c *CrxApiController) PostPackageServiceJson(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseMultipartForm(32 << 20); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	query := r.URL.Query()
	path := params["path"]
	
	cmd := query.Get("cmd")
	groupName := query.Get("groupName")
	packageName := query.Get("packageName")
	packageVersion := query.Get("packageVersion")
	charset := query.Get("_charset_")
	force, err := parseBoolParameter(query.Get("force"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	recursive, err := parseBoolParameter(query.Get("recursive"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	package_, err := ReadFormFileToTempFile(r, "package")
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
			result, err := c.service.PostPackageServiceJson(r.Context(), path, cmd, groupName, packageName, packageVersion, charset, force, recursive, package_)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostPackageUpdate - 
func (c *CrxApiController) PostPackageUpdate(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	groupName := query.Get("groupName")
	packageName := query.Get("packageName")
	version := query.Get("version")
	path := query.Get("path")
	filter := query.Get("filter")
	charset := query.Get("_charset_")
	result, err := c.service.PostPackageUpdate(r.Context(), groupName, packageName, version, path, filter, charset)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostSetPassword - 
func (c *CrxApiController) PostSetPassword(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	old := query.Get("old")
	plain := query.Get("plain")
	verify := query.Get("verify")
	result, err := c.service.PostSetPassword(r.Context(), old, plain, verify)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
