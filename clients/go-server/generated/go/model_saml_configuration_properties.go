/*
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * API version: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type SamlConfigurationProperties struct {

	Path SamlConfigurationPropertyItemsArray `json:"path,omitempty"`

	ServiceRanking SamlConfigurationPropertyItemsLong `json:"service.ranking,omitempty"`

	IdpUrl SamlConfigurationPropertyItemsString `json:"idpUrl,omitempty"`

	IdpCertAlias SamlConfigurationPropertyItemsString `json:"idpCertAlias,omitempty"`

	IdpHttpRedirect SamlConfigurationPropertyItemsBoolean `json:"idpHttpRedirect,omitempty"`

	ServiceProviderEntityId SamlConfigurationPropertyItemsString `json:"serviceProviderEntityId,omitempty"`

	AssertionConsumerServiceURL SamlConfigurationPropertyItemsString `json:"assertionConsumerServiceURL,omitempty"`

	SpPrivateKeyAlias SamlConfigurationPropertyItemsString `json:"spPrivateKeyAlias,omitempty"`

	KeyStorePassword SamlConfigurationPropertyItemsString `json:"keyStorePassword,omitempty"`

	DefaultRedirectUrl SamlConfigurationPropertyItemsString `json:"defaultRedirectUrl,omitempty"`

	UserIDAttribute SamlConfigurationPropertyItemsString `json:"userIDAttribute,omitempty"`

	UseEncryption SamlConfigurationPropertyItemsBoolean `json:"useEncryption,omitempty"`

	CreateUser SamlConfigurationPropertyItemsBoolean `json:"createUser,omitempty"`

	AddGroupMemberships SamlConfigurationPropertyItemsBoolean `json:"addGroupMemberships,omitempty"`

	GroupMembershipAttribute SamlConfigurationPropertyItemsString `json:"groupMembershipAttribute,omitempty"`

	DefaultGroups SamlConfigurationPropertyItemsArray `json:"defaultGroups,omitempty"`

	NameIdFormat SamlConfigurationPropertyItemsString `json:"nameIdFormat,omitempty"`

	SynchronizeAttributes SamlConfigurationPropertyItemsArray `json:"synchronizeAttributes,omitempty"`

	HandleLogout SamlConfigurationPropertyItemsBoolean `json:"handleLogout,omitempty"`

	LogoutUrl SamlConfigurationPropertyItemsString `json:"logoutUrl,omitempty"`

	ClockTolerance SamlConfigurationPropertyItemsLong `json:"clockTolerance,omitempty"`

	DigestMethod SamlConfigurationPropertyItemsString `json:"digestMethod,omitempty"`

	SignatureMethod SamlConfigurationPropertyItemsString `json:"signatureMethod,omitempty"`

	UserIntermediatePath SamlConfigurationPropertyItemsString `json:"userIntermediatePath,omitempty"`
}

// AssertSamlConfigurationPropertiesRequired checks if the required fields are not zero-ed
func AssertSamlConfigurationPropertiesRequired(obj SamlConfigurationProperties) error {
	if err := AssertSamlConfigurationPropertyItemsArrayRequired(obj.Path); err != nil {
		return err
	}
	if err := AssertSamlConfigurationPropertyItemsLongRequired(obj.ServiceRanking); err != nil {
		return err
	}
	if err := AssertSamlConfigurationPropertyItemsStringRequired(obj.IdpUrl); err != nil {
		return err
	}
	if err := AssertSamlConfigurationPropertyItemsStringRequired(obj.IdpCertAlias); err != nil {
		return err
	}
	if err := AssertSamlConfigurationPropertyItemsBooleanRequired(obj.IdpHttpRedirect); err != nil {
		return err
	}
	if err := AssertSamlConfigurationPropertyItemsStringRequired(obj.ServiceProviderEntityId); err != nil {
		return err
	}
	if err := AssertSamlConfigurationPropertyItemsStringRequired(obj.AssertionConsumerServiceURL); err != nil {
		return err
	}
	if err := AssertSamlConfigurationPropertyItemsStringRequired(obj.SpPrivateKeyAlias); err != nil {
		return err
	}
	if err := AssertSamlConfigurationPropertyItemsStringRequired(obj.KeyStorePassword); err != nil {
		return err
	}
	if err := AssertSamlConfigurationPropertyItemsStringRequired(obj.DefaultRedirectUrl); err != nil {
		return err
	}
	if err := AssertSamlConfigurationPropertyItemsStringRequired(obj.UserIDAttribute); err != nil {
		return err
	}
	if err := AssertSamlConfigurationPropertyItemsBooleanRequired(obj.UseEncryption); err != nil {
		return err
	}
	if err := AssertSamlConfigurationPropertyItemsBooleanRequired(obj.CreateUser); err != nil {
		return err
	}
	if err := AssertSamlConfigurationPropertyItemsBooleanRequired(obj.AddGroupMemberships); err != nil {
		return err
	}
	if err := AssertSamlConfigurationPropertyItemsStringRequired(obj.GroupMembershipAttribute); err != nil {
		return err
	}
	if err := AssertSamlConfigurationPropertyItemsArrayRequired(obj.DefaultGroups); err != nil {
		return err
	}
	if err := AssertSamlConfigurationPropertyItemsStringRequired(obj.NameIdFormat); err != nil {
		return err
	}
	if err := AssertSamlConfigurationPropertyItemsArrayRequired(obj.SynchronizeAttributes); err != nil {
		return err
	}
	if err := AssertSamlConfigurationPropertyItemsBooleanRequired(obj.HandleLogout); err != nil {
		return err
	}
	if err := AssertSamlConfigurationPropertyItemsStringRequired(obj.LogoutUrl); err != nil {
		return err
	}
	if err := AssertSamlConfigurationPropertyItemsLongRequired(obj.ClockTolerance); err != nil {
		return err
	}
	if err := AssertSamlConfigurationPropertyItemsStringRequired(obj.DigestMethod); err != nil {
		return err
	}
	if err := AssertSamlConfigurationPropertyItemsStringRequired(obj.SignatureMethod); err != nil {
		return err
	}
	if err := AssertSamlConfigurationPropertyItemsStringRequired(obj.UserIntermediatePath); err != nil {
		return err
	}
	return nil
}

// AssertRecurseSamlConfigurationPropertiesRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of SamlConfigurationProperties (e.g. [][]SamlConfigurationProperties), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseSamlConfigurationPropertiesRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aSamlConfigurationProperties, ok := obj.(SamlConfigurationProperties)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertSamlConfigurationPropertiesRequired(aSamlConfigurationProperties)
	})
}
