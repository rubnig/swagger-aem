/*
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * API version: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// GraniteApiController binds http requests to an api service and writes the service results to the http response
type GraniteApiController struct {
	service GraniteApiServicer
	errorHandler ErrorHandler
}

// GraniteApiOption for how the controller is set up.
type GraniteApiOption func(*GraniteApiController)

// WithGraniteApiErrorHandler inject ErrorHandler into controller
func WithGraniteApiErrorHandler(h ErrorHandler) GraniteApiOption {
	return func(c *GraniteApiController) {
		c.errorHandler = h
	}
}

// NewGraniteApiController creates a default api controller
func NewGraniteApiController(s GraniteApiServicer, opts ...GraniteApiOption) Router {
	controller := &GraniteApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the GraniteApiController
func (c *GraniteApiController) Routes() Routes {
	return Routes{ 
		{
			"SslSetup",
			strings.ToUpper("Post"),
			"/libs/granite/security/post/sslSetup.html",
			c.SslSetup,
		},
	}
}

// SslSetup - 
func (c *GraniteApiController) SslSetup(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseMultipartForm(32 << 20); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	query := r.URL.Query()
	keystorePassword := query.Get("keystorePassword")
	keystorePasswordConfirm := query.Get("keystorePasswordConfirm")
	truststorePassword := query.Get("truststorePassword")
	truststorePasswordConfirm := query.Get("truststorePasswordConfirm")
	httpsHostname := query.Get("httpsHostname")
	httpsPort := query.Get("httpsPort")
	
	privatekeyFile, err := ReadFormFileToTempFile(r, "privatekeyFile")
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
			
	certificateFile, err := ReadFormFileToTempFile(r, "certificateFile")
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
			result, err := c.service.SslSetup(r.Context(), keystorePassword, keystorePasswordConfirm, truststorePassword, truststorePasswordConfirm, httpsHostname, httpsPort, privatekeyFile, certificateFile)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
