/*
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * API version: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// SlingApiController binds http requests to an api service and writes the service results to the http response
type SlingApiController struct {
	service SlingApiServicer
	errorHandler ErrorHandler
}

// SlingApiOption for how the controller is set up.
type SlingApiOption func(*SlingApiController)

// WithSlingApiErrorHandler inject ErrorHandler into controller
func WithSlingApiErrorHandler(h ErrorHandler) SlingApiOption {
	return func(c *SlingApiController) {
		c.errorHandler = h
	}
}

// NewSlingApiController creates a default api controller
func NewSlingApiController(s SlingApiServicer, opts ...SlingApiOption) Router {
	controller := &SlingApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the SlingApiController
func (c *SlingApiController) Routes() Routes {
	return Routes{ 
		{
			"DeleteAgent",
			strings.ToUpper("Delete"),
			"/etc/replication/agents.{runmode}/{name}",
			c.DeleteAgent,
		},
		{
			"DeleteNode",
			strings.ToUpper("Delete"),
			"/{path}/{name}",
			c.DeleteNode,
		},
		{
			"GetAgent",
			strings.ToUpper("Get"),
			"/etc/replication/agents.{runmode}/{name}",
			c.GetAgent,
		},
		{
			"GetAgents",
			strings.ToUpper("Get"),
			"/etc/replication/agents.{runmode}.-1.json",
			c.GetAgents,
		},
		{
			"GetAuthorizableKeystore",
			strings.ToUpper("Get"),
			"/{intermediatePath}/{authorizableId}.ks.json",
			c.GetAuthorizableKeystore,
		},
		{
			"GetKeystore",
			strings.ToUpper("Get"),
			"/{intermediatePath}/{authorizableId}/keystore/store.p12",
			c.GetKeystore,
		},
		{
			"GetNode",
			strings.ToUpper("Get"),
			"/{path}/{name}",
			c.GetNode,
		},
		{
			"GetPackage",
			strings.ToUpper("Get"),
			"/etc/packages/{group}/{name}-{version}.zip",
			c.GetPackage,
		},
		{
			"GetPackageFilter",
			strings.ToUpper("Get"),
			"/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json",
			c.GetPackageFilter,
		},
		{
			"GetQuery",
			strings.ToUpper("Get"),
			"/bin/querybuilder.json",
			c.GetQuery,
		},
		{
			"GetTruststore",
			strings.ToUpper("Get"),
			"/etc/truststore/truststore.p12",
			c.GetTruststore,
		},
		{
			"GetTruststoreInfo",
			strings.ToUpper("Get"),
			"/libs/granite/security/truststore.json",
			c.GetTruststoreInfo,
		},
		{
			"PostAgent",
			strings.ToUpper("Post"),
			"/etc/replication/agents.{runmode}/{name}",
			c.PostAgent,
		},
		{
			"PostAuthorizableKeystore",
			strings.ToUpper("Post"),
			"/{intermediatePath}/{authorizableId}.ks.html",
			c.PostAuthorizableKeystore,
		},
		{
			"PostAuthorizables",
			strings.ToUpper("Post"),
			"/libs/granite/security/post/authorizables",
			c.PostAuthorizables,
		},
		{
			"PostConfigAdobeGraniteSamlAuthenticationHandler",
			strings.ToUpper("Post"),
			"/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config",
			c.PostConfigAdobeGraniteSamlAuthenticationHandler,
		},
		{
			"PostConfigApacheFelixJettyBasedHttpService",
			strings.ToUpper("Post"),
			"/apps/system/config/org.apache.felix.http",
			c.PostConfigApacheFelixJettyBasedHttpService,
		},
		{
			"PostConfigApacheHttpComponentsProxyConfiguration",
			strings.ToUpper("Post"),
			"/apps/system/config/org.apache.http.proxyconfigurator.config",
			c.PostConfigApacheHttpComponentsProxyConfiguration,
		},
		{
			"PostConfigApacheSlingDavExServlet",
			strings.ToUpper("Post"),
			"/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet",
			c.PostConfigApacheSlingDavExServlet,
		},
		{
			"PostConfigApacheSlingGetServlet",
			strings.ToUpper("Post"),
			"/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet",
			c.PostConfigApacheSlingGetServlet,
		},
		{
			"PostConfigApacheSlingReferrerFilter",
			strings.ToUpper("Post"),
			"/apps/system/config/org.apache.sling.security.impl.ReferrerFilter",
			c.PostConfigApacheSlingReferrerFilter,
		},
		{
			"PostConfigProperty",
			strings.ToUpper("Post"),
			"/apps/system/config/{configNodeName}",
			c.PostConfigProperty,
		},
		{
			"PostNode",
			strings.ToUpper("Post"),
			"/{path}/{name}",
			c.PostNode,
		},
		{
			"PostNodeRw",
			strings.ToUpper("Post"),
			"/{path}/{name}.rw.html",
			c.PostNodeRw,
		},
		{
			"PostPath",
			strings.ToUpper("Post"),
			"/{path}/",
			c.PostPath,
		},
		{
			"PostQuery",
			strings.ToUpper("Post"),
			"/bin/querybuilder.json",
			c.PostQuery,
		},
		{
			"PostTreeActivation",
			strings.ToUpper("Post"),
			"/etc/replication/treeactivation.html",
			c.PostTreeActivation,
		},
		{
			"PostTruststore",
			strings.ToUpper("Post"),
			"/libs/granite/security/post/truststore",
			c.PostTruststore,
		},
		{
			"PostTruststorePKCS12",
			strings.ToUpper("Post"),
			"/etc/truststore",
			c.PostTruststorePKCS12,
		},
	}
}

// DeleteAgent - 
func (c *SlingApiController) DeleteAgent(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	runmode := params["runmode"]
	
	name := params["name"]
	
	result, err := c.service.DeleteAgent(r.Context(), runmode, name)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteNode - 
func (c *SlingApiController) DeleteNode(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	path := params["path"]
	
	name := params["name"]
	
	result, err := c.service.DeleteNode(r.Context(), path, name)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetAgent - 
func (c *SlingApiController) GetAgent(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	runmode := params["runmode"]
	
	name := params["name"]
	
	result, err := c.service.GetAgent(r.Context(), runmode, name)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetAgents - 
func (c *SlingApiController) GetAgents(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	runmode := params["runmode"]
	
	result, err := c.service.GetAgents(r.Context(), runmode)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetAuthorizableKeystore - 
func (c *SlingApiController) GetAuthorizableKeystore(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	intermediatePath := params["intermediatePath"]
	
	authorizableId := params["authorizableId"]
	
	result, err := c.service.GetAuthorizableKeystore(r.Context(), intermediatePath, authorizableId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetKeystore - 
func (c *SlingApiController) GetKeystore(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	intermediatePath := params["intermediatePath"]
	
	authorizableId := params["authorizableId"]
	
	result, err := c.service.GetKeystore(r.Context(), intermediatePath, authorizableId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetNode - 
func (c *SlingApiController) GetNode(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	path := params["path"]
	
	name := params["name"]
	
	result, err := c.service.GetNode(r.Context(), path, name)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetPackage - 
func (c *SlingApiController) GetPackage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	group := params["group"]
	
	name := params["name"]
	
	version := params["version"]
	
	result, err := c.service.GetPackage(r.Context(), group, name, version)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetPackageFilter - 
func (c *SlingApiController) GetPackageFilter(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	group := params["group"]
	
	name := params["name"]
	
	version := params["version"]
	
	result, err := c.service.GetPackageFilter(r.Context(), group, name, version)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetQuery - 
func (c *SlingApiController) GetQuery(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	path := query.Get("path")
	pLimit := query.Get("p.limit")
	var1Property := query.Get("1_property")
	var1PropertyValue := query.Get("1_property.value")
	result, err := c.service.GetQuery(r.Context(), path, pLimit, var1Property, var1PropertyValue)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTruststore - 
func (c *SlingApiController) GetTruststore(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetTruststore(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTruststoreInfo - 
func (c *SlingApiController) GetTruststoreInfo(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetTruststoreInfo(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostAgent - 
func (c *SlingApiController) PostAgent(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	runmode := params["runmode"]
	
	name := params["name"]
	
	jcrcontentCqdistribute, err := parseBoolParameter(query.Get("jcr:content/cq:distribute"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	jcrcontentCqdistributeTypeHint := query.Get("jcr:content/cq:distribute@TypeHint")
	jcrcontentCqname := query.Get("jcr:content/cq:name")
	jcrcontentCqtemplate := query.Get("jcr:content/cq:template")
	jcrcontentEnabled, err := parseBoolParameter(query.Get("jcr:content/enabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	jcrcontentJcrdescription := query.Get("jcr:content/jcr:description")
	jcrcontentJcrlastModified := query.Get("jcr:content/jcr:lastModified")
	jcrcontentJcrlastModifiedBy := query.Get("jcr:content/jcr:lastModifiedBy")
	jcrcontentJcrmixinTypes := query.Get("jcr:content/jcr:mixinTypes")
	jcrcontentJcrtitle := query.Get("jcr:content/jcr:title")
	jcrcontentLogLevel := query.Get("jcr:content/logLevel")
	jcrcontentNoStatusUpdate, err := parseBoolParameter(query.Get("jcr:content/noStatusUpdate"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	jcrcontentNoVersioning, err := parseBoolParameter(query.Get("jcr:content/noVersioning"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	jcrcontentProtocolConnectTimeout := query.Get("jcr:content/protocolConnectTimeout")
	jcrcontentProtocolHTTPConnectionClosed, err := parseBoolParameter(query.Get("jcr:content/protocolHTTPConnectionClosed"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	jcrcontentProtocolHTTPExpired := query.Get("jcr:content/protocolHTTPExpired")
	jcrcontentProtocolHTTPHeaders := strings.Split(query.Get("jcr:content/protocolHTTPHeaders"), ",")
	jcrcontentProtocolHTTPHeadersTypeHint := query.Get("jcr:content/protocolHTTPHeaders@TypeHint")
	jcrcontentProtocolHTTPMethod := query.Get("jcr:content/protocolHTTPMethod")
	jcrcontentProtocolHTTPSRelaxed, err := parseBoolParameter(query.Get("jcr:content/protocolHTTPSRelaxed"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	jcrcontentProtocolInterface := query.Get("jcr:content/protocolInterface")
	jcrcontentProtocolSocketTimeout := query.Get("jcr:content/protocolSocketTimeout")
	jcrcontentProtocolVersion := query.Get("jcr:content/protocolVersion")
	jcrcontentProxyNTLMDomain := query.Get("jcr:content/proxyNTLMDomain")
	jcrcontentProxyNTLMHost := query.Get("jcr:content/proxyNTLMHost")
	jcrcontentProxyHost := query.Get("jcr:content/proxyHost")
	jcrcontentProxyPassword := query.Get("jcr:content/proxyPassword")
	jcrcontentProxyPort := query.Get("jcr:content/proxyPort")
	jcrcontentProxyUser := query.Get("jcr:content/proxyUser")
	jcrcontentQueueBatchMaxSize := query.Get("jcr:content/queueBatchMaxSize")
	jcrcontentQueueBatchMode := query.Get("jcr:content/queueBatchMode")
	jcrcontentQueueBatchWaitTime := query.Get("jcr:content/queueBatchWaitTime")
	jcrcontentRetryDelay := query.Get("jcr:content/retryDelay")
	jcrcontentReverseReplication, err := parseBoolParameter(query.Get("jcr:content/reverseReplication"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	jcrcontentSerializationType := query.Get("jcr:content/serializationType")
	jcrcontentSlingresourceType := query.Get("jcr:content/sling:resourceType")
	jcrcontentSsl := query.Get("jcr:content/ssl")
	jcrcontentTransportNTLMDomain := query.Get("jcr:content/transportNTLMDomain")
	jcrcontentTransportNTLMHost := query.Get("jcr:content/transportNTLMHost")
	jcrcontentTransportPassword := query.Get("jcr:content/transportPassword")
	jcrcontentTransportUri := query.Get("jcr:content/transportUri")
	jcrcontentTransportUser := query.Get("jcr:content/transportUser")
	jcrcontentTriggerDistribute, err := parseBoolParameter(query.Get("jcr:content/triggerDistribute"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	jcrcontentTriggerModified, err := parseBoolParameter(query.Get("jcr:content/triggerModified"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	jcrcontentTriggerOnOffTime, err := parseBoolParameter(query.Get("jcr:content/triggerOnOffTime"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	jcrcontentTriggerReceive, err := parseBoolParameter(query.Get("jcr:content/triggerReceive"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	jcrcontentTriggerSpecific, err := parseBoolParameter(query.Get("jcr:content/triggerSpecific"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	jcrcontentUserId := query.Get("jcr:content/userId")
	jcrprimaryType := query.Get("jcr:primaryType")
	operation := query.Get(":operation")
	result, err := c.service.PostAgent(r.Context(), runmode, name, jcrcontentCqdistribute, jcrcontentCqdistributeTypeHint, jcrcontentCqname, jcrcontentCqtemplate, jcrcontentEnabled, jcrcontentJcrdescription, jcrcontentJcrlastModified, jcrcontentJcrlastModifiedBy, jcrcontentJcrmixinTypes, jcrcontentJcrtitle, jcrcontentLogLevel, jcrcontentNoStatusUpdate, jcrcontentNoVersioning, jcrcontentProtocolConnectTimeout, jcrcontentProtocolHTTPConnectionClosed, jcrcontentProtocolHTTPExpired, jcrcontentProtocolHTTPHeaders, jcrcontentProtocolHTTPHeadersTypeHint, jcrcontentProtocolHTTPMethod, jcrcontentProtocolHTTPSRelaxed, jcrcontentProtocolInterface, jcrcontentProtocolSocketTimeout, jcrcontentProtocolVersion, jcrcontentProxyNTLMDomain, jcrcontentProxyNTLMHost, jcrcontentProxyHost, jcrcontentProxyPassword, jcrcontentProxyPort, jcrcontentProxyUser, jcrcontentQueueBatchMaxSize, jcrcontentQueueBatchMode, jcrcontentQueueBatchWaitTime, jcrcontentRetryDelay, jcrcontentReverseReplication, jcrcontentSerializationType, jcrcontentSlingresourceType, jcrcontentSsl, jcrcontentTransportNTLMDomain, jcrcontentTransportNTLMHost, jcrcontentTransportPassword, jcrcontentTransportUri, jcrcontentTransportUser, jcrcontentTriggerDistribute, jcrcontentTriggerModified, jcrcontentTriggerOnOffTime, jcrcontentTriggerReceive, jcrcontentTriggerSpecific, jcrcontentUserId, jcrprimaryType, operation)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostAuthorizableKeystore - 
func (c *SlingApiController) PostAuthorizableKeystore(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseMultipartForm(32 << 20); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	query := r.URL.Query()
	intermediatePath := params["intermediatePath"]
	
	authorizableId := params["authorizableId"]
	
	operation := query.Get(":operation")
	currentPassword := query.Get("currentPassword")
	newPassword := query.Get("newPassword")
	rePassword := query.Get("rePassword")
	keyPassword := query.Get("keyPassword")
	keyStorePass := query.Get("keyStorePass")
	alias := query.Get("alias")
	newAlias := query.Get("newAlias")
	removeAlias := query.Get("removeAlias")
	
	certChain, err := ReadFormFileToTempFile(r, "cert-chain")
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
			
	pk, err := ReadFormFileToTempFile(r, "pk")
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
			
	keyStore, err := ReadFormFileToTempFile(r, "keyStore")
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
			result, err := c.service.PostAuthorizableKeystore(r.Context(), intermediatePath, authorizableId, operation, currentPassword, newPassword, rePassword, keyPassword, keyStorePass, alias, newAlias, removeAlias, certChain, pk, keyStore)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostAuthorizables - 
func (c *SlingApiController) PostAuthorizables(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	authorizableId := query.Get("authorizableId")
	intermediatePath := query.Get("intermediatePath")
	createUser := query.Get("createUser")
	createGroup := query.Get("createGroup")
	reppassword := query.Get("rep:password")
	profileGivenName := query.Get("profile/givenName")
	result, err := c.service.PostAuthorizables(r.Context(), authorizableId, intermediatePath, createUser, createGroup, reppassword, profileGivenName)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostConfigAdobeGraniteSamlAuthenticationHandler - 
func (c *SlingApiController) PostConfigAdobeGraniteSamlAuthenticationHandler(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	keyStorePassword := query.Get("keyStorePassword")
	keyStorePasswordTypeHint := query.Get("keyStorePassword@TypeHint")
	serviceRanking, err := parseInt32Parameter(query.Get("service.ranking"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	serviceRankingTypeHint := query.Get("service.ranking@TypeHint")
	idpHttpRedirect, err := parseBoolParameter(query.Get("idpHttpRedirect"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	idpHttpRedirectTypeHint := query.Get("idpHttpRedirect@TypeHint")
	createUser, err := parseBoolParameter(query.Get("createUser"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	createUserTypeHint := query.Get("createUser@TypeHint")
	defaultRedirectUrl := query.Get("defaultRedirectUrl")
	defaultRedirectUrlTypeHint := query.Get("defaultRedirectUrl@TypeHint")
	userIDAttribute := query.Get("userIDAttribute")
	userIDAttributeTypeHint := query.Get("userIDAttribute@TypeHint")
	defaultGroups := strings.Split(query.Get("defaultGroups"), ",")
	defaultGroupsTypeHint := query.Get("defaultGroups@TypeHint")
	idpCertAlias := query.Get("idpCertAlias")
	idpCertAliasTypeHint := query.Get("idpCertAlias@TypeHint")
	addGroupMemberships, err := parseBoolParameter(query.Get("addGroupMemberships"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	addGroupMembershipsTypeHint := query.Get("addGroupMemberships@TypeHint")
	path := strings.Split(query.Get("path"), ",")
	pathTypeHint := query.Get("path@TypeHint")
	synchronizeAttributes := strings.Split(query.Get("synchronizeAttributes"), ",")
	synchronizeAttributesTypeHint := query.Get("synchronizeAttributes@TypeHint")
	clockTolerance, err := parseInt32Parameter(query.Get("clockTolerance"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	clockToleranceTypeHint := query.Get("clockTolerance@TypeHint")
	groupMembershipAttribute := query.Get("groupMembershipAttribute")
	groupMembershipAttributeTypeHint := query.Get("groupMembershipAttribute@TypeHint")
	idpUrl := query.Get("idpUrl")
	idpUrlTypeHint := query.Get("idpUrl@TypeHint")
	logoutUrl := query.Get("logoutUrl")
	logoutUrlTypeHint := query.Get("logoutUrl@TypeHint")
	serviceProviderEntityId := query.Get("serviceProviderEntityId")
	serviceProviderEntityIdTypeHint := query.Get("serviceProviderEntityId@TypeHint")
	assertionConsumerServiceURL := query.Get("assertionConsumerServiceURL")
	assertionConsumerServiceURLTypeHint := query.Get("assertionConsumerServiceURL@TypeHint")
	handleLogout, err := parseBoolParameter(query.Get("handleLogout"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	handleLogoutTypeHint := query.Get("handleLogout@TypeHint")
	spPrivateKeyAlias := query.Get("spPrivateKeyAlias")
	spPrivateKeyAliasTypeHint := query.Get("spPrivateKeyAlias@TypeHint")
	useEncryption, err := parseBoolParameter(query.Get("useEncryption"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	useEncryptionTypeHint := query.Get("useEncryption@TypeHint")
	nameIdFormat := query.Get("nameIdFormat")
	nameIdFormatTypeHint := query.Get("nameIdFormat@TypeHint")
	digestMethod := query.Get("digestMethod")
	digestMethodTypeHint := query.Get("digestMethod@TypeHint")
	signatureMethod := query.Get("signatureMethod")
	signatureMethodTypeHint := query.Get("signatureMethod@TypeHint")
	userIntermediatePath := query.Get("userIntermediatePath")
	userIntermediatePathTypeHint := query.Get("userIntermediatePath@TypeHint")
	result, err := c.service.PostConfigAdobeGraniteSamlAuthenticationHandler(r.Context(), keyStorePassword, keyStorePasswordTypeHint, serviceRanking, serviceRankingTypeHint, idpHttpRedirect, idpHttpRedirectTypeHint, createUser, createUserTypeHint, defaultRedirectUrl, defaultRedirectUrlTypeHint, userIDAttribute, userIDAttributeTypeHint, defaultGroups, defaultGroupsTypeHint, idpCertAlias, idpCertAliasTypeHint, addGroupMemberships, addGroupMembershipsTypeHint, path, pathTypeHint, synchronizeAttributes, synchronizeAttributesTypeHint, clockTolerance, clockToleranceTypeHint, groupMembershipAttribute, groupMembershipAttributeTypeHint, idpUrl, idpUrlTypeHint, logoutUrl, logoutUrlTypeHint, serviceProviderEntityId, serviceProviderEntityIdTypeHint, assertionConsumerServiceURL, assertionConsumerServiceURLTypeHint, handleLogout, handleLogoutTypeHint, spPrivateKeyAlias, spPrivateKeyAliasTypeHint, useEncryption, useEncryptionTypeHint, nameIdFormat, nameIdFormatTypeHint, digestMethod, digestMethodTypeHint, signatureMethod, signatureMethodTypeHint, userIntermediatePath, userIntermediatePathTypeHint)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostConfigApacheFelixJettyBasedHttpService - 
func (c *SlingApiController) PostConfigApacheFelixJettyBasedHttpService(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	orgApacheFelixHttpsNio, err := parseBoolParameter(query.Get("org.apache.felix.https.nio"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	orgApacheFelixHttpsNioTypeHint := query.Get("org.apache.felix.https.nio@TypeHint")
	orgApacheFelixHttpsKeystore := query.Get("org.apache.felix.https.keystore")
	orgApacheFelixHttpsKeystoreTypeHint := query.Get("org.apache.felix.https.keystore@TypeHint")
	orgApacheFelixHttpsKeystorePassword := query.Get("org.apache.felix.https.keystore.password")
	orgApacheFelixHttpsKeystorePasswordTypeHint := query.Get("org.apache.felix.https.keystore.password@TypeHint")
	orgApacheFelixHttpsKeystoreKey := query.Get("org.apache.felix.https.keystore.key")
	orgApacheFelixHttpsKeystoreKeyTypeHint := query.Get("org.apache.felix.https.keystore.key@TypeHint")
	orgApacheFelixHttpsKeystoreKeyPassword := query.Get("org.apache.felix.https.keystore.key.password")
	orgApacheFelixHttpsKeystoreKeyPasswordTypeHint := query.Get("org.apache.felix.https.keystore.key.password@TypeHint")
	orgApacheFelixHttpsTruststore := query.Get("org.apache.felix.https.truststore")
	orgApacheFelixHttpsTruststoreTypeHint := query.Get("org.apache.felix.https.truststore@TypeHint")
	orgApacheFelixHttpsTruststorePassword := query.Get("org.apache.felix.https.truststore.password")
	orgApacheFelixHttpsTruststorePasswordTypeHint := query.Get("org.apache.felix.https.truststore.password@TypeHint")
	orgApacheFelixHttpsClientcertificate := query.Get("org.apache.felix.https.clientcertificate")
	orgApacheFelixHttpsClientcertificateTypeHint := query.Get("org.apache.felix.https.clientcertificate@TypeHint")
	orgApacheFelixHttpsEnable, err := parseBoolParameter(query.Get("org.apache.felix.https.enable"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	orgApacheFelixHttpsEnableTypeHint := query.Get("org.apache.felix.https.enable@TypeHint")
	orgOsgiServiceHttpPortSecure := query.Get("org.osgi.service.http.port.secure")
	orgOsgiServiceHttpPortSecureTypeHint := query.Get("org.osgi.service.http.port.secure@TypeHint")
	result, err := c.service.PostConfigApacheFelixJettyBasedHttpService(r.Context(), orgApacheFelixHttpsNio, orgApacheFelixHttpsNioTypeHint, orgApacheFelixHttpsKeystore, orgApacheFelixHttpsKeystoreTypeHint, orgApacheFelixHttpsKeystorePassword, orgApacheFelixHttpsKeystorePasswordTypeHint, orgApacheFelixHttpsKeystoreKey, orgApacheFelixHttpsKeystoreKeyTypeHint, orgApacheFelixHttpsKeystoreKeyPassword, orgApacheFelixHttpsKeystoreKeyPasswordTypeHint, orgApacheFelixHttpsTruststore, orgApacheFelixHttpsTruststoreTypeHint, orgApacheFelixHttpsTruststorePassword, orgApacheFelixHttpsTruststorePasswordTypeHint, orgApacheFelixHttpsClientcertificate, orgApacheFelixHttpsClientcertificateTypeHint, orgApacheFelixHttpsEnable, orgApacheFelixHttpsEnableTypeHint, orgOsgiServiceHttpPortSecure, orgOsgiServiceHttpPortSecureTypeHint)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostConfigApacheHttpComponentsProxyConfiguration - 
func (c *SlingApiController) PostConfigApacheHttpComponentsProxyConfiguration(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	proxyHost := query.Get("proxy.host")
	proxyHostTypeHint := query.Get("proxy.host@TypeHint")
	proxyPort, err := parseInt32Parameter(query.Get("proxy.port"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	proxyPortTypeHint := query.Get("proxy.port@TypeHint")
	proxyExceptions := strings.Split(query.Get("proxy.exceptions"), ",")
	proxyExceptionsTypeHint := query.Get("proxy.exceptions@TypeHint")
	proxyEnabled, err := parseBoolParameter(query.Get("proxy.enabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	proxyEnabledTypeHint := query.Get("proxy.enabled@TypeHint")
	proxyUser := query.Get("proxy.user")
	proxyUserTypeHint := query.Get("proxy.user@TypeHint")
	proxyPassword := query.Get("proxy.password")
	proxyPasswordTypeHint := query.Get("proxy.password@TypeHint")
	result, err := c.service.PostConfigApacheHttpComponentsProxyConfiguration(r.Context(), proxyHost, proxyHostTypeHint, proxyPort, proxyPortTypeHint, proxyExceptions, proxyExceptionsTypeHint, proxyEnabled, proxyEnabledTypeHint, proxyUser, proxyUserTypeHint, proxyPassword, proxyPasswordTypeHint)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostConfigApacheSlingDavExServlet - 
func (c *SlingApiController) PostConfigApacheSlingDavExServlet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	alias := query.Get("alias")
	aliasTypeHint := query.Get("alias@TypeHint")
	davCreateAbsoluteUri, err := parseBoolParameter(query.Get("dav.create-absolute-uri"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	davCreateAbsoluteUriTypeHint := query.Get("dav.create-absolute-uri@TypeHint")
	result, err := c.service.PostConfigApacheSlingDavExServlet(r.Context(), alias, aliasTypeHint, davCreateAbsoluteUri, davCreateAbsoluteUriTypeHint)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostConfigApacheSlingGetServlet - 
func (c *SlingApiController) PostConfigApacheSlingGetServlet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	jsonMaximumresults := query.Get("json.maximumresults")
	jsonMaximumresultsTypeHint := query.Get("json.maximumresults@TypeHint")
	enableHtml, err := parseBoolParameter(query.Get("enable.html"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	enableHtmlTypeHint := query.Get("enable.html@TypeHint")
	enableTxt, err := parseBoolParameter(query.Get("enable.txt"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	enableTxtTypeHint := query.Get("enable.txt@TypeHint")
	enableXml, err := parseBoolParameter(query.Get("enable.xml"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	enableXmlTypeHint := query.Get("enable.xml@TypeHint")
	result, err := c.service.PostConfigApacheSlingGetServlet(r.Context(), jsonMaximumresults, jsonMaximumresultsTypeHint, enableHtml, enableHtmlTypeHint, enableTxt, enableTxtTypeHint, enableXml, enableXmlTypeHint)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostConfigApacheSlingReferrerFilter - 
func (c *SlingApiController) PostConfigApacheSlingReferrerFilter(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	allowEmpty, err := parseBoolParameter(query.Get("allow.empty"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	allowEmptyTypeHint := query.Get("allow.empty@TypeHint")
	allowHosts := query.Get("allow.hosts")
	allowHostsTypeHint := query.Get("allow.hosts@TypeHint")
	allowHostsRegexp := query.Get("allow.hosts.regexp")
	allowHostsRegexpTypeHint := query.Get("allow.hosts.regexp@TypeHint")
	filterMethods := query.Get("filter.methods")
	filterMethodsTypeHint := query.Get("filter.methods@TypeHint")
	result, err := c.service.PostConfigApacheSlingReferrerFilter(r.Context(), allowEmpty, allowEmptyTypeHint, allowHosts, allowHostsTypeHint, allowHostsRegexp, allowHostsRegexpTypeHint, filterMethods, filterMethodsTypeHint)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostConfigProperty - 
func (c *SlingApiController) PostConfigProperty(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	configNodeName := params["configNodeName"]
	
	result, err := c.service.PostConfigProperty(r.Context(), configNodeName)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostNode - 
func (c *SlingApiController) PostNode(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseMultipartForm(32 << 20); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	query := r.URL.Query()
	path := params["path"]
	
	name := params["name"]
	
	operation := query.Get(":operation")
	deleteAuthorizable := query.Get("deleteAuthorizable")
	
	file, err := ReadFormFileToTempFile(r, "file")
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
			result, err := c.service.PostNode(r.Context(), path, name, operation, deleteAuthorizable, file)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostNodeRw - 
func (c *SlingApiController) PostNodeRw(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	path := params["path"]
	
	name := params["name"]
	
	addMembers := query.Get("addMembers")
	result, err := c.service.PostNodeRw(r.Context(), path, name, addMembers)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostPath - 
func (c *SlingApiController) PostPath(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	path := params["path"]
	
	jcrprimaryType := query.Get("jcr:primaryType")
	name := query.Get(":name")
	result, err := c.service.PostPath(r.Context(), path, jcrprimaryType, name)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostQuery - 
func (c *SlingApiController) PostQuery(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	path := query.Get("path")
	pLimit := query.Get("p.limit")
	var1Property := query.Get("1_property")
	var1PropertyValue := query.Get("1_property.value")
	result, err := c.service.PostQuery(r.Context(), path, pLimit, var1Property, var1PropertyValue)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostTreeActivation - 
func (c *SlingApiController) PostTreeActivation(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	ignoredeactivated, err := parseBoolParameter(query.Get("ignoredeactivated"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	onlymodified, err := parseBoolParameter(query.Get("onlymodified"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	path := query.Get("path")
	result, err := c.service.PostTreeActivation(r.Context(), ignoredeactivated, onlymodified, path)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostTruststore - 
func (c *SlingApiController) PostTruststore(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseMultipartForm(32 << 20); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	query := r.URL.Query()
	operation := query.Get(":operation")
	newPassword := query.Get("newPassword")
	rePassword := query.Get("rePassword")
	keyStoreType := query.Get("keyStoreType")
	removeAlias := query.Get("removeAlias")
	
	certificate, err := ReadFormFileToTempFile(r, "certificate")
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
			result, err := c.service.PostTruststore(r.Context(), operation, newPassword, rePassword, keyStoreType, removeAlias, certificate)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostTruststorePKCS12 - 
func (c *SlingApiController) PostTruststorePKCS12(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseMultipartForm(32 << 20); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	
	truststoreP12, err := ReadFormFileToTempFile(r, "truststore.p12")
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
			result, err := c.service.PostTruststorePKCS12(r.Context(), truststoreP12)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
