/*
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * API version: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CustomApiController binds http requests to an api service and writes the service results to the http response
type CustomApiController struct {
	service CustomApiServicer
	errorHandler ErrorHandler
}

// CustomApiOption for how the controller is set up.
type CustomApiOption func(*CustomApiController)

// WithCustomApiErrorHandler inject ErrorHandler into controller
func WithCustomApiErrorHandler(h ErrorHandler) CustomApiOption {
	return func(c *CustomApiController) {
		c.errorHandler = h
	}
}

// NewCustomApiController creates a default api controller
func NewCustomApiController(s CustomApiServicer, opts ...CustomApiOption) Router {
	controller := &CustomApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the CustomApiController
func (c *CustomApiController) Routes() Routes {
	return Routes{ 
		{
			"GetAemHealthCheck",
			strings.ToUpper("Get"),
			"/system/health",
			c.GetAemHealthCheck,
		},
		{
			"PostConfigAemHealthCheckServlet",
			strings.ToUpper("Post"),
			"/apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck",
			c.PostConfigAemHealthCheckServlet,
		},
		{
			"PostConfigAemPasswordReset",
			strings.ToUpper("Post"),
			"/apps/system/config/com.shinesolutions.aem.passwordreset.Activator",
			c.PostConfigAemPasswordReset,
		},
	}
}

// GetAemHealthCheck - 
func (c *CustomApiController) GetAemHealthCheck(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	tags := query.Get("tags")
	combineTagsOr, err := parseBoolParameter(query.Get("combineTagsOr"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	result, err := c.service.GetAemHealthCheck(r.Context(), tags, combineTagsOr)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostConfigAemHealthCheckServlet - 
func (c *CustomApiController) PostConfigAemHealthCheckServlet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	bundlesIgnored := strings.Split(query.Get("bundles.ignored"), ",")
	bundlesIgnoredTypeHint := query.Get("bundles.ignored@TypeHint")
	result, err := c.service.PostConfigAemHealthCheckServlet(r.Context(), bundlesIgnored, bundlesIgnoredTypeHint)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostConfigAemPasswordReset - 
func (c *CustomApiController) PostConfigAemPasswordReset(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	pwdresetAuthorizables := strings.Split(query.Get("pwdreset.authorizables"), ",")
	pwdresetAuthorizablesTypeHint := query.Get("pwdreset.authorizables@TypeHint")
	result, err := c.service.PostConfigAemPasswordReset(r.Context(), pwdresetAuthorizables, pwdresetAuthorizablesTypeHint)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
