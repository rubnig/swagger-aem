/*
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * API version: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CqApiController binds http requests to an api service and writes the service results to the http response
type CqApiController struct {
	service CqApiServicer
	errorHandler ErrorHandler
}

// CqApiOption for how the controller is set up.
type CqApiOption func(*CqApiController)

// WithCqApiErrorHandler inject ErrorHandler into controller
func WithCqApiErrorHandler(h ErrorHandler) CqApiOption {
	return func(c *CqApiController) {
		c.errorHandler = h
	}
}

// NewCqApiController creates a default api controller
func NewCqApiController(s CqApiServicer, opts ...CqApiOption) Router {
	controller := &CqApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the CqApiController
func (c *CqApiController) Routes() Routes {
	return Routes{ 
		{
			"GetLoginPage",
			strings.ToUpper("Get"),
			"/libs/granite/core/content/login.html",
			c.GetLoginPage,
		},
		{
			"PostCqActions",
			strings.ToUpper("Post"),
			"/.cqactions.html",
			c.PostCqActions,
		},
	}
}

// GetLoginPage - 
func (c *CqApiController) GetLoginPage(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetLoginPage(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostCqActions - 
func (c *CqApiController) PostCqActions(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	authorizableId := query.Get("authorizableId")
	changelog := query.Get("changelog")
	result, err := c.service.PostCqActions(r.Context(), authorizableId, changelog)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
