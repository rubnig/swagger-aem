<?php
/**
 * ConsoleApi
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ConsoleApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ConsoleApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAemProductInfo
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function getAemProductInfo()
    {
        list($response) = $this->getAemProductInfoWithHttpInfo();
        return $response;
    }

    /**
     * Operation getAemProductInfoWithHttpInfo
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAemProductInfoWithHttpInfo()
    {
        $request = $this->getAemProductInfoRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                default:
                    if ('string[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAemProductInfoAsync
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAemProductInfoAsync()
    {
        return $this->getAemProductInfoAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAemProductInfoAsyncWithHttpInfo
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAemProductInfoAsyncWithHttpInfo()
    {
        $returnType = 'string[]';
        $request = $this->getAemProductInfoRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAemProductInfo'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAemProductInfoRequest()
    {

        $resourcePath = '/system/console/status-productinfo.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBundleInfo
     *
     * @param  string $name name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BundleInfo|string
     */
    public function getBundleInfo($name)
    {
        list($response) = $this->getBundleInfoWithHttpInfo($name);
        return $response;
    }

    /**
     * Operation getBundleInfoWithHttpInfo
     *
     * @param  string $name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BundleInfo|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBundleInfoWithHttpInfo($name)
    {
        $request = $this->getBundleInfoRequest($name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BundleInfo' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BundleInfo', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BundleInfo';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BundleInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBundleInfoAsync
     *
     * @param  string $name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBundleInfoAsync($name)
    {
        return $this->getBundleInfoAsyncWithHttpInfo($name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBundleInfoAsyncWithHttpInfo
     *
     * @param  string $name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBundleInfoAsyncWithHttpInfo($name)
    {
        $returnType = '\OpenAPI\Client\Model\BundleInfo';
        $request = $this->getBundleInfoRequest($name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBundleInfo'
     *
     * @param  string $name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBundleInfoRequest($name)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getBundleInfo'
            );
        }

        $resourcePath = '/system/console/bundles/{name}.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConfigMgr
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getConfigMgr()
    {
        list($response) = $this->getConfigMgrWithHttpInfo();
        return $response;
    }

    /**
     * Operation getConfigMgrWithHttpInfo
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConfigMgrWithHttpInfo()
    {
        $request = $this->getConfigMgrRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConfigMgrAsync
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConfigMgrAsync()
    {
        return $this->getConfigMgrAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConfigMgrAsyncWithHttpInfo
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConfigMgrAsyncWithHttpInfo()
    {
        $returnType = 'string';
        $request = $this->getConfigMgrRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConfigMgr'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getConfigMgrRequest()
    {

        $resourcePath = '/system/console/configMgr';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postBundle
     *
     * @param  string $name name (required)
     * @param  string $action action (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postBundle($name, $action)
    {
        $this->postBundleWithHttpInfo($name, $action);
    }

    /**
     * Operation postBundleWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $action (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postBundleWithHttpInfo($name, $action)
    {
        $request = $this->postBundleRequest($name, $action);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postBundleAsync
     *
     * @param  string $name (required)
     * @param  string $action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postBundleAsync($name, $action)
    {
        return $this->postBundleAsyncWithHttpInfo($name, $action)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postBundleAsyncWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postBundleAsyncWithHttpInfo($name, $action)
    {
        $returnType = '';
        $request = $this->postBundleRequest($name, $action);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postBundle'
     *
     * @param  string $name (required)
     * @param  string $action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postBundleRequest($name, $action)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling postBundle'
            );
        }
        // verify the required parameter 'action' is set
        if ($action === null || (is_array($action) && count($action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $action when calling postBundle'
            );
        }

        $resourcePath = '/system/console/bundles/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($action !== null) {
            if('form' === 'form' && is_array($action)) {
                foreach($action as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['action'] = $action;
            }
        }


        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postJmxRepository
     *
     * @param  string $action action (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postJmxRepository($action)
    {
        $this->postJmxRepositoryWithHttpInfo($action);
    }

    /**
     * Operation postJmxRepositoryWithHttpInfo
     *
     * @param  string $action (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postJmxRepositoryWithHttpInfo($action)
    {
        $request = $this->postJmxRepositoryRequest($action);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postJmxRepositoryAsync
     *
     * @param  string $action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postJmxRepositoryAsync($action)
    {
        return $this->postJmxRepositoryAsyncWithHttpInfo($action)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postJmxRepositoryAsyncWithHttpInfo
     *
     * @param  string $action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postJmxRepositoryAsyncWithHttpInfo($action)
    {
        $returnType = '';
        $request = $this->postJmxRepositoryRequest($action);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postJmxRepository'
     *
     * @param  string $action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postJmxRepositoryRequest($action)
    {
        // verify the required parameter 'action' is set
        if ($action === null || (is_array($action) && count($action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $action when calling postJmxRepository'
            );
        }

        $resourcePath = '/system/console/jmx/com.adobe.granite:type=Repository/op/{action}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($action !== null) {
            $resourcePath = str_replace(
                '{' . 'action' . '}',
                ObjectSerializer::toPathValue($action),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postSamlConfiguration
     *
     * @param  bool $post post (optional)
     * @param  bool $apply apply (optional)
     * @param  bool $delete delete (optional)
     * @param  string $action action (optional)
     * @param  string $location location (optional)
     * @param  string[] $path path (optional)
     * @param  int $service_ranking service_ranking (optional)
     * @param  string $idp_url idp_url (optional)
     * @param  string $idp_cert_alias idp_cert_alias (optional)
     * @param  bool $idp_http_redirect idp_http_redirect (optional)
     * @param  string $service_provider_entity_id service_provider_entity_id (optional)
     * @param  string $assertion_consumer_service_url assertion_consumer_service_url (optional)
     * @param  string $sp_private_key_alias sp_private_key_alias (optional)
     * @param  string $key_store_password key_store_password (optional)
     * @param  string $default_redirect_url default_redirect_url (optional)
     * @param  string $user_id_attribute user_id_attribute (optional)
     * @param  bool $use_encryption use_encryption (optional)
     * @param  bool $create_user create_user (optional)
     * @param  bool $add_group_memberships add_group_memberships (optional)
     * @param  string $group_membership_attribute group_membership_attribute (optional)
     * @param  string[] $default_groups default_groups (optional)
     * @param  string $name_id_format name_id_format (optional)
     * @param  string[] $synchronize_attributes synchronize_attributes (optional)
     * @param  bool $handle_logout handle_logout (optional)
     * @param  string $logout_url logout_url (optional)
     * @param  int $clock_tolerance clock_tolerance (optional)
     * @param  string $digest_method digest_method (optional)
     * @param  string $signature_method signature_method (optional)
     * @param  string $user_intermediate_path user_intermediate_path (optional)
     * @param  string[] $propertylist propertylist (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SamlConfigurationInfo|string|string
     */
    public function postSamlConfiguration($post = null, $apply = null, $delete = null, $action = null, $location = null, $path = null, $service_ranking = null, $idp_url = null, $idp_cert_alias = null, $idp_http_redirect = null, $service_provider_entity_id = null, $assertion_consumer_service_url = null, $sp_private_key_alias = null, $key_store_password = null, $default_redirect_url = null, $user_id_attribute = null, $use_encryption = null, $create_user = null, $add_group_memberships = null, $group_membership_attribute = null, $default_groups = null, $name_id_format = null, $synchronize_attributes = null, $handle_logout = null, $logout_url = null, $clock_tolerance = null, $digest_method = null, $signature_method = null, $user_intermediate_path = null, $propertylist = null)
    {
        list($response) = $this->postSamlConfigurationWithHttpInfo($post, $apply, $delete, $action, $location, $path, $service_ranking, $idp_url, $idp_cert_alias, $idp_http_redirect, $service_provider_entity_id, $assertion_consumer_service_url, $sp_private_key_alias, $key_store_password, $default_redirect_url, $user_id_attribute, $use_encryption, $create_user, $add_group_memberships, $group_membership_attribute, $default_groups, $name_id_format, $synchronize_attributes, $handle_logout, $logout_url, $clock_tolerance, $digest_method, $signature_method, $user_intermediate_path, $propertylist);
        return $response;
    }

    /**
     * Operation postSamlConfigurationWithHttpInfo
     *
     * @param  bool $post (optional)
     * @param  bool $apply (optional)
     * @param  bool $delete (optional)
     * @param  string $action (optional)
     * @param  string $location (optional)
     * @param  string[] $path (optional)
     * @param  int $service_ranking (optional)
     * @param  string $idp_url (optional)
     * @param  string $idp_cert_alias (optional)
     * @param  bool $idp_http_redirect (optional)
     * @param  string $service_provider_entity_id (optional)
     * @param  string $assertion_consumer_service_url (optional)
     * @param  string $sp_private_key_alias (optional)
     * @param  string $key_store_password (optional)
     * @param  string $default_redirect_url (optional)
     * @param  string $user_id_attribute (optional)
     * @param  bool $use_encryption (optional)
     * @param  bool $create_user (optional)
     * @param  bool $add_group_memberships (optional)
     * @param  string $group_membership_attribute (optional)
     * @param  string[] $default_groups (optional)
     * @param  string $name_id_format (optional)
     * @param  string[] $synchronize_attributes (optional)
     * @param  bool $handle_logout (optional)
     * @param  string $logout_url (optional)
     * @param  int $clock_tolerance (optional)
     * @param  string $digest_method (optional)
     * @param  string $signature_method (optional)
     * @param  string $user_intermediate_path (optional)
     * @param  string[] $propertylist (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SamlConfigurationInfo|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function postSamlConfigurationWithHttpInfo($post = null, $apply = null, $delete = null, $action = null, $location = null, $path = null, $service_ranking = null, $idp_url = null, $idp_cert_alias = null, $idp_http_redirect = null, $service_provider_entity_id = null, $assertion_consumer_service_url = null, $sp_private_key_alias = null, $key_store_password = null, $default_redirect_url = null, $user_id_attribute = null, $use_encryption = null, $create_user = null, $add_group_memberships = null, $group_membership_attribute = null, $default_groups = null, $name_id_format = null, $synchronize_attributes = null, $handle_logout = null, $logout_url = null, $clock_tolerance = null, $digest_method = null, $signature_method = null, $user_intermediate_path = null, $propertylist = null)
    {
        $request = $this->postSamlConfigurationRequest($post, $apply, $delete, $action, $location, $path, $service_ranking, $idp_url, $idp_cert_alias, $idp_http_redirect, $service_provider_entity_id, $assertion_consumer_service_url, $sp_private_key_alias, $key_store_password, $default_redirect_url, $user_id_attribute, $use_encryption, $create_user, $add_group_memberships, $group_membership_attribute, $default_groups, $name_id_format, $synchronize_attributes, $handle_logout, $logout_url, $clock_tolerance, $digest_method, $signature_method, $user_intermediate_path, $propertylist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SamlConfigurationInfo' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SamlConfigurationInfo', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 302:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SamlConfigurationInfo';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SamlConfigurationInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 302:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postSamlConfigurationAsync
     *
     * @param  bool $post (optional)
     * @param  bool $apply (optional)
     * @param  bool $delete (optional)
     * @param  string $action (optional)
     * @param  string $location (optional)
     * @param  string[] $path (optional)
     * @param  int $service_ranking (optional)
     * @param  string $idp_url (optional)
     * @param  string $idp_cert_alias (optional)
     * @param  bool $idp_http_redirect (optional)
     * @param  string $service_provider_entity_id (optional)
     * @param  string $assertion_consumer_service_url (optional)
     * @param  string $sp_private_key_alias (optional)
     * @param  string $key_store_password (optional)
     * @param  string $default_redirect_url (optional)
     * @param  string $user_id_attribute (optional)
     * @param  bool $use_encryption (optional)
     * @param  bool $create_user (optional)
     * @param  bool $add_group_memberships (optional)
     * @param  string $group_membership_attribute (optional)
     * @param  string[] $default_groups (optional)
     * @param  string $name_id_format (optional)
     * @param  string[] $synchronize_attributes (optional)
     * @param  bool $handle_logout (optional)
     * @param  string $logout_url (optional)
     * @param  int $clock_tolerance (optional)
     * @param  string $digest_method (optional)
     * @param  string $signature_method (optional)
     * @param  string $user_intermediate_path (optional)
     * @param  string[] $propertylist (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSamlConfigurationAsync($post = null, $apply = null, $delete = null, $action = null, $location = null, $path = null, $service_ranking = null, $idp_url = null, $idp_cert_alias = null, $idp_http_redirect = null, $service_provider_entity_id = null, $assertion_consumer_service_url = null, $sp_private_key_alias = null, $key_store_password = null, $default_redirect_url = null, $user_id_attribute = null, $use_encryption = null, $create_user = null, $add_group_memberships = null, $group_membership_attribute = null, $default_groups = null, $name_id_format = null, $synchronize_attributes = null, $handle_logout = null, $logout_url = null, $clock_tolerance = null, $digest_method = null, $signature_method = null, $user_intermediate_path = null, $propertylist = null)
    {
        return $this->postSamlConfigurationAsyncWithHttpInfo($post, $apply, $delete, $action, $location, $path, $service_ranking, $idp_url, $idp_cert_alias, $idp_http_redirect, $service_provider_entity_id, $assertion_consumer_service_url, $sp_private_key_alias, $key_store_password, $default_redirect_url, $user_id_attribute, $use_encryption, $create_user, $add_group_memberships, $group_membership_attribute, $default_groups, $name_id_format, $synchronize_attributes, $handle_logout, $logout_url, $clock_tolerance, $digest_method, $signature_method, $user_intermediate_path, $propertylist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postSamlConfigurationAsyncWithHttpInfo
     *
     * @param  bool $post (optional)
     * @param  bool $apply (optional)
     * @param  bool $delete (optional)
     * @param  string $action (optional)
     * @param  string $location (optional)
     * @param  string[] $path (optional)
     * @param  int $service_ranking (optional)
     * @param  string $idp_url (optional)
     * @param  string $idp_cert_alias (optional)
     * @param  bool $idp_http_redirect (optional)
     * @param  string $service_provider_entity_id (optional)
     * @param  string $assertion_consumer_service_url (optional)
     * @param  string $sp_private_key_alias (optional)
     * @param  string $key_store_password (optional)
     * @param  string $default_redirect_url (optional)
     * @param  string $user_id_attribute (optional)
     * @param  bool $use_encryption (optional)
     * @param  bool $create_user (optional)
     * @param  bool $add_group_memberships (optional)
     * @param  string $group_membership_attribute (optional)
     * @param  string[] $default_groups (optional)
     * @param  string $name_id_format (optional)
     * @param  string[] $synchronize_attributes (optional)
     * @param  bool $handle_logout (optional)
     * @param  string $logout_url (optional)
     * @param  int $clock_tolerance (optional)
     * @param  string $digest_method (optional)
     * @param  string $signature_method (optional)
     * @param  string $user_intermediate_path (optional)
     * @param  string[] $propertylist (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSamlConfigurationAsyncWithHttpInfo($post = null, $apply = null, $delete = null, $action = null, $location = null, $path = null, $service_ranking = null, $idp_url = null, $idp_cert_alias = null, $idp_http_redirect = null, $service_provider_entity_id = null, $assertion_consumer_service_url = null, $sp_private_key_alias = null, $key_store_password = null, $default_redirect_url = null, $user_id_attribute = null, $use_encryption = null, $create_user = null, $add_group_memberships = null, $group_membership_attribute = null, $default_groups = null, $name_id_format = null, $synchronize_attributes = null, $handle_logout = null, $logout_url = null, $clock_tolerance = null, $digest_method = null, $signature_method = null, $user_intermediate_path = null, $propertylist = null)
    {
        $returnType = '\OpenAPI\Client\Model\SamlConfigurationInfo';
        $request = $this->postSamlConfigurationRequest($post, $apply, $delete, $action, $location, $path, $service_ranking, $idp_url, $idp_cert_alias, $idp_http_redirect, $service_provider_entity_id, $assertion_consumer_service_url, $sp_private_key_alias, $key_store_password, $default_redirect_url, $user_id_attribute, $use_encryption, $create_user, $add_group_memberships, $group_membership_attribute, $default_groups, $name_id_format, $synchronize_attributes, $handle_logout, $logout_url, $clock_tolerance, $digest_method, $signature_method, $user_intermediate_path, $propertylist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postSamlConfiguration'
     *
     * @param  bool $post (optional)
     * @param  bool $apply (optional)
     * @param  bool $delete (optional)
     * @param  string $action (optional)
     * @param  string $location (optional)
     * @param  string[] $path (optional)
     * @param  int $service_ranking (optional)
     * @param  string $idp_url (optional)
     * @param  string $idp_cert_alias (optional)
     * @param  bool $idp_http_redirect (optional)
     * @param  string $service_provider_entity_id (optional)
     * @param  string $assertion_consumer_service_url (optional)
     * @param  string $sp_private_key_alias (optional)
     * @param  string $key_store_password (optional)
     * @param  string $default_redirect_url (optional)
     * @param  string $user_id_attribute (optional)
     * @param  bool $use_encryption (optional)
     * @param  bool $create_user (optional)
     * @param  bool $add_group_memberships (optional)
     * @param  string $group_membership_attribute (optional)
     * @param  string[] $default_groups (optional)
     * @param  string $name_id_format (optional)
     * @param  string[] $synchronize_attributes (optional)
     * @param  bool $handle_logout (optional)
     * @param  string $logout_url (optional)
     * @param  int $clock_tolerance (optional)
     * @param  string $digest_method (optional)
     * @param  string $signature_method (optional)
     * @param  string $user_intermediate_path (optional)
     * @param  string[] $propertylist (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postSamlConfigurationRequest($post = null, $apply = null, $delete = null, $action = null, $location = null, $path = null, $service_ranking = null, $idp_url = null, $idp_cert_alias = null, $idp_http_redirect = null, $service_provider_entity_id = null, $assertion_consumer_service_url = null, $sp_private_key_alias = null, $key_store_password = null, $default_redirect_url = null, $user_id_attribute = null, $use_encryption = null, $create_user = null, $add_group_memberships = null, $group_membership_attribute = null, $default_groups = null, $name_id_format = null, $synchronize_attributes = null, $handle_logout = null, $logout_url = null, $clock_tolerance = null, $digest_method = null, $signature_method = null, $user_intermediate_path = null, $propertylist = null)
    {

        $resourcePath = '/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($post !== null) {
            if('form' === 'form' && is_array($post)) {
                foreach($post as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['post'] = $post;
            }
        }
        // query params
        if ($apply !== null) {
            if('form' === 'form' && is_array($apply)) {
                foreach($apply as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['apply'] = $apply;
            }
        }
        // query params
        if ($delete !== null) {
            if('form' === 'form' && is_array($delete)) {
                foreach($delete as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['delete'] = $delete;
            }
        }
        // query params
        if ($action !== null) {
            if('form' === 'form' && is_array($action)) {
                foreach($action as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['action'] = $action;
            }
        }
        // query params
        if ($location !== null) {
            if('form' === 'form' && is_array($location)) {
                foreach($location as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$location'] = $location;
            }
        }
        // query params
        if ($path !== null) {
            if('form' === 'form' && is_array($path)) {
                foreach($path as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['path'] = $path;
            }
        }
        // query params
        if ($service_ranking !== null) {
            if('form' === 'form' && is_array($service_ranking)) {
                foreach($service_ranking as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['service.ranking'] = $service_ranking;
            }
        }
        // query params
        if ($idp_url !== null) {
            if('form' === 'form' && is_array($idp_url)) {
                foreach($idp_url as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['idpUrl'] = $idp_url;
            }
        }
        // query params
        if ($idp_cert_alias !== null) {
            if('form' === 'form' && is_array($idp_cert_alias)) {
                foreach($idp_cert_alias as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['idpCertAlias'] = $idp_cert_alias;
            }
        }
        // query params
        if ($idp_http_redirect !== null) {
            if('form' === 'form' && is_array($idp_http_redirect)) {
                foreach($idp_http_redirect as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['idpHttpRedirect'] = $idp_http_redirect;
            }
        }
        // query params
        if ($service_provider_entity_id !== null) {
            if('form' === 'form' && is_array($service_provider_entity_id)) {
                foreach($service_provider_entity_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['serviceProviderEntityId'] = $service_provider_entity_id;
            }
        }
        // query params
        if ($assertion_consumer_service_url !== null) {
            if('form' === 'form' && is_array($assertion_consumer_service_url)) {
                foreach($assertion_consumer_service_url as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['assertionConsumerServiceURL'] = $assertion_consumer_service_url;
            }
        }
        // query params
        if ($sp_private_key_alias !== null) {
            if('form' === 'form' && is_array($sp_private_key_alias)) {
                foreach($sp_private_key_alias as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['spPrivateKeyAlias'] = $sp_private_key_alias;
            }
        }
        // query params
        if ($key_store_password !== null) {
            if('form' === 'form' && is_array($key_store_password)) {
                foreach($key_store_password as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['keyStorePassword'] = $key_store_password;
            }
        }
        // query params
        if ($default_redirect_url !== null) {
            if('form' === 'form' && is_array($default_redirect_url)) {
                foreach($default_redirect_url as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['defaultRedirectUrl'] = $default_redirect_url;
            }
        }
        // query params
        if ($user_id_attribute !== null) {
            if('form' === 'form' && is_array($user_id_attribute)) {
                foreach($user_id_attribute as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userIDAttribute'] = $user_id_attribute;
            }
        }
        // query params
        if ($use_encryption !== null) {
            if('form' === 'form' && is_array($use_encryption)) {
                foreach($use_encryption as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['useEncryption'] = $use_encryption;
            }
        }
        // query params
        if ($create_user !== null) {
            if('form' === 'form' && is_array($create_user)) {
                foreach($create_user as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['createUser'] = $create_user;
            }
        }
        // query params
        if ($add_group_memberships !== null) {
            if('form' === 'form' && is_array($add_group_memberships)) {
                foreach($add_group_memberships as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['addGroupMemberships'] = $add_group_memberships;
            }
        }
        // query params
        if ($group_membership_attribute !== null) {
            if('form' === 'form' && is_array($group_membership_attribute)) {
                foreach($group_membership_attribute as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['groupMembershipAttribute'] = $group_membership_attribute;
            }
        }
        // query params
        if ($default_groups !== null) {
            if('form' === 'form' && is_array($default_groups)) {
                foreach($default_groups as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['defaultGroups'] = $default_groups;
            }
        }
        // query params
        if ($name_id_format !== null) {
            if('form' === 'form' && is_array($name_id_format)) {
                foreach($name_id_format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['nameIdFormat'] = $name_id_format;
            }
        }
        // query params
        if ($synchronize_attributes !== null) {
            if('form' === 'form' && is_array($synchronize_attributes)) {
                foreach($synchronize_attributes as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['synchronizeAttributes'] = $synchronize_attributes;
            }
        }
        // query params
        if ($handle_logout !== null) {
            if('form' === 'form' && is_array($handle_logout)) {
                foreach($handle_logout as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['handleLogout'] = $handle_logout;
            }
        }
        // query params
        if ($logout_url !== null) {
            if('form' === 'form' && is_array($logout_url)) {
                foreach($logout_url as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['logoutUrl'] = $logout_url;
            }
        }
        // query params
        if ($clock_tolerance !== null) {
            if('form' === 'form' && is_array($clock_tolerance)) {
                foreach($clock_tolerance as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['clockTolerance'] = $clock_tolerance;
            }
        }
        // query params
        if ($digest_method !== null) {
            if('form' === 'form' && is_array($digest_method)) {
                foreach($digest_method as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['digestMethod'] = $digest_method;
            }
        }
        // query params
        if ($signature_method !== null) {
            if('form' === 'form' && is_array($signature_method)) {
                foreach($signature_method as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['signatureMethod'] = $signature_method;
            }
        }
        // query params
        if ($user_intermediate_path !== null) {
            if('form' === 'form' && is_array($user_intermediate_path)) {
                foreach($user_intermediate_path as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userIntermediatePath'] = $user_intermediate_path;
            }
        }
        // query params
        if (is_array($propertylist)) {
            $propertylist = ObjectSerializer::serializeCollection($propertylist, 'form', true);
        }
        if ($propertylist !== null) {
            $queryParams['propertylist'] = $propertylist;
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
