<?php
/**
 * SlingApi
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * SlingApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SlingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteAgent
     *
     * @param  string $runmode runmode (required)
     * @param  string $name name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAgent($runmode, $name)
    {
        $this->deleteAgentWithHttpInfo($runmode, $name);
    }

    /**
     * Operation deleteAgentWithHttpInfo
     *
     * @param  string $runmode (required)
     * @param  string $name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAgentWithHttpInfo($runmode, $name)
    {
        $request = $this->deleteAgentRequest($runmode, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAgentAsync
     *
     * @param  string $runmode (required)
     * @param  string $name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAgentAsync($runmode, $name)
    {
        return $this->deleteAgentAsyncWithHttpInfo($runmode, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAgentAsyncWithHttpInfo
     *
     * @param  string $runmode (required)
     * @param  string $name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAgentAsyncWithHttpInfo($runmode, $name)
    {
        $returnType = '';
        $request = $this->deleteAgentRequest($runmode, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAgent'
     *
     * @param  string $runmode (required)
     * @param  string $name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAgentRequest($runmode, $name)
    {
        // verify the required parameter 'runmode' is set
        if ($runmode === null || (is_array($runmode) && count($runmode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $runmode when calling deleteAgent'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling deleteAgent'
            );
        }

        $resourcePath = '/etc/replication/agents.{runmode}/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($runmode !== null) {
            $resourcePath = str_replace(
                '{' . 'runmode' . '}',
                ObjectSerializer::toPathValue($runmode),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteNode
     *
     * @param  string $path path (required)
     * @param  string $name name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteNode($path, $name)
    {
        $this->deleteNodeWithHttpInfo($path, $name);
    }

    /**
     * Operation deleteNodeWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNodeWithHttpInfo($path, $name)
    {
        $request = $this->deleteNodeRequest($path, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteNodeAsync
     *
     * @param  string $path (required)
     * @param  string $name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNodeAsync($path, $name)
    {
        return $this->deleteNodeAsyncWithHttpInfo($path, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteNodeAsyncWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNodeAsyncWithHttpInfo($path, $name)
    {
        $returnType = '';
        $request = $this->deleteNodeRequest($path, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteNode'
     *
     * @param  string $path (required)
     * @param  string $name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteNodeRequest($path, $name)
    {
        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling deleteNode'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling deleteNode'
            );
        }

        $resourcePath = '/{path}/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($path !== null) {
            $resourcePath = str_replace(
                '{' . 'path' . '}',
                ObjectSerializer::toPathValue($path),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAgent
     *
     * @param  string $runmode runmode (required)
     * @param  string $name name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getAgent($runmode, $name)
    {
        $this->getAgentWithHttpInfo($runmode, $name);
    }

    /**
     * Operation getAgentWithHttpInfo
     *
     * @param  string $runmode (required)
     * @param  string $name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAgentWithHttpInfo($runmode, $name)
    {
        $request = $this->getAgentRequest($runmode, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getAgentAsync
     *
     * @param  string $runmode (required)
     * @param  string $name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAgentAsync($runmode, $name)
    {
        return $this->getAgentAsyncWithHttpInfo($runmode, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAgentAsyncWithHttpInfo
     *
     * @param  string $runmode (required)
     * @param  string $name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAgentAsyncWithHttpInfo($runmode, $name)
    {
        $returnType = '';
        $request = $this->getAgentRequest($runmode, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAgent'
     *
     * @param  string $runmode (required)
     * @param  string $name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAgentRequest($runmode, $name)
    {
        // verify the required parameter 'runmode' is set
        if ($runmode === null || (is_array($runmode) && count($runmode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $runmode when calling getAgent'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getAgent'
            );
        }

        $resourcePath = '/etc/replication/agents.{runmode}/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($runmode !== null) {
            $resourcePath = str_replace(
                '{' . 'runmode' . '}',
                ObjectSerializer::toPathValue($runmode),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAgents
     *
     * @param  string $runmode runmode (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getAgents($runmode)
    {
        list($response) = $this->getAgentsWithHttpInfo($runmode);
        return $response;
    }

    /**
     * Operation getAgentsWithHttpInfo
     *
     * @param  string $runmode (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAgentsWithHttpInfo($runmode)
    {
        $request = $this->getAgentsRequest($runmode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                default:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAgentsAsync
     *
     * @param  string $runmode (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAgentsAsync($runmode)
    {
        return $this->getAgentsAsyncWithHttpInfo($runmode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAgentsAsyncWithHttpInfo
     *
     * @param  string $runmode (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAgentsAsyncWithHttpInfo($runmode)
    {
        $returnType = 'string';
        $request = $this->getAgentsRequest($runmode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAgents'
     *
     * @param  string $runmode (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAgentsRequest($runmode)
    {
        // verify the required parameter 'runmode' is set
        if ($runmode === null || (is_array($runmode) && count($runmode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $runmode when calling getAgents'
            );
        }

        $resourcePath = '/etc/replication/agents.{runmode}.-1.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($runmode !== null) {
            $resourcePath = str_replace(
                '{' . 'runmode' . '}',
                ObjectSerializer::toPathValue($runmode),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAuthorizableKeystore
     *
     * @param  string $intermediate_path intermediate_path (required)
     * @param  string $authorizable_id authorizable_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\KeystoreInfo|string
     */
    public function getAuthorizableKeystore($intermediate_path, $authorizable_id)
    {
        list($response) = $this->getAuthorizableKeystoreWithHttpInfo($intermediate_path, $authorizable_id);
        return $response;
    }

    /**
     * Operation getAuthorizableKeystoreWithHttpInfo
     *
     * @param  string $intermediate_path (required)
     * @param  string $authorizable_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\KeystoreInfo|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAuthorizableKeystoreWithHttpInfo($intermediate_path, $authorizable_id)
    {
        $request = $this->getAuthorizableKeystoreRequest($intermediate_path, $authorizable_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\KeystoreInfo' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\KeystoreInfo', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\KeystoreInfo';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\KeystoreInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAuthorizableKeystoreAsync
     *
     * @param  string $intermediate_path (required)
     * @param  string $authorizable_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAuthorizableKeystoreAsync($intermediate_path, $authorizable_id)
    {
        return $this->getAuthorizableKeystoreAsyncWithHttpInfo($intermediate_path, $authorizable_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAuthorizableKeystoreAsyncWithHttpInfo
     *
     * @param  string $intermediate_path (required)
     * @param  string $authorizable_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAuthorizableKeystoreAsyncWithHttpInfo($intermediate_path, $authorizable_id)
    {
        $returnType = '\OpenAPI\Client\Model\KeystoreInfo';
        $request = $this->getAuthorizableKeystoreRequest($intermediate_path, $authorizable_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAuthorizableKeystore'
     *
     * @param  string $intermediate_path (required)
     * @param  string $authorizable_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAuthorizableKeystoreRequest($intermediate_path, $authorizable_id)
    {
        // verify the required parameter 'intermediate_path' is set
        if ($intermediate_path === null || (is_array($intermediate_path) && count($intermediate_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $intermediate_path when calling getAuthorizableKeystore'
            );
        }
        // verify the required parameter 'authorizable_id' is set
        if ($authorizable_id === null || (is_array($authorizable_id) && count($authorizable_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorizable_id when calling getAuthorizableKeystore'
            );
        }

        $resourcePath = '/{intermediatePath}/{authorizableId}.ks.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($intermediate_path !== null) {
            $resourcePath = str_replace(
                '{' . 'intermediatePath' . '}',
                ObjectSerializer::toPathValue($intermediate_path),
                $resourcePath
            );
        }
        // path params
        if ($authorizable_id !== null) {
            $resourcePath = str_replace(
                '{' . 'authorizableId' . '}',
                ObjectSerializer::toPathValue($authorizable_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getKeystore
     *
     * @param  string $intermediate_path intermediate_path (required)
     * @param  string $authorizable_id authorizable_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function getKeystore($intermediate_path, $authorizable_id)
    {
        list($response) = $this->getKeystoreWithHttpInfo($intermediate_path, $authorizable_id);
        return $response;
    }

    /**
     * Operation getKeystoreWithHttpInfo
     *
     * @param  string $intermediate_path (required)
     * @param  string $authorizable_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getKeystoreWithHttpInfo($intermediate_path, $authorizable_id)
    {
        $request = $this->getKeystoreRequest($intermediate_path, $authorizable_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                default:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getKeystoreAsync
     *
     * @param  string $intermediate_path (required)
     * @param  string $authorizable_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getKeystoreAsync($intermediate_path, $authorizable_id)
    {
        return $this->getKeystoreAsyncWithHttpInfo($intermediate_path, $authorizable_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getKeystoreAsyncWithHttpInfo
     *
     * @param  string $intermediate_path (required)
     * @param  string $authorizable_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getKeystoreAsyncWithHttpInfo($intermediate_path, $authorizable_id)
    {
        $returnType = '\SplFileObject';
        $request = $this->getKeystoreRequest($intermediate_path, $authorizable_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getKeystore'
     *
     * @param  string $intermediate_path (required)
     * @param  string $authorizable_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getKeystoreRequest($intermediate_path, $authorizable_id)
    {
        // verify the required parameter 'intermediate_path' is set
        if ($intermediate_path === null || (is_array($intermediate_path) && count($intermediate_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $intermediate_path when calling getKeystore'
            );
        }
        // verify the required parameter 'authorizable_id' is set
        if ($authorizable_id === null || (is_array($authorizable_id) && count($authorizable_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorizable_id when calling getKeystore'
            );
        }

        $resourcePath = '/{intermediatePath}/{authorizableId}/keystore/store.p12';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($intermediate_path !== null) {
            $resourcePath = str_replace(
                '{' . 'intermediatePath' . '}',
                ObjectSerializer::toPathValue($intermediate_path),
                $resourcePath
            );
        }
        // path params
        if ($authorizable_id !== null) {
            $resourcePath = str_replace(
                '{' . 'authorizableId' . '}',
                ObjectSerializer::toPathValue($authorizable_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNode
     *
     * @param  string $path path (required)
     * @param  string $name name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getNode($path, $name)
    {
        $this->getNodeWithHttpInfo($path, $name);
    }

    /**
     * Operation getNodeWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNodeWithHttpInfo($path, $name)
    {
        $request = $this->getNodeRequest($path, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getNodeAsync
     *
     * @param  string $path (required)
     * @param  string $name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNodeAsync($path, $name)
    {
        return $this->getNodeAsyncWithHttpInfo($path, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNodeAsyncWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNodeAsyncWithHttpInfo($path, $name)
    {
        $returnType = '';
        $request = $this->getNodeRequest($path, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNode'
     *
     * @param  string $path (required)
     * @param  string $name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNodeRequest($path, $name)
    {
        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling getNode'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getNode'
            );
        }

        $resourcePath = '/{path}/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($path !== null) {
            $resourcePath = str_replace(
                '{' . 'path' . '}',
                ObjectSerializer::toPathValue($path),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPackage
     *
     * @param  string $group group (required)
     * @param  string $name name (required)
     * @param  string $version version (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function getPackage($group, $name, $version)
    {
        list($response) = $this->getPackageWithHttpInfo($group, $name, $version);
        return $response;
    }

    /**
     * Operation getPackageWithHttpInfo
     *
     * @param  string $group (required)
     * @param  string $name (required)
     * @param  string $version (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPackageWithHttpInfo($group, $name, $version)
    {
        $request = $this->getPackageRequest($group, $name, $version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                default:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPackageAsync
     *
     * @param  string $group (required)
     * @param  string $name (required)
     * @param  string $version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPackageAsync($group, $name, $version)
    {
        return $this->getPackageAsyncWithHttpInfo($group, $name, $version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPackageAsyncWithHttpInfo
     *
     * @param  string $group (required)
     * @param  string $name (required)
     * @param  string $version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPackageAsyncWithHttpInfo($group, $name, $version)
    {
        $returnType = '\SplFileObject';
        $request = $this->getPackageRequest($group, $name, $version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPackage'
     *
     * @param  string $group (required)
     * @param  string $name (required)
     * @param  string $version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPackageRequest($group, $name, $version)
    {
        // verify the required parameter 'group' is set
        if ($group === null || (is_array($group) && count($group) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group when calling getPackage'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getPackage'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling getPackage'
            );
        }

        $resourcePath = '/etc/packages/{group}/{name}-{version}.zip';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group !== null) {
            $resourcePath = str_replace(
                '{' . 'group' . '}',
                ObjectSerializer::toPathValue($group),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPackageFilter
     *
     * @param  string $group group (required)
     * @param  string $name name (required)
     * @param  string $version version (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getPackageFilter($group, $name, $version)
    {
        list($response) = $this->getPackageFilterWithHttpInfo($group, $name, $version);
        return $response;
    }

    /**
     * Operation getPackageFilterWithHttpInfo
     *
     * @param  string $group (required)
     * @param  string $name (required)
     * @param  string $version (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPackageFilterWithHttpInfo($group, $name, $version)
    {
        $request = $this->getPackageFilterRequest($group, $name, $version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                default:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPackageFilterAsync
     *
     * @param  string $group (required)
     * @param  string $name (required)
     * @param  string $version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPackageFilterAsync($group, $name, $version)
    {
        return $this->getPackageFilterAsyncWithHttpInfo($group, $name, $version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPackageFilterAsyncWithHttpInfo
     *
     * @param  string $group (required)
     * @param  string $name (required)
     * @param  string $version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPackageFilterAsyncWithHttpInfo($group, $name, $version)
    {
        $returnType = 'string';
        $request = $this->getPackageFilterRequest($group, $name, $version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPackageFilter'
     *
     * @param  string $group (required)
     * @param  string $name (required)
     * @param  string $version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPackageFilterRequest($group, $name, $version)
    {
        // verify the required parameter 'group' is set
        if ($group === null || (is_array($group) && count($group) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group when calling getPackageFilter'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getPackageFilter'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling getPackageFilter'
            );
        }

        $resourcePath = '/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group !== null) {
            $resourcePath = str_replace(
                '{' . 'group' . '}',
                ObjectSerializer::toPathValue($group),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQuery
     *
     * @param  string $path path (required)
     * @param  float $p_limit p_limit (required)
     * @param  string $_1_property _1_property (required)
     * @param  string $_1_property_value _1_property_value (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getQuery($path, $p_limit, $_1_property, $_1_property_value)
    {
        list($response) = $this->getQueryWithHttpInfo($path, $p_limit, $_1_property, $_1_property_value);
        return $response;
    }

    /**
     * Operation getQueryWithHttpInfo
     *
     * @param  string $path (required)
     * @param  float $p_limit (required)
     * @param  string $_1_property (required)
     * @param  string $_1_property_value (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQueryWithHttpInfo($path, $p_limit, $_1_property, $_1_property_value)
    {
        $request = $this->getQueryRequest($path, $p_limit, $_1_property, $_1_property_value);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                default:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQueryAsync
     *
     * @param  string $path (required)
     * @param  float $p_limit (required)
     * @param  string $_1_property (required)
     * @param  string $_1_property_value (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQueryAsync($path, $p_limit, $_1_property, $_1_property_value)
    {
        return $this->getQueryAsyncWithHttpInfo($path, $p_limit, $_1_property, $_1_property_value)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQueryAsyncWithHttpInfo
     *
     * @param  string $path (required)
     * @param  float $p_limit (required)
     * @param  string $_1_property (required)
     * @param  string $_1_property_value (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQueryAsyncWithHttpInfo($path, $p_limit, $_1_property, $_1_property_value)
    {
        $returnType = 'string';
        $request = $this->getQueryRequest($path, $p_limit, $_1_property, $_1_property_value);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQuery'
     *
     * @param  string $path (required)
     * @param  float $p_limit (required)
     * @param  string $_1_property (required)
     * @param  string $_1_property_value (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getQueryRequest($path, $p_limit, $_1_property, $_1_property_value)
    {
        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling getQuery'
            );
        }
        // verify the required parameter 'p_limit' is set
        if ($p_limit === null || (is_array($p_limit) && count($p_limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $p_limit when calling getQuery'
            );
        }
        // verify the required parameter '_1_property' is set
        if ($_1_property === null || (is_array($_1_property) && count($_1_property) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $_1_property when calling getQuery'
            );
        }
        // verify the required parameter '_1_property_value' is set
        if ($_1_property_value === null || (is_array($_1_property_value) && count($_1_property_value) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $_1_property_value when calling getQuery'
            );
        }

        $resourcePath = '/bin/querybuilder.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($path !== null) {
            if('form' === 'form' && is_array($path)) {
                foreach($path as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['path'] = $path;
            }
        }
        // query params
        if ($p_limit !== null) {
            if('form' === 'form' && is_array($p_limit)) {
                foreach($p_limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['p.limit'] = $p_limit;
            }
        }
        // query params
        if ($_1_property !== null) {
            if('form' === 'form' && is_array($_1_property)) {
                foreach($_1_property as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['1_property'] = $_1_property;
            }
        }
        // query params
        if ($_1_property_value !== null) {
            if('form' === 'form' && is_array($_1_property_value)) {
                foreach($_1_property_value as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['1_property.value'] = $_1_property_value;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTruststore
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function getTruststore()
    {
        list($response) = $this->getTruststoreWithHttpInfo();
        return $response;
    }

    /**
     * Operation getTruststoreWithHttpInfo
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTruststoreWithHttpInfo()
    {
        $request = $this->getTruststoreRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                default:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTruststoreAsync
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTruststoreAsync()
    {
        return $this->getTruststoreAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTruststoreAsyncWithHttpInfo
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTruststoreAsyncWithHttpInfo()
    {
        $returnType = '\SplFileObject';
        $request = $this->getTruststoreRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTruststore'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTruststoreRequest()
    {

        $resourcePath = '/etc/truststore/truststore.p12';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTruststoreInfo
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TruststoreInfo|string
     */
    public function getTruststoreInfo()
    {
        list($response) = $this->getTruststoreInfoWithHttpInfo();
        return $response;
    }

    /**
     * Operation getTruststoreInfoWithHttpInfo
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TruststoreInfo|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTruststoreInfoWithHttpInfo()
    {
        $request = $this->getTruststoreInfoRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TruststoreInfo' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TruststoreInfo', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TruststoreInfo';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TruststoreInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTruststoreInfoAsync
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTruststoreInfoAsync()
    {
        return $this->getTruststoreInfoAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTruststoreInfoAsyncWithHttpInfo
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTruststoreInfoAsyncWithHttpInfo()
    {
        $returnType = '\OpenAPI\Client\Model\TruststoreInfo';
        $request = $this->getTruststoreInfoRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTruststoreInfo'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTruststoreInfoRequest()
    {

        $resourcePath = '/libs/granite/security/truststore.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postAgent
     *
     * @param  string $runmode runmode (required)
     * @param  string $name name (required)
     * @param  bool $jcrcontent_cqdistribute jcrcontent_cqdistribute (optional)
     * @param  string $jcrcontent_cqdistribute_type_hint jcrcontent_cqdistribute_type_hint (optional)
     * @param  string $jcrcontent_cqname jcrcontent_cqname (optional)
     * @param  string $jcrcontent_cqtemplate jcrcontent_cqtemplate (optional)
     * @param  bool $jcrcontent_enabled jcrcontent_enabled (optional)
     * @param  string $jcrcontent_jcrdescription jcrcontent_jcrdescription (optional)
     * @param  string $jcrcontent_jcrlast_modified jcrcontent_jcrlast_modified (optional)
     * @param  string $jcrcontent_jcrlast_modified_by jcrcontent_jcrlast_modified_by (optional)
     * @param  string $jcrcontent_jcrmixin_types jcrcontent_jcrmixin_types (optional)
     * @param  string $jcrcontent_jcrtitle jcrcontent_jcrtitle (optional)
     * @param  string $jcrcontent_log_level jcrcontent_log_level (optional)
     * @param  bool $jcrcontent_no_status_update jcrcontent_no_status_update (optional)
     * @param  bool $jcrcontent_no_versioning jcrcontent_no_versioning (optional)
     * @param  float $jcrcontent_protocol_connect_timeout jcrcontent_protocol_connect_timeout (optional)
     * @param  bool $jcrcontent_protocol_http_connection_closed jcrcontent_protocol_http_connection_closed (optional)
     * @param  string $jcrcontent_protocol_http_expired jcrcontent_protocol_http_expired (optional)
     * @param  string[] $jcrcontent_protocol_http_headers jcrcontent_protocol_http_headers (optional)
     * @param  string $jcrcontent_protocol_http_headers_type_hint jcrcontent_protocol_http_headers_type_hint (optional)
     * @param  string $jcrcontent_protocol_http_method jcrcontent_protocol_http_method (optional)
     * @param  bool $jcrcontent_protocol_https_relaxed jcrcontent_protocol_https_relaxed (optional)
     * @param  string $jcrcontent_protocol_interface jcrcontent_protocol_interface (optional)
     * @param  float $jcrcontent_protocol_socket_timeout jcrcontent_protocol_socket_timeout (optional)
     * @param  string $jcrcontent_protocol_version jcrcontent_protocol_version (optional)
     * @param  string $jcrcontent_proxy_ntlm_domain jcrcontent_proxy_ntlm_domain (optional)
     * @param  string $jcrcontent_proxy_ntlm_host jcrcontent_proxy_ntlm_host (optional)
     * @param  string $jcrcontent_proxy_host jcrcontent_proxy_host (optional)
     * @param  string $jcrcontent_proxy_password jcrcontent_proxy_password (optional)
     * @param  float $jcrcontent_proxy_port jcrcontent_proxy_port (optional)
     * @param  string $jcrcontent_proxy_user jcrcontent_proxy_user (optional)
     * @param  float $jcrcontent_queue_batch_max_size jcrcontent_queue_batch_max_size (optional)
     * @param  string $jcrcontent_queue_batch_mode jcrcontent_queue_batch_mode (optional)
     * @param  float $jcrcontent_queue_batch_wait_time jcrcontent_queue_batch_wait_time (optional)
     * @param  string $jcrcontent_retry_delay jcrcontent_retry_delay (optional)
     * @param  bool $jcrcontent_reverse_replication jcrcontent_reverse_replication (optional)
     * @param  string $jcrcontent_serialization_type jcrcontent_serialization_type (optional)
     * @param  string $jcrcontent_slingresource_type jcrcontent_slingresource_type (optional)
     * @param  string $jcrcontent_ssl jcrcontent_ssl (optional)
     * @param  string $jcrcontent_transport_ntlm_domain jcrcontent_transport_ntlm_domain (optional)
     * @param  string $jcrcontent_transport_ntlm_host jcrcontent_transport_ntlm_host (optional)
     * @param  string $jcrcontent_transport_password jcrcontent_transport_password (optional)
     * @param  string $jcrcontent_transport_uri jcrcontent_transport_uri (optional)
     * @param  string $jcrcontent_transport_user jcrcontent_transport_user (optional)
     * @param  bool $jcrcontent_trigger_distribute jcrcontent_trigger_distribute (optional)
     * @param  bool $jcrcontent_trigger_modified jcrcontent_trigger_modified (optional)
     * @param  bool $jcrcontent_trigger_on_off_time jcrcontent_trigger_on_off_time (optional)
     * @param  bool $jcrcontent_trigger_receive jcrcontent_trigger_receive (optional)
     * @param  bool $jcrcontent_trigger_specific jcrcontent_trigger_specific (optional)
     * @param  string $jcrcontent_user_id jcrcontent_user_id (optional)
     * @param  string $jcrprimary_type jcrprimary_type (optional)
     * @param  string $operation operation (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postAgent($runmode, $name, $jcrcontent_cqdistribute = null, $jcrcontent_cqdistribute_type_hint = null, $jcrcontent_cqname = null, $jcrcontent_cqtemplate = null, $jcrcontent_enabled = null, $jcrcontent_jcrdescription = null, $jcrcontent_jcrlast_modified = null, $jcrcontent_jcrlast_modified_by = null, $jcrcontent_jcrmixin_types = null, $jcrcontent_jcrtitle = null, $jcrcontent_log_level = null, $jcrcontent_no_status_update = null, $jcrcontent_no_versioning = null, $jcrcontent_protocol_connect_timeout = null, $jcrcontent_protocol_http_connection_closed = null, $jcrcontent_protocol_http_expired = null, $jcrcontent_protocol_http_headers = null, $jcrcontent_protocol_http_headers_type_hint = null, $jcrcontent_protocol_http_method = null, $jcrcontent_protocol_https_relaxed = null, $jcrcontent_protocol_interface = null, $jcrcontent_protocol_socket_timeout = null, $jcrcontent_protocol_version = null, $jcrcontent_proxy_ntlm_domain = null, $jcrcontent_proxy_ntlm_host = null, $jcrcontent_proxy_host = null, $jcrcontent_proxy_password = null, $jcrcontent_proxy_port = null, $jcrcontent_proxy_user = null, $jcrcontent_queue_batch_max_size = null, $jcrcontent_queue_batch_mode = null, $jcrcontent_queue_batch_wait_time = null, $jcrcontent_retry_delay = null, $jcrcontent_reverse_replication = null, $jcrcontent_serialization_type = null, $jcrcontent_slingresource_type = null, $jcrcontent_ssl = null, $jcrcontent_transport_ntlm_domain = null, $jcrcontent_transport_ntlm_host = null, $jcrcontent_transport_password = null, $jcrcontent_transport_uri = null, $jcrcontent_transport_user = null, $jcrcontent_trigger_distribute = null, $jcrcontent_trigger_modified = null, $jcrcontent_trigger_on_off_time = null, $jcrcontent_trigger_receive = null, $jcrcontent_trigger_specific = null, $jcrcontent_user_id = null, $jcrprimary_type = null, $operation = null)
    {
        $this->postAgentWithHttpInfo($runmode, $name, $jcrcontent_cqdistribute, $jcrcontent_cqdistribute_type_hint, $jcrcontent_cqname, $jcrcontent_cqtemplate, $jcrcontent_enabled, $jcrcontent_jcrdescription, $jcrcontent_jcrlast_modified, $jcrcontent_jcrlast_modified_by, $jcrcontent_jcrmixin_types, $jcrcontent_jcrtitle, $jcrcontent_log_level, $jcrcontent_no_status_update, $jcrcontent_no_versioning, $jcrcontent_protocol_connect_timeout, $jcrcontent_protocol_http_connection_closed, $jcrcontent_protocol_http_expired, $jcrcontent_protocol_http_headers, $jcrcontent_protocol_http_headers_type_hint, $jcrcontent_protocol_http_method, $jcrcontent_protocol_https_relaxed, $jcrcontent_protocol_interface, $jcrcontent_protocol_socket_timeout, $jcrcontent_protocol_version, $jcrcontent_proxy_ntlm_domain, $jcrcontent_proxy_ntlm_host, $jcrcontent_proxy_host, $jcrcontent_proxy_password, $jcrcontent_proxy_port, $jcrcontent_proxy_user, $jcrcontent_queue_batch_max_size, $jcrcontent_queue_batch_mode, $jcrcontent_queue_batch_wait_time, $jcrcontent_retry_delay, $jcrcontent_reverse_replication, $jcrcontent_serialization_type, $jcrcontent_slingresource_type, $jcrcontent_ssl, $jcrcontent_transport_ntlm_domain, $jcrcontent_transport_ntlm_host, $jcrcontent_transport_password, $jcrcontent_transport_uri, $jcrcontent_transport_user, $jcrcontent_trigger_distribute, $jcrcontent_trigger_modified, $jcrcontent_trigger_on_off_time, $jcrcontent_trigger_receive, $jcrcontent_trigger_specific, $jcrcontent_user_id, $jcrprimary_type, $operation);
    }

    /**
     * Operation postAgentWithHttpInfo
     *
     * @param  string $runmode (required)
     * @param  string $name (required)
     * @param  bool $jcrcontent_cqdistribute (optional)
     * @param  string $jcrcontent_cqdistribute_type_hint (optional)
     * @param  string $jcrcontent_cqname (optional)
     * @param  string $jcrcontent_cqtemplate (optional)
     * @param  bool $jcrcontent_enabled (optional)
     * @param  string $jcrcontent_jcrdescription (optional)
     * @param  string $jcrcontent_jcrlast_modified (optional)
     * @param  string $jcrcontent_jcrlast_modified_by (optional)
     * @param  string $jcrcontent_jcrmixin_types (optional)
     * @param  string $jcrcontent_jcrtitle (optional)
     * @param  string $jcrcontent_log_level (optional)
     * @param  bool $jcrcontent_no_status_update (optional)
     * @param  bool $jcrcontent_no_versioning (optional)
     * @param  float $jcrcontent_protocol_connect_timeout (optional)
     * @param  bool $jcrcontent_protocol_http_connection_closed (optional)
     * @param  string $jcrcontent_protocol_http_expired (optional)
     * @param  string[] $jcrcontent_protocol_http_headers (optional)
     * @param  string $jcrcontent_protocol_http_headers_type_hint (optional)
     * @param  string $jcrcontent_protocol_http_method (optional)
     * @param  bool $jcrcontent_protocol_https_relaxed (optional)
     * @param  string $jcrcontent_protocol_interface (optional)
     * @param  float $jcrcontent_protocol_socket_timeout (optional)
     * @param  string $jcrcontent_protocol_version (optional)
     * @param  string $jcrcontent_proxy_ntlm_domain (optional)
     * @param  string $jcrcontent_proxy_ntlm_host (optional)
     * @param  string $jcrcontent_proxy_host (optional)
     * @param  string $jcrcontent_proxy_password (optional)
     * @param  float $jcrcontent_proxy_port (optional)
     * @param  string $jcrcontent_proxy_user (optional)
     * @param  float $jcrcontent_queue_batch_max_size (optional)
     * @param  string $jcrcontent_queue_batch_mode (optional)
     * @param  float $jcrcontent_queue_batch_wait_time (optional)
     * @param  string $jcrcontent_retry_delay (optional)
     * @param  bool $jcrcontent_reverse_replication (optional)
     * @param  string $jcrcontent_serialization_type (optional)
     * @param  string $jcrcontent_slingresource_type (optional)
     * @param  string $jcrcontent_ssl (optional)
     * @param  string $jcrcontent_transport_ntlm_domain (optional)
     * @param  string $jcrcontent_transport_ntlm_host (optional)
     * @param  string $jcrcontent_transport_password (optional)
     * @param  string $jcrcontent_transport_uri (optional)
     * @param  string $jcrcontent_transport_user (optional)
     * @param  bool $jcrcontent_trigger_distribute (optional)
     * @param  bool $jcrcontent_trigger_modified (optional)
     * @param  bool $jcrcontent_trigger_on_off_time (optional)
     * @param  bool $jcrcontent_trigger_receive (optional)
     * @param  bool $jcrcontent_trigger_specific (optional)
     * @param  string $jcrcontent_user_id (optional)
     * @param  string $jcrprimary_type (optional)
     * @param  string $operation (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAgentWithHttpInfo($runmode, $name, $jcrcontent_cqdistribute = null, $jcrcontent_cqdistribute_type_hint = null, $jcrcontent_cqname = null, $jcrcontent_cqtemplate = null, $jcrcontent_enabled = null, $jcrcontent_jcrdescription = null, $jcrcontent_jcrlast_modified = null, $jcrcontent_jcrlast_modified_by = null, $jcrcontent_jcrmixin_types = null, $jcrcontent_jcrtitle = null, $jcrcontent_log_level = null, $jcrcontent_no_status_update = null, $jcrcontent_no_versioning = null, $jcrcontent_protocol_connect_timeout = null, $jcrcontent_protocol_http_connection_closed = null, $jcrcontent_protocol_http_expired = null, $jcrcontent_protocol_http_headers = null, $jcrcontent_protocol_http_headers_type_hint = null, $jcrcontent_protocol_http_method = null, $jcrcontent_protocol_https_relaxed = null, $jcrcontent_protocol_interface = null, $jcrcontent_protocol_socket_timeout = null, $jcrcontent_protocol_version = null, $jcrcontent_proxy_ntlm_domain = null, $jcrcontent_proxy_ntlm_host = null, $jcrcontent_proxy_host = null, $jcrcontent_proxy_password = null, $jcrcontent_proxy_port = null, $jcrcontent_proxy_user = null, $jcrcontent_queue_batch_max_size = null, $jcrcontent_queue_batch_mode = null, $jcrcontent_queue_batch_wait_time = null, $jcrcontent_retry_delay = null, $jcrcontent_reverse_replication = null, $jcrcontent_serialization_type = null, $jcrcontent_slingresource_type = null, $jcrcontent_ssl = null, $jcrcontent_transport_ntlm_domain = null, $jcrcontent_transport_ntlm_host = null, $jcrcontent_transport_password = null, $jcrcontent_transport_uri = null, $jcrcontent_transport_user = null, $jcrcontent_trigger_distribute = null, $jcrcontent_trigger_modified = null, $jcrcontent_trigger_on_off_time = null, $jcrcontent_trigger_receive = null, $jcrcontent_trigger_specific = null, $jcrcontent_user_id = null, $jcrprimary_type = null, $operation = null)
    {
        $request = $this->postAgentRequest($runmode, $name, $jcrcontent_cqdistribute, $jcrcontent_cqdistribute_type_hint, $jcrcontent_cqname, $jcrcontent_cqtemplate, $jcrcontent_enabled, $jcrcontent_jcrdescription, $jcrcontent_jcrlast_modified, $jcrcontent_jcrlast_modified_by, $jcrcontent_jcrmixin_types, $jcrcontent_jcrtitle, $jcrcontent_log_level, $jcrcontent_no_status_update, $jcrcontent_no_versioning, $jcrcontent_protocol_connect_timeout, $jcrcontent_protocol_http_connection_closed, $jcrcontent_protocol_http_expired, $jcrcontent_protocol_http_headers, $jcrcontent_protocol_http_headers_type_hint, $jcrcontent_protocol_http_method, $jcrcontent_protocol_https_relaxed, $jcrcontent_protocol_interface, $jcrcontent_protocol_socket_timeout, $jcrcontent_protocol_version, $jcrcontent_proxy_ntlm_domain, $jcrcontent_proxy_ntlm_host, $jcrcontent_proxy_host, $jcrcontent_proxy_password, $jcrcontent_proxy_port, $jcrcontent_proxy_user, $jcrcontent_queue_batch_max_size, $jcrcontent_queue_batch_mode, $jcrcontent_queue_batch_wait_time, $jcrcontent_retry_delay, $jcrcontent_reverse_replication, $jcrcontent_serialization_type, $jcrcontent_slingresource_type, $jcrcontent_ssl, $jcrcontent_transport_ntlm_domain, $jcrcontent_transport_ntlm_host, $jcrcontent_transport_password, $jcrcontent_transport_uri, $jcrcontent_transport_user, $jcrcontent_trigger_distribute, $jcrcontent_trigger_modified, $jcrcontent_trigger_on_off_time, $jcrcontent_trigger_receive, $jcrcontent_trigger_specific, $jcrcontent_user_id, $jcrprimary_type, $operation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postAgentAsync
     *
     * @param  string $runmode (required)
     * @param  string $name (required)
     * @param  bool $jcrcontent_cqdistribute (optional)
     * @param  string $jcrcontent_cqdistribute_type_hint (optional)
     * @param  string $jcrcontent_cqname (optional)
     * @param  string $jcrcontent_cqtemplate (optional)
     * @param  bool $jcrcontent_enabled (optional)
     * @param  string $jcrcontent_jcrdescription (optional)
     * @param  string $jcrcontent_jcrlast_modified (optional)
     * @param  string $jcrcontent_jcrlast_modified_by (optional)
     * @param  string $jcrcontent_jcrmixin_types (optional)
     * @param  string $jcrcontent_jcrtitle (optional)
     * @param  string $jcrcontent_log_level (optional)
     * @param  bool $jcrcontent_no_status_update (optional)
     * @param  bool $jcrcontent_no_versioning (optional)
     * @param  float $jcrcontent_protocol_connect_timeout (optional)
     * @param  bool $jcrcontent_protocol_http_connection_closed (optional)
     * @param  string $jcrcontent_protocol_http_expired (optional)
     * @param  string[] $jcrcontent_protocol_http_headers (optional)
     * @param  string $jcrcontent_protocol_http_headers_type_hint (optional)
     * @param  string $jcrcontent_protocol_http_method (optional)
     * @param  bool $jcrcontent_protocol_https_relaxed (optional)
     * @param  string $jcrcontent_protocol_interface (optional)
     * @param  float $jcrcontent_protocol_socket_timeout (optional)
     * @param  string $jcrcontent_protocol_version (optional)
     * @param  string $jcrcontent_proxy_ntlm_domain (optional)
     * @param  string $jcrcontent_proxy_ntlm_host (optional)
     * @param  string $jcrcontent_proxy_host (optional)
     * @param  string $jcrcontent_proxy_password (optional)
     * @param  float $jcrcontent_proxy_port (optional)
     * @param  string $jcrcontent_proxy_user (optional)
     * @param  float $jcrcontent_queue_batch_max_size (optional)
     * @param  string $jcrcontent_queue_batch_mode (optional)
     * @param  float $jcrcontent_queue_batch_wait_time (optional)
     * @param  string $jcrcontent_retry_delay (optional)
     * @param  bool $jcrcontent_reverse_replication (optional)
     * @param  string $jcrcontent_serialization_type (optional)
     * @param  string $jcrcontent_slingresource_type (optional)
     * @param  string $jcrcontent_ssl (optional)
     * @param  string $jcrcontent_transport_ntlm_domain (optional)
     * @param  string $jcrcontent_transport_ntlm_host (optional)
     * @param  string $jcrcontent_transport_password (optional)
     * @param  string $jcrcontent_transport_uri (optional)
     * @param  string $jcrcontent_transport_user (optional)
     * @param  bool $jcrcontent_trigger_distribute (optional)
     * @param  bool $jcrcontent_trigger_modified (optional)
     * @param  bool $jcrcontent_trigger_on_off_time (optional)
     * @param  bool $jcrcontent_trigger_receive (optional)
     * @param  bool $jcrcontent_trigger_specific (optional)
     * @param  string $jcrcontent_user_id (optional)
     * @param  string $jcrprimary_type (optional)
     * @param  string $operation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAgentAsync($runmode, $name, $jcrcontent_cqdistribute = null, $jcrcontent_cqdistribute_type_hint = null, $jcrcontent_cqname = null, $jcrcontent_cqtemplate = null, $jcrcontent_enabled = null, $jcrcontent_jcrdescription = null, $jcrcontent_jcrlast_modified = null, $jcrcontent_jcrlast_modified_by = null, $jcrcontent_jcrmixin_types = null, $jcrcontent_jcrtitle = null, $jcrcontent_log_level = null, $jcrcontent_no_status_update = null, $jcrcontent_no_versioning = null, $jcrcontent_protocol_connect_timeout = null, $jcrcontent_protocol_http_connection_closed = null, $jcrcontent_protocol_http_expired = null, $jcrcontent_protocol_http_headers = null, $jcrcontent_protocol_http_headers_type_hint = null, $jcrcontent_protocol_http_method = null, $jcrcontent_protocol_https_relaxed = null, $jcrcontent_protocol_interface = null, $jcrcontent_protocol_socket_timeout = null, $jcrcontent_protocol_version = null, $jcrcontent_proxy_ntlm_domain = null, $jcrcontent_proxy_ntlm_host = null, $jcrcontent_proxy_host = null, $jcrcontent_proxy_password = null, $jcrcontent_proxy_port = null, $jcrcontent_proxy_user = null, $jcrcontent_queue_batch_max_size = null, $jcrcontent_queue_batch_mode = null, $jcrcontent_queue_batch_wait_time = null, $jcrcontent_retry_delay = null, $jcrcontent_reverse_replication = null, $jcrcontent_serialization_type = null, $jcrcontent_slingresource_type = null, $jcrcontent_ssl = null, $jcrcontent_transport_ntlm_domain = null, $jcrcontent_transport_ntlm_host = null, $jcrcontent_transport_password = null, $jcrcontent_transport_uri = null, $jcrcontent_transport_user = null, $jcrcontent_trigger_distribute = null, $jcrcontent_trigger_modified = null, $jcrcontent_trigger_on_off_time = null, $jcrcontent_trigger_receive = null, $jcrcontent_trigger_specific = null, $jcrcontent_user_id = null, $jcrprimary_type = null, $operation = null)
    {
        return $this->postAgentAsyncWithHttpInfo($runmode, $name, $jcrcontent_cqdistribute, $jcrcontent_cqdistribute_type_hint, $jcrcontent_cqname, $jcrcontent_cqtemplate, $jcrcontent_enabled, $jcrcontent_jcrdescription, $jcrcontent_jcrlast_modified, $jcrcontent_jcrlast_modified_by, $jcrcontent_jcrmixin_types, $jcrcontent_jcrtitle, $jcrcontent_log_level, $jcrcontent_no_status_update, $jcrcontent_no_versioning, $jcrcontent_protocol_connect_timeout, $jcrcontent_protocol_http_connection_closed, $jcrcontent_protocol_http_expired, $jcrcontent_protocol_http_headers, $jcrcontent_protocol_http_headers_type_hint, $jcrcontent_protocol_http_method, $jcrcontent_protocol_https_relaxed, $jcrcontent_protocol_interface, $jcrcontent_protocol_socket_timeout, $jcrcontent_protocol_version, $jcrcontent_proxy_ntlm_domain, $jcrcontent_proxy_ntlm_host, $jcrcontent_proxy_host, $jcrcontent_proxy_password, $jcrcontent_proxy_port, $jcrcontent_proxy_user, $jcrcontent_queue_batch_max_size, $jcrcontent_queue_batch_mode, $jcrcontent_queue_batch_wait_time, $jcrcontent_retry_delay, $jcrcontent_reverse_replication, $jcrcontent_serialization_type, $jcrcontent_slingresource_type, $jcrcontent_ssl, $jcrcontent_transport_ntlm_domain, $jcrcontent_transport_ntlm_host, $jcrcontent_transport_password, $jcrcontent_transport_uri, $jcrcontent_transport_user, $jcrcontent_trigger_distribute, $jcrcontent_trigger_modified, $jcrcontent_trigger_on_off_time, $jcrcontent_trigger_receive, $jcrcontent_trigger_specific, $jcrcontent_user_id, $jcrprimary_type, $operation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postAgentAsyncWithHttpInfo
     *
     * @param  string $runmode (required)
     * @param  string $name (required)
     * @param  bool $jcrcontent_cqdistribute (optional)
     * @param  string $jcrcontent_cqdistribute_type_hint (optional)
     * @param  string $jcrcontent_cqname (optional)
     * @param  string $jcrcontent_cqtemplate (optional)
     * @param  bool $jcrcontent_enabled (optional)
     * @param  string $jcrcontent_jcrdescription (optional)
     * @param  string $jcrcontent_jcrlast_modified (optional)
     * @param  string $jcrcontent_jcrlast_modified_by (optional)
     * @param  string $jcrcontent_jcrmixin_types (optional)
     * @param  string $jcrcontent_jcrtitle (optional)
     * @param  string $jcrcontent_log_level (optional)
     * @param  bool $jcrcontent_no_status_update (optional)
     * @param  bool $jcrcontent_no_versioning (optional)
     * @param  float $jcrcontent_protocol_connect_timeout (optional)
     * @param  bool $jcrcontent_protocol_http_connection_closed (optional)
     * @param  string $jcrcontent_protocol_http_expired (optional)
     * @param  string[] $jcrcontent_protocol_http_headers (optional)
     * @param  string $jcrcontent_protocol_http_headers_type_hint (optional)
     * @param  string $jcrcontent_protocol_http_method (optional)
     * @param  bool $jcrcontent_protocol_https_relaxed (optional)
     * @param  string $jcrcontent_protocol_interface (optional)
     * @param  float $jcrcontent_protocol_socket_timeout (optional)
     * @param  string $jcrcontent_protocol_version (optional)
     * @param  string $jcrcontent_proxy_ntlm_domain (optional)
     * @param  string $jcrcontent_proxy_ntlm_host (optional)
     * @param  string $jcrcontent_proxy_host (optional)
     * @param  string $jcrcontent_proxy_password (optional)
     * @param  float $jcrcontent_proxy_port (optional)
     * @param  string $jcrcontent_proxy_user (optional)
     * @param  float $jcrcontent_queue_batch_max_size (optional)
     * @param  string $jcrcontent_queue_batch_mode (optional)
     * @param  float $jcrcontent_queue_batch_wait_time (optional)
     * @param  string $jcrcontent_retry_delay (optional)
     * @param  bool $jcrcontent_reverse_replication (optional)
     * @param  string $jcrcontent_serialization_type (optional)
     * @param  string $jcrcontent_slingresource_type (optional)
     * @param  string $jcrcontent_ssl (optional)
     * @param  string $jcrcontent_transport_ntlm_domain (optional)
     * @param  string $jcrcontent_transport_ntlm_host (optional)
     * @param  string $jcrcontent_transport_password (optional)
     * @param  string $jcrcontent_transport_uri (optional)
     * @param  string $jcrcontent_transport_user (optional)
     * @param  bool $jcrcontent_trigger_distribute (optional)
     * @param  bool $jcrcontent_trigger_modified (optional)
     * @param  bool $jcrcontent_trigger_on_off_time (optional)
     * @param  bool $jcrcontent_trigger_receive (optional)
     * @param  bool $jcrcontent_trigger_specific (optional)
     * @param  string $jcrcontent_user_id (optional)
     * @param  string $jcrprimary_type (optional)
     * @param  string $operation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAgentAsyncWithHttpInfo($runmode, $name, $jcrcontent_cqdistribute = null, $jcrcontent_cqdistribute_type_hint = null, $jcrcontent_cqname = null, $jcrcontent_cqtemplate = null, $jcrcontent_enabled = null, $jcrcontent_jcrdescription = null, $jcrcontent_jcrlast_modified = null, $jcrcontent_jcrlast_modified_by = null, $jcrcontent_jcrmixin_types = null, $jcrcontent_jcrtitle = null, $jcrcontent_log_level = null, $jcrcontent_no_status_update = null, $jcrcontent_no_versioning = null, $jcrcontent_protocol_connect_timeout = null, $jcrcontent_protocol_http_connection_closed = null, $jcrcontent_protocol_http_expired = null, $jcrcontent_protocol_http_headers = null, $jcrcontent_protocol_http_headers_type_hint = null, $jcrcontent_protocol_http_method = null, $jcrcontent_protocol_https_relaxed = null, $jcrcontent_protocol_interface = null, $jcrcontent_protocol_socket_timeout = null, $jcrcontent_protocol_version = null, $jcrcontent_proxy_ntlm_domain = null, $jcrcontent_proxy_ntlm_host = null, $jcrcontent_proxy_host = null, $jcrcontent_proxy_password = null, $jcrcontent_proxy_port = null, $jcrcontent_proxy_user = null, $jcrcontent_queue_batch_max_size = null, $jcrcontent_queue_batch_mode = null, $jcrcontent_queue_batch_wait_time = null, $jcrcontent_retry_delay = null, $jcrcontent_reverse_replication = null, $jcrcontent_serialization_type = null, $jcrcontent_slingresource_type = null, $jcrcontent_ssl = null, $jcrcontent_transport_ntlm_domain = null, $jcrcontent_transport_ntlm_host = null, $jcrcontent_transport_password = null, $jcrcontent_transport_uri = null, $jcrcontent_transport_user = null, $jcrcontent_trigger_distribute = null, $jcrcontent_trigger_modified = null, $jcrcontent_trigger_on_off_time = null, $jcrcontent_trigger_receive = null, $jcrcontent_trigger_specific = null, $jcrcontent_user_id = null, $jcrprimary_type = null, $operation = null)
    {
        $returnType = '';
        $request = $this->postAgentRequest($runmode, $name, $jcrcontent_cqdistribute, $jcrcontent_cqdistribute_type_hint, $jcrcontent_cqname, $jcrcontent_cqtemplate, $jcrcontent_enabled, $jcrcontent_jcrdescription, $jcrcontent_jcrlast_modified, $jcrcontent_jcrlast_modified_by, $jcrcontent_jcrmixin_types, $jcrcontent_jcrtitle, $jcrcontent_log_level, $jcrcontent_no_status_update, $jcrcontent_no_versioning, $jcrcontent_protocol_connect_timeout, $jcrcontent_protocol_http_connection_closed, $jcrcontent_protocol_http_expired, $jcrcontent_protocol_http_headers, $jcrcontent_protocol_http_headers_type_hint, $jcrcontent_protocol_http_method, $jcrcontent_protocol_https_relaxed, $jcrcontent_protocol_interface, $jcrcontent_protocol_socket_timeout, $jcrcontent_protocol_version, $jcrcontent_proxy_ntlm_domain, $jcrcontent_proxy_ntlm_host, $jcrcontent_proxy_host, $jcrcontent_proxy_password, $jcrcontent_proxy_port, $jcrcontent_proxy_user, $jcrcontent_queue_batch_max_size, $jcrcontent_queue_batch_mode, $jcrcontent_queue_batch_wait_time, $jcrcontent_retry_delay, $jcrcontent_reverse_replication, $jcrcontent_serialization_type, $jcrcontent_slingresource_type, $jcrcontent_ssl, $jcrcontent_transport_ntlm_domain, $jcrcontent_transport_ntlm_host, $jcrcontent_transport_password, $jcrcontent_transport_uri, $jcrcontent_transport_user, $jcrcontent_trigger_distribute, $jcrcontent_trigger_modified, $jcrcontent_trigger_on_off_time, $jcrcontent_trigger_receive, $jcrcontent_trigger_specific, $jcrcontent_user_id, $jcrprimary_type, $operation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postAgent'
     *
     * @param  string $runmode (required)
     * @param  string $name (required)
     * @param  bool $jcrcontent_cqdistribute (optional)
     * @param  string $jcrcontent_cqdistribute_type_hint (optional)
     * @param  string $jcrcontent_cqname (optional)
     * @param  string $jcrcontent_cqtemplate (optional)
     * @param  bool $jcrcontent_enabled (optional)
     * @param  string $jcrcontent_jcrdescription (optional)
     * @param  string $jcrcontent_jcrlast_modified (optional)
     * @param  string $jcrcontent_jcrlast_modified_by (optional)
     * @param  string $jcrcontent_jcrmixin_types (optional)
     * @param  string $jcrcontent_jcrtitle (optional)
     * @param  string $jcrcontent_log_level (optional)
     * @param  bool $jcrcontent_no_status_update (optional)
     * @param  bool $jcrcontent_no_versioning (optional)
     * @param  float $jcrcontent_protocol_connect_timeout (optional)
     * @param  bool $jcrcontent_protocol_http_connection_closed (optional)
     * @param  string $jcrcontent_protocol_http_expired (optional)
     * @param  string[] $jcrcontent_protocol_http_headers (optional)
     * @param  string $jcrcontent_protocol_http_headers_type_hint (optional)
     * @param  string $jcrcontent_protocol_http_method (optional)
     * @param  bool $jcrcontent_protocol_https_relaxed (optional)
     * @param  string $jcrcontent_protocol_interface (optional)
     * @param  float $jcrcontent_protocol_socket_timeout (optional)
     * @param  string $jcrcontent_protocol_version (optional)
     * @param  string $jcrcontent_proxy_ntlm_domain (optional)
     * @param  string $jcrcontent_proxy_ntlm_host (optional)
     * @param  string $jcrcontent_proxy_host (optional)
     * @param  string $jcrcontent_proxy_password (optional)
     * @param  float $jcrcontent_proxy_port (optional)
     * @param  string $jcrcontent_proxy_user (optional)
     * @param  float $jcrcontent_queue_batch_max_size (optional)
     * @param  string $jcrcontent_queue_batch_mode (optional)
     * @param  float $jcrcontent_queue_batch_wait_time (optional)
     * @param  string $jcrcontent_retry_delay (optional)
     * @param  bool $jcrcontent_reverse_replication (optional)
     * @param  string $jcrcontent_serialization_type (optional)
     * @param  string $jcrcontent_slingresource_type (optional)
     * @param  string $jcrcontent_ssl (optional)
     * @param  string $jcrcontent_transport_ntlm_domain (optional)
     * @param  string $jcrcontent_transport_ntlm_host (optional)
     * @param  string $jcrcontent_transport_password (optional)
     * @param  string $jcrcontent_transport_uri (optional)
     * @param  string $jcrcontent_transport_user (optional)
     * @param  bool $jcrcontent_trigger_distribute (optional)
     * @param  bool $jcrcontent_trigger_modified (optional)
     * @param  bool $jcrcontent_trigger_on_off_time (optional)
     * @param  bool $jcrcontent_trigger_receive (optional)
     * @param  bool $jcrcontent_trigger_specific (optional)
     * @param  string $jcrcontent_user_id (optional)
     * @param  string $jcrprimary_type (optional)
     * @param  string $operation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postAgentRequest($runmode, $name, $jcrcontent_cqdistribute = null, $jcrcontent_cqdistribute_type_hint = null, $jcrcontent_cqname = null, $jcrcontent_cqtemplate = null, $jcrcontent_enabled = null, $jcrcontent_jcrdescription = null, $jcrcontent_jcrlast_modified = null, $jcrcontent_jcrlast_modified_by = null, $jcrcontent_jcrmixin_types = null, $jcrcontent_jcrtitle = null, $jcrcontent_log_level = null, $jcrcontent_no_status_update = null, $jcrcontent_no_versioning = null, $jcrcontent_protocol_connect_timeout = null, $jcrcontent_protocol_http_connection_closed = null, $jcrcontent_protocol_http_expired = null, $jcrcontent_protocol_http_headers = null, $jcrcontent_protocol_http_headers_type_hint = null, $jcrcontent_protocol_http_method = null, $jcrcontent_protocol_https_relaxed = null, $jcrcontent_protocol_interface = null, $jcrcontent_protocol_socket_timeout = null, $jcrcontent_protocol_version = null, $jcrcontent_proxy_ntlm_domain = null, $jcrcontent_proxy_ntlm_host = null, $jcrcontent_proxy_host = null, $jcrcontent_proxy_password = null, $jcrcontent_proxy_port = null, $jcrcontent_proxy_user = null, $jcrcontent_queue_batch_max_size = null, $jcrcontent_queue_batch_mode = null, $jcrcontent_queue_batch_wait_time = null, $jcrcontent_retry_delay = null, $jcrcontent_reverse_replication = null, $jcrcontent_serialization_type = null, $jcrcontent_slingresource_type = null, $jcrcontent_ssl = null, $jcrcontent_transport_ntlm_domain = null, $jcrcontent_transport_ntlm_host = null, $jcrcontent_transport_password = null, $jcrcontent_transport_uri = null, $jcrcontent_transport_user = null, $jcrcontent_trigger_distribute = null, $jcrcontent_trigger_modified = null, $jcrcontent_trigger_on_off_time = null, $jcrcontent_trigger_receive = null, $jcrcontent_trigger_specific = null, $jcrcontent_user_id = null, $jcrprimary_type = null, $operation = null)
    {
        // verify the required parameter 'runmode' is set
        if ($runmode === null || (is_array($runmode) && count($runmode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $runmode when calling postAgent'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling postAgent'
            );
        }

        $resourcePath = '/etc/replication/agents.{runmode}/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($jcrcontent_cqdistribute !== null) {
            if('form' === 'form' && is_array($jcrcontent_cqdistribute)) {
                foreach($jcrcontent_cqdistribute as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/cq:distribute'] = $jcrcontent_cqdistribute;
            }
        }
        // query params
        if ($jcrcontent_cqdistribute_type_hint !== null) {
            if('form' === 'form' && is_array($jcrcontent_cqdistribute_type_hint)) {
                foreach($jcrcontent_cqdistribute_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/cq:distribute@TypeHint'] = $jcrcontent_cqdistribute_type_hint;
            }
        }
        // query params
        if ($jcrcontent_cqname !== null) {
            if('form' === 'form' && is_array($jcrcontent_cqname)) {
                foreach($jcrcontent_cqname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/cq:name'] = $jcrcontent_cqname;
            }
        }
        // query params
        if ($jcrcontent_cqtemplate !== null) {
            if('form' === 'form' && is_array($jcrcontent_cqtemplate)) {
                foreach($jcrcontent_cqtemplate as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/cq:template'] = $jcrcontent_cqtemplate;
            }
        }
        // query params
        if ($jcrcontent_enabled !== null) {
            if('form' === 'form' && is_array($jcrcontent_enabled)) {
                foreach($jcrcontent_enabled as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/enabled'] = $jcrcontent_enabled;
            }
        }
        // query params
        if ($jcrcontent_jcrdescription !== null) {
            if('form' === 'form' && is_array($jcrcontent_jcrdescription)) {
                foreach($jcrcontent_jcrdescription as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/jcr:description'] = $jcrcontent_jcrdescription;
            }
        }
        // query params
        if ($jcrcontent_jcrlast_modified !== null) {
            if('form' === 'form' && is_array($jcrcontent_jcrlast_modified)) {
                foreach($jcrcontent_jcrlast_modified as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/jcr:lastModified'] = $jcrcontent_jcrlast_modified;
            }
        }
        // query params
        if ($jcrcontent_jcrlast_modified_by !== null) {
            if('form' === 'form' && is_array($jcrcontent_jcrlast_modified_by)) {
                foreach($jcrcontent_jcrlast_modified_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/jcr:lastModifiedBy'] = $jcrcontent_jcrlast_modified_by;
            }
        }
        // query params
        if ($jcrcontent_jcrmixin_types !== null) {
            if('form' === 'form' && is_array($jcrcontent_jcrmixin_types)) {
                foreach($jcrcontent_jcrmixin_types as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/jcr:mixinTypes'] = $jcrcontent_jcrmixin_types;
            }
        }
        // query params
        if ($jcrcontent_jcrtitle !== null) {
            if('form' === 'form' && is_array($jcrcontent_jcrtitle)) {
                foreach($jcrcontent_jcrtitle as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/jcr:title'] = $jcrcontent_jcrtitle;
            }
        }
        // query params
        if ($jcrcontent_log_level !== null) {
            if('form' === 'form' && is_array($jcrcontent_log_level)) {
                foreach($jcrcontent_log_level as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/logLevel'] = $jcrcontent_log_level;
            }
        }
        // query params
        if ($jcrcontent_no_status_update !== null) {
            if('form' === 'form' && is_array($jcrcontent_no_status_update)) {
                foreach($jcrcontent_no_status_update as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/noStatusUpdate'] = $jcrcontent_no_status_update;
            }
        }
        // query params
        if ($jcrcontent_no_versioning !== null) {
            if('form' === 'form' && is_array($jcrcontent_no_versioning)) {
                foreach($jcrcontent_no_versioning as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/noVersioning'] = $jcrcontent_no_versioning;
            }
        }
        // query params
        if ($jcrcontent_protocol_connect_timeout !== null) {
            if('form' === 'form' && is_array($jcrcontent_protocol_connect_timeout)) {
                foreach($jcrcontent_protocol_connect_timeout as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/protocolConnectTimeout'] = $jcrcontent_protocol_connect_timeout;
            }
        }
        // query params
        if ($jcrcontent_protocol_http_connection_closed !== null) {
            if('form' === 'form' && is_array($jcrcontent_protocol_http_connection_closed)) {
                foreach($jcrcontent_protocol_http_connection_closed as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/protocolHTTPConnectionClosed'] = $jcrcontent_protocol_http_connection_closed;
            }
        }
        // query params
        if ($jcrcontent_protocol_http_expired !== null) {
            if('form' === 'form' && is_array($jcrcontent_protocol_http_expired)) {
                foreach($jcrcontent_protocol_http_expired as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/protocolHTTPExpired'] = $jcrcontent_protocol_http_expired;
            }
        }
        // query params
        if ($jcrcontent_protocol_http_headers !== null) {
            if('form' === 'form' && is_array($jcrcontent_protocol_http_headers)) {
                foreach($jcrcontent_protocol_http_headers as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/protocolHTTPHeaders'] = $jcrcontent_protocol_http_headers;
            }
        }
        // query params
        if ($jcrcontent_protocol_http_headers_type_hint !== null) {
            if('form' === 'form' && is_array($jcrcontent_protocol_http_headers_type_hint)) {
                foreach($jcrcontent_protocol_http_headers_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/protocolHTTPHeaders@TypeHint'] = $jcrcontent_protocol_http_headers_type_hint;
            }
        }
        // query params
        if ($jcrcontent_protocol_http_method !== null) {
            if('form' === 'form' && is_array($jcrcontent_protocol_http_method)) {
                foreach($jcrcontent_protocol_http_method as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/protocolHTTPMethod'] = $jcrcontent_protocol_http_method;
            }
        }
        // query params
        if ($jcrcontent_protocol_https_relaxed !== null) {
            if('form' === 'form' && is_array($jcrcontent_protocol_https_relaxed)) {
                foreach($jcrcontent_protocol_https_relaxed as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/protocolHTTPSRelaxed'] = $jcrcontent_protocol_https_relaxed;
            }
        }
        // query params
        if ($jcrcontent_protocol_interface !== null) {
            if('form' === 'form' && is_array($jcrcontent_protocol_interface)) {
                foreach($jcrcontent_protocol_interface as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/protocolInterface'] = $jcrcontent_protocol_interface;
            }
        }
        // query params
        if ($jcrcontent_protocol_socket_timeout !== null) {
            if('form' === 'form' && is_array($jcrcontent_protocol_socket_timeout)) {
                foreach($jcrcontent_protocol_socket_timeout as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/protocolSocketTimeout'] = $jcrcontent_protocol_socket_timeout;
            }
        }
        // query params
        if ($jcrcontent_protocol_version !== null) {
            if('form' === 'form' && is_array($jcrcontent_protocol_version)) {
                foreach($jcrcontent_protocol_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/protocolVersion'] = $jcrcontent_protocol_version;
            }
        }
        // query params
        if ($jcrcontent_proxy_ntlm_domain !== null) {
            if('form' === 'form' && is_array($jcrcontent_proxy_ntlm_domain)) {
                foreach($jcrcontent_proxy_ntlm_domain as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/proxyNTLMDomain'] = $jcrcontent_proxy_ntlm_domain;
            }
        }
        // query params
        if ($jcrcontent_proxy_ntlm_host !== null) {
            if('form' === 'form' && is_array($jcrcontent_proxy_ntlm_host)) {
                foreach($jcrcontent_proxy_ntlm_host as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/proxyNTLMHost'] = $jcrcontent_proxy_ntlm_host;
            }
        }
        // query params
        if ($jcrcontent_proxy_host !== null) {
            if('form' === 'form' && is_array($jcrcontent_proxy_host)) {
                foreach($jcrcontent_proxy_host as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/proxyHost'] = $jcrcontent_proxy_host;
            }
        }
        // query params
        if ($jcrcontent_proxy_password !== null) {
            if('form' === 'form' && is_array($jcrcontent_proxy_password)) {
                foreach($jcrcontent_proxy_password as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/proxyPassword'] = $jcrcontent_proxy_password;
            }
        }
        // query params
        if ($jcrcontent_proxy_port !== null) {
            if('form' === 'form' && is_array($jcrcontent_proxy_port)) {
                foreach($jcrcontent_proxy_port as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/proxyPort'] = $jcrcontent_proxy_port;
            }
        }
        // query params
        if ($jcrcontent_proxy_user !== null) {
            if('form' === 'form' && is_array($jcrcontent_proxy_user)) {
                foreach($jcrcontent_proxy_user as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/proxyUser'] = $jcrcontent_proxy_user;
            }
        }
        // query params
        if ($jcrcontent_queue_batch_max_size !== null) {
            if('form' === 'form' && is_array($jcrcontent_queue_batch_max_size)) {
                foreach($jcrcontent_queue_batch_max_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/queueBatchMaxSize'] = $jcrcontent_queue_batch_max_size;
            }
        }
        // query params
        if ($jcrcontent_queue_batch_mode !== null) {
            if('form' === 'form' && is_array($jcrcontent_queue_batch_mode)) {
                foreach($jcrcontent_queue_batch_mode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/queueBatchMode'] = $jcrcontent_queue_batch_mode;
            }
        }
        // query params
        if ($jcrcontent_queue_batch_wait_time !== null) {
            if('form' === 'form' && is_array($jcrcontent_queue_batch_wait_time)) {
                foreach($jcrcontent_queue_batch_wait_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/queueBatchWaitTime'] = $jcrcontent_queue_batch_wait_time;
            }
        }
        // query params
        if ($jcrcontent_retry_delay !== null) {
            if('form' === 'form' && is_array($jcrcontent_retry_delay)) {
                foreach($jcrcontent_retry_delay as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/retryDelay'] = $jcrcontent_retry_delay;
            }
        }
        // query params
        if ($jcrcontent_reverse_replication !== null) {
            if('form' === 'form' && is_array($jcrcontent_reverse_replication)) {
                foreach($jcrcontent_reverse_replication as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/reverseReplication'] = $jcrcontent_reverse_replication;
            }
        }
        // query params
        if ($jcrcontent_serialization_type !== null) {
            if('form' === 'form' && is_array($jcrcontent_serialization_type)) {
                foreach($jcrcontent_serialization_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/serializationType'] = $jcrcontent_serialization_type;
            }
        }
        // query params
        if ($jcrcontent_slingresource_type !== null) {
            if('form' === 'form' && is_array($jcrcontent_slingresource_type)) {
                foreach($jcrcontent_slingresource_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/sling:resourceType'] = $jcrcontent_slingresource_type;
            }
        }
        // query params
        if ($jcrcontent_ssl !== null) {
            if('form' === 'form' && is_array($jcrcontent_ssl)) {
                foreach($jcrcontent_ssl as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/ssl'] = $jcrcontent_ssl;
            }
        }
        // query params
        if ($jcrcontent_transport_ntlm_domain !== null) {
            if('form' === 'form' && is_array($jcrcontent_transport_ntlm_domain)) {
                foreach($jcrcontent_transport_ntlm_domain as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/transportNTLMDomain'] = $jcrcontent_transport_ntlm_domain;
            }
        }
        // query params
        if ($jcrcontent_transport_ntlm_host !== null) {
            if('form' === 'form' && is_array($jcrcontent_transport_ntlm_host)) {
                foreach($jcrcontent_transport_ntlm_host as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/transportNTLMHost'] = $jcrcontent_transport_ntlm_host;
            }
        }
        // query params
        if ($jcrcontent_transport_password !== null) {
            if('form' === 'form' && is_array($jcrcontent_transport_password)) {
                foreach($jcrcontent_transport_password as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/transportPassword'] = $jcrcontent_transport_password;
            }
        }
        // query params
        if ($jcrcontent_transport_uri !== null) {
            if('form' === 'form' && is_array($jcrcontent_transport_uri)) {
                foreach($jcrcontent_transport_uri as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/transportUri'] = $jcrcontent_transport_uri;
            }
        }
        // query params
        if ($jcrcontent_transport_user !== null) {
            if('form' === 'form' && is_array($jcrcontent_transport_user)) {
                foreach($jcrcontent_transport_user as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/transportUser'] = $jcrcontent_transport_user;
            }
        }
        // query params
        if ($jcrcontent_trigger_distribute !== null) {
            if('form' === 'form' && is_array($jcrcontent_trigger_distribute)) {
                foreach($jcrcontent_trigger_distribute as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/triggerDistribute'] = $jcrcontent_trigger_distribute;
            }
        }
        // query params
        if ($jcrcontent_trigger_modified !== null) {
            if('form' === 'form' && is_array($jcrcontent_trigger_modified)) {
                foreach($jcrcontent_trigger_modified as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/triggerModified'] = $jcrcontent_trigger_modified;
            }
        }
        // query params
        if ($jcrcontent_trigger_on_off_time !== null) {
            if('form' === 'form' && is_array($jcrcontent_trigger_on_off_time)) {
                foreach($jcrcontent_trigger_on_off_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/triggerOnOffTime'] = $jcrcontent_trigger_on_off_time;
            }
        }
        // query params
        if ($jcrcontent_trigger_receive !== null) {
            if('form' === 'form' && is_array($jcrcontent_trigger_receive)) {
                foreach($jcrcontent_trigger_receive as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/triggerReceive'] = $jcrcontent_trigger_receive;
            }
        }
        // query params
        if ($jcrcontent_trigger_specific !== null) {
            if('form' === 'form' && is_array($jcrcontent_trigger_specific)) {
                foreach($jcrcontent_trigger_specific as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/triggerSpecific'] = $jcrcontent_trigger_specific;
            }
        }
        // query params
        if ($jcrcontent_user_id !== null) {
            if('form' === 'form' && is_array($jcrcontent_user_id)) {
                foreach($jcrcontent_user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:content/userId'] = $jcrcontent_user_id;
            }
        }
        // query params
        if ($jcrprimary_type !== null) {
            if('form' === 'form' && is_array($jcrprimary_type)) {
                foreach($jcrprimary_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:primaryType'] = $jcrprimary_type;
            }
        }
        // query params
        if ($operation !== null) {
            if('form' === 'form' && is_array($operation)) {
                foreach($operation as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams[':operation'] = $operation;
            }
        }


        // path params
        if ($runmode !== null) {
            $resourcePath = str_replace(
                '{' . 'runmode' . '}',
                ObjectSerializer::toPathValue($runmode),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postAuthorizableKeystore
     *
     * @param  string $intermediate_path intermediate_path (required)
     * @param  string $authorizable_id authorizable_id (required)
     * @param  string $operation operation (optional)
     * @param  string $current_password current_password (optional)
     * @param  string $new_password new_password (optional)
     * @param  string $re_password re_password (optional)
     * @param  string $key_password key_password (optional)
     * @param  string $key_store_pass key_store_pass (optional)
     * @param  string $alias alias (optional)
     * @param  string $new_alias new_alias (optional)
     * @param  string $remove_alias remove_alias (optional)
     * @param  \SplFileObject $cert_chain cert_chain (optional)
     * @param  \SplFileObject $pk pk (optional)
     * @param  \SplFileObject $key_store key_store (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\KeystoreInfo|string
     */
    public function postAuthorizableKeystore($intermediate_path, $authorizable_id, $operation = null, $current_password = null, $new_password = null, $re_password = null, $key_password = null, $key_store_pass = null, $alias = null, $new_alias = null, $remove_alias = null, $cert_chain = null, $pk = null, $key_store = null)
    {
        list($response) = $this->postAuthorizableKeystoreWithHttpInfo($intermediate_path, $authorizable_id, $operation, $current_password, $new_password, $re_password, $key_password, $key_store_pass, $alias, $new_alias, $remove_alias, $cert_chain, $pk, $key_store);
        return $response;
    }

    /**
     * Operation postAuthorizableKeystoreWithHttpInfo
     *
     * @param  string $intermediate_path (required)
     * @param  string $authorizable_id (required)
     * @param  string $operation (optional)
     * @param  string $current_password (optional)
     * @param  string $new_password (optional)
     * @param  string $re_password (optional)
     * @param  string $key_password (optional)
     * @param  string $key_store_pass (optional)
     * @param  string $alias (optional)
     * @param  string $new_alias (optional)
     * @param  string $remove_alias (optional)
     * @param  \SplFileObject $cert_chain (optional)
     * @param  \SplFileObject $pk (optional)
     * @param  \SplFileObject $key_store (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\KeystoreInfo|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAuthorizableKeystoreWithHttpInfo($intermediate_path, $authorizable_id, $operation = null, $current_password = null, $new_password = null, $re_password = null, $key_password = null, $key_store_pass = null, $alias = null, $new_alias = null, $remove_alias = null, $cert_chain = null, $pk = null, $key_store = null)
    {
        $request = $this->postAuthorizableKeystoreRequest($intermediate_path, $authorizable_id, $operation, $current_password, $new_password, $re_password, $key_password, $key_store_pass, $alias, $new_alias, $remove_alias, $cert_chain, $pk, $key_store);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\KeystoreInfo' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\KeystoreInfo', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\KeystoreInfo';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\KeystoreInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postAuthorizableKeystoreAsync
     *
     * @param  string $intermediate_path (required)
     * @param  string $authorizable_id (required)
     * @param  string $operation (optional)
     * @param  string $current_password (optional)
     * @param  string $new_password (optional)
     * @param  string $re_password (optional)
     * @param  string $key_password (optional)
     * @param  string $key_store_pass (optional)
     * @param  string $alias (optional)
     * @param  string $new_alias (optional)
     * @param  string $remove_alias (optional)
     * @param  \SplFileObject $cert_chain (optional)
     * @param  \SplFileObject $pk (optional)
     * @param  \SplFileObject $key_store (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAuthorizableKeystoreAsync($intermediate_path, $authorizable_id, $operation = null, $current_password = null, $new_password = null, $re_password = null, $key_password = null, $key_store_pass = null, $alias = null, $new_alias = null, $remove_alias = null, $cert_chain = null, $pk = null, $key_store = null)
    {
        return $this->postAuthorizableKeystoreAsyncWithHttpInfo($intermediate_path, $authorizable_id, $operation, $current_password, $new_password, $re_password, $key_password, $key_store_pass, $alias, $new_alias, $remove_alias, $cert_chain, $pk, $key_store)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postAuthorizableKeystoreAsyncWithHttpInfo
     *
     * @param  string $intermediate_path (required)
     * @param  string $authorizable_id (required)
     * @param  string $operation (optional)
     * @param  string $current_password (optional)
     * @param  string $new_password (optional)
     * @param  string $re_password (optional)
     * @param  string $key_password (optional)
     * @param  string $key_store_pass (optional)
     * @param  string $alias (optional)
     * @param  string $new_alias (optional)
     * @param  string $remove_alias (optional)
     * @param  \SplFileObject $cert_chain (optional)
     * @param  \SplFileObject $pk (optional)
     * @param  \SplFileObject $key_store (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAuthorizableKeystoreAsyncWithHttpInfo($intermediate_path, $authorizable_id, $operation = null, $current_password = null, $new_password = null, $re_password = null, $key_password = null, $key_store_pass = null, $alias = null, $new_alias = null, $remove_alias = null, $cert_chain = null, $pk = null, $key_store = null)
    {
        $returnType = '\OpenAPI\Client\Model\KeystoreInfo';
        $request = $this->postAuthorizableKeystoreRequest($intermediate_path, $authorizable_id, $operation, $current_password, $new_password, $re_password, $key_password, $key_store_pass, $alias, $new_alias, $remove_alias, $cert_chain, $pk, $key_store);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postAuthorizableKeystore'
     *
     * @param  string $intermediate_path (required)
     * @param  string $authorizable_id (required)
     * @param  string $operation (optional)
     * @param  string $current_password (optional)
     * @param  string $new_password (optional)
     * @param  string $re_password (optional)
     * @param  string $key_password (optional)
     * @param  string $key_store_pass (optional)
     * @param  string $alias (optional)
     * @param  string $new_alias (optional)
     * @param  string $remove_alias (optional)
     * @param  \SplFileObject $cert_chain (optional)
     * @param  \SplFileObject $pk (optional)
     * @param  \SplFileObject $key_store (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postAuthorizableKeystoreRequest($intermediate_path, $authorizable_id, $operation = null, $current_password = null, $new_password = null, $re_password = null, $key_password = null, $key_store_pass = null, $alias = null, $new_alias = null, $remove_alias = null, $cert_chain = null, $pk = null, $key_store = null)
    {
        // verify the required parameter 'intermediate_path' is set
        if ($intermediate_path === null || (is_array($intermediate_path) && count($intermediate_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $intermediate_path when calling postAuthorizableKeystore'
            );
        }
        // verify the required parameter 'authorizable_id' is set
        if ($authorizable_id === null || (is_array($authorizable_id) && count($authorizable_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorizable_id when calling postAuthorizableKeystore'
            );
        }

        $resourcePath = '/{intermediatePath}/{authorizableId}.ks.html';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($operation !== null) {
            if('form' === 'form' && is_array($operation)) {
                foreach($operation as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams[':operation'] = $operation;
            }
        }
        // query params
        if ($current_password !== null) {
            if('form' === 'form' && is_array($current_password)) {
                foreach($current_password as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['currentPassword'] = $current_password;
            }
        }
        // query params
        if ($new_password !== null) {
            if('form' === 'form' && is_array($new_password)) {
                foreach($new_password as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['newPassword'] = $new_password;
            }
        }
        // query params
        if ($re_password !== null) {
            if('form' === 'form' && is_array($re_password)) {
                foreach($re_password as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['rePassword'] = $re_password;
            }
        }
        // query params
        if ($key_password !== null) {
            if('form' === 'form' && is_array($key_password)) {
                foreach($key_password as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['keyPassword'] = $key_password;
            }
        }
        // query params
        if ($key_store_pass !== null) {
            if('form' === 'form' && is_array($key_store_pass)) {
                foreach($key_store_pass as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['keyStorePass'] = $key_store_pass;
            }
        }
        // query params
        if ($alias !== null) {
            if('form' === 'form' && is_array($alias)) {
                foreach($alias as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['alias'] = $alias;
            }
        }
        // query params
        if ($new_alias !== null) {
            if('form' === 'form' && is_array($new_alias)) {
                foreach($new_alias as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['newAlias'] = $new_alias;
            }
        }
        // query params
        if ($remove_alias !== null) {
            if('form' === 'form' && is_array($remove_alias)) {
                foreach($remove_alias as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['removeAlias'] = $remove_alias;
            }
        }


        // path params
        if ($intermediate_path !== null) {
            $resourcePath = str_replace(
                '{' . 'intermediatePath' . '}',
                ObjectSerializer::toPathValue($intermediate_path),
                $resourcePath
            );
        }
        // path params
        if ($authorizable_id !== null) {
            $resourcePath = str_replace(
                '{' . 'authorizableId' . '}',
                ObjectSerializer::toPathValue($authorizable_id),
                $resourcePath
            );
        }

        // form params
        if ($cert_chain !== null) {
            $multipart = true;
            $formParams['cert-chain'] = [];
            $paramFiles = is_array($cert_chain) ? $cert_chain : [$cert_chain];
            foreach ($paramFiles as $paramFile) {
                $formParams['cert-chain'][] = \GuzzleHttp\Psr7\try_fopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($pk !== null) {
            $multipart = true;
            $formParams['pk'] = [];
            $paramFiles = is_array($pk) ? $pk : [$pk];
            foreach ($paramFiles as $paramFile) {
                $formParams['pk'][] = \GuzzleHttp\Psr7\try_fopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($key_store !== null) {
            $multipart = true;
            $formParams['keyStore'] = [];
            $paramFiles = is_array($key_store) ? $key_store : [$key_store];
            foreach ($paramFiles as $paramFile) {
                $formParams['keyStore'][] = \GuzzleHttp\Psr7\try_fopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postAuthorizables
     *
     * @param  string $authorizable_id authorizable_id (required)
     * @param  string $intermediate_path intermediate_path (required)
     * @param  string $create_user create_user (optional)
     * @param  string $create_group create_group (optional)
     * @param  string $reppassword reppassword (optional)
     * @param  string $profile_given_name profile_given_name (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function postAuthorizables($authorizable_id, $intermediate_path, $create_user = null, $create_group = null, $reppassword = null, $profile_given_name = null)
    {
        list($response) = $this->postAuthorizablesWithHttpInfo($authorizable_id, $intermediate_path, $create_user, $create_group, $reppassword, $profile_given_name);
        return $response;
    }

    /**
     * Operation postAuthorizablesWithHttpInfo
     *
     * @param  string $authorizable_id (required)
     * @param  string $intermediate_path (required)
     * @param  string $create_user (optional)
     * @param  string $create_group (optional)
     * @param  string $reppassword (optional)
     * @param  string $profile_given_name (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAuthorizablesWithHttpInfo($authorizable_id, $intermediate_path, $create_user = null, $create_group = null, $reppassword = null, $profile_given_name = null)
    {
        $request = $this->postAuthorizablesRequest($authorizable_id, $intermediate_path, $create_user, $create_group, $reppassword, $profile_given_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                default:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postAuthorizablesAsync
     *
     * @param  string $authorizable_id (required)
     * @param  string $intermediate_path (required)
     * @param  string $create_user (optional)
     * @param  string $create_group (optional)
     * @param  string $reppassword (optional)
     * @param  string $profile_given_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAuthorizablesAsync($authorizable_id, $intermediate_path, $create_user = null, $create_group = null, $reppassword = null, $profile_given_name = null)
    {
        return $this->postAuthorizablesAsyncWithHttpInfo($authorizable_id, $intermediate_path, $create_user, $create_group, $reppassword, $profile_given_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postAuthorizablesAsyncWithHttpInfo
     *
     * @param  string $authorizable_id (required)
     * @param  string $intermediate_path (required)
     * @param  string $create_user (optional)
     * @param  string $create_group (optional)
     * @param  string $reppassword (optional)
     * @param  string $profile_given_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAuthorizablesAsyncWithHttpInfo($authorizable_id, $intermediate_path, $create_user = null, $create_group = null, $reppassword = null, $profile_given_name = null)
    {
        $returnType = 'string';
        $request = $this->postAuthorizablesRequest($authorizable_id, $intermediate_path, $create_user, $create_group, $reppassword, $profile_given_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postAuthorizables'
     *
     * @param  string $authorizable_id (required)
     * @param  string $intermediate_path (required)
     * @param  string $create_user (optional)
     * @param  string $create_group (optional)
     * @param  string $reppassword (optional)
     * @param  string $profile_given_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postAuthorizablesRequest($authorizable_id, $intermediate_path, $create_user = null, $create_group = null, $reppassword = null, $profile_given_name = null)
    {
        // verify the required parameter 'authorizable_id' is set
        if ($authorizable_id === null || (is_array($authorizable_id) && count($authorizable_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorizable_id when calling postAuthorizables'
            );
        }
        // verify the required parameter 'intermediate_path' is set
        if ($intermediate_path === null || (is_array($intermediate_path) && count($intermediate_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $intermediate_path when calling postAuthorizables'
            );
        }

        $resourcePath = '/libs/granite/security/post/authorizables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($authorizable_id !== null) {
            if('form' === 'form' && is_array($authorizable_id)) {
                foreach($authorizable_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['authorizableId'] = $authorizable_id;
            }
        }
        // query params
        if ($intermediate_path !== null) {
            if('form' === 'form' && is_array($intermediate_path)) {
                foreach($intermediate_path as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['intermediatePath'] = $intermediate_path;
            }
        }
        // query params
        if ($create_user !== null) {
            if('form' === 'form' && is_array($create_user)) {
                foreach($create_user as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['createUser'] = $create_user;
            }
        }
        // query params
        if ($create_group !== null) {
            if('form' === 'form' && is_array($create_group)) {
                foreach($create_group as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['createGroup'] = $create_group;
            }
        }
        // query params
        if ($reppassword !== null) {
            if('form' === 'form' && is_array($reppassword)) {
                foreach($reppassword as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['rep:password'] = $reppassword;
            }
        }
        // query params
        if ($profile_given_name !== null) {
            if('form' === 'form' && is_array($profile_given_name)) {
                foreach($profile_given_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['profile/givenName'] = $profile_given_name;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/html'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postConfigAdobeGraniteSamlAuthenticationHandler
     *
     * @param  string $key_store_password key_store_password (optional)
     * @param  string $key_store_password_type_hint key_store_password_type_hint (optional)
     * @param  int $service_ranking service_ranking (optional)
     * @param  string $service_ranking_type_hint service_ranking_type_hint (optional)
     * @param  bool $idp_http_redirect idp_http_redirect (optional)
     * @param  string $idp_http_redirect_type_hint idp_http_redirect_type_hint (optional)
     * @param  bool $create_user create_user (optional)
     * @param  string $create_user_type_hint create_user_type_hint (optional)
     * @param  string $default_redirect_url default_redirect_url (optional)
     * @param  string $default_redirect_url_type_hint default_redirect_url_type_hint (optional)
     * @param  string $user_id_attribute user_id_attribute (optional)
     * @param  string $user_id_attribute_type_hint user_id_attribute_type_hint (optional)
     * @param  string[] $default_groups default_groups (optional)
     * @param  string $default_groups_type_hint default_groups_type_hint (optional)
     * @param  string $idp_cert_alias idp_cert_alias (optional)
     * @param  string $idp_cert_alias_type_hint idp_cert_alias_type_hint (optional)
     * @param  bool $add_group_memberships add_group_memberships (optional)
     * @param  string $add_group_memberships_type_hint add_group_memberships_type_hint (optional)
     * @param  string[] $path path (optional)
     * @param  string $path_type_hint path_type_hint (optional)
     * @param  string[] $synchronize_attributes synchronize_attributes (optional)
     * @param  string $synchronize_attributes_type_hint synchronize_attributes_type_hint (optional)
     * @param  int $clock_tolerance clock_tolerance (optional)
     * @param  string $clock_tolerance_type_hint clock_tolerance_type_hint (optional)
     * @param  string $group_membership_attribute group_membership_attribute (optional)
     * @param  string $group_membership_attribute_type_hint group_membership_attribute_type_hint (optional)
     * @param  string $idp_url idp_url (optional)
     * @param  string $idp_url_type_hint idp_url_type_hint (optional)
     * @param  string $logout_url logout_url (optional)
     * @param  string $logout_url_type_hint logout_url_type_hint (optional)
     * @param  string $service_provider_entity_id service_provider_entity_id (optional)
     * @param  string $service_provider_entity_id_type_hint service_provider_entity_id_type_hint (optional)
     * @param  string $assertion_consumer_service_url assertion_consumer_service_url (optional)
     * @param  string $assertion_consumer_service_url_type_hint assertion_consumer_service_url_type_hint (optional)
     * @param  bool $handle_logout handle_logout (optional)
     * @param  string $handle_logout_type_hint handle_logout_type_hint (optional)
     * @param  string $sp_private_key_alias sp_private_key_alias (optional)
     * @param  string $sp_private_key_alias_type_hint sp_private_key_alias_type_hint (optional)
     * @param  bool $use_encryption use_encryption (optional)
     * @param  string $use_encryption_type_hint use_encryption_type_hint (optional)
     * @param  string $name_id_format name_id_format (optional)
     * @param  string $name_id_format_type_hint name_id_format_type_hint (optional)
     * @param  string $digest_method digest_method (optional)
     * @param  string $digest_method_type_hint digest_method_type_hint (optional)
     * @param  string $signature_method signature_method (optional)
     * @param  string $signature_method_type_hint signature_method_type_hint (optional)
     * @param  string $user_intermediate_path user_intermediate_path (optional)
     * @param  string $user_intermediate_path_type_hint user_intermediate_path_type_hint (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postConfigAdobeGraniteSamlAuthenticationHandler($key_store_password = null, $key_store_password_type_hint = null, $service_ranking = null, $service_ranking_type_hint = null, $idp_http_redirect = null, $idp_http_redirect_type_hint = null, $create_user = null, $create_user_type_hint = null, $default_redirect_url = null, $default_redirect_url_type_hint = null, $user_id_attribute = null, $user_id_attribute_type_hint = null, $default_groups = null, $default_groups_type_hint = null, $idp_cert_alias = null, $idp_cert_alias_type_hint = null, $add_group_memberships = null, $add_group_memberships_type_hint = null, $path = null, $path_type_hint = null, $synchronize_attributes = null, $synchronize_attributes_type_hint = null, $clock_tolerance = null, $clock_tolerance_type_hint = null, $group_membership_attribute = null, $group_membership_attribute_type_hint = null, $idp_url = null, $idp_url_type_hint = null, $logout_url = null, $logout_url_type_hint = null, $service_provider_entity_id = null, $service_provider_entity_id_type_hint = null, $assertion_consumer_service_url = null, $assertion_consumer_service_url_type_hint = null, $handle_logout = null, $handle_logout_type_hint = null, $sp_private_key_alias = null, $sp_private_key_alias_type_hint = null, $use_encryption = null, $use_encryption_type_hint = null, $name_id_format = null, $name_id_format_type_hint = null, $digest_method = null, $digest_method_type_hint = null, $signature_method = null, $signature_method_type_hint = null, $user_intermediate_path = null, $user_intermediate_path_type_hint = null)
    {
        $this->postConfigAdobeGraniteSamlAuthenticationHandlerWithHttpInfo($key_store_password, $key_store_password_type_hint, $service_ranking, $service_ranking_type_hint, $idp_http_redirect, $idp_http_redirect_type_hint, $create_user, $create_user_type_hint, $default_redirect_url, $default_redirect_url_type_hint, $user_id_attribute, $user_id_attribute_type_hint, $default_groups, $default_groups_type_hint, $idp_cert_alias, $idp_cert_alias_type_hint, $add_group_memberships, $add_group_memberships_type_hint, $path, $path_type_hint, $synchronize_attributes, $synchronize_attributes_type_hint, $clock_tolerance, $clock_tolerance_type_hint, $group_membership_attribute, $group_membership_attribute_type_hint, $idp_url, $idp_url_type_hint, $logout_url, $logout_url_type_hint, $service_provider_entity_id, $service_provider_entity_id_type_hint, $assertion_consumer_service_url, $assertion_consumer_service_url_type_hint, $handle_logout, $handle_logout_type_hint, $sp_private_key_alias, $sp_private_key_alias_type_hint, $use_encryption, $use_encryption_type_hint, $name_id_format, $name_id_format_type_hint, $digest_method, $digest_method_type_hint, $signature_method, $signature_method_type_hint, $user_intermediate_path, $user_intermediate_path_type_hint);
    }

    /**
     * Operation postConfigAdobeGraniteSamlAuthenticationHandlerWithHttpInfo
     *
     * @param  string $key_store_password (optional)
     * @param  string $key_store_password_type_hint (optional)
     * @param  int $service_ranking (optional)
     * @param  string $service_ranking_type_hint (optional)
     * @param  bool $idp_http_redirect (optional)
     * @param  string $idp_http_redirect_type_hint (optional)
     * @param  bool $create_user (optional)
     * @param  string $create_user_type_hint (optional)
     * @param  string $default_redirect_url (optional)
     * @param  string $default_redirect_url_type_hint (optional)
     * @param  string $user_id_attribute (optional)
     * @param  string $user_id_attribute_type_hint (optional)
     * @param  string[] $default_groups (optional)
     * @param  string $default_groups_type_hint (optional)
     * @param  string $idp_cert_alias (optional)
     * @param  string $idp_cert_alias_type_hint (optional)
     * @param  bool $add_group_memberships (optional)
     * @param  string $add_group_memberships_type_hint (optional)
     * @param  string[] $path (optional)
     * @param  string $path_type_hint (optional)
     * @param  string[] $synchronize_attributes (optional)
     * @param  string $synchronize_attributes_type_hint (optional)
     * @param  int $clock_tolerance (optional)
     * @param  string $clock_tolerance_type_hint (optional)
     * @param  string $group_membership_attribute (optional)
     * @param  string $group_membership_attribute_type_hint (optional)
     * @param  string $idp_url (optional)
     * @param  string $idp_url_type_hint (optional)
     * @param  string $logout_url (optional)
     * @param  string $logout_url_type_hint (optional)
     * @param  string $service_provider_entity_id (optional)
     * @param  string $service_provider_entity_id_type_hint (optional)
     * @param  string $assertion_consumer_service_url (optional)
     * @param  string $assertion_consumer_service_url_type_hint (optional)
     * @param  bool $handle_logout (optional)
     * @param  string $handle_logout_type_hint (optional)
     * @param  string $sp_private_key_alias (optional)
     * @param  string $sp_private_key_alias_type_hint (optional)
     * @param  bool $use_encryption (optional)
     * @param  string $use_encryption_type_hint (optional)
     * @param  string $name_id_format (optional)
     * @param  string $name_id_format_type_hint (optional)
     * @param  string $digest_method (optional)
     * @param  string $digest_method_type_hint (optional)
     * @param  string $signature_method (optional)
     * @param  string $signature_method_type_hint (optional)
     * @param  string $user_intermediate_path (optional)
     * @param  string $user_intermediate_path_type_hint (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postConfigAdobeGraniteSamlAuthenticationHandlerWithHttpInfo($key_store_password = null, $key_store_password_type_hint = null, $service_ranking = null, $service_ranking_type_hint = null, $idp_http_redirect = null, $idp_http_redirect_type_hint = null, $create_user = null, $create_user_type_hint = null, $default_redirect_url = null, $default_redirect_url_type_hint = null, $user_id_attribute = null, $user_id_attribute_type_hint = null, $default_groups = null, $default_groups_type_hint = null, $idp_cert_alias = null, $idp_cert_alias_type_hint = null, $add_group_memberships = null, $add_group_memberships_type_hint = null, $path = null, $path_type_hint = null, $synchronize_attributes = null, $synchronize_attributes_type_hint = null, $clock_tolerance = null, $clock_tolerance_type_hint = null, $group_membership_attribute = null, $group_membership_attribute_type_hint = null, $idp_url = null, $idp_url_type_hint = null, $logout_url = null, $logout_url_type_hint = null, $service_provider_entity_id = null, $service_provider_entity_id_type_hint = null, $assertion_consumer_service_url = null, $assertion_consumer_service_url_type_hint = null, $handle_logout = null, $handle_logout_type_hint = null, $sp_private_key_alias = null, $sp_private_key_alias_type_hint = null, $use_encryption = null, $use_encryption_type_hint = null, $name_id_format = null, $name_id_format_type_hint = null, $digest_method = null, $digest_method_type_hint = null, $signature_method = null, $signature_method_type_hint = null, $user_intermediate_path = null, $user_intermediate_path_type_hint = null)
    {
        $request = $this->postConfigAdobeGraniteSamlAuthenticationHandlerRequest($key_store_password, $key_store_password_type_hint, $service_ranking, $service_ranking_type_hint, $idp_http_redirect, $idp_http_redirect_type_hint, $create_user, $create_user_type_hint, $default_redirect_url, $default_redirect_url_type_hint, $user_id_attribute, $user_id_attribute_type_hint, $default_groups, $default_groups_type_hint, $idp_cert_alias, $idp_cert_alias_type_hint, $add_group_memberships, $add_group_memberships_type_hint, $path, $path_type_hint, $synchronize_attributes, $synchronize_attributes_type_hint, $clock_tolerance, $clock_tolerance_type_hint, $group_membership_attribute, $group_membership_attribute_type_hint, $idp_url, $idp_url_type_hint, $logout_url, $logout_url_type_hint, $service_provider_entity_id, $service_provider_entity_id_type_hint, $assertion_consumer_service_url, $assertion_consumer_service_url_type_hint, $handle_logout, $handle_logout_type_hint, $sp_private_key_alias, $sp_private_key_alias_type_hint, $use_encryption, $use_encryption_type_hint, $name_id_format, $name_id_format_type_hint, $digest_method, $digest_method_type_hint, $signature_method, $signature_method_type_hint, $user_intermediate_path, $user_intermediate_path_type_hint);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postConfigAdobeGraniteSamlAuthenticationHandlerAsync
     *
     * @param  string $key_store_password (optional)
     * @param  string $key_store_password_type_hint (optional)
     * @param  int $service_ranking (optional)
     * @param  string $service_ranking_type_hint (optional)
     * @param  bool $idp_http_redirect (optional)
     * @param  string $idp_http_redirect_type_hint (optional)
     * @param  bool $create_user (optional)
     * @param  string $create_user_type_hint (optional)
     * @param  string $default_redirect_url (optional)
     * @param  string $default_redirect_url_type_hint (optional)
     * @param  string $user_id_attribute (optional)
     * @param  string $user_id_attribute_type_hint (optional)
     * @param  string[] $default_groups (optional)
     * @param  string $default_groups_type_hint (optional)
     * @param  string $idp_cert_alias (optional)
     * @param  string $idp_cert_alias_type_hint (optional)
     * @param  bool $add_group_memberships (optional)
     * @param  string $add_group_memberships_type_hint (optional)
     * @param  string[] $path (optional)
     * @param  string $path_type_hint (optional)
     * @param  string[] $synchronize_attributes (optional)
     * @param  string $synchronize_attributes_type_hint (optional)
     * @param  int $clock_tolerance (optional)
     * @param  string $clock_tolerance_type_hint (optional)
     * @param  string $group_membership_attribute (optional)
     * @param  string $group_membership_attribute_type_hint (optional)
     * @param  string $idp_url (optional)
     * @param  string $idp_url_type_hint (optional)
     * @param  string $logout_url (optional)
     * @param  string $logout_url_type_hint (optional)
     * @param  string $service_provider_entity_id (optional)
     * @param  string $service_provider_entity_id_type_hint (optional)
     * @param  string $assertion_consumer_service_url (optional)
     * @param  string $assertion_consumer_service_url_type_hint (optional)
     * @param  bool $handle_logout (optional)
     * @param  string $handle_logout_type_hint (optional)
     * @param  string $sp_private_key_alias (optional)
     * @param  string $sp_private_key_alias_type_hint (optional)
     * @param  bool $use_encryption (optional)
     * @param  string $use_encryption_type_hint (optional)
     * @param  string $name_id_format (optional)
     * @param  string $name_id_format_type_hint (optional)
     * @param  string $digest_method (optional)
     * @param  string $digest_method_type_hint (optional)
     * @param  string $signature_method (optional)
     * @param  string $signature_method_type_hint (optional)
     * @param  string $user_intermediate_path (optional)
     * @param  string $user_intermediate_path_type_hint (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConfigAdobeGraniteSamlAuthenticationHandlerAsync($key_store_password = null, $key_store_password_type_hint = null, $service_ranking = null, $service_ranking_type_hint = null, $idp_http_redirect = null, $idp_http_redirect_type_hint = null, $create_user = null, $create_user_type_hint = null, $default_redirect_url = null, $default_redirect_url_type_hint = null, $user_id_attribute = null, $user_id_attribute_type_hint = null, $default_groups = null, $default_groups_type_hint = null, $idp_cert_alias = null, $idp_cert_alias_type_hint = null, $add_group_memberships = null, $add_group_memberships_type_hint = null, $path = null, $path_type_hint = null, $synchronize_attributes = null, $synchronize_attributes_type_hint = null, $clock_tolerance = null, $clock_tolerance_type_hint = null, $group_membership_attribute = null, $group_membership_attribute_type_hint = null, $idp_url = null, $idp_url_type_hint = null, $logout_url = null, $logout_url_type_hint = null, $service_provider_entity_id = null, $service_provider_entity_id_type_hint = null, $assertion_consumer_service_url = null, $assertion_consumer_service_url_type_hint = null, $handle_logout = null, $handle_logout_type_hint = null, $sp_private_key_alias = null, $sp_private_key_alias_type_hint = null, $use_encryption = null, $use_encryption_type_hint = null, $name_id_format = null, $name_id_format_type_hint = null, $digest_method = null, $digest_method_type_hint = null, $signature_method = null, $signature_method_type_hint = null, $user_intermediate_path = null, $user_intermediate_path_type_hint = null)
    {
        return $this->postConfigAdobeGraniteSamlAuthenticationHandlerAsyncWithHttpInfo($key_store_password, $key_store_password_type_hint, $service_ranking, $service_ranking_type_hint, $idp_http_redirect, $idp_http_redirect_type_hint, $create_user, $create_user_type_hint, $default_redirect_url, $default_redirect_url_type_hint, $user_id_attribute, $user_id_attribute_type_hint, $default_groups, $default_groups_type_hint, $idp_cert_alias, $idp_cert_alias_type_hint, $add_group_memberships, $add_group_memberships_type_hint, $path, $path_type_hint, $synchronize_attributes, $synchronize_attributes_type_hint, $clock_tolerance, $clock_tolerance_type_hint, $group_membership_attribute, $group_membership_attribute_type_hint, $idp_url, $idp_url_type_hint, $logout_url, $logout_url_type_hint, $service_provider_entity_id, $service_provider_entity_id_type_hint, $assertion_consumer_service_url, $assertion_consumer_service_url_type_hint, $handle_logout, $handle_logout_type_hint, $sp_private_key_alias, $sp_private_key_alias_type_hint, $use_encryption, $use_encryption_type_hint, $name_id_format, $name_id_format_type_hint, $digest_method, $digest_method_type_hint, $signature_method, $signature_method_type_hint, $user_intermediate_path, $user_intermediate_path_type_hint)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postConfigAdobeGraniteSamlAuthenticationHandlerAsyncWithHttpInfo
     *
     * @param  string $key_store_password (optional)
     * @param  string $key_store_password_type_hint (optional)
     * @param  int $service_ranking (optional)
     * @param  string $service_ranking_type_hint (optional)
     * @param  bool $idp_http_redirect (optional)
     * @param  string $idp_http_redirect_type_hint (optional)
     * @param  bool $create_user (optional)
     * @param  string $create_user_type_hint (optional)
     * @param  string $default_redirect_url (optional)
     * @param  string $default_redirect_url_type_hint (optional)
     * @param  string $user_id_attribute (optional)
     * @param  string $user_id_attribute_type_hint (optional)
     * @param  string[] $default_groups (optional)
     * @param  string $default_groups_type_hint (optional)
     * @param  string $idp_cert_alias (optional)
     * @param  string $idp_cert_alias_type_hint (optional)
     * @param  bool $add_group_memberships (optional)
     * @param  string $add_group_memberships_type_hint (optional)
     * @param  string[] $path (optional)
     * @param  string $path_type_hint (optional)
     * @param  string[] $synchronize_attributes (optional)
     * @param  string $synchronize_attributes_type_hint (optional)
     * @param  int $clock_tolerance (optional)
     * @param  string $clock_tolerance_type_hint (optional)
     * @param  string $group_membership_attribute (optional)
     * @param  string $group_membership_attribute_type_hint (optional)
     * @param  string $idp_url (optional)
     * @param  string $idp_url_type_hint (optional)
     * @param  string $logout_url (optional)
     * @param  string $logout_url_type_hint (optional)
     * @param  string $service_provider_entity_id (optional)
     * @param  string $service_provider_entity_id_type_hint (optional)
     * @param  string $assertion_consumer_service_url (optional)
     * @param  string $assertion_consumer_service_url_type_hint (optional)
     * @param  bool $handle_logout (optional)
     * @param  string $handle_logout_type_hint (optional)
     * @param  string $sp_private_key_alias (optional)
     * @param  string $sp_private_key_alias_type_hint (optional)
     * @param  bool $use_encryption (optional)
     * @param  string $use_encryption_type_hint (optional)
     * @param  string $name_id_format (optional)
     * @param  string $name_id_format_type_hint (optional)
     * @param  string $digest_method (optional)
     * @param  string $digest_method_type_hint (optional)
     * @param  string $signature_method (optional)
     * @param  string $signature_method_type_hint (optional)
     * @param  string $user_intermediate_path (optional)
     * @param  string $user_intermediate_path_type_hint (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConfigAdobeGraniteSamlAuthenticationHandlerAsyncWithHttpInfo($key_store_password = null, $key_store_password_type_hint = null, $service_ranking = null, $service_ranking_type_hint = null, $idp_http_redirect = null, $idp_http_redirect_type_hint = null, $create_user = null, $create_user_type_hint = null, $default_redirect_url = null, $default_redirect_url_type_hint = null, $user_id_attribute = null, $user_id_attribute_type_hint = null, $default_groups = null, $default_groups_type_hint = null, $idp_cert_alias = null, $idp_cert_alias_type_hint = null, $add_group_memberships = null, $add_group_memberships_type_hint = null, $path = null, $path_type_hint = null, $synchronize_attributes = null, $synchronize_attributes_type_hint = null, $clock_tolerance = null, $clock_tolerance_type_hint = null, $group_membership_attribute = null, $group_membership_attribute_type_hint = null, $idp_url = null, $idp_url_type_hint = null, $logout_url = null, $logout_url_type_hint = null, $service_provider_entity_id = null, $service_provider_entity_id_type_hint = null, $assertion_consumer_service_url = null, $assertion_consumer_service_url_type_hint = null, $handle_logout = null, $handle_logout_type_hint = null, $sp_private_key_alias = null, $sp_private_key_alias_type_hint = null, $use_encryption = null, $use_encryption_type_hint = null, $name_id_format = null, $name_id_format_type_hint = null, $digest_method = null, $digest_method_type_hint = null, $signature_method = null, $signature_method_type_hint = null, $user_intermediate_path = null, $user_intermediate_path_type_hint = null)
    {
        $returnType = '';
        $request = $this->postConfigAdobeGraniteSamlAuthenticationHandlerRequest($key_store_password, $key_store_password_type_hint, $service_ranking, $service_ranking_type_hint, $idp_http_redirect, $idp_http_redirect_type_hint, $create_user, $create_user_type_hint, $default_redirect_url, $default_redirect_url_type_hint, $user_id_attribute, $user_id_attribute_type_hint, $default_groups, $default_groups_type_hint, $idp_cert_alias, $idp_cert_alias_type_hint, $add_group_memberships, $add_group_memberships_type_hint, $path, $path_type_hint, $synchronize_attributes, $synchronize_attributes_type_hint, $clock_tolerance, $clock_tolerance_type_hint, $group_membership_attribute, $group_membership_attribute_type_hint, $idp_url, $idp_url_type_hint, $logout_url, $logout_url_type_hint, $service_provider_entity_id, $service_provider_entity_id_type_hint, $assertion_consumer_service_url, $assertion_consumer_service_url_type_hint, $handle_logout, $handle_logout_type_hint, $sp_private_key_alias, $sp_private_key_alias_type_hint, $use_encryption, $use_encryption_type_hint, $name_id_format, $name_id_format_type_hint, $digest_method, $digest_method_type_hint, $signature_method, $signature_method_type_hint, $user_intermediate_path, $user_intermediate_path_type_hint);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postConfigAdobeGraniteSamlAuthenticationHandler'
     *
     * @param  string $key_store_password (optional)
     * @param  string $key_store_password_type_hint (optional)
     * @param  int $service_ranking (optional)
     * @param  string $service_ranking_type_hint (optional)
     * @param  bool $idp_http_redirect (optional)
     * @param  string $idp_http_redirect_type_hint (optional)
     * @param  bool $create_user (optional)
     * @param  string $create_user_type_hint (optional)
     * @param  string $default_redirect_url (optional)
     * @param  string $default_redirect_url_type_hint (optional)
     * @param  string $user_id_attribute (optional)
     * @param  string $user_id_attribute_type_hint (optional)
     * @param  string[] $default_groups (optional)
     * @param  string $default_groups_type_hint (optional)
     * @param  string $idp_cert_alias (optional)
     * @param  string $idp_cert_alias_type_hint (optional)
     * @param  bool $add_group_memberships (optional)
     * @param  string $add_group_memberships_type_hint (optional)
     * @param  string[] $path (optional)
     * @param  string $path_type_hint (optional)
     * @param  string[] $synchronize_attributes (optional)
     * @param  string $synchronize_attributes_type_hint (optional)
     * @param  int $clock_tolerance (optional)
     * @param  string $clock_tolerance_type_hint (optional)
     * @param  string $group_membership_attribute (optional)
     * @param  string $group_membership_attribute_type_hint (optional)
     * @param  string $idp_url (optional)
     * @param  string $idp_url_type_hint (optional)
     * @param  string $logout_url (optional)
     * @param  string $logout_url_type_hint (optional)
     * @param  string $service_provider_entity_id (optional)
     * @param  string $service_provider_entity_id_type_hint (optional)
     * @param  string $assertion_consumer_service_url (optional)
     * @param  string $assertion_consumer_service_url_type_hint (optional)
     * @param  bool $handle_logout (optional)
     * @param  string $handle_logout_type_hint (optional)
     * @param  string $sp_private_key_alias (optional)
     * @param  string $sp_private_key_alias_type_hint (optional)
     * @param  bool $use_encryption (optional)
     * @param  string $use_encryption_type_hint (optional)
     * @param  string $name_id_format (optional)
     * @param  string $name_id_format_type_hint (optional)
     * @param  string $digest_method (optional)
     * @param  string $digest_method_type_hint (optional)
     * @param  string $signature_method (optional)
     * @param  string $signature_method_type_hint (optional)
     * @param  string $user_intermediate_path (optional)
     * @param  string $user_intermediate_path_type_hint (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postConfigAdobeGraniteSamlAuthenticationHandlerRequest($key_store_password = null, $key_store_password_type_hint = null, $service_ranking = null, $service_ranking_type_hint = null, $idp_http_redirect = null, $idp_http_redirect_type_hint = null, $create_user = null, $create_user_type_hint = null, $default_redirect_url = null, $default_redirect_url_type_hint = null, $user_id_attribute = null, $user_id_attribute_type_hint = null, $default_groups = null, $default_groups_type_hint = null, $idp_cert_alias = null, $idp_cert_alias_type_hint = null, $add_group_memberships = null, $add_group_memberships_type_hint = null, $path = null, $path_type_hint = null, $synchronize_attributes = null, $synchronize_attributes_type_hint = null, $clock_tolerance = null, $clock_tolerance_type_hint = null, $group_membership_attribute = null, $group_membership_attribute_type_hint = null, $idp_url = null, $idp_url_type_hint = null, $logout_url = null, $logout_url_type_hint = null, $service_provider_entity_id = null, $service_provider_entity_id_type_hint = null, $assertion_consumer_service_url = null, $assertion_consumer_service_url_type_hint = null, $handle_logout = null, $handle_logout_type_hint = null, $sp_private_key_alias = null, $sp_private_key_alias_type_hint = null, $use_encryption = null, $use_encryption_type_hint = null, $name_id_format = null, $name_id_format_type_hint = null, $digest_method = null, $digest_method_type_hint = null, $signature_method = null, $signature_method_type_hint = null, $user_intermediate_path = null, $user_intermediate_path_type_hint = null)
    {

        $resourcePath = '/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($key_store_password !== null) {
            if('form' === 'form' && is_array($key_store_password)) {
                foreach($key_store_password as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['keyStorePassword'] = $key_store_password;
            }
        }
        // query params
        if ($key_store_password_type_hint !== null) {
            if('form' === 'form' && is_array($key_store_password_type_hint)) {
                foreach($key_store_password_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['keyStorePassword@TypeHint'] = $key_store_password_type_hint;
            }
        }
        // query params
        if ($service_ranking !== null) {
            if('form' === 'form' && is_array($service_ranking)) {
                foreach($service_ranking as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['service.ranking'] = $service_ranking;
            }
        }
        // query params
        if ($service_ranking_type_hint !== null) {
            if('form' === 'form' && is_array($service_ranking_type_hint)) {
                foreach($service_ranking_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['service.ranking@TypeHint'] = $service_ranking_type_hint;
            }
        }
        // query params
        if ($idp_http_redirect !== null) {
            if('form' === 'form' && is_array($idp_http_redirect)) {
                foreach($idp_http_redirect as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['idpHttpRedirect'] = $idp_http_redirect;
            }
        }
        // query params
        if ($idp_http_redirect_type_hint !== null) {
            if('form' === 'form' && is_array($idp_http_redirect_type_hint)) {
                foreach($idp_http_redirect_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['idpHttpRedirect@TypeHint'] = $idp_http_redirect_type_hint;
            }
        }
        // query params
        if ($create_user !== null) {
            if('form' === 'form' && is_array($create_user)) {
                foreach($create_user as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['createUser'] = $create_user;
            }
        }
        // query params
        if ($create_user_type_hint !== null) {
            if('form' === 'form' && is_array($create_user_type_hint)) {
                foreach($create_user_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['createUser@TypeHint'] = $create_user_type_hint;
            }
        }
        // query params
        if ($default_redirect_url !== null) {
            if('form' === 'form' && is_array($default_redirect_url)) {
                foreach($default_redirect_url as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['defaultRedirectUrl'] = $default_redirect_url;
            }
        }
        // query params
        if ($default_redirect_url_type_hint !== null) {
            if('form' === 'form' && is_array($default_redirect_url_type_hint)) {
                foreach($default_redirect_url_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['defaultRedirectUrl@TypeHint'] = $default_redirect_url_type_hint;
            }
        }
        // query params
        if ($user_id_attribute !== null) {
            if('form' === 'form' && is_array($user_id_attribute)) {
                foreach($user_id_attribute as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userIDAttribute'] = $user_id_attribute;
            }
        }
        // query params
        if ($user_id_attribute_type_hint !== null) {
            if('form' === 'form' && is_array($user_id_attribute_type_hint)) {
                foreach($user_id_attribute_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userIDAttribute@TypeHint'] = $user_id_attribute_type_hint;
            }
        }
        // query params
        if ($default_groups !== null) {
            if('form' === 'form' && is_array($default_groups)) {
                foreach($default_groups as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['defaultGroups'] = $default_groups;
            }
        }
        // query params
        if ($default_groups_type_hint !== null) {
            if('form' === 'form' && is_array($default_groups_type_hint)) {
                foreach($default_groups_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['defaultGroups@TypeHint'] = $default_groups_type_hint;
            }
        }
        // query params
        if ($idp_cert_alias !== null) {
            if('form' === 'form' && is_array($idp_cert_alias)) {
                foreach($idp_cert_alias as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['idpCertAlias'] = $idp_cert_alias;
            }
        }
        // query params
        if ($idp_cert_alias_type_hint !== null) {
            if('form' === 'form' && is_array($idp_cert_alias_type_hint)) {
                foreach($idp_cert_alias_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['idpCertAlias@TypeHint'] = $idp_cert_alias_type_hint;
            }
        }
        // query params
        if ($add_group_memberships !== null) {
            if('form' === 'form' && is_array($add_group_memberships)) {
                foreach($add_group_memberships as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['addGroupMemberships'] = $add_group_memberships;
            }
        }
        // query params
        if ($add_group_memberships_type_hint !== null) {
            if('form' === 'form' && is_array($add_group_memberships_type_hint)) {
                foreach($add_group_memberships_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['addGroupMemberships@TypeHint'] = $add_group_memberships_type_hint;
            }
        }
        // query params
        if ($path !== null) {
            if('form' === 'form' && is_array($path)) {
                foreach($path as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['path'] = $path;
            }
        }
        // query params
        if ($path_type_hint !== null) {
            if('form' === 'form' && is_array($path_type_hint)) {
                foreach($path_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['path@TypeHint'] = $path_type_hint;
            }
        }
        // query params
        if ($synchronize_attributes !== null) {
            if('form' === 'form' && is_array($synchronize_attributes)) {
                foreach($synchronize_attributes as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['synchronizeAttributes'] = $synchronize_attributes;
            }
        }
        // query params
        if ($synchronize_attributes_type_hint !== null) {
            if('form' === 'form' && is_array($synchronize_attributes_type_hint)) {
                foreach($synchronize_attributes_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['synchronizeAttributes@TypeHint'] = $synchronize_attributes_type_hint;
            }
        }
        // query params
        if ($clock_tolerance !== null) {
            if('form' === 'form' && is_array($clock_tolerance)) {
                foreach($clock_tolerance as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['clockTolerance'] = $clock_tolerance;
            }
        }
        // query params
        if ($clock_tolerance_type_hint !== null) {
            if('form' === 'form' && is_array($clock_tolerance_type_hint)) {
                foreach($clock_tolerance_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['clockTolerance@TypeHint'] = $clock_tolerance_type_hint;
            }
        }
        // query params
        if ($group_membership_attribute !== null) {
            if('form' === 'form' && is_array($group_membership_attribute)) {
                foreach($group_membership_attribute as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['groupMembershipAttribute'] = $group_membership_attribute;
            }
        }
        // query params
        if ($group_membership_attribute_type_hint !== null) {
            if('form' === 'form' && is_array($group_membership_attribute_type_hint)) {
                foreach($group_membership_attribute_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['groupMembershipAttribute@TypeHint'] = $group_membership_attribute_type_hint;
            }
        }
        // query params
        if ($idp_url !== null) {
            if('form' === 'form' && is_array($idp_url)) {
                foreach($idp_url as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['idpUrl'] = $idp_url;
            }
        }
        // query params
        if ($idp_url_type_hint !== null) {
            if('form' === 'form' && is_array($idp_url_type_hint)) {
                foreach($idp_url_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['idpUrl@TypeHint'] = $idp_url_type_hint;
            }
        }
        // query params
        if ($logout_url !== null) {
            if('form' === 'form' && is_array($logout_url)) {
                foreach($logout_url as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['logoutUrl'] = $logout_url;
            }
        }
        // query params
        if ($logout_url_type_hint !== null) {
            if('form' === 'form' && is_array($logout_url_type_hint)) {
                foreach($logout_url_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['logoutUrl@TypeHint'] = $logout_url_type_hint;
            }
        }
        // query params
        if ($service_provider_entity_id !== null) {
            if('form' === 'form' && is_array($service_provider_entity_id)) {
                foreach($service_provider_entity_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['serviceProviderEntityId'] = $service_provider_entity_id;
            }
        }
        // query params
        if ($service_provider_entity_id_type_hint !== null) {
            if('form' === 'form' && is_array($service_provider_entity_id_type_hint)) {
                foreach($service_provider_entity_id_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['serviceProviderEntityId@TypeHint'] = $service_provider_entity_id_type_hint;
            }
        }
        // query params
        if ($assertion_consumer_service_url !== null) {
            if('form' === 'form' && is_array($assertion_consumer_service_url)) {
                foreach($assertion_consumer_service_url as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['assertionConsumerServiceURL'] = $assertion_consumer_service_url;
            }
        }
        // query params
        if ($assertion_consumer_service_url_type_hint !== null) {
            if('form' === 'form' && is_array($assertion_consumer_service_url_type_hint)) {
                foreach($assertion_consumer_service_url_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['assertionConsumerServiceURL@TypeHint'] = $assertion_consumer_service_url_type_hint;
            }
        }
        // query params
        if ($handle_logout !== null) {
            if('form' === 'form' && is_array($handle_logout)) {
                foreach($handle_logout as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['handleLogout'] = $handle_logout;
            }
        }
        // query params
        if ($handle_logout_type_hint !== null) {
            if('form' === 'form' && is_array($handle_logout_type_hint)) {
                foreach($handle_logout_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['handleLogout@TypeHint'] = $handle_logout_type_hint;
            }
        }
        // query params
        if ($sp_private_key_alias !== null) {
            if('form' === 'form' && is_array($sp_private_key_alias)) {
                foreach($sp_private_key_alias as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['spPrivateKeyAlias'] = $sp_private_key_alias;
            }
        }
        // query params
        if ($sp_private_key_alias_type_hint !== null) {
            if('form' === 'form' && is_array($sp_private_key_alias_type_hint)) {
                foreach($sp_private_key_alias_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['spPrivateKeyAlias@TypeHint'] = $sp_private_key_alias_type_hint;
            }
        }
        // query params
        if ($use_encryption !== null) {
            if('form' === 'form' && is_array($use_encryption)) {
                foreach($use_encryption as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['useEncryption'] = $use_encryption;
            }
        }
        // query params
        if ($use_encryption_type_hint !== null) {
            if('form' === 'form' && is_array($use_encryption_type_hint)) {
                foreach($use_encryption_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['useEncryption@TypeHint'] = $use_encryption_type_hint;
            }
        }
        // query params
        if ($name_id_format !== null) {
            if('form' === 'form' && is_array($name_id_format)) {
                foreach($name_id_format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['nameIdFormat'] = $name_id_format;
            }
        }
        // query params
        if ($name_id_format_type_hint !== null) {
            if('form' === 'form' && is_array($name_id_format_type_hint)) {
                foreach($name_id_format_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['nameIdFormat@TypeHint'] = $name_id_format_type_hint;
            }
        }
        // query params
        if ($digest_method !== null) {
            if('form' === 'form' && is_array($digest_method)) {
                foreach($digest_method as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['digestMethod'] = $digest_method;
            }
        }
        // query params
        if ($digest_method_type_hint !== null) {
            if('form' === 'form' && is_array($digest_method_type_hint)) {
                foreach($digest_method_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['digestMethod@TypeHint'] = $digest_method_type_hint;
            }
        }
        // query params
        if ($signature_method !== null) {
            if('form' === 'form' && is_array($signature_method)) {
                foreach($signature_method as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['signatureMethod'] = $signature_method;
            }
        }
        // query params
        if ($signature_method_type_hint !== null) {
            if('form' === 'form' && is_array($signature_method_type_hint)) {
                foreach($signature_method_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['signatureMethod@TypeHint'] = $signature_method_type_hint;
            }
        }
        // query params
        if ($user_intermediate_path !== null) {
            if('form' === 'form' && is_array($user_intermediate_path)) {
                foreach($user_intermediate_path as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userIntermediatePath'] = $user_intermediate_path;
            }
        }
        // query params
        if ($user_intermediate_path_type_hint !== null) {
            if('form' === 'form' && is_array($user_intermediate_path_type_hint)) {
                foreach($user_intermediate_path_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userIntermediatePath@TypeHint'] = $user_intermediate_path_type_hint;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postConfigApacheFelixJettyBasedHttpService
     *
     * @param  bool $org_apache_felix_https_nio org_apache_felix_https_nio (optional)
     * @param  string $org_apache_felix_https_nio_type_hint org_apache_felix_https_nio_type_hint (optional)
     * @param  string $org_apache_felix_https_keystore org_apache_felix_https_keystore (optional)
     * @param  string $org_apache_felix_https_keystore_type_hint org_apache_felix_https_keystore_type_hint (optional)
     * @param  string $org_apache_felix_https_keystore_password org_apache_felix_https_keystore_password (optional)
     * @param  string $org_apache_felix_https_keystore_password_type_hint org_apache_felix_https_keystore_password_type_hint (optional)
     * @param  string $org_apache_felix_https_keystore_key org_apache_felix_https_keystore_key (optional)
     * @param  string $org_apache_felix_https_keystore_key_type_hint org_apache_felix_https_keystore_key_type_hint (optional)
     * @param  string $org_apache_felix_https_keystore_key_password org_apache_felix_https_keystore_key_password (optional)
     * @param  string $org_apache_felix_https_keystore_key_password_type_hint org_apache_felix_https_keystore_key_password_type_hint (optional)
     * @param  string $org_apache_felix_https_truststore org_apache_felix_https_truststore (optional)
     * @param  string $org_apache_felix_https_truststore_type_hint org_apache_felix_https_truststore_type_hint (optional)
     * @param  string $org_apache_felix_https_truststore_password org_apache_felix_https_truststore_password (optional)
     * @param  string $org_apache_felix_https_truststore_password_type_hint org_apache_felix_https_truststore_password_type_hint (optional)
     * @param  string $org_apache_felix_https_clientcertificate org_apache_felix_https_clientcertificate (optional)
     * @param  string $org_apache_felix_https_clientcertificate_type_hint org_apache_felix_https_clientcertificate_type_hint (optional)
     * @param  bool $org_apache_felix_https_enable org_apache_felix_https_enable (optional)
     * @param  string $org_apache_felix_https_enable_type_hint org_apache_felix_https_enable_type_hint (optional)
     * @param  string $org_osgi_service_http_port_secure org_osgi_service_http_port_secure (optional)
     * @param  string $org_osgi_service_http_port_secure_type_hint org_osgi_service_http_port_secure_type_hint (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postConfigApacheFelixJettyBasedHttpService($org_apache_felix_https_nio = null, $org_apache_felix_https_nio_type_hint = null, $org_apache_felix_https_keystore = null, $org_apache_felix_https_keystore_type_hint = null, $org_apache_felix_https_keystore_password = null, $org_apache_felix_https_keystore_password_type_hint = null, $org_apache_felix_https_keystore_key = null, $org_apache_felix_https_keystore_key_type_hint = null, $org_apache_felix_https_keystore_key_password = null, $org_apache_felix_https_keystore_key_password_type_hint = null, $org_apache_felix_https_truststore = null, $org_apache_felix_https_truststore_type_hint = null, $org_apache_felix_https_truststore_password = null, $org_apache_felix_https_truststore_password_type_hint = null, $org_apache_felix_https_clientcertificate = null, $org_apache_felix_https_clientcertificate_type_hint = null, $org_apache_felix_https_enable = null, $org_apache_felix_https_enable_type_hint = null, $org_osgi_service_http_port_secure = null, $org_osgi_service_http_port_secure_type_hint = null)
    {
        $this->postConfigApacheFelixJettyBasedHttpServiceWithHttpInfo($org_apache_felix_https_nio, $org_apache_felix_https_nio_type_hint, $org_apache_felix_https_keystore, $org_apache_felix_https_keystore_type_hint, $org_apache_felix_https_keystore_password, $org_apache_felix_https_keystore_password_type_hint, $org_apache_felix_https_keystore_key, $org_apache_felix_https_keystore_key_type_hint, $org_apache_felix_https_keystore_key_password, $org_apache_felix_https_keystore_key_password_type_hint, $org_apache_felix_https_truststore, $org_apache_felix_https_truststore_type_hint, $org_apache_felix_https_truststore_password, $org_apache_felix_https_truststore_password_type_hint, $org_apache_felix_https_clientcertificate, $org_apache_felix_https_clientcertificate_type_hint, $org_apache_felix_https_enable, $org_apache_felix_https_enable_type_hint, $org_osgi_service_http_port_secure, $org_osgi_service_http_port_secure_type_hint);
    }

    /**
     * Operation postConfigApacheFelixJettyBasedHttpServiceWithHttpInfo
     *
     * @param  bool $org_apache_felix_https_nio (optional)
     * @param  string $org_apache_felix_https_nio_type_hint (optional)
     * @param  string $org_apache_felix_https_keystore (optional)
     * @param  string $org_apache_felix_https_keystore_type_hint (optional)
     * @param  string $org_apache_felix_https_keystore_password (optional)
     * @param  string $org_apache_felix_https_keystore_password_type_hint (optional)
     * @param  string $org_apache_felix_https_keystore_key (optional)
     * @param  string $org_apache_felix_https_keystore_key_type_hint (optional)
     * @param  string $org_apache_felix_https_keystore_key_password (optional)
     * @param  string $org_apache_felix_https_keystore_key_password_type_hint (optional)
     * @param  string $org_apache_felix_https_truststore (optional)
     * @param  string $org_apache_felix_https_truststore_type_hint (optional)
     * @param  string $org_apache_felix_https_truststore_password (optional)
     * @param  string $org_apache_felix_https_truststore_password_type_hint (optional)
     * @param  string $org_apache_felix_https_clientcertificate (optional)
     * @param  string $org_apache_felix_https_clientcertificate_type_hint (optional)
     * @param  bool $org_apache_felix_https_enable (optional)
     * @param  string $org_apache_felix_https_enable_type_hint (optional)
     * @param  string $org_osgi_service_http_port_secure (optional)
     * @param  string $org_osgi_service_http_port_secure_type_hint (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postConfigApacheFelixJettyBasedHttpServiceWithHttpInfo($org_apache_felix_https_nio = null, $org_apache_felix_https_nio_type_hint = null, $org_apache_felix_https_keystore = null, $org_apache_felix_https_keystore_type_hint = null, $org_apache_felix_https_keystore_password = null, $org_apache_felix_https_keystore_password_type_hint = null, $org_apache_felix_https_keystore_key = null, $org_apache_felix_https_keystore_key_type_hint = null, $org_apache_felix_https_keystore_key_password = null, $org_apache_felix_https_keystore_key_password_type_hint = null, $org_apache_felix_https_truststore = null, $org_apache_felix_https_truststore_type_hint = null, $org_apache_felix_https_truststore_password = null, $org_apache_felix_https_truststore_password_type_hint = null, $org_apache_felix_https_clientcertificate = null, $org_apache_felix_https_clientcertificate_type_hint = null, $org_apache_felix_https_enable = null, $org_apache_felix_https_enable_type_hint = null, $org_osgi_service_http_port_secure = null, $org_osgi_service_http_port_secure_type_hint = null)
    {
        $request = $this->postConfigApacheFelixJettyBasedHttpServiceRequest($org_apache_felix_https_nio, $org_apache_felix_https_nio_type_hint, $org_apache_felix_https_keystore, $org_apache_felix_https_keystore_type_hint, $org_apache_felix_https_keystore_password, $org_apache_felix_https_keystore_password_type_hint, $org_apache_felix_https_keystore_key, $org_apache_felix_https_keystore_key_type_hint, $org_apache_felix_https_keystore_key_password, $org_apache_felix_https_keystore_key_password_type_hint, $org_apache_felix_https_truststore, $org_apache_felix_https_truststore_type_hint, $org_apache_felix_https_truststore_password, $org_apache_felix_https_truststore_password_type_hint, $org_apache_felix_https_clientcertificate, $org_apache_felix_https_clientcertificate_type_hint, $org_apache_felix_https_enable, $org_apache_felix_https_enable_type_hint, $org_osgi_service_http_port_secure, $org_osgi_service_http_port_secure_type_hint);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postConfigApacheFelixJettyBasedHttpServiceAsync
     *
     * @param  bool $org_apache_felix_https_nio (optional)
     * @param  string $org_apache_felix_https_nio_type_hint (optional)
     * @param  string $org_apache_felix_https_keystore (optional)
     * @param  string $org_apache_felix_https_keystore_type_hint (optional)
     * @param  string $org_apache_felix_https_keystore_password (optional)
     * @param  string $org_apache_felix_https_keystore_password_type_hint (optional)
     * @param  string $org_apache_felix_https_keystore_key (optional)
     * @param  string $org_apache_felix_https_keystore_key_type_hint (optional)
     * @param  string $org_apache_felix_https_keystore_key_password (optional)
     * @param  string $org_apache_felix_https_keystore_key_password_type_hint (optional)
     * @param  string $org_apache_felix_https_truststore (optional)
     * @param  string $org_apache_felix_https_truststore_type_hint (optional)
     * @param  string $org_apache_felix_https_truststore_password (optional)
     * @param  string $org_apache_felix_https_truststore_password_type_hint (optional)
     * @param  string $org_apache_felix_https_clientcertificate (optional)
     * @param  string $org_apache_felix_https_clientcertificate_type_hint (optional)
     * @param  bool $org_apache_felix_https_enable (optional)
     * @param  string $org_apache_felix_https_enable_type_hint (optional)
     * @param  string $org_osgi_service_http_port_secure (optional)
     * @param  string $org_osgi_service_http_port_secure_type_hint (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConfigApacheFelixJettyBasedHttpServiceAsync($org_apache_felix_https_nio = null, $org_apache_felix_https_nio_type_hint = null, $org_apache_felix_https_keystore = null, $org_apache_felix_https_keystore_type_hint = null, $org_apache_felix_https_keystore_password = null, $org_apache_felix_https_keystore_password_type_hint = null, $org_apache_felix_https_keystore_key = null, $org_apache_felix_https_keystore_key_type_hint = null, $org_apache_felix_https_keystore_key_password = null, $org_apache_felix_https_keystore_key_password_type_hint = null, $org_apache_felix_https_truststore = null, $org_apache_felix_https_truststore_type_hint = null, $org_apache_felix_https_truststore_password = null, $org_apache_felix_https_truststore_password_type_hint = null, $org_apache_felix_https_clientcertificate = null, $org_apache_felix_https_clientcertificate_type_hint = null, $org_apache_felix_https_enable = null, $org_apache_felix_https_enable_type_hint = null, $org_osgi_service_http_port_secure = null, $org_osgi_service_http_port_secure_type_hint = null)
    {
        return $this->postConfigApacheFelixJettyBasedHttpServiceAsyncWithHttpInfo($org_apache_felix_https_nio, $org_apache_felix_https_nio_type_hint, $org_apache_felix_https_keystore, $org_apache_felix_https_keystore_type_hint, $org_apache_felix_https_keystore_password, $org_apache_felix_https_keystore_password_type_hint, $org_apache_felix_https_keystore_key, $org_apache_felix_https_keystore_key_type_hint, $org_apache_felix_https_keystore_key_password, $org_apache_felix_https_keystore_key_password_type_hint, $org_apache_felix_https_truststore, $org_apache_felix_https_truststore_type_hint, $org_apache_felix_https_truststore_password, $org_apache_felix_https_truststore_password_type_hint, $org_apache_felix_https_clientcertificate, $org_apache_felix_https_clientcertificate_type_hint, $org_apache_felix_https_enable, $org_apache_felix_https_enable_type_hint, $org_osgi_service_http_port_secure, $org_osgi_service_http_port_secure_type_hint)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postConfigApacheFelixJettyBasedHttpServiceAsyncWithHttpInfo
     *
     * @param  bool $org_apache_felix_https_nio (optional)
     * @param  string $org_apache_felix_https_nio_type_hint (optional)
     * @param  string $org_apache_felix_https_keystore (optional)
     * @param  string $org_apache_felix_https_keystore_type_hint (optional)
     * @param  string $org_apache_felix_https_keystore_password (optional)
     * @param  string $org_apache_felix_https_keystore_password_type_hint (optional)
     * @param  string $org_apache_felix_https_keystore_key (optional)
     * @param  string $org_apache_felix_https_keystore_key_type_hint (optional)
     * @param  string $org_apache_felix_https_keystore_key_password (optional)
     * @param  string $org_apache_felix_https_keystore_key_password_type_hint (optional)
     * @param  string $org_apache_felix_https_truststore (optional)
     * @param  string $org_apache_felix_https_truststore_type_hint (optional)
     * @param  string $org_apache_felix_https_truststore_password (optional)
     * @param  string $org_apache_felix_https_truststore_password_type_hint (optional)
     * @param  string $org_apache_felix_https_clientcertificate (optional)
     * @param  string $org_apache_felix_https_clientcertificate_type_hint (optional)
     * @param  bool $org_apache_felix_https_enable (optional)
     * @param  string $org_apache_felix_https_enable_type_hint (optional)
     * @param  string $org_osgi_service_http_port_secure (optional)
     * @param  string $org_osgi_service_http_port_secure_type_hint (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConfigApacheFelixJettyBasedHttpServiceAsyncWithHttpInfo($org_apache_felix_https_nio = null, $org_apache_felix_https_nio_type_hint = null, $org_apache_felix_https_keystore = null, $org_apache_felix_https_keystore_type_hint = null, $org_apache_felix_https_keystore_password = null, $org_apache_felix_https_keystore_password_type_hint = null, $org_apache_felix_https_keystore_key = null, $org_apache_felix_https_keystore_key_type_hint = null, $org_apache_felix_https_keystore_key_password = null, $org_apache_felix_https_keystore_key_password_type_hint = null, $org_apache_felix_https_truststore = null, $org_apache_felix_https_truststore_type_hint = null, $org_apache_felix_https_truststore_password = null, $org_apache_felix_https_truststore_password_type_hint = null, $org_apache_felix_https_clientcertificate = null, $org_apache_felix_https_clientcertificate_type_hint = null, $org_apache_felix_https_enable = null, $org_apache_felix_https_enable_type_hint = null, $org_osgi_service_http_port_secure = null, $org_osgi_service_http_port_secure_type_hint = null)
    {
        $returnType = '';
        $request = $this->postConfigApacheFelixJettyBasedHttpServiceRequest($org_apache_felix_https_nio, $org_apache_felix_https_nio_type_hint, $org_apache_felix_https_keystore, $org_apache_felix_https_keystore_type_hint, $org_apache_felix_https_keystore_password, $org_apache_felix_https_keystore_password_type_hint, $org_apache_felix_https_keystore_key, $org_apache_felix_https_keystore_key_type_hint, $org_apache_felix_https_keystore_key_password, $org_apache_felix_https_keystore_key_password_type_hint, $org_apache_felix_https_truststore, $org_apache_felix_https_truststore_type_hint, $org_apache_felix_https_truststore_password, $org_apache_felix_https_truststore_password_type_hint, $org_apache_felix_https_clientcertificate, $org_apache_felix_https_clientcertificate_type_hint, $org_apache_felix_https_enable, $org_apache_felix_https_enable_type_hint, $org_osgi_service_http_port_secure, $org_osgi_service_http_port_secure_type_hint);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postConfigApacheFelixJettyBasedHttpService'
     *
     * @param  bool $org_apache_felix_https_nio (optional)
     * @param  string $org_apache_felix_https_nio_type_hint (optional)
     * @param  string $org_apache_felix_https_keystore (optional)
     * @param  string $org_apache_felix_https_keystore_type_hint (optional)
     * @param  string $org_apache_felix_https_keystore_password (optional)
     * @param  string $org_apache_felix_https_keystore_password_type_hint (optional)
     * @param  string $org_apache_felix_https_keystore_key (optional)
     * @param  string $org_apache_felix_https_keystore_key_type_hint (optional)
     * @param  string $org_apache_felix_https_keystore_key_password (optional)
     * @param  string $org_apache_felix_https_keystore_key_password_type_hint (optional)
     * @param  string $org_apache_felix_https_truststore (optional)
     * @param  string $org_apache_felix_https_truststore_type_hint (optional)
     * @param  string $org_apache_felix_https_truststore_password (optional)
     * @param  string $org_apache_felix_https_truststore_password_type_hint (optional)
     * @param  string $org_apache_felix_https_clientcertificate (optional)
     * @param  string $org_apache_felix_https_clientcertificate_type_hint (optional)
     * @param  bool $org_apache_felix_https_enable (optional)
     * @param  string $org_apache_felix_https_enable_type_hint (optional)
     * @param  string $org_osgi_service_http_port_secure (optional)
     * @param  string $org_osgi_service_http_port_secure_type_hint (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postConfigApacheFelixJettyBasedHttpServiceRequest($org_apache_felix_https_nio = null, $org_apache_felix_https_nio_type_hint = null, $org_apache_felix_https_keystore = null, $org_apache_felix_https_keystore_type_hint = null, $org_apache_felix_https_keystore_password = null, $org_apache_felix_https_keystore_password_type_hint = null, $org_apache_felix_https_keystore_key = null, $org_apache_felix_https_keystore_key_type_hint = null, $org_apache_felix_https_keystore_key_password = null, $org_apache_felix_https_keystore_key_password_type_hint = null, $org_apache_felix_https_truststore = null, $org_apache_felix_https_truststore_type_hint = null, $org_apache_felix_https_truststore_password = null, $org_apache_felix_https_truststore_password_type_hint = null, $org_apache_felix_https_clientcertificate = null, $org_apache_felix_https_clientcertificate_type_hint = null, $org_apache_felix_https_enable = null, $org_apache_felix_https_enable_type_hint = null, $org_osgi_service_http_port_secure = null, $org_osgi_service_http_port_secure_type_hint = null)
    {

        $resourcePath = '/apps/system/config/org.apache.felix.http';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($org_apache_felix_https_nio !== null) {
            if('form' === 'form' && is_array($org_apache_felix_https_nio)) {
                foreach($org_apache_felix_https_nio as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['org.apache.felix.https.nio'] = $org_apache_felix_https_nio;
            }
        }
        // query params
        if ($org_apache_felix_https_nio_type_hint !== null) {
            if('form' === 'form' && is_array($org_apache_felix_https_nio_type_hint)) {
                foreach($org_apache_felix_https_nio_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['org.apache.felix.https.nio@TypeHint'] = $org_apache_felix_https_nio_type_hint;
            }
        }
        // query params
        if ($org_apache_felix_https_keystore !== null) {
            if('form' === 'form' && is_array($org_apache_felix_https_keystore)) {
                foreach($org_apache_felix_https_keystore as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['org.apache.felix.https.keystore'] = $org_apache_felix_https_keystore;
            }
        }
        // query params
        if ($org_apache_felix_https_keystore_type_hint !== null) {
            if('form' === 'form' && is_array($org_apache_felix_https_keystore_type_hint)) {
                foreach($org_apache_felix_https_keystore_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['org.apache.felix.https.keystore@TypeHint'] = $org_apache_felix_https_keystore_type_hint;
            }
        }
        // query params
        if ($org_apache_felix_https_keystore_password !== null) {
            if('form' === 'form' && is_array($org_apache_felix_https_keystore_password)) {
                foreach($org_apache_felix_https_keystore_password as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['org.apache.felix.https.keystore.password'] = $org_apache_felix_https_keystore_password;
            }
        }
        // query params
        if ($org_apache_felix_https_keystore_password_type_hint !== null) {
            if('form' === 'form' && is_array($org_apache_felix_https_keystore_password_type_hint)) {
                foreach($org_apache_felix_https_keystore_password_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['org.apache.felix.https.keystore.password@TypeHint'] = $org_apache_felix_https_keystore_password_type_hint;
            }
        }
        // query params
        if ($org_apache_felix_https_keystore_key !== null) {
            if('form' === 'form' && is_array($org_apache_felix_https_keystore_key)) {
                foreach($org_apache_felix_https_keystore_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['org.apache.felix.https.keystore.key'] = $org_apache_felix_https_keystore_key;
            }
        }
        // query params
        if ($org_apache_felix_https_keystore_key_type_hint !== null) {
            if('form' === 'form' && is_array($org_apache_felix_https_keystore_key_type_hint)) {
                foreach($org_apache_felix_https_keystore_key_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['org.apache.felix.https.keystore.key@TypeHint'] = $org_apache_felix_https_keystore_key_type_hint;
            }
        }
        // query params
        if ($org_apache_felix_https_keystore_key_password !== null) {
            if('form' === 'form' && is_array($org_apache_felix_https_keystore_key_password)) {
                foreach($org_apache_felix_https_keystore_key_password as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['org.apache.felix.https.keystore.key.password'] = $org_apache_felix_https_keystore_key_password;
            }
        }
        // query params
        if ($org_apache_felix_https_keystore_key_password_type_hint !== null) {
            if('form' === 'form' && is_array($org_apache_felix_https_keystore_key_password_type_hint)) {
                foreach($org_apache_felix_https_keystore_key_password_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['org.apache.felix.https.keystore.key.password@TypeHint'] = $org_apache_felix_https_keystore_key_password_type_hint;
            }
        }
        // query params
        if ($org_apache_felix_https_truststore !== null) {
            if('form' === 'form' && is_array($org_apache_felix_https_truststore)) {
                foreach($org_apache_felix_https_truststore as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['org.apache.felix.https.truststore'] = $org_apache_felix_https_truststore;
            }
        }
        // query params
        if ($org_apache_felix_https_truststore_type_hint !== null) {
            if('form' === 'form' && is_array($org_apache_felix_https_truststore_type_hint)) {
                foreach($org_apache_felix_https_truststore_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['org.apache.felix.https.truststore@TypeHint'] = $org_apache_felix_https_truststore_type_hint;
            }
        }
        // query params
        if ($org_apache_felix_https_truststore_password !== null) {
            if('form' === 'form' && is_array($org_apache_felix_https_truststore_password)) {
                foreach($org_apache_felix_https_truststore_password as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['org.apache.felix.https.truststore.password'] = $org_apache_felix_https_truststore_password;
            }
        }
        // query params
        if ($org_apache_felix_https_truststore_password_type_hint !== null) {
            if('form' === 'form' && is_array($org_apache_felix_https_truststore_password_type_hint)) {
                foreach($org_apache_felix_https_truststore_password_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['org.apache.felix.https.truststore.password@TypeHint'] = $org_apache_felix_https_truststore_password_type_hint;
            }
        }
        // query params
        if ($org_apache_felix_https_clientcertificate !== null) {
            if('form' === 'form' && is_array($org_apache_felix_https_clientcertificate)) {
                foreach($org_apache_felix_https_clientcertificate as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['org.apache.felix.https.clientcertificate'] = $org_apache_felix_https_clientcertificate;
            }
        }
        // query params
        if ($org_apache_felix_https_clientcertificate_type_hint !== null) {
            if('form' === 'form' && is_array($org_apache_felix_https_clientcertificate_type_hint)) {
                foreach($org_apache_felix_https_clientcertificate_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['org.apache.felix.https.clientcertificate@TypeHint'] = $org_apache_felix_https_clientcertificate_type_hint;
            }
        }
        // query params
        if ($org_apache_felix_https_enable !== null) {
            if('form' === 'form' && is_array($org_apache_felix_https_enable)) {
                foreach($org_apache_felix_https_enable as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['org.apache.felix.https.enable'] = $org_apache_felix_https_enable;
            }
        }
        // query params
        if ($org_apache_felix_https_enable_type_hint !== null) {
            if('form' === 'form' && is_array($org_apache_felix_https_enable_type_hint)) {
                foreach($org_apache_felix_https_enable_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['org.apache.felix.https.enable@TypeHint'] = $org_apache_felix_https_enable_type_hint;
            }
        }
        // query params
        if ($org_osgi_service_http_port_secure !== null) {
            if('form' === 'form' && is_array($org_osgi_service_http_port_secure)) {
                foreach($org_osgi_service_http_port_secure as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['org.osgi.service.http.port.secure'] = $org_osgi_service_http_port_secure;
            }
        }
        // query params
        if ($org_osgi_service_http_port_secure_type_hint !== null) {
            if('form' === 'form' && is_array($org_osgi_service_http_port_secure_type_hint)) {
                foreach($org_osgi_service_http_port_secure_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['org.osgi.service.http.port.secure@TypeHint'] = $org_osgi_service_http_port_secure_type_hint;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postConfigApacheHttpComponentsProxyConfiguration
     *
     * @param  string $proxy_host proxy_host (optional)
     * @param  string $proxy_host_type_hint proxy_host_type_hint (optional)
     * @param  int $proxy_port proxy_port (optional)
     * @param  string $proxy_port_type_hint proxy_port_type_hint (optional)
     * @param  string[] $proxy_exceptions proxy_exceptions (optional)
     * @param  string $proxy_exceptions_type_hint proxy_exceptions_type_hint (optional)
     * @param  bool $proxy_enabled proxy_enabled (optional)
     * @param  string $proxy_enabled_type_hint proxy_enabled_type_hint (optional)
     * @param  string $proxy_user proxy_user (optional)
     * @param  string $proxy_user_type_hint proxy_user_type_hint (optional)
     * @param  string $proxy_password proxy_password (optional)
     * @param  string $proxy_password_type_hint proxy_password_type_hint (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postConfigApacheHttpComponentsProxyConfiguration($proxy_host = null, $proxy_host_type_hint = null, $proxy_port = null, $proxy_port_type_hint = null, $proxy_exceptions = null, $proxy_exceptions_type_hint = null, $proxy_enabled = null, $proxy_enabled_type_hint = null, $proxy_user = null, $proxy_user_type_hint = null, $proxy_password = null, $proxy_password_type_hint = null)
    {
        $this->postConfigApacheHttpComponentsProxyConfigurationWithHttpInfo($proxy_host, $proxy_host_type_hint, $proxy_port, $proxy_port_type_hint, $proxy_exceptions, $proxy_exceptions_type_hint, $proxy_enabled, $proxy_enabled_type_hint, $proxy_user, $proxy_user_type_hint, $proxy_password, $proxy_password_type_hint);
    }

    /**
     * Operation postConfigApacheHttpComponentsProxyConfigurationWithHttpInfo
     *
     * @param  string $proxy_host (optional)
     * @param  string $proxy_host_type_hint (optional)
     * @param  int $proxy_port (optional)
     * @param  string $proxy_port_type_hint (optional)
     * @param  string[] $proxy_exceptions (optional)
     * @param  string $proxy_exceptions_type_hint (optional)
     * @param  bool $proxy_enabled (optional)
     * @param  string $proxy_enabled_type_hint (optional)
     * @param  string $proxy_user (optional)
     * @param  string $proxy_user_type_hint (optional)
     * @param  string $proxy_password (optional)
     * @param  string $proxy_password_type_hint (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postConfigApacheHttpComponentsProxyConfigurationWithHttpInfo($proxy_host = null, $proxy_host_type_hint = null, $proxy_port = null, $proxy_port_type_hint = null, $proxy_exceptions = null, $proxy_exceptions_type_hint = null, $proxy_enabled = null, $proxy_enabled_type_hint = null, $proxy_user = null, $proxy_user_type_hint = null, $proxy_password = null, $proxy_password_type_hint = null)
    {
        $request = $this->postConfigApacheHttpComponentsProxyConfigurationRequest($proxy_host, $proxy_host_type_hint, $proxy_port, $proxy_port_type_hint, $proxy_exceptions, $proxy_exceptions_type_hint, $proxy_enabled, $proxy_enabled_type_hint, $proxy_user, $proxy_user_type_hint, $proxy_password, $proxy_password_type_hint);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postConfigApacheHttpComponentsProxyConfigurationAsync
     *
     * @param  string $proxy_host (optional)
     * @param  string $proxy_host_type_hint (optional)
     * @param  int $proxy_port (optional)
     * @param  string $proxy_port_type_hint (optional)
     * @param  string[] $proxy_exceptions (optional)
     * @param  string $proxy_exceptions_type_hint (optional)
     * @param  bool $proxy_enabled (optional)
     * @param  string $proxy_enabled_type_hint (optional)
     * @param  string $proxy_user (optional)
     * @param  string $proxy_user_type_hint (optional)
     * @param  string $proxy_password (optional)
     * @param  string $proxy_password_type_hint (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConfigApacheHttpComponentsProxyConfigurationAsync($proxy_host = null, $proxy_host_type_hint = null, $proxy_port = null, $proxy_port_type_hint = null, $proxy_exceptions = null, $proxy_exceptions_type_hint = null, $proxy_enabled = null, $proxy_enabled_type_hint = null, $proxy_user = null, $proxy_user_type_hint = null, $proxy_password = null, $proxy_password_type_hint = null)
    {
        return $this->postConfigApacheHttpComponentsProxyConfigurationAsyncWithHttpInfo($proxy_host, $proxy_host_type_hint, $proxy_port, $proxy_port_type_hint, $proxy_exceptions, $proxy_exceptions_type_hint, $proxy_enabled, $proxy_enabled_type_hint, $proxy_user, $proxy_user_type_hint, $proxy_password, $proxy_password_type_hint)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postConfigApacheHttpComponentsProxyConfigurationAsyncWithHttpInfo
     *
     * @param  string $proxy_host (optional)
     * @param  string $proxy_host_type_hint (optional)
     * @param  int $proxy_port (optional)
     * @param  string $proxy_port_type_hint (optional)
     * @param  string[] $proxy_exceptions (optional)
     * @param  string $proxy_exceptions_type_hint (optional)
     * @param  bool $proxy_enabled (optional)
     * @param  string $proxy_enabled_type_hint (optional)
     * @param  string $proxy_user (optional)
     * @param  string $proxy_user_type_hint (optional)
     * @param  string $proxy_password (optional)
     * @param  string $proxy_password_type_hint (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConfigApacheHttpComponentsProxyConfigurationAsyncWithHttpInfo($proxy_host = null, $proxy_host_type_hint = null, $proxy_port = null, $proxy_port_type_hint = null, $proxy_exceptions = null, $proxy_exceptions_type_hint = null, $proxy_enabled = null, $proxy_enabled_type_hint = null, $proxy_user = null, $proxy_user_type_hint = null, $proxy_password = null, $proxy_password_type_hint = null)
    {
        $returnType = '';
        $request = $this->postConfigApacheHttpComponentsProxyConfigurationRequest($proxy_host, $proxy_host_type_hint, $proxy_port, $proxy_port_type_hint, $proxy_exceptions, $proxy_exceptions_type_hint, $proxy_enabled, $proxy_enabled_type_hint, $proxy_user, $proxy_user_type_hint, $proxy_password, $proxy_password_type_hint);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postConfigApacheHttpComponentsProxyConfiguration'
     *
     * @param  string $proxy_host (optional)
     * @param  string $proxy_host_type_hint (optional)
     * @param  int $proxy_port (optional)
     * @param  string $proxy_port_type_hint (optional)
     * @param  string[] $proxy_exceptions (optional)
     * @param  string $proxy_exceptions_type_hint (optional)
     * @param  bool $proxy_enabled (optional)
     * @param  string $proxy_enabled_type_hint (optional)
     * @param  string $proxy_user (optional)
     * @param  string $proxy_user_type_hint (optional)
     * @param  string $proxy_password (optional)
     * @param  string $proxy_password_type_hint (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postConfigApacheHttpComponentsProxyConfigurationRequest($proxy_host = null, $proxy_host_type_hint = null, $proxy_port = null, $proxy_port_type_hint = null, $proxy_exceptions = null, $proxy_exceptions_type_hint = null, $proxy_enabled = null, $proxy_enabled_type_hint = null, $proxy_user = null, $proxy_user_type_hint = null, $proxy_password = null, $proxy_password_type_hint = null)
    {

        $resourcePath = '/apps/system/config/org.apache.http.proxyconfigurator.config';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($proxy_host !== null) {
            if('form' === 'form' && is_array($proxy_host)) {
                foreach($proxy_host as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['proxy.host'] = $proxy_host;
            }
        }
        // query params
        if ($proxy_host_type_hint !== null) {
            if('form' === 'form' && is_array($proxy_host_type_hint)) {
                foreach($proxy_host_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['proxy.host@TypeHint'] = $proxy_host_type_hint;
            }
        }
        // query params
        if ($proxy_port !== null) {
            if('form' === 'form' && is_array($proxy_port)) {
                foreach($proxy_port as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['proxy.port'] = $proxy_port;
            }
        }
        // query params
        if ($proxy_port_type_hint !== null) {
            if('form' === 'form' && is_array($proxy_port_type_hint)) {
                foreach($proxy_port_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['proxy.port@TypeHint'] = $proxy_port_type_hint;
            }
        }
        // query params
        if ($proxy_exceptions !== null) {
            if('form' === 'form' && is_array($proxy_exceptions)) {
                foreach($proxy_exceptions as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['proxy.exceptions'] = $proxy_exceptions;
            }
        }
        // query params
        if ($proxy_exceptions_type_hint !== null) {
            if('form' === 'form' && is_array($proxy_exceptions_type_hint)) {
                foreach($proxy_exceptions_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['proxy.exceptions@TypeHint'] = $proxy_exceptions_type_hint;
            }
        }
        // query params
        if ($proxy_enabled !== null) {
            if('form' === 'form' && is_array($proxy_enabled)) {
                foreach($proxy_enabled as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['proxy.enabled'] = $proxy_enabled;
            }
        }
        // query params
        if ($proxy_enabled_type_hint !== null) {
            if('form' === 'form' && is_array($proxy_enabled_type_hint)) {
                foreach($proxy_enabled_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['proxy.enabled@TypeHint'] = $proxy_enabled_type_hint;
            }
        }
        // query params
        if ($proxy_user !== null) {
            if('form' === 'form' && is_array($proxy_user)) {
                foreach($proxy_user as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['proxy.user'] = $proxy_user;
            }
        }
        // query params
        if ($proxy_user_type_hint !== null) {
            if('form' === 'form' && is_array($proxy_user_type_hint)) {
                foreach($proxy_user_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['proxy.user@TypeHint'] = $proxy_user_type_hint;
            }
        }
        // query params
        if ($proxy_password !== null) {
            if('form' === 'form' && is_array($proxy_password)) {
                foreach($proxy_password as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['proxy.password'] = $proxy_password;
            }
        }
        // query params
        if ($proxy_password_type_hint !== null) {
            if('form' === 'form' && is_array($proxy_password_type_hint)) {
                foreach($proxy_password_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['proxy.password@TypeHint'] = $proxy_password_type_hint;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postConfigApacheSlingDavExServlet
     *
     * @param  string $alias alias (optional)
     * @param  string $alias_type_hint alias_type_hint (optional)
     * @param  bool $dav_create_absolute_uri dav_create_absolute_uri (optional)
     * @param  string $dav_create_absolute_uri_type_hint dav_create_absolute_uri_type_hint (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postConfigApacheSlingDavExServlet($alias = null, $alias_type_hint = null, $dav_create_absolute_uri = null, $dav_create_absolute_uri_type_hint = null)
    {
        $this->postConfigApacheSlingDavExServletWithHttpInfo($alias, $alias_type_hint, $dav_create_absolute_uri, $dav_create_absolute_uri_type_hint);
    }

    /**
     * Operation postConfigApacheSlingDavExServletWithHttpInfo
     *
     * @param  string $alias (optional)
     * @param  string $alias_type_hint (optional)
     * @param  bool $dav_create_absolute_uri (optional)
     * @param  string $dav_create_absolute_uri_type_hint (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postConfigApacheSlingDavExServletWithHttpInfo($alias = null, $alias_type_hint = null, $dav_create_absolute_uri = null, $dav_create_absolute_uri_type_hint = null)
    {
        $request = $this->postConfigApacheSlingDavExServletRequest($alias, $alias_type_hint, $dav_create_absolute_uri, $dav_create_absolute_uri_type_hint);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postConfigApacheSlingDavExServletAsync
     *
     * @param  string $alias (optional)
     * @param  string $alias_type_hint (optional)
     * @param  bool $dav_create_absolute_uri (optional)
     * @param  string $dav_create_absolute_uri_type_hint (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConfigApacheSlingDavExServletAsync($alias = null, $alias_type_hint = null, $dav_create_absolute_uri = null, $dav_create_absolute_uri_type_hint = null)
    {
        return $this->postConfigApacheSlingDavExServletAsyncWithHttpInfo($alias, $alias_type_hint, $dav_create_absolute_uri, $dav_create_absolute_uri_type_hint)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postConfigApacheSlingDavExServletAsyncWithHttpInfo
     *
     * @param  string $alias (optional)
     * @param  string $alias_type_hint (optional)
     * @param  bool $dav_create_absolute_uri (optional)
     * @param  string $dav_create_absolute_uri_type_hint (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConfigApacheSlingDavExServletAsyncWithHttpInfo($alias = null, $alias_type_hint = null, $dav_create_absolute_uri = null, $dav_create_absolute_uri_type_hint = null)
    {
        $returnType = '';
        $request = $this->postConfigApacheSlingDavExServletRequest($alias, $alias_type_hint, $dav_create_absolute_uri, $dav_create_absolute_uri_type_hint);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postConfigApacheSlingDavExServlet'
     *
     * @param  string $alias (optional)
     * @param  string $alias_type_hint (optional)
     * @param  bool $dav_create_absolute_uri (optional)
     * @param  string $dav_create_absolute_uri_type_hint (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postConfigApacheSlingDavExServletRequest($alias = null, $alias_type_hint = null, $dav_create_absolute_uri = null, $dav_create_absolute_uri_type_hint = null)
    {

        $resourcePath = '/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($alias !== null) {
            if('form' === 'form' && is_array($alias)) {
                foreach($alias as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['alias'] = $alias;
            }
        }
        // query params
        if ($alias_type_hint !== null) {
            if('form' === 'form' && is_array($alias_type_hint)) {
                foreach($alias_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['alias@TypeHint'] = $alias_type_hint;
            }
        }
        // query params
        if ($dav_create_absolute_uri !== null) {
            if('form' === 'form' && is_array($dav_create_absolute_uri)) {
                foreach($dav_create_absolute_uri as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['dav.create-absolute-uri'] = $dav_create_absolute_uri;
            }
        }
        // query params
        if ($dav_create_absolute_uri_type_hint !== null) {
            if('form' === 'form' && is_array($dav_create_absolute_uri_type_hint)) {
                foreach($dav_create_absolute_uri_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['dav.create-absolute-uri@TypeHint'] = $dav_create_absolute_uri_type_hint;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postConfigApacheSlingGetServlet
     *
     * @param  string $json_maximumresults json_maximumresults (optional)
     * @param  string $json_maximumresults_type_hint json_maximumresults_type_hint (optional)
     * @param  bool $enable_html enable_html (optional)
     * @param  string $enable_html_type_hint enable_html_type_hint (optional)
     * @param  bool $enable_txt enable_txt (optional)
     * @param  string $enable_txt_type_hint enable_txt_type_hint (optional)
     * @param  bool $enable_xml enable_xml (optional)
     * @param  string $enable_xml_type_hint enable_xml_type_hint (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postConfigApacheSlingGetServlet($json_maximumresults = null, $json_maximumresults_type_hint = null, $enable_html = null, $enable_html_type_hint = null, $enable_txt = null, $enable_txt_type_hint = null, $enable_xml = null, $enable_xml_type_hint = null)
    {
        $this->postConfigApacheSlingGetServletWithHttpInfo($json_maximumresults, $json_maximumresults_type_hint, $enable_html, $enable_html_type_hint, $enable_txt, $enable_txt_type_hint, $enable_xml, $enable_xml_type_hint);
    }

    /**
     * Operation postConfigApacheSlingGetServletWithHttpInfo
     *
     * @param  string $json_maximumresults (optional)
     * @param  string $json_maximumresults_type_hint (optional)
     * @param  bool $enable_html (optional)
     * @param  string $enable_html_type_hint (optional)
     * @param  bool $enable_txt (optional)
     * @param  string $enable_txt_type_hint (optional)
     * @param  bool $enable_xml (optional)
     * @param  string $enable_xml_type_hint (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postConfigApacheSlingGetServletWithHttpInfo($json_maximumresults = null, $json_maximumresults_type_hint = null, $enable_html = null, $enable_html_type_hint = null, $enable_txt = null, $enable_txt_type_hint = null, $enable_xml = null, $enable_xml_type_hint = null)
    {
        $request = $this->postConfigApacheSlingGetServletRequest($json_maximumresults, $json_maximumresults_type_hint, $enable_html, $enable_html_type_hint, $enable_txt, $enable_txt_type_hint, $enable_xml, $enable_xml_type_hint);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postConfigApacheSlingGetServletAsync
     *
     * @param  string $json_maximumresults (optional)
     * @param  string $json_maximumresults_type_hint (optional)
     * @param  bool $enable_html (optional)
     * @param  string $enable_html_type_hint (optional)
     * @param  bool $enable_txt (optional)
     * @param  string $enable_txt_type_hint (optional)
     * @param  bool $enable_xml (optional)
     * @param  string $enable_xml_type_hint (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConfigApacheSlingGetServletAsync($json_maximumresults = null, $json_maximumresults_type_hint = null, $enable_html = null, $enable_html_type_hint = null, $enable_txt = null, $enable_txt_type_hint = null, $enable_xml = null, $enable_xml_type_hint = null)
    {
        return $this->postConfigApacheSlingGetServletAsyncWithHttpInfo($json_maximumresults, $json_maximumresults_type_hint, $enable_html, $enable_html_type_hint, $enable_txt, $enable_txt_type_hint, $enable_xml, $enable_xml_type_hint)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postConfigApacheSlingGetServletAsyncWithHttpInfo
     *
     * @param  string $json_maximumresults (optional)
     * @param  string $json_maximumresults_type_hint (optional)
     * @param  bool $enable_html (optional)
     * @param  string $enable_html_type_hint (optional)
     * @param  bool $enable_txt (optional)
     * @param  string $enable_txt_type_hint (optional)
     * @param  bool $enable_xml (optional)
     * @param  string $enable_xml_type_hint (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConfigApacheSlingGetServletAsyncWithHttpInfo($json_maximumresults = null, $json_maximumresults_type_hint = null, $enable_html = null, $enable_html_type_hint = null, $enable_txt = null, $enable_txt_type_hint = null, $enable_xml = null, $enable_xml_type_hint = null)
    {
        $returnType = '';
        $request = $this->postConfigApacheSlingGetServletRequest($json_maximumresults, $json_maximumresults_type_hint, $enable_html, $enable_html_type_hint, $enable_txt, $enable_txt_type_hint, $enable_xml, $enable_xml_type_hint);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postConfigApacheSlingGetServlet'
     *
     * @param  string $json_maximumresults (optional)
     * @param  string $json_maximumresults_type_hint (optional)
     * @param  bool $enable_html (optional)
     * @param  string $enable_html_type_hint (optional)
     * @param  bool $enable_txt (optional)
     * @param  string $enable_txt_type_hint (optional)
     * @param  bool $enable_xml (optional)
     * @param  string $enable_xml_type_hint (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postConfigApacheSlingGetServletRequest($json_maximumresults = null, $json_maximumresults_type_hint = null, $enable_html = null, $enable_html_type_hint = null, $enable_txt = null, $enable_txt_type_hint = null, $enable_xml = null, $enable_xml_type_hint = null)
    {

        $resourcePath = '/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($json_maximumresults !== null) {
            if('form' === 'form' && is_array($json_maximumresults)) {
                foreach($json_maximumresults as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['json.maximumresults'] = $json_maximumresults;
            }
        }
        // query params
        if ($json_maximumresults_type_hint !== null) {
            if('form' === 'form' && is_array($json_maximumresults_type_hint)) {
                foreach($json_maximumresults_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['json.maximumresults@TypeHint'] = $json_maximumresults_type_hint;
            }
        }
        // query params
        if ($enable_html !== null) {
            if('form' === 'form' && is_array($enable_html)) {
                foreach($enable_html as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['enable.html'] = $enable_html;
            }
        }
        // query params
        if ($enable_html_type_hint !== null) {
            if('form' === 'form' && is_array($enable_html_type_hint)) {
                foreach($enable_html_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['enable.html@TypeHint'] = $enable_html_type_hint;
            }
        }
        // query params
        if ($enable_txt !== null) {
            if('form' === 'form' && is_array($enable_txt)) {
                foreach($enable_txt as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['enable.txt'] = $enable_txt;
            }
        }
        // query params
        if ($enable_txt_type_hint !== null) {
            if('form' === 'form' && is_array($enable_txt_type_hint)) {
                foreach($enable_txt_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['enable.txt@TypeHint'] = $enable_txt_type_hint;
            }
        }
        // query params
        if ($enable_xml !== null) {
            if('form' === 'form' && is_array($enable_xml)) {
                foreach($enable_xml as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['enable.xml'] = $enable_xml;
            }
        }
        // query params
        if ($enable_xml_type_hint !== null) {
            if('form' === 'form' && is_array($enable_xml_type_hint)) {
                foreach($enable_xml_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['enable.xml@TypeHint'] = $enable_xml_type_hint;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postConfigApacheSlingReferrerFilter
     *
     * @param  bool $allow_empty allow_empty (optional)
     * @param  string $allow_empty_type_hint allow_empty_type_hint (optional)
     * @param  string $allow_hosts allow_hosts (optional)
     * @param  string $allow_hosts_type_hint allow_hosts_type_hint (optional)
     * @param  string $allow_hosts_regexp allow_hosts_regexp (optional)
     * @param  string $allow_hosts_regexp_type_hint allow_hosts_regexp_type_hint (optional)
     * @param  string $filter_methods filter_methods (optional)
     * @param  string $filter_methods_type_hint filter_methods_type_hint (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postConfigApacheSlingReferrerFilter($allow_empty = null, $allow_empty_type_hint = null, $allow_hosts = null, $allow_hosts_type_hint = null, $allow_hosts_regexp = null, $allow_hosts_regexp_type_hint = null, $filter_methods = null, $filter_methods_type_hint = null)
    {
        $this->postConfigApacheSlingReferrerFilterWithHttpInfo($allow_empty, $allow_empty_type_hint, $allow_hosts, $allow_hosts_type_hint, $allow_hosts_regexp, $allow_hosts_regexp_type_hint, $filter_methods, $filter_methods_type_hint);
    }

    /**
     * Operation postConfigApacheSlingReferrerFilterWithHttpInfo
     *
     * @param  bool $allow_empty (optional)
     * @param  string $allow_empty_type_hint (optional)
     * @param  string $allow_hosts (optional)
     * @param  string $allow_hosts_type_hint (optional)
     * @param  string $allow_hosts_regexp (optional)
     * @param  string $allow_hosts_regexp_type_hint (optional)
     * @param  string $filter_methods (optional)
     * @param  string $filter_methods_type_hint (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postConfigApacheSlingReferrerFilterWithHttpInfo($allow_empty = null, $allow_empty_type_hint = null, $allow_hosts = null, $allow_hosts_type_hint = null, $allow_hosts_regexp = null, $allow_hosts_regexp_type_hint = null, $filter_methods = null, $filter_methods_type_hint = null)
    {
        $request = $this->postConfigApacheSlingReferrerFilterRequest($allow_empty, $allow_empty_type_hint, $allow_hosts, $allow_hosts_type_hint, $allow_hosts_regexp, $allow_hosts_regexp_type_hint, $filter_methods, $filter_methods_type_hint);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postConfigApacheSlingReferrerFilterAsync
     *
     * @param  bool $allow_empty (optional)
     * @param  string $allow_empty_type_hint (optional)
     * @param  string $allow_hosts (optional)
     * @param  string $allow_hosts_type_hint (optional)
     * @param  string $allow_hosts_regexp (optional)
     * @param  string $allow_hosts_regexp_type_hint (optional)
     * @param  string $filter_methods (optional)
     * @param  string $filter_methods_type_hint (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConfigApacheSlingReferrerFilterAsync($allow_empty = null, $allow_empty_type_hint = null, $allow_hosts = null, $allow_hosts_type_hint = null, $allow_hosts_regexp = null, $allow_hosts_regexp_type_hint = null, $filter_methods = null, $filter_methods_type_hint = null)
    {
        return $this->postConfigApacheSlingReferrerFilterAsyncWithHttpInfo($allow_empty, $allow_empty_type_hint, $allow_hosts, $allow_hosts_type_hint, $allow_hosts_regexp, $allow_hosts_regexp_type_hint, $filter_methods, $filter_methods_type_hint)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postConfigApacheSlingReferrerFilterAsyncWithHttpInfo
     *
     * @param  bool $allow_empty (optional)
     * @param  string $allow_empty_type_hint (optional)
     * @param  string $allow_hosts (optional)
     * @param  string $allow_hosts_type_hint (optional)
     * @param  string $allow_hosts_regexp (optional)
     * @param  string $allow_hosts_regexp_type_hint (optional)
     * @param  string $filter_methods (optional)
     * @param  string $filter_methods_type_hint (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConfigApacheSlingReferrerFilterAsyncWithHttpInfo($allow_empty = null, $allow_empty_type_hint = null, $allow_hosts = null, $allow_hosts_type_hint = null, $allow_hosts_regexp = null, $allow_hosts_regexp_type_hint = null, $filter_methods = null, $filter_methods_type_hint = null)
    {
        $returnType = '';
        $request = $this->postConfigApacheSlingReferrerFilterRequest($allow_empty, $allow_empty_type_hint, $allow_hosts, $allow_hosts_type_hint, $allow_hosts_regexp, $allow_hosts_regexp_type_hint, $filter_methods, $filter_methods_type_hint);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postConfigApacheSlingReferrerFilter'
     *
     * @param  bool $allow_empty (optional)
     * @param  string $allow_empty_type_hint (optional)
     * @param  string $allow_hosts (optional)
     * @param  string $allow_hosts_type_hint (optional)
     * @param  string $allow_hosts_regexp (optional)
     * @param  string $allow_hosts_regexp_type_hint (optional)
     * @param  string $filter_methods (optional)
     * @param  string $filter_methods_type_hint (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postConfigApacheSlingReferrerFilterRequest($allow_empty = null, $allow_empty_type_hint = null, $allow_hosts = null, $allow_hosts_type_hint = null, $allow_hosts_regexp = null, $allow_hosts_regexp_type_hint = null, $filter_methods = null, $filter_methods_type_hint = null)
    {

        $resourcePath = '/apps/system/config/org.apache.sling.security.impl.ReferrerFilter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($allow_empty !== null) {
            if('form' === 'form' && is_array($allow_empty)) {
                foreach($allow_empty as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['allow.empty'] = $allow_empty;
            }
        }
        // query params
        if ($allow_empty_type_hint !== null) {
            if('form' === 'form' && is_array($allow_empty_type_hint)) {
                foreach($allow_empty_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['allow.empty@TypeHint'] = $allow_empty_type_hint;
            }
        }
        // query params
        if ($allow_hosts !== null) {
            if('form' === 'form' && is_array($allow_hosts)) {
                foreach($allow_hosts as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['allow.hosts'] = $allow_hosts;
            }
        }
        // query params
        if ($allow_hosts_type_hint !== null) {
            if('form' === 'form' && is_array($allow_hosts_type_hint)) {
                foreach($allow_hosts_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['allow.hosts@TypeHint'] = $allow_hosts_type_hint;
            }
        }
        // query params
        if ($allow_hosts_regexp !== null) {
            if('form' === 'form' && is_array($allow_hosts_regexp)) {
                foreach($allow_hosts_regexp as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['allow.hosts.regexp'] = $allow_hosts_regexp;
            }
        }
        // query params
        if ($allow_hosts_regexp_type_hint !== null) {
            if('form' === 'form' && is_array($allow_hosts_regexp_type_hint)) {
                foreach($allow_hosts_regexp_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['allow.hosts.regexp@TypeHint'] = $allow_hosts_regexp_type_hint;
            }
        }
        // query params
        if ($filter_methods !== null) {
            if('form' === 'form' && is_array($filter_methods)) {
                foreach($filter_methods as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter.methods'] = $filter_methods;
            }
        }
        // query params
        if ($filter_methods_type_hint !== null) {
            if('form' === 'form' && is_array($filter_methods_type_hint)) {
                foreach($filter_methods_type_hint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter.methods@TypeHint'] = $filter_methods_type_hint;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postConfigProperty
     *
     * @param  string $config_node_name config_node_name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postConfigProperty($config_node_name)
    {
        $this->postConfigPropertyWithHttpInfo($config_node_name);
    }

    /**
     * Operation postConfigPropertyWithHttpInfo
     *
     * @param  string $config_node_name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postConfigPropertyWithHttpInfo($config_node_name)
    {
        $request = $this->postConfigPropertyRequest($config_node_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postConfigPropertyAsync
     *
     * @param  string $config_node_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConfigPropertyAsync($config_node_name)
    {
        return $this->postConfigPropertyAsyncWithHttpInfo($config_node_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postConfigPropertyAsyncWithHttpInfo
     *
     * @param  string $config_node_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConfigPropertyAsyncWithHttpInfo($config_node_name)
    {
        $returnType = '';
        $request = $this->postConfigPropertyRequest($config_node_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postConfigProperty'
     *
     * @param  string $config_node_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postConfigPropertyRequest($config_node_name)
    {
        // verify the required parameter 'config_node_name' is set
        if ($config_node_name === null || (is_array($config_node_name) && count($config_node_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $config_node_name when calling postConfigProperty'
            );
        }

        $resourcePath = '/apps/system/config/{configNodeName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($config_node_name !== null) {
            $resourcePath = str_replace(
                '{' . 'configNodeName' . '}',
                ObjectSerializer::toPathValue($config_node_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postNode
     *
     * @param  string $path path (required)
     * @param  string $name name (required)
     * @param  string $operation operation (optional)
     * @param  string $delete_authorizable delete_authorizable (optional)
     * @param  \SplFileObject $file file (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postNode($path, $name, $operation = null, $delete_authorizable = null, $file = null)
    {
        $this->postNodeWithHttpInfo($path, $name, $operation, $delete_authorizable, $file);
    }

    /**
     * Operation postNodeWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $name (required)
     * @param  string $operation (optional)
     * @param  string $delete_authorizable (optional)
     * @param  \SplFileObject $file (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postNodeWithHttpInfo($path, $name, $operation = null, $delete_authorizable = null, $file = null)
    {
        $request = $this->postNodeRequest($path, $name, $operation, $delete_authorizable, $file);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postNodeAsync
     *
     * @param  string $path (required)
     * @param  string $name (required)
     * @param  string $operation (optional)
     * @param  string $delete_authorizable (optional)
     * @param  \SplFileObject $file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postNodeAsync($path, $name, $operation = null, $delete_authorizable = null, $file = null)
    {
        return $this->postNodeAsyncWithHttpInfo($path, $name, $operation, $delete_authorizable, $file)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postNodeAsyncWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $name (required)
     * @param  string $operation (optional)
     * @param  string $delete_authorizable (optional)
     * @param  \SplFileObject $file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postNodeAsyncWithHttpInfo($path, $name, $operation = null, $delete_authorizable = null, $file = null)
    {
        $returnType = '';
        $request = $this->postNodeRequest($path, $name, $operation, $delete_authorizable, $file);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postNode'
     *
     * @param  string $path (required)
     * @param  string $name (required)
     * @param  string $operation (optional)
     * @param  string $delete_authorizable (optional)
     * @param  \SplFileObject $file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postNodeRequest($path, $name, $operation = null, $delete_authorizable = null, $file = null)
    {
        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling postNode'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling postNode'
            );
        }

        $resourcePath = '/{path}/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($operation !== null) {
            if('form' === 'form' && is_array($operation)) {
                foreach($operation as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams[':operation'] = $operation;
            }
        }
        // query params
        if ($delete_authorizable !== null) {
            if('form' === 'form' && is_array($delete_authorizable)) {
                foreach($delete_authorizable as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deleteAuthorizable'] = $delete_authorizable;
            }
        }


        // path params
        if ($path !== null) {
            $resourcePath = str_replace(
                '{' . 'path' . '}',
                ObjectSerializer::toPathValue($path),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = \GuzzleHttp\Psr7\try_fopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postNodeRw
     *
     * @param  string $path path (required)
     * @param  string $name name (required)
     * @param  string $add_members add_members (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postNodeRw($path, $name, $add_members = null)
    {
        $this->postNodeRwWithHttpInfo($path, $name, $add_members);
    }

    /**
     * Operation postNodeRwWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $name (required)
     * @param  string $add_members (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postNodeRwWithHttpInfo($path, $name, $add_members = null)
    {
        $request = $this->postNodeRwRequest($path, $name, $add_members);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postNodeRwAsync
     *
     * @param  string $path (required)
     * @param  string $name (required)
     * @param  string $add_members (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postNodeRwAsync($path, $name, $add_members = null)
    {
        return $this->postNodeRwAsyncWithHttpInfo($path, $name, $add_members)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postNodeRwAsyncWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $name (required)
     * @param  string $add_members (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postNodeRwAsyncWithHttpInfo($path, $name, $add_members = null)
    {
        $returnType = '';
        $request = $this->postNodeRwRequest($path, $name, $add_members);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postNodeRw'
     *
     * @param  string $path (required)
     * @param  string $name (required)
     * @param  string $add_members (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postNodeRwRequest($path, $name, $add_members = null)
    {
        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling postNodeRw'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling postNodeRw'
            );
        }

        $resourcePath = '/{path}/{name}.rw.html';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($add_members !== null) {
            if('form' === 'form' && is_array($add_members)) {
                foreach($add_members as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['addMembers'] = $add_members;
            }
        }


        // path params
        if ($path !== null) {
            $resourcePath = str_replace(
                '{' . 'path' . '}',
                ObjectSerializer::toPathValue($path),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postPath
     *
     * @param  string $path path (required)
     * @param  string $jcrprimary_type jcrprimary_type (required)
     * @param  string $name name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postPath($path, $jcrprimary_type, $name)
    {
        $this->postPathWithHttpInfo($path, $jcrprimary_type, $name);
    }

    /**
     * Operation postPathWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $jcrprimary_type (required)
     * @param  string $name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postPathWithHttpInfo($path, $jcrprimary_type, $name)
    {
        $request = $this->postPathRequest($path, $jcrprimary_type, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postPathAsync
     *
     * @param  string $path (required)
     * @param  string $jcrprimary_type (required)
     * @param  string $name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postPathAsync($path, $jcrprimary_type, $name)
    {
        return $this->postPathAsyncWithHttpInfo($path, $jcrprimary_type, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postPathAsyncWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $jcrprimary_type (required)
     * @param  string $name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postPathAsyncWithHttpInfo($path, $jcrprimary_type, $name)
    {
        $returnType = '';
        $request = $this->postPathRequest($path, $jcrprimary_type, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postPath'
     *
     * @param  string $path (required)
     * @param  string $jcrprimary_type (required)
     * @param  string $name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postPathRequest($path, $jcrprimary_type, $name)
    {
        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling postPath'
            );
        }
        // verify the required parameter 'jcrprimary_type' is set
        if ($jcrprimary_type === null || (is_array($jcrprimary_type) && count($jcrprimary_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jcrprimary_type when calling postPath'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling postPath'
            );
        }

        $resourcePath = '/{path}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($jcrprimary_type !== null) {
            if('form' === 'form' && is_array($jcrprimary_type)) {
                foreach($jcrprimary_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jcr:primaryType'] = $jcrprimary_type;
            }
        }
        // query params
        if ($name !== null) {
            if('form' === 'form' && is_array($name)) {
                foreach($name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams[':name'] = $name;
            }
        }


        // path params
        if ($path !== null) {
            $resourcePath = str_replace(
                '{' . 'path' . '}',
                ObjectSerializer::toPathValue($path),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postQuery
     *
     * @param  string $path path (required)
     * @param  float $p_limit p_limit (required)
     * @param  string $_1_property _1_property (required)
     * @param  string $_1_property_value _1_property_value (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function postQuery($path, $p_limit, $_1_property, $_1_property_value)
    {
        list($response) = $this->postQueryWithHttpInfo($path, $p_limit, $_1_property, $_1_property_value);
        return $response;
    }

    /**
     * Operation postQueryWithHttpInfo
     *
     * @param  string $path (required)
     * @param  float $p_limit (required)
     * @param  string $_1_property (required)
     * @param  string $_1_property_value (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function postQueryWithHttpInfo($path, $p_limit, $_1_property, $_1_property_value)
    {
        $request = $this->postQueryRequest($path, $p_limit, $_1_property, $_1_property_value);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                default:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postQueryAsync
     *
     * @param  string $path (required)
     * @param  float $p_limit (required)
     * @param  string $_1_property (required)
     * @param  string $_1_property_value (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQueryAsync($path, $p_limit, $_1_property, $_1_property_value)
    {
        return $this->postQueryAsyncWithHttpInfo($path, $p_limit, $_1_property, $_1_property_value)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postQueryAsyncWithHttpInfo
     *
     * @param  string $path (required)
     * @param  float $p_limit (required)
     * @param  string $_1_property (required)
     * @param  string $_1_property_value (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQueryAsyncWithHttpInfo($path, $p_limit, $_1_property, $_1_property_value)
    {
        $returnType = 'string';
        $request = $this->postQueryRequest($path, $p_limit, $_1_property, $_1_property_value);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postQuery'
     *
     * @param  string $path (required)
     * @param  float $p_limit (required)
     * @param  string $_1_property (required)
     * @param  string $_1_property_value (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postQueryRequest($path, $p_limit, $_1_property, $_1_property_value)
    {
        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling postQuery'
            );
        }
        // verify the required parameter 'p_limit' is set
        if ($p_limit === null || (is_array($p_limit) && count($p_limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $p_limit when calling postQuery'
            );
        }
        // verify the required parameter '_1_property' is set
        if ($_1_property === null || (is_array($_1_property) && count($_1_property) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $_1_property when calling postQuery'
            );
        }
        // verify the required parameter '_1_property_value' is set
        if ($_1_property_value === null || (is_array($_1_property_value) && count($_1_property_value) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $_1_property_value when calling postQuery'
            );
        }

        $resourcePath = '/bin/querybuilder.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($path !== null) {
            if('form' === 'form' && is_array($path)) {
                foreach($path as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['path'] = $path;
            }
        }
        // query params
        if ($p_limit !== null) {
            if('form' === 'form' && is_array($p_limit)) {
                foreach($p_limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['p.limit'] = $p_limit;
            }
        }
        // query params
        if ($_1_property !== null) {
            if('form' === 'form' && is_array($_1_property)) {
                foreach($_1_property as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['1_property'] = $_1_property;
            }
        }
        // query params
        if ($_1_property_value !== null) {
            if('form' === 'form' && is_array($_1_property_value)) {
                foreach($_1_property_value as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['1_property.value'] = $_1_property_value;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postTreeActivation
     *
     * @param  bool $ignoredeactivated ignoredeactivated (required)
     * @param  bool $onlymodified onlymodified (required)
     * @param  string $path path (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postTreeActivation($ignoredeactivated, $onlymodified, $path)
    {
        $this->postTreeActivationWithHttpInfo($ignoredeactivated, $onlymodified, $path);
    }

    /**
     * Operation postTreeActivationWithHttpInfo
     *
     * @param  bool $ignoredeactivated (required)
     * @param  bool $onlymodified (required)
     * @param  string $path (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postTreeActivationWithHttpInfo($ignoredeactivated, $onlymodified, $path)
    {
        $request = $this->postTreeActivationRequest($ignoredeactivated, $onlymodified, $path);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postTreeActivationAsync
     *
     * @param  bool $ignoredeactivated (required)
     * @param  bool $onlymodified (required)
     * @param  string $path (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postTreeActivationAsync($ignoredeactivated, $onlymodified, $path)
    {
        return $this->postTreeActivationAsyncWithHttpInfo($ignoredeactivated, $onlymodified, $path)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postTreeActivationAsyncWithHttpInfo
     *
     * @param  bool $ignoredeactivated (required)
     * @param  bool $onlymodified (required)
     * @param  string $path (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postTreeActivationAsyncWithHttpInfo($ignoredeactivated, $onlymodified, $path)
    {
        $returnType = '';
        $request = $this->postTreeActivationRequest($ignoredeactivated, $onlymodified, $path);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postTreeActivation'
     *
     * @param  bool $ignoredeactivated (required)
     * @param  bool $onlymodified (required)
     * @param  string $path (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postTreeActivationRequest($ignoredeactivated, $onlymodified, $path)
    {
        // verify the required parameter 'ignoredeactivated' is set
        if ($ignoredeactivated === null || (is_array($ignoredeactivated) && count($ignoredeactivated) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ignoredeactivated when calling postTreeActivation'
            );
        }
        // verify the required parameter 'onlymodified' is set
        if ($onlymodified === null || (is_array($onlymodified) && count($onlymodified) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $onlymodified when calling postTreeActivation'
            );
        }
        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling postTreeActivation'
            );
        }

        $resourcePath = '/etc/replication/treeactivation.html';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ignoredeactivated !== null) {
            if('form' === 'form' && is_array($ignoredeactivated)) {
                foreach($ignoredeactivated as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['ignoredeactivated'] = $ignoredeactivated;
            }
        }
        // query params
        if ($onlymodified !== null) {
            if('form' === 'form' && is_array($onlymodified)) {
                foreach($onlymodified as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['onlymodified'] = $onlymodified;
            }
        }
        // query params
        if ($path !== null) {
            if('form' === 'form' && is_array($path)) {
                foreach($path as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['path'] = $path;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postTruststore
     *
     * @param  string $operation operation (optional)
     * @param  string $new_password new_password (optional)
     * @param  string $re_password re_password (optional)
     * @param  string $key_store_type key_store_type (optional)
     * @param  string $remove_alias remove_alias (optional)
     * @param  \SplFileObject $certificate certificate (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function postTruststore($operation = null, $new_password = null, $re_password = null, $key_store_type = null, $remove_alias = null, $certificate = null)
    {
        list($response) = $this->postTruststoreWithHttpInfo($operation, $new_password, $re_password, $key_store_type, $remove_alias, $certificate);
        return $response;
    }

    /**
     * Operation postTruststoreWithHttpInfo
     *
     * @param  string $operation (optional)
     * @param  string $new_password (optional)
     * @param  string $re_password (optional)
     * @param  string $key_store_type (optional)
     * @param  string $remove_alias (optional)
     * @param  \SplFileObject $certificate (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function postTruststoreWithHttpInfo($operation = null, $new_password = null, $re_password = null, $key_store_type = null, $remove_alias = null, $certificate = null)
    {
        $request = $this->postTruststoreRequest($operation, $new_password, $re_password, $key_store_type, $remove_alias, $certificate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                default:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postTruststoreAsync
     *
     * @param  string $operation (optional)
     * @param  string $new_password (optional)
     * @param  string $re_password (optional)
     * @param  string $key_store_type (optional)
     * @param  string $remove_alias (optional)
     * @param  \SplFileObject $certificate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postTruststoreAsync($operation = null, $new_password = null, $re_password = null, $key_store_type = null, $remove_alias = null, $certificate = null)
    {
        return $this->postTruststoreAsyncWithHttpInfo($operation, $new_password, $re_password, $key_store_type, $remove_alias, $certificate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postTruststoreAsyncWithHttpInfo
     *
     * @param  string $operation (optional)
     * @param  string $new_password (optional)
     * @param  string $re_password (optional)
     * @param  string $key_store_type (optional)
     * @param  string $remove_alias (optional)
     * @param  \SplFileObject $certificate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postTruststoreAsyncWithHttpInfo($operation = null, $new_password = null, $re_password = null, $key_store_type = null, $remove_alias = null, $certificate = null)
    {
        $returnType = 'string';
        $request = $this->postTruststoreRequest($operation, $new_password, $re_password, $key_store_type, $remove_alias, $certificate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postTruststore'
     *
     * @param  string $operation (optional)
     * @param  string $new_password (optional)
     * @param  string $re_password (optional)
     * @param  string $key_store_type (optional)
     * @param  string $remove_alias (optional)
     * @param  \SplFileObject $certificate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postTruststoreRequest($operation = null, $new_password = null, $re_password = null, $key_store_type = null, $remove_alias = null, $certificate = null)
    {

        $resourcePath = '/libs/granite/security/post/truststore';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($operation !== null) {
            if('form' === 'form' && is_array($operation)) {
                foreach($operation as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams[':operation'] = $operation;
            }
        }
        // query params
        if ($new_password !== null) {
            if('form' === 'form' && is_array($new_password)) {
                foreach($new_password as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['newPassword'] = $new_password;
            }
        }
        // query params
        if ($re_password !== null) {
            if('form' === 'form' && is_array($re_password)) {
                foreach($re_password as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['rePassword'] = $re_password;
            }
        }
        // query params
        if ($key_store_type !== null) {
            if('form' === 'form' && is_array($key_store_type)) {
                foreach($key_store_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['keyStoreType'] = $key_store_type;
            }
        }
        // query params
        if ($remove_alias !== null) {
            if('form' === 'form' && is_array($remove_alias)) {
                foreach($remove_alias as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['removeAlias'] = $remove_alias;
            }
        }



        // form params
        if ($certificate !== null) {
            $multipart = true;
            $formParams['certificate'] = [];
            $paramFiles = is_array($certificate) ? $certificate : [$certificate];
            foreach ($paramFiles as $paramFile) {
                $formParams['certificate'][] = \GuzzleHttp\Psr7\try_fopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postTruststorePKCS12
     *
     * @param  \SplFileObject $truststore_p12 truststore_p12 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function postTruststorePKCS12($truststore_p12 = null)
    {
        list($response) = $this->postTruststorePKCS12WithHttpInfo($truststore_p12);
        return $response;
    }

    /**
     * Operation postTruststorePKCS12WithHttpInfo
     *
     * @param  \SplFileObject $truststore_p12 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function postTruststorePKCS12WithHttpInfo($truststore_p12 = null)
    {
        $request = $this->postTruststorePKCS12Request($truststore_p12);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                default:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postTruststorePKCS12Async
     *
     * @param  \SplFileObject $truststore_p12 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postTruststorePKCS12Async($truststore_p12 = null)
    {
        return $this->postTruststorePKCS12AsyncWithHttpInfo($truststore_p12)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postTruststorePKCS12AsyncWithHttpInfo
     *
     * @param  \SplFileObject $truststore_p12 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postTruststorePKCS12AsyncWithHttpInfo($truststore_p12 = null)
    {
        $returnType = 'string';
        $request = $this->postTruststorePKCS12Request($truststore_p12);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postTruststorePKCS12'
     *
     * @param  \SplFileObject $truststore_p12 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postTruststorePKCS12Request($truststore_p12 = null)
    {

        $resourcePath = '/etc/truststore';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($truststore_p12 !== null) {
            $multipart = true;
            $formParams['truststore.p12'] = [];
            $paramFiles = is_array($truststore_p12) ? $truststore_p12 : [$truststore_p12];
            foreach ($paramFiles as $paramFile) {
                $formParams['truststore.p12'][] = \GuzzleHttp\Psr7\try_fopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
