/**
* Adobe Experience Manager (AEM) API
* Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
*
* The version of the OpenAPI document: 3.5.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server

import io.ktor.locations.*
import org.openapitools.server.models.*

@KtorExperimentalLocationsAPI
object Paths {
    /**
     * 
     */
    @Location("/system/console/status-productinfo.json") object getAemProductInfo

    /**
     * 
     * @param name  
     */
    @Location("/system/console/bundles/{name}.json") class getBundleInfo(val name: kotlin.String)

    /**
     * 
     */
    @Location("/system/console/configMgr") object getConfigMgr

    /**
     * 
     * @param name  
     * @param action  
     */
    @Location("/system/console/bundles/{name}") class postBundle(val name: kotlin.String, val action: kotlin.String)

    /**
     * 
     * @param action  
     */
    @Location("/system/console/jmx/com.adobe.granite:type&#x3D;Repository/op/{action}") class postJmxRepository(val action: kotlin.String)

    /**
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param delete  (optional)
     * @param action  (optional)
     * @param dollarLocation  (optional)
     * @param path  (optional)
     * @param serviceRanking  (optional)
     * @param idpUrl  (optional)
     * @param idpCertAlias  (optional)
     * @param idpHttpRedirect  (optional)
     * @param serviceProviderEntityId  (optional)
     * @param assertionConsumerServiceURL  (optional)
     * @param spPrivateKeyAlias  (optional)
     * @param keyStorePassword  (optional)
     * @param defaultRedirectUrl  (optional)
     * @param userIDAttribute  (optional)
     * @param useEncryption  (optional)
     * @param createUser  (optional)
     * @param addGroupMemberships  (optional)
     * @param groupMembershipAttribute  (optional)
     * @param defaultGroups  (optional)
     * @param nameIdFormat  (optional)
     * @param synchronizeAttributes  (optional)
     * @param handleLogout  (optional)
     * @param logoutUrl  (optional)
     * @param clockTolerance  (optional)
     * @param digestMethod  (optional)
     * @param signatureMethod  (optional)
     * @param userIntermediatePath  (optional)
     * @param propertylist  (optional)
     */
    @Location("/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler") class postSamlConfiguration(val post: kotlin.Boolean? = null, val apply: kotlin.Boolean? = null, val delete: kotlin.Boolean? = null, val action: kotlin.String? = null, val dollarLocation: kotlin.String? = null, val path: kotlin.collections.List<kotlin.String>? = null, val serviceRanking: kotlin.Int? = null, val idpUrl: kotlin.String? = null, val idpCertAlias: kotlin.String? = null, val idpHttpRedirect: kotlin.Boolean? = null, val serviceProviderEntityId: kotlin.String? = null, val assertionConsumerServiceURL: kotlin.String? = null, val spPrivateKeyAlias: kotlin.String? = null, val keyStorePassword: kotlin.String? = null, val defaultRedirectUrl: kotlin.String? = null, val userIDAttribute: kotlin.String? = null, val useEncryption: kotlin.Boolean? = null, val createUser: kotlin.Boolean? = null, val addGroupMemberships: kotlin.Boolean? = null, val groupMembershipAttribute: kotlin.String? = null, val defaultGroups: kotlin.collections.List<kotlin.String>? = null, val nameIdFormat: kotlin.String? = null, val synchronizeAttributes: kotlin.collections.List<kotlin.String>? = null, val handleLogout: kotlin.Boolean? = null, val logoutUrl: kotlin.String? = null, val clockTolerance: kotlin.Int? = null, val digestMethod: kotlin.String? = null, val signatureMethod: kotlin.String? = null, val userIntermediatePath: kotlin.String? = null, val propertylist: kotlin.collections.List<kotlin.String>? = null)

    /**
     * 
     */
    @Location("/libs/granite/core/content/login.html") object getLoginPage

    /**
     * 
     * @param authorizableId  
     * @param changelog  
     */
    @Location("/.cqactions.html") class postCqActions(val authorizableId: kotlin.String, val changelog: kotlin.String)

    /**
     * 
     */
    @Location("/crx/server/crx.default/jcr:root/.1.json") object getCrxdeStatus

    /**
     * 
     */
    @Location("/crx/packmgr/installstatus.jsp") object getInstallStatus

    /**
     * 
     */
    @Location("/crx/packmgr/service/script.html") object getPackageManagerServlet

    /**
     * 
     * @param cmd  
     */
    @Location("/crx/packmgr/service.jsp") class postPackageService(val cmd: kotlin.String)

    /**
     * 
     * @param path  
     * @param cmd  
     * @param groupName  (optional)
     * @param packageName  (optional)
     * @param packageVersion  (optional)
     * @param charset  (optional)
     * @param force  (optional)
     * @param recursive  (optional)
     * @param &#x60;package&#x60;  (optional)
     */
    @Location("/crx/packmgr/service/.json/{path}") class postPackageServiceJson(val path: kotlin.String, val cmd: kotlin.String, val groupName: kotlin.String? = null, val packageName: kotlin.String? = null, val packageVersion: kotlin.String? = null, val charset: kotlin.String? = null, val force: kotlin.Boolean? = null, val recursive: kotlin.Boolean? = null, val &#x60;package&#x60;: java.io.File? = null)

    /**
     * 
     * @param groupName  
     * @param packageName  
     * @param version  
     * @param path  
     * @param filter  (optional)
     * @param charset  (optional)
     */
    @Location("/crx/packmgr/update.jsp") class postPackageUpdate(val groupName: kotlin.String, val packageName: kotlin.String, val version: kotlin.String, val path: kotlin.String, val filter: kotlin.String? = null, val charset: kotlin.String? = null)

    /**
     * 
     * @param old  
     * @param plain  
     * @param verify  
     */
    @Location("/crx/explorer/ui/setpassword.jsp") class postSetPassword(val old: kotlin.String, val plain: kotlin.String, val verify: kotlin.String)

    /**
     * 
     * @param tags  (optional)
     * @param combineTagsOr  (optional)
     */
    @Location("/system/health") class getAemHealthCheck(val tags: kotlin.String? = null, val combineTagsOr: kotlin.Boolean? = null)

    /**
     * 
     * @param bundlesIgnored  (optional)
     * @param bundlesIgnoredAtTypeHint  (optional)
     */
    @Location("/apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck") class postConfigAemHealthCheckServlet(val bundlesIgnored: kotlin.collections.List<kotlin.String>? = null, val bundlesIgnoredAtTypeHint: kotlin.String? = null)

    /**
     * 
     * @param pwdresetAuthorizables  (optional)
     * @param pwdresetAuthorizablesAtTypeHint  (optional)
     */
    @Location("/apps/system/config/com.shinesolutions.aem.passwordreset.Activator") class postConfigAemPasswordReset(val pwdresetAuthorizables: kotlin.collections.List<kotlin.String>? = null, val pwdresetAuthorizablesAtTypeHint: kotlin.String? = null)

    /**
     * 
     * @param keystorePassword  
     * @param keystorePasswordConfirm  
     * @param truststorePassword  
     * @param truststorePasswordConfirm  
     * @param httpsHostname  
     * @param httpsPort  
     * @param privatekeyFile  (optional)
     * @param certificateFile  (optional)
     */
    @Location("/libs/granite/security/post/sslSetup.html") class sslSetup(val keystorePassword: kotlin.String, val keystorePasswordConfirm: kotlin.String, val truststorePassword: kotlin.String, val truststorePasswordConfirm: kotlin.String, val httpsHostname: kotlin.String, val httpsPort: kotlin.String, val privatekeyFile: java.io.File? = null, val certificateFile: java.io.File? = null)

    /**
     * 
     * @param runmode  
     * @param name  
     */
    @Location("/etc/replication/agents.{runmode}/{name}") class deleteAgent(val runmode: kotlin.String, val name: kotlin.String)

    /**
     * 
     * @param path  
     * @param name  
     */
    @Location("/{path}/{name}") class deleteNode(val path: kotlin.String, val name: kotlin.String)

    /**
     * 
     * @param runmode  
     * @param name  
     */
    @Location("/etc/replication/agents.{runmode}/{name}") class getAgent(val runmode: kotlin.String, val name: kotlin.String)

    /**
     * 
     * @param runmode  
     */
    @Location("/etc/replication/agents.{runmode}.-1.json") class getAgents(val runmode: kotlin.String)

    /**
     * 
     * @param intermediatePath  
     * @param authorizableId  
     */
    @Location("/{intermediatePath}/{authorizableId}.ks.json") class getAuthorizableKeystore(val intermediatePath: kotlin.String, val authorizableId: kotlin.String)

    /**
     * 
     * @param intermediatePath  
     * @param authorizableId  
     */
    @Location("/{intermediatePath}/{authorizableId}/keystore/store.p12") class getKeystore(val intermediatePath: kotlin.String, val authorizableId: kotlin.String)

    /**
     * 
     * @param path  
     * @param name  
     */
    @Location("/{path}/{name}") class getNode(val path: kotlin.String, val name: kotlin.String)

    /**
     * 
     * @param group  
     * @param name  
     * @param version  
     */
    @Location("/etc/packages/{group}/{name}-{version}.zip") class getPackage(val group: kotlin.String, val name: kotlin.String, val version: kotlin.String)

    /**
     * 
     * @param group  
     * @param name  
     * @param version  
     */
    @Location("/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json") class getPackageFilter(val group: kotlin.String, val name: kotlin.String, val version: kotlin.String)

    /**
     * 
     * @param path  
     * @param pLimit  
     * @param &#x60;1property&#x60;  
     * @param &#x60;1propertyValue&#x60;  
     */
    @Location("/bin/querybuilder.json") class getQuery(val path: kotlin.String, val pLimit: java.math.BigDecimal, val &#x60;1property&#x60;: kotlin.String, val &#x60;1propertyValue&#x60;: kotlin.String)

    /**
     * 
     */
    @Location("/etc/truststore/truststore.p12") object getTruststore

    /**
     * 
     */
    @Location("/libs/granite/security/truststore.json") object getTruststoreInfo

    /**
     * 
     * @param runmode  
     * @param name  
     * @param jcrColonContentCqColonDistribute  (optional)
     * @param jcrColonContentCqColonDistributeAtTypeHint  (optional)
     * @param jcrColonContentCqColonName  (optional)
     * @param jcrColonContentCqColonTemplate  (optional)
     * @param jcrColonContentEnabled  (optional)
     * @param jcrColonContentJcrColonDescription  (optional)
     * @param jcrColonContentJcrColonLastModified  (optional)
     * @param jcrColonContentJcrColonLastModifiedBy  (optional)
     * @param jcrColonContentJcrColonMixinTypes  (optional)
     * @param jcrColonContentJcrColonTitle  (optional)
     * @param jcrColonContentLogLevel  (optional)
     * @param jcrColonContentNoStatusUpdate  (optional)
     * @param jcrColonContentNoVersioning  (optional)
     * @param jcrColonContentProtocolConnectTimeout  (optional)
     * @param jcrColonContentProtocolHTTPConnectionClosed  (optional)
     * @param jcrColonContentProtocolHTTPExpired  (optional)
     * @param jcrColonContentProtocolHTTPHeaders  (optional)
     * @param jcrColonContentProtocolHTTPHeadersAtTypeHint  (optional)
     * @param jcrColonContentProtocolHTTPMethod  (optional)
     * @param jcrColonContentProtocolHTTPSRelaxed  (optional)
     * @param jcrColonContentProtocolInterface  (optional)
     * @param jcrColonContentProtocolSocketTimeout  (optional)
     * @param jcrColonContentProtocolVersion  (optional)
     * @param jcrColonContentProxyNTLMDomain  (optional)
     * @param jcrColonContentProxyNTLMHost  (optional)
     * @param jcrColonContentProxyHost  (optional)
     * @param jcrColonContentProxyPassword  (optional)
     * @param jcrColonContentProxyPort  (optional)
     * @param jcrColonContentProxyUser  (optional)
     * @param jcrColonContentQueueBatchMaxSize  (optional)
     * @param jcrColonContentQueueBatchMode  (optional)
     * @param jcrColonContentQueueBatchWaitTime  (optional)
     * @param jcrColonContentRetryDelay  (optional)
     * @param jcrColonContentReverseReplication  (optional)
     * @param jcrColonContentSerializationType  (optional)
     * @param jcrColonContentSlingColonResourceType  (optional)
     * @param jcrColonContentSsl  (optional)
     * @param jcrColonContentTransportNTLMDomain  (optional)
     * @param jcrColonContentTransportNTLMHost  (optional)
     * @param jcrColonContentTransportPassword  (optional)
     * @param jcrColonContentTransportUri  (optional)
     * @param jcrColonContentTransportUser  (optional)
     * @param jcrColonContentTriggerDistribute  (optional)
     * @param jcrColonContentTriggerModified  (optional)
     * @param jcrColonContentTriggerOnOffTime  (optional)
     * @param jcrColonContentTriggerReceive  (optional)
     * @param jcrColonContentTriggerSpecific  (optional)
     * @param jcrColonContentUserId  (optional)
     * @param jcrColonPrimaryType  (optional)
     * @param colonOperation  (optional)
     */
    @Location("/etc/replication/agents.{runmode}/{name}") class postAgent(val runmode: kotlin.String, val name: kotlin.String, val jcrColonContentCqColonDistribute: kotlin.Boolean? = null, val jcrColonContentCqColonDistributeAtTypeHint: kotlin.String? = null, val jcrColonContentCqColonName: kotlin.String? = null, val jcrColonContentCqColonTemplate: kotlin.String? = null, val jcrColonContentEnabled: kotlin.Boolean? = null, val jcrColonContentJcrColonDescription: kotlin.String? = null, val jcrColonContentJcrColonLastModified: kotlin.String? = null, val jcrColonContentJcrColonLastModifiedBy: kotlin.String? = null, val jcrColonContentJcrColonMixinTypes: kotlin.String? = null, val jcrColonContentJcrColonTitle: kotlin.String? = null, val jcrColonContentLogLevel: kotlin.String? = null, val jcrColonContentNoStatusUpdate: kotlin.Boolean? = null, val jcrColonContentNoVersioning: kotlin.Boolean? = null, val jcrColonContentProtocolConnectTimeout: java.math.BigDecimal? = null, val jcrColonContentProtocolHTTPConnectionClosed: kotlin.Boolean? = null, val jcrColonContentProtocolHTTPExpired: kotlin.String? = null, val jcrColonContentProtocolHTTPHeaders: kotlin.collections.List<kotlin.String>? = null, val jcrColonContentProtocolHTTPHeadersAtTypeHint: kotlin.String? = null, val jcrColonContentProtocolHTTPMethod: kotlin.String? = null, val jcrColonContentProtocolHTTPSRelaxed: kotlin.Boolean? = null, val jcrColonContentProtocolInterface: kotlin.String? = null, val jcrColonContentProtocolSocketTimeout: java.math.BigDecimal? = null, val jcrColonContentProtocolVersion: kotlin.String? = null, val jcrColonContentProxyNTLMDomain: kotlin.String? = null, val jcrColonContentProxyNTLMHost: kotlin.String? = null, val jcrColonContentProxyHost: kotlin.String? = null, val jcrColonContentProxyPassword: kotlin.String? = null, val jcrColonContentProxyPort: java.math.BigDecimal? = null, val jcrColonContentProxyUser: kotlin.String? = null, val jcrColonContentQueueBatchMaxSize: java.math.BigDecimal? = null, val jcrColonContentQueueBatchMode: kotlin.String? = null, val jcrColonContentQueueBatchWaitTime: java.math.BigDecimal? = null, val jcrColonContentRetryDelay: kotlin.String? = null, val jcrColonContentReverseReplication: kotlin.Boolean? = null, val jcrColonContentSerializationType: kotlin.String? = null, val jcrColonContentSlingColonResourceType: kotlin.String? = null, val jcrColonContentSsl: kotlin.String? = null, val jcrColonContentTransportNTLMDomain: kotlin.String? = null, val jcrColonContentTransportNTLMHost: kotlin.String? = null, val jcrColonContentTransportPassword: kotlin.String? = null, val jcrColonContentTransportUri: kotlin.String? = null, val jcrColonContentTransportUser: kotlin.String? = null, val jcrColonContentTriggerDistribute: kotlin.Boolean? = null, val jcrColonContentTriggerModified: kotlin.Boolean? = null, val jcrColonContentTriggerOnOffTime: kotlin.Boolean? = null, val jcrColonContentTriggerReceive: kotlin.Boolean? = null, val jcrColonContentTriggerSpecific: kotlin.Boolean? = null, val jcrColonContentUserId: kotlin.String? = null, val jcrColonPrimaryType: kotlin.String? = null, val colonOperation: kotlin.String? = null)

    /**
     * 
     * @param intermediatePath  
     * @param authorizableId  
     * @param colonOperation  (optional)
     * @param currentPassword  (optional)
     * @param newPassword  (optional)
     * @param rePassword  (optional)
     * @param keyPassword  (optional)
     * @param keyStorePass  (optional)
     * @param alias  (optional)
     * @param newAlias  (optional)
     * @param removeAlias  (optional)
     * @param certChain  (optional)
     * @param pk  (optional)
     * @param keyStore  (optional)
     */
    @Location("/{intermediatePath}/{authorizableId}.ks.html") class postAuthorizableKeystore(val intermediatePath: kotlin.String, val authorizableId: kotlin.String, val colonOperation: kotlin.String? = null, val currentPassword: kotlin.String? = null, val newPassword: kotlin.String? = null, val rePassword: kotlin.String? = null, val keyPassword: kotlin.String? = null, val keyStorePass: kotlin.String? = null, val alias: kotlin.String? = null, val newAlias: kotlin.String? = null, val removeAlias: kotlin.String? = null, val certChain: java.io.File? = null, val pk: java.io.File? = null, val keyStore: java.io.File? = null)

    /**
     * 
     * @param authorizableId  
     * @param intermediatePath  
     * @param createUser  (optional)
     * @param createGroup  (optional)
     * @param repColonPassword  (optional)
     * @param profileGivenName  (optional)
     */
    @Location("/libs/granite/security/post/authorizables") class postAuthorizables(val authorizableId: kotlin.String, val intermediatePath: kotlin.String, val createUser: kotlin.String? = null, val createGroup: kotlin.String? = null, val repColonPassword: kotlin.String? = null, val profileGivenName: kotlin.String? = null)

    /**
     * 
     * @param keyStorePassword  (optional)
     * @param keyStorePasswordAtTypeHint  (optional)
     * @param serviceRanking  (optional)
     * @param serviceRankingAtTypeHint  (optional)
     * @param idpHttpRedirect  (optional)
     * @param idpHttpRedirectAtTypeHint  (optional)
     * @param createUser  (optional)
     * @param createUserAtTypeHint  (optional)
     * @param defaultRedirectUrl  (optional)
     * @param defaultRedirectUrlAtTypeHint  (optional)
     * @param userIDAttribute  (optional)
     * @param userIDAttributeAtTypeHint  (optional)
     * @param defaultGroups  (optional)
     * @param defaultGroupsAtTypeHint  (optional)
     * @param idpCertAlias  (optional)
     * @param idpCertAliasAtTypeHint  (optional)
     * @param addGroupMemberships  (optional)
     * @param addGroupMembershipsAtTypeHint  (optional)
     * @param path  (optional)
     * @param pathAtTypeHint  (optional)
     * @param synchronizeAttributes  (optional)
     * @param synchronizeAttributesAtTypeHint  (optional)
     * @param clockTolerance  (optional)
     * @param clockToleranceAtTypeHint  (optional)
     * @param groupMembershipAttribute  (optional)
     * @param groupMembershipAttributeAtTypeHint  (optional)
     * @param idpUrl  (optional)
     * @param idpUrlAtTypeHint  (optional)
     * @param logoutUrl  (optional)
     * @param logoutUrlAtTypeHint  (optional)
     * @param serviceProviderEntityId  (optional)
     * @param serviceProviderEntityIdAtTypeHint  (optional)
     * @param assertionConsumerServiceURL  (optional)
     * @param assertionConsumerServiceURLAtTypeHint  (optional)
     * @param handleLogout  (optional)
     * @param handleLogoutAtTypeHint  (optional)
     * @param spPrivateKeyAlias  (optional)
     * @param spPrivateKeyAliasAtTypeHint  (optional)
     * @param useEncryption  (optional)
     * @param useEncryptionAtTypeHint  (optional)
     * @param nameIdFormat  (optional)
     * @param nameIdFormatAtTypeHint  (optional)
     * @param digestMethod  (optional)
     * @param digestMethodAtTypeHint  (optional)
     * @param signatureMethod  (optional)
     * @param signatureMethodAtTypeHint  (optional)
     * @param userIntermediatePath  (optional)
     * @param userIntermediatePathAtTypeHint  (optional)
     */
    @Location("/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config") class postConfigAdobeGraniteSamlAuthenticationHandler(val keyStorePassword: kotlin.String? = null, val keyStorePasswordAtTypeHint: kotlin.String? = null, val serviceRanking: kotlin.Int? = null, val serviceRankingAtTypeHint: kotlin.String? = null, val idpHttpRedirect: kotlin.Boolean? = null, val idpHttpRedirectAtTypeHint: kotlin.String? = null, val createUser: kotlin.Boolean? = null, val createUserAtTypeHint: kotlin.String? = null, val defaultRedirectUrl: kotlin.String? = null, val defaultRedirectUrlAtTypeHint: kotlin.String? = null, val userIDAttribute: kotlin.String? = null, val userIDAttributeAtTypeHint: kotlin.String? = null, val defaultGroups: kotlin.collections.List<kotlin.String>? = null, val defaultGroupsAtTypeHint: kotlin.String? = null, val idpCertAlias: kotlin.String? = null, val idpCertAliasAtTypeHint: kotlin.String? = null, val addGroupMemberships: kotlin.Boolean? = null, val addGroupMembershipsAtTypeHint: kotlin.String? = null, val path: kotlin.collections.List<kotlin.String>? = null, val pathAtTypeHint: kotlin.String? = null, val synchronizeAttributes: kotlin.collections.List<kotlin.String>? = null, val synchronizeAttributesAtTypeHint: kotlin.String? = null, val clockTolerance: kotlin.Int? = null, val clockToleranceAtTypeHint: kotlin.String? = null, val groupMembershipAttribute: kotlin.String? = null, val groupMembershipAttributeAtTypeHint: kotlin.String? = null, val idpUrl: kotlin.String? = null, val idpUrlAtTypeHint: kotlin.String? = null, val logoutUrl: kotlin.String? = null, val logoutUrlAtTypeHint: kotlin.String? = null, val serviceProviderEntityId: kotlin.String? = null, val serviceProviderEntityIdAtTypeHint: kotlin.String? = null, val assertionConsumerServiceURL: kotlin.String? = null, val assertionConsumerServiceURLAtTypeHint: kotlin.String? = null, val handleLogout: kotlin.Boolean? = null, val handleLogoutAtTypeHint: kotlin.String? = null, val spPrivateKeyAlias: kotlin.String? = null, val spPrivateKeyAliasAtTypeHint: kotlin.String? = null, val useEncryption: kotlin.Boolean? = null, val useEncryptionAtTypeHint: kotlin.String? = null, val nameIdFormat: kotlin.String? = null, val nameIdFormatAtTypeHint: kotlin.String? = null, val digestMethod: kotlin.String? = null, val digestMethodAtTypeHint: kotlin.String? = null, val signatureMethod: kotlin.String? = null, val signatureMethodAtTypeHint: kotlin.String? = null, val userIntermediatePath: kotlin.String? = null, val userIntermediatePathAtTypeHint: kotlin.String? = null)

    /**
     * 
     * @param orgApacheFelixHttpsNio  (optional)
     * @param orgApacheFelixHttpsNioAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystore  (optional)
     * @param orgApacheFelixHttpsKeystoreAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystorePassword  (optional)
     * @param orgApacheFelixHttpsKeystorePasswordAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystoreKey  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyPassword  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint  (optional)
     * @param orgApacheFelixHttpsTruststore  (optional)
     * @param orgApacheFelixHttpsTruststoreAtTypeHint  (optional)
     * @param orgApacheFelixHttpsTruststorePassword  (optional)
     * @param orgApacheFelixHttpsTruststorePasswordAtTypeHint  (optional)
     * @param orgApacheFelixHttpsClientcertificate  (optional)
     * @param orgApacheFelixHttpsClientcertificateAtTypeHint  (optional)
     * @param orgApacheFelixHttpsEnable  (optional)
     * @param orgApacheFelixHttpsEnableAtTypeHint  (optional)
     * @param orgOsgiServiceHttpPortSecure  (optional)
     * @param orgOsgiServiceHttpPortSecureAtTypeHint  (optional)
     */
    @Location("/apps/system/config/org.apache.felix.http") class postConfigApacheFelixJettyBasedHttpService(val orgApacheFelixHttpsNio: kotlin.Boolean? = null, val orgApacheFelixHttpsNioAtTypeHint: kotlin.String? = null, val orgApacheFelixHttpsKeystore: kotlin.String? = null, val orgApacheFelixHttpsKeystoreAtTypeHint: kotlin.String? = null, val orgApacheFelixHttpsKeystorePassword: kotlin.String? = null, val orgApacheFelixHttpsKeystorePasswordAtTypeHint: kotlin.String? = null, val orgApacheFelixHttpsKeystoreKey: kotlin.String? = null, val orgApacheFelixHttpsKeystoreKeyAtTypeHint: kotlin.String? = null, val orgApacheFelixHttpsKeystoreKeyPassword: kotlin.String? = null, val orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint: kotlin.String? = null, val orgApacheFelixHttpsTruststore: kotlin.String? = null, val orgApacheFelixHttpsTruststoreAtTypeHint: kotlin.String? = null, val orgApacheFelixHttpsTruststorePassword: kotlin.String? = null, val orgApacheFelixHttpsTruststorePasswordAtTypeHint: kotlin.String? = null, val orgApacheFelixHttpsClientcertificate: kotlin.String? = null, val orgApacheFelixHttpsClientcertificateAtTypeHint: kotlin.String? = null, val orgApacheFelixHttpsEnable: kotlin.Boolean? = null, val orgApacheFelixHttpsEnableAtTypeHint: kotlin.String? = null, val orgOsgiServiceHttpPortSecure: kotlin.String? = null, val orgOsgiServiceHttpPortSecureAtTypeHint: kotlin.String? = null)

    /**
     * 
     * @param proxyHost  (optional)
     * @param proxyHostAtTypeHint  (optional)
     * @param proxyPort  (optional)
     * @param proxyPortAtTypeHint  (optional)
     * @param proxyExceptions  (optional)
     * @param proxyExceptionsAtTypeHint  (optional)
     * @param proxyEnabled  (optional)
     * @param proxyEnabledAtTypeHint  (optional)
     * @param proxyUser  (optional)
     * @param proxyUserAtTypeHint  (optional)
     * @param proxyPassword  (optional)
     * @param proxyPasswordAtTypeHint  (optional)
     */
    @Location("/apps/system/config/org.apache.http.proxyconfigurator.config") class postConfigApacheHttpComponentsProxyConfiguration(val proxyHost: kotlin.String? = null, val proxyHostAtTypeHint: kotlin.String? = null, val proxyPort: kotlin.Int? = null, val proxyPortAtTypeHint: kotlin.String? = null, val proxyExceptions: kotlin.collections.List<kotlin.String>? = null, val proxyExceptionsAtTypeHint: kotlin.String? = null, val proxyEnabled: kotlin.Boolean? = null, val proxyEnabledAtTypeHint: kotlin.String? = null, val proxyUser: kotlin.String? = null, val proxyUserAtTypeHint: kotlin.String? = null, val proxyPassword: kotlin.String? = null, val proxyPasswordAtTypeHint: kotlin.String? = null)

    /**
     * 
     * @param alias  (optional)
     * @param aliasAtTypeHint  (optional)
     * @param davCreateAbsoluteUri  (optional)
     * @param davCreateAbsoluteUriAtTypeHint  (optional)
     */
    @Location("/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet") class postConfigApacheSlingDavExServlet(val alias: kotlin.String? = null, val aliasAtTypeHint: kotlin.String? = null, val davCreateAbsoluteUri: kotlin.Boolean? = null, val davCreateAbsoluteUriAtTypeHint: kotlin.String? = null)

    /**
     * 
     * @param jsonMaximumresults  (optional)
     * @param jsonMaximumresultsAtTypeHint  (optional)
     * @param enableHtml  (optional)
     * @param enableHtmlAtTypeHint  (optional)
     * @param enableTxt  (optional)
     * @param enableTxtAtTypeHint  (optional)
     * @param enableXml  (optional)
     * @param enableXmlAtTypeHint  (optional)
     */
    @Location("/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet") class postConfigApacheSlingGetServlet(val jsonMaximumresults: kotlin.String? = null, val jsonMaximumresultsAtTypeHint: kotlin.String? = null, val enableHtml: kotlin.Boolean? = null, val enableHtmlAtTypeHint: kotlin.String? = null, val enableTxt: kotlin.Boolean? = null, val enableTxtAtTypeHint: kotlin.String? = null, val enableXml: kotlin.Boolean? = null, val enableXmlAtTypeHint: kotlin.String? = null)

    /**
     * 
     * @param allowEmpty  (optional)
     * @param allowEmptyAtTypeHint  (optional)
     * @param allowHosts  (optional)
     * @param allowHostsAtTypeHint  (optional)
     * @param allowHostsRegexp  (optional)
     * @param allowHostsRegexpAtTypeHint  (optional)
     * @param filterMethods  (optional)
     * @param filterMethodsAtTypeHint  (optional)
     */
    @Location("/apps/system/config/org.apache.sling.security.impl.ReferrerFilter") class postConfigApacheSlingReferrerFilter(val allowEmpty: kotlin.Boolean? = null, val allowEmptyAtTypeHint: kotlin.String? = null, val allowHosts: kotlin.String? = null, val allowHostsAtTypeHint: kotlin.String? = null, val allowHostsRegexp: kotlin.String? = null, val allowHostsRegexpAtTypeHint: kotlin.String? = null, val filterMethods: kotlin.String? = null, val filterMethodsAtTypeHint: kotlin.String? = null)

    /**
     * 
     * @param configNodeName  
     */
    @Location("/apps/system/config/{configNodeName}") class postConfigProperty(val configNodeName: kotlin.String)

    /**
     * 
     * @param path  
     * @param name  
     * @param colonOperation  (optional)
     * @param deleteAuthorizable  (optional)
     * @param file  (optional)
     */
    @Location("/{path}/{name}") class postNode(val path: kotlin.String, val name: kotlin.String, val colonOperation: kotlin.String? = null, val deleteAuthorizable: kotlin.String? = null, val file: java.io.File? = null)

    /**
     * 
     * @param path  
     * @param name  
     * @param addMembers  (optional)
     */
    @Location("/{path}/{name}.rw.html") class postNodeRw(val path: kotlin.String, val name: kotlin.String, val addMembers: kotlin.String? = null)

    /**
     * 
     * @param path  
     * @param jcrColonPrimaryType  
     * @param colonName  
     */
    @Location("/{path}/") class postPath(val path: kotlin.String, val jcrColonPrimaryType: kotlin.String, val colonName: kotlin.String)

    /**
     * 
     * @param path  
     * @param pLimit  
     * @param &#x60;1property&#x60;  
     * @param &#x60;1propertyValue&#x60;  
     */
    @Location("/bin/querybuilder.json") class postQuery(val path: kotlin.String, val pLimit: java.math.BigDecimal, val &#x60;1property&#x60;: kotlin.String, val &#x60;1propertyValue&#x60;: kotlin.String)

    /**
     * 
     * @param ignoredeactivated  
     * @param onlymodified  
     * @param path  
     */
    @Location("/etc/replication/treeactivation.html") class postTreeActivation(val ignoredeactivated: kotlin.Boolean, val onlymodified: kotlin.Boolean, val path: kotlin.String)

    /**
     * 
     * @param colonOperation  (optional)
     * @param newPassword  (optional)
     * @param rePassword  (optional)
     * @param keyStoreType  (optional)
     * @param removeAlias  (optional)
     * @param certificate  (optional)
     */
    @Location("/libs/granite/security/post/truststore") class postTruststore(val colonOperation: kotlin.String? = null, val newPassword: kotlin.String? = null, val rePassword: kotlin.String? = null, val keyStoreType: kotlin.String? = null, val removeAlias: kotlin.String? = null, val certificate: java.io.File? = null)

    /**
     * 
     * @param truststoreP12  (optional)
     */
    @Location("/etc/truststore") class postTruststorePKCS12(val truststoreP12: java.io.File? = null)

}
