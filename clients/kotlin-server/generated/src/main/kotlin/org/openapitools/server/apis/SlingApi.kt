/**
* Adobe Experience Manager (AEM) API
* Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
*
* The version of the OpenAPI document: 3.5.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.apis

import com.google.gson.Gson
import io.ktor.application.*
import io.ktor.auth.*
import io.ktor.http.*
import io.ktor.response.*
import org.openapitools.server.Paths
import io.ktor.locations.*
import io.ktor.routing.*
import org.openapitools.server.infrastructure.ApiPrincipal
import org.openapitools.server.models.KeystoreInfo
import org.openapitools.server.models.TruststoreInfo

@KtorExperimentalLocationsAPI
fun Route.SlingApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    authenticate("aemAuth") {
    delete<Paths.deleteAgent> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    delete<Paths.deleteNode> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    get<Paths.getAgent> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    get<Paths.getAgents> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    get<Paths.getAuthorizableKeystore> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        val exampleContentType = ""
            val exampleContentString = """"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
    }
    }

    authenticate("aemAuth") {
    get<Paths.getKeystore> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    get<Paths.getNode> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    get<Paths.getPackage> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    get<Paths.getPackageFilter> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    get<Paths.getQuery> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    get<Paths.getTruststore> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    get<Paths.getTruststoreInfo> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "aliases" : [ {
                "entryType" : "entryType",
                "notAfter" : "notAfter",
                "serialNumber" : 0,
                "subject" : "subject",
                "alias" : "alias",
                "issuer" : "issuer",
                "notBefore" : "notBefore"
              }, {
                "entryType" : "entryType",
                "notAfter" : "notAfter",
                "serialNumber" : 0,
                "subject" : "subject",
                "alias" : "alias",
                "issuer" : "issuer",
                "notBefore" : "notBefore"
              } ],
              "exists" : true
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
    }
    }

    authenticate("aemAuth") {
    post<Paths.postAgent> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    post<Paths.postAuthorizableKeystore> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        val exampleContentType = ""
            val exampleContentString = """"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
    }
    }

    authenticate("aemAuth") {
    post<Paths.postAuthorizables> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    post<Paths.postConfigAdobeGraniteSamlAuthenticationHandler> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    post<Paths.postConfigApacheFelixJettyBasedHttpService> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    post<Paths.postConfigApacheHttpComponentsProxyConfiguration> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    post<Paths.postConfigApacheSlingDavExServlet> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    post<Paths.postConfigApacheSlingGetServlet> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    post<Paths.postConfigApacheSlingReferrerFilter> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    post<Paths.postConfigProperty> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    post<Paths.postNode> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    post<Paths.postNodeRw> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    post<Paths.postPath> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    post<Paths.postQuery> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    post<Paths.postTreeActivation> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    post<Paths.postTruststore> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    post<Paths.postTruststorePKCS12> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

}
