/**
* Adobe Experience Manager (AEM) API
* Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
*
* The version of the OpenAPI document: 3.5.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.apis

import com.google.gson.Gson
import io.ktor.application.*
import io.ktor.auth.*
import io.ktor.http.*
import io.ktor.response.*
import org.openapitools.server.Paths
import io.ktor.locations.*
import io.ktor.routing.*
import org.openapitools.server.infrastructure.ApiPrincipal
import org.openapitools.server.models.InstallStatus

@KtorExperimentalLocationsAPI
fun Route.CrxApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    authenticate("aemAuth") {
    get<Paths.getCrxdeStatus> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    get<Paths.getInstallStatus> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "status" : {
                "finished" : true,
                "itemCount" : 0
              }
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
    }
    }

    authenticate("aemAuth") {
    get<Paths.getPackageManagerServlet> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    post<Paths.postPackageService> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    post<Paths.postPackageServiceJson> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    post<Paths.postPackageUpdate> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    post<Paths.postSetPassword> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

}
