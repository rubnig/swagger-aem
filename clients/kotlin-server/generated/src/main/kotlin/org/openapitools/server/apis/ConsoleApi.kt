/**
* Adobe Experience Manager (AEM) API
* Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
*
* The version of the OpenAPI document: 3.5.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.apis

import com.google.gson.Gson
import io.ktor.application.*
import io.ktor.auth.*
import io.ktor.http.*
import io.ktor.response.*
import org.openapitools.server.Paths
import io.ktor.locations.*
import io.ktor.routing.*
import org.openapitools.server.infrastructure.ApiPrincipal
import org.openapitools.server.models.BundleInfo
import org.openapitools.server.models.SamlConfigurationInfo

@KtorExperimentalLocationsAPI
fun Route.ConsoleApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    authenticate("aemAuth") {
    get<Paths.getAemProductInfo> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        val exampleContentType = "application/json"
            val exampleContentString = """"""""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
    }
    }

    authenticate("aemAuth") {
    get<Paths.getBundleInfo> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "s" : [ 0, 0 ],
              "data" : [ {
                "fragment" : true,
                "stateRaw" : 1,
                "name" : "name",
                "symbolicName" : "symbolicName",
                "id" : 6,
                "state" : "state",
                "category" : "category",
                "version" : "version",
                "props" : [ {
                  "value" : "value",
                  "key" : "key"
                }, {
                  "value" : "value",
                  "key" : "key"
                } ]
              }, {
                "fragment" : true,
                "stateRaw" : 1,
                "name" : "name",
                "symbolicName" : "symbolicName",
                "id" : 6,
                "state" : "state",
                "category" : "category",
                "version" : "version",
                "props" : [ {
                  "value" : "value",
                  "key" : "key"
                }, {
                  "value" : "value",
                  "key" : "key"
                } ]
              } ],
              "status" : "status"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
    }
    }

    authenticate("aemAuth") {
    get<Paths.getConfigMgr> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    post<Paths.postBundle> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    post<Paths.postJmxRepository> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        call.respond(HttpStatusCode.NotImplemented)
    }
    }

    authenticate("aemAuth") {
    post<Paths.postSamlConfiguration> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        val exampleContentType = ""
            val exampleContentString = """"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
    }
    }

}
