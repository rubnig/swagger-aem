/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NodeSwaggerAem);
  }
}(this, function(expect, NodeSwaggerAem) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NodeSwaggerAem.BundleData();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BundleData', function() {
    it('should create an instance of BundleData', function() {
      // uncomment below and update the code to test BundleData
      //var instane = new NodeSwaggerAem.BundleData();
      //expect(instance).to.be.a(NodeSwaggerAem.BundleData);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new NodeSwaggerAem.BundleData();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new NodeSwaggerAem.BundleData();
      //expect(instance).to.be();
    });

    it('should have the property fragment (base name: "fragment")', function() {
      // uncomment below and update the code to test the property fragment
      //var instance = new NodeSwaggerAem.BundleData();
      //expect(instance).to.be();
    });

    it('should have the property stateRaw (base name: "stateRaw")', function() {
      // uncomment below and update the code to test the property stateRaw
      //var instance = new NodeSwaggerAem.BundleData();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new NodeSwaggerAem.BundleData();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new NodeSwaggerAem.BundleData();
      //expect(instance).to.be();
    });

    it('should have the property symbolicName (base name: "symbolicName")', function() {
      // uncomment below and update the code to test the property symbolicName
      //var instance = new NodeSwaggerAem.BundleData();
      //expect(instance).to.be();
    });

    it('should have the property category (base name: "category")', function() {
      // uncomment below and update the code to test the property category
      //var instance = new NodeSwaggerAem.BundleData();
      //expect(instance).to.be();
    });

    it('should have the property props (base name: "props")', function() {
      // uncomment below and update the code to test the property props
      //var instance = new NodeSwaggerAem.BundleData();
      //expect(instance).to.be();
    });

  });

}));
