{-
   Adobe Experience Manager (AEM) API

   Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API

   OpenAPI Version: 3.0.0
   Adobe Experience Manager (AEM) API API version: 3.5.0-pre.0
   Contact: opensource@shinesolutions.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : AdobeExperienceManager(AEM).API.Custom
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module AdobeExperienceManager(AEM).API.Custom where

import AdobeExperienceManager(AEM).Core
import AdobeExperienceManager(AEM).MimeTypes
import AdobeExperienceManager(AEM).Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Custom

-- *** getAemHealthCheck

-- | @GET \/system\/health@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
getAemHealthCheck 
  :: AdobeExperienceManager(AEM)Request GetAemHealthCheck MimeNoContent Text MimeJSON
getAemHealthCheck =
  _mkRequest "GET" ["/system/health"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data GetAemHealthCheck  
instance HasOptionalParam GetAemHealthCheck Tags where
  applyOptionalParam req (Tags xs) =
    req `addQuery` toQuery ("tags", Just xs)
instance HasOptionalParam GetAemHealthCheck CombineTagsOr where
  applyOptionalParam req (CombineTagsOr xs) =
    req `addQuery` toQuery ("combineTagsOr", Just xs)
-- | @application/json@
instance Produces GetAemHealthCheck MimeJSON


-- *** postConfigAemHealthCheckServlet

-- | @POST \/apps\/system\/config\/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
postConfigAemHealthCheckServlet 
  :: AdobeExperienceManager(AEM)Request PostConfigAemHealthCheckServlet MimeNoContent NoContent MimeNoContent
postConfigAemHealthCheckServlet =
  _mkRequest "POST" ["/apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data PostConfigAemHealthCheckServlet  
instance HasOptionalParam PostConfigAemHealthCheckServlet BundlesIgnored where
  applyOptionalParam req (BundlesIgnored xs) =
    req `addQuery` toQueryColl MultiParamArray ("bundles.ignored", Just xs)
instance HasOptionalParam PostConfigAemHealthCheckServlet BundlesIgnoredTypeHint where
  applyOptionalParam req (BundlesIgnoredTypeHint xs) =
    req `addQuery` toQuery ("bundles.ignored@TypeHint", Just xs)
instance Produces PostConfigAemHealthCheckServlet MimeNoContent


-- *** postConfigAemPasswordReset

-- | @POST \/apps\/system\/config\/com.shinesolutions.aem.passwordreset.Activator@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
postConfigAemPasswordReset 
  :: AdobeExperienceManager(AEM)Request PostConfigAemPasswordReset MimeNoContent NoContent MimeNoContent
postConfigAemPasswordReset =
  _mkRequest "POST" ["/apps/system/config/com.shinesolutions.aem.passwordreset.Activator"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data PostConfigAemPasswordReset  
instance HasOptionalParam PostConfigAemPasswordReset PwdresetAuthorizables where
  applyOptionalParam req (PwdresetAuthorizables xs) =
    req `addQuery` toQueryColl MultiParamArray ("pwdreset.authorizables", Just xs)
instance HasOptionalParam PostConfigAemPasswordReset PwdresetAuthorizablesTypeHint where
  applyOptionalParam req (PwdresetAuthorizablesTypeHint xs) =
    req `addQuery` toQuery ("pwdreset.authorizables@TypeHint", Just xs)
instance Produces PostConfigAemPasswordReset MimeNoContent

