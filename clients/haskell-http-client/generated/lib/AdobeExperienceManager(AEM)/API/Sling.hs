{-
   Adobe Experience Manager (AEM) API

   Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API

   OpenAPI Version: 3.0.0
   Adobe Experience Manager (AEM) API API version: 3.5.0-pre.0
   Contact: opensource@shinesolutions.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : AdobeExperienceManager(AEM).API.Sling
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module AdobeExperienceManager(AEM).API.Sling where

import AdobeExperienceManager(AEM).Core
import AdobeExperienceManager(AEM).MimeTypes
import AdobeExperienceManager(AEM).Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Sling

-- *** deleteAgent

-- | @DELETE \/etc\/replication\/agents.{runmode}\/{name}@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
deleteAgent 
  :: Runmode -- ^ "runmode"
  -> Name -- ^ "name"
  -> AdobeExperienceManager(AEM)Request DeleteAgent MimeNoContent NoContent MimeNoContent
deleteAgent (Runmode runmode) (Name name) =
  _mkRequest "DELETE" ["/etc/replication/agents.",toPath runmode,"/",toPath name]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data DeleteAgent  
instance Produces DeleteAgent MimeNoContent


-- *** deleteNode

-- | @DELETE \/{path}\/{name}@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
deleteNode 
  :: Path -- ^ "path"
  -> Name -- ^ "name"
  -> AdobeExperienceManager(AEM)Request DeleteNode MimeNoContent NoContent MimeNoContent
deleteNode (Path path) (Name name) =
  _mkRequest "DELETE" ["/",toPath path,"/",toPath name]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data DeleteNode  
instance Produces DeleteNode MimeNoContent


-- *** getAgent

-- | @GET \/etc\/replication\/agents.{runmode}\/{name}@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
getAgent 
  :: Runmode -- ^ "runmode"
  -> Name -- ^ "name"
  -> AdobeExperienceManager(AEM)Request GetAgent MimeNoContent NoContent MimeNoContent
getAgent (Runmode runmode) (Name name) =
  _mkRequest "GET" ["/etc/replication/agents.",toPath runmode,"/",toPath name]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data GetAgent  
instance Produces GetAgent MimeNoContent


-- *** getAgents

-- | @GET \/etc\/replication\/agents.{runmode}.-1.json@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
getAgents 
  :: Runmode -- ^ "runmode"
  -> AdobeExperienceManager(AEM)Request GetAgents MimeNoContent Text MimeJSON
getAgents (Runmode runmode) =
  _mkRequest "GET" ["/etc/replication/agents.",toPath runmode,".-1.json"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data GetAgents  
-- | @application/json@
instance Produces GetAgents MimeJSON


-- *** getAuthorizableKeystore

-- | @GET \/{intermediatePath}\/{authorizableId}.ks.json@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
getAuthorizableKeystore 
  :: IntermediatePath -- ^ "intermediatePath"
  -> AuthorizableId -- ^ "authorizableId"
  -> AdobeExperienceManager(AEM)Request GetAuthorizableKeystore MimeNoContent KeystoreInfo MimePlainText
getAuthorizableKeystore (IntermediatePath intermediatePath) (AuthorizableId authorizableId) =
  _mkRequest "GET" ["/",toPath intermediatePath,"/",toPath authorizableId,".ks.json"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data GetAuthorizableKeystore  
-- | @text/plain@
instance Produces GetAuthorizableKeystore MimePlainText


-- *** getKeystore

-- | @GET \/{intermediatePath}\/{authorizableId}\/keystore\/store.p12@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
getKeystore 
  :: IntermediatePath -- ^ "intermediatePath"
  -> AuthorizableId -- ^ "authorizableId"
  -> AdobeExperienceManager(AEM)Request GetKeystore MimeNoContent FilePath MimeOctetStream
getKeystore (IntermediatePath intermediatePath) (AuthorizableId authorizableId) =
  _mkRequest "GET" ["/",toPath intermediatePath,"/",toPath authorizableId,"/keystore/store.p12"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data GetKeystore  
-- | @application/octet-stream@
instance Produces GetKeystore MimeOctetStream


-- *** getNode

-- | @GET \/{path}\/{name}@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
getNode 
  :: Path -- ^ "path"
  -> Name -- ^ "name"
  -> AdobeExperienceManager(AEM)Request GetNode MimeNoContent NoContent MimeNoContent
getNode (Path path) (Name name) =
  _mkRequest "GET" ["/",toPath path,"/",toPath name]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data GetNode  
instance Produces GetNode MimeNoContent


-- *** getPackage

-- | @GET \/etc\/packages\/{group}\/{name}-{version}.zip@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
getPackage 
  :: Group -- ^ "group"
  -> Name -- ^ "name"
  -> Version -- ^ "version"
  -> AdobeExperienceManager(AEM)Request GetPackage MimeNoContent FilePath MimeOctetStream
getPackage (Group group) (Name name) (Version version) =
  _mkRequest "GET" ["/etc/packages/",toPath group,"/",toPath name,"-",toPath version,".zip"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data GetPackage  
-- | @application/octet-stream@
instance Produces GetPackage MimeOctetStream


-- *** getPackageFilter

-- | @GET \/etc\/packages\/{group}\/{name}-{version}.zip\/jcr:content\/vlt:definition\/filter.tidy.2.json@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
getPackageFilter 
  :: Group -- ^ "group"
  -> Name -- ^ "name"
  -> Version -- ^ "version"
  -> AdobeExperienceManager(AEM)Request GetPackageFilter MimeNoContent Text MimeJSON
getPackageFilter (Group group) (Name name) (Version version) =
  _mkRequest "GET" ["/etc/packages/",toPath group,"/",toPath name,"-",toPath version,".zip/jcr:content/vlt:definition/filter.tidy.2.json"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data GetPackageFilter  
-- | @application/json@
instance Produces GetPackageFilter MimeJSON


-- *** getQuery

-- | @GET \/bin\/querybuilder.json@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
getQuery 
  :: Path -- ^ "path"
  -> PLimit -- ^ "pLimit"
  -> Param1property -- ^ "_1property"
  -> Param1propertyValue -- ^ "_1propertyValue"
  -> AdobeExperienceManager(AEM)Request GetQuery MimeNoContent Text MimeJSON
getQuery (Path path) (PLimit pLimit) (Param1property _1property) (Param1propertyValue _1propertyValue) =
  _mkRequest "GET" ["/bin/querybuilder.json"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)
    `addQuery` toQuery ("path", Just path)
    `addQuery` toQuery ("p.limit", Just pLimit)
    `addQuery` toQuery ("1_property", Just _1property)
    `addQuery` toQuery ("1_property.value", Just _1propertyValue)

data GetQuery  
-- | @application/json@
instance Produces GetQuery MimeJSON


-- *** getTruststore

-- | @GET \/etc\/truststore\/truststore.p12@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
getTruststore 
  :: AdobeExperienceManager(AEM)Request GetTruststore MimeNoContent FilePath MimeOctetStream
getTruststore =
  _mkRequest "GET" ["/etc/truststore/truststore.p12"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data GetTruststore  
-- | @application/octet-stream@
instance Produces GetTruststore MimeOctetStream


-- *** getTruststoreInfo

-- | @GET \/libs\/granite\/security\/truststore.json@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
getTruststoreInfo 
  :: AdobeExperienceManager(AEM)Request GetTruststoreInfo MimeNoContent TruststoreInfo MimeJSON
getTruststoreInfo =
  _mkRequest "GET" ["/libs/granite/security/truststore.json"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data GetTruststoreInfo  
-- | @application/json@
instance Produces GetTruststoreInfo MimeJSON


-- *** postAgent

-- | @POST \/etc\/replication\/agents.{runmode}\/{name}@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
postAgent 
  :: Runmode -- ^ "runmode"
  -> Name -- ^ "name"
  -> AdobeExperienceManager(AEM)Request PostAgent MimeNoContent NoContent MimeNoContent
postAgent (Runmode runmode) (Name name) =
  _mkRequest "POST" ["/etc/replication/agents.",toPath runmode,"/",toPath name]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data PostAgent  
instance HasOptionalParam PostAgent JcrcontentCqdistribute where
  applyOptionalParam req (JcrcontentCqdistribute xs) =
    req `addQuery` toQuery ("jcr:content/cq:distribute", Just xs)
instance HasOptionalParam PostAgent JcrcontentCqdistributeTypeHint where
  applyOptionalParam req (JcrcontentCqdistributeTypeHint xs) =
    req `addQuery` toQuery ("jcr:content/cq:distribute@TypeHint", Just xs)
instance HasOptionalParam PostAgent JcrcontentCqname where
  applyOptionalParam req (JcrcontentCqname xs) =
    req `addQuery` toQuery ("jcr:content/cq:name", Just xs)
instance HasOptionalParam PostAgent JcrcontentCqtemplate where
  applyOptionalParam req (JcrcontentCqtemplate xs) =
    req `addQuery` toQuery ("jcr:content/cq:template", Just xs)
instance HasOptionalParam PostAgent JcrcontentEnabled where
  applyOptionalParam req (JcrcontentEnabled xs) =
    req `addQuery` toQuery ("jcr:content/enabled", Just xs)
instance HasOptionalParam PostAgent JcrcontentJcrdescription where
  applyOptionalParam req (JcrcontentJcrdescription xs) =
    req `addQuery` toQuery ("jcr:content/jcr:description", Just xs)
instance HasOptionalParam PostAgent JcrcontentJcrlastModified where
  applyOptionalParam req (JcrcontentJcrlastModified xs) =
    req `addQuery` toQuery ("jcr:content/jcr:lastModified", Just xs)
instance HasOptionalParam PostAgent JcrcontentJcrlastModifiedBy where
  applyOptionalParam req (JcrcontentJcrlastModifiedBy xs) =
    req `addQuery` toQuery ("jcr:content/jcr:lastModifiedBy", Just xs)
instance HasOptionalParam PostAgent JcrcontentJcrmixinTypes where
  applyOptionalParam req (JcrcontentJcrmixinTypes xs) =
    req `addQuery` toQuery ("jcr:content/jcr:mixinTypes", Just xs)
instance HasOptionalParam PostAgent JcrcontentJcrtitle where
  applyOptionalParam req (JcrcontentJcrtitle xs) =
    req `addQuery` toQuery ("jcr:content/jcr:title", Just xs)
instance HasOptionalParam PostAgent JcrcontentLogLevel where
  applyOptionalParam req (JcrcontentLogLevel xs) =
    req `addQuery` toQuery ("jcr:content/logLevel", Just xs)
instance HasOptionalParam PostAgent JcrcontentNoStatusUpdate where
  applyOptionalParam req (JcrcontentNoStatusUpdate xs) =
    req `addQuery` toQuery ("jcr:content/noStatusUpdate", Just xs)
instance HasOptionalParam PostAgent JcrcontentNoVersioning where
  applyOptionalParam req (JcrcontentNoVersioning xs) =
    req `addQuery` toQuery ("jcr:content/noVersioning", Just xs)
instance HasOptionalParam PostAgent JcrcontentProtocolConnectTimeout where
  applyOptionalParam req (JcrcontentProtocolConnectTimeout xs) =
    req `addQuery` toQuery ("jcr:content/protocolConnectTimeout", Just xs)
instance HasOptionalParam PostAgent JcrcontentProtocolHttpConnectionClosed where
  applyOptionalParam req (JcrcontentProtocolHttpConnectionClosed xs) =
    req `addQuery` toQuery ("jcr:content/protocolHTTPConnectionClosed", Just xs)
instance HasOptionalParam PostAgent JcrcontentProtocolHttpExpired where
  applyOptionalParam req (JcrcontentProtocolHttpExpired xs) =
    req `addQuery` toQuery ("jcr:content/protocolHTTPExpired", Just xs)
instance HasOptionalParam PostAgent JcrcontentProtocolHttpHeaders where
  applyOptionalParam req (JcrcontentProtocolHttpHeaders xs) =
    req `addQuery` toQueryColl MultiParamArray ("jcr:content/protocolHTTPHeaders", Just xs)
instance HasOptionalParam PostAgent JcrcontentProtocolHttpHeadersTypeHint where
  applyOptionalParam req (JcrcontentProtocolHttpHeadersTypeHint xs) =
    req `addQuery` toQuery ("jcr:content/protocolHTTPHeaders@TypeHint", Just xs)
instance HasOptionalParam PostAgent JcrcontentProtocolHttpMethod where
  applyOptionalParam req (JcrcontentProtocolHttpMethod xs) =
    req `addQuery` toQuery ("jcr:content/protocolHTTPMethod", Just xs)
instance HasOptionalParam PostAgent JcrcontentProtocolHttpsRelaxed where
  applyOptionalParam req (JcrcontentProtocolHttpsRelaxed xs) =
    req `addQuery` toQuery ("jcr:content/protocolHTTPSRelaxed", Just xs)
instance HasOptionalParam PostAgent JcrcontentProtocolInterface where
  applyOptionalParam req (JcrcontentProtocolInterface xs) =
    req `addQuery` toQuery ("jcr:content/protocolInterface", Just xs)
instance HasOptionalParam PostAgent JcrcontentProtocolSocketTimeout where
  applyOptionalParam req (JcrcontentProtocolSocketTimeout xs) =
    req `addQuery` toQuery ("jcr:content/protocolSocketTimeout", Just xs)
instance HasOptionalParam PostAgent JcrcontentProtocolVersion where
  applyOptionalParam req (JcrcontentProtocolVersion xs) =
    req `addQuery` toQuery ("jcr:content/protocolVersion", Just xs)
instance HasOptionalParam PostAgent JcrcontentProxyNtlmDomain where
  applyOptionalParam req (JcrcontentProxyNtlmDomain xs) =
    req `addQuery` toQuery ("jcr:content/proxyNTLMDomain", Just xs)
instance HasOptionalParam PostAgent JcrcontentProxyNtlmHost where
  applyOptionalParam req (JcrcontentProxyNtlmHost xs) =
    req `addQuery` toQuery ("jcr:content/proxyNTLMHost", Just xs)
instance HasOptionalParam PostAgent JcrcontentProxyHost where
  applyOptionalParam req (JcrcontentProxyHost xs) =
    req `addQuery` toQuery ("jcr:content/proxyHost", Just xs)
instance HasOptionalParam PostAgent JcrcontentProxyPassword where
  applyOptionalParam req (JcrcontentProxyPassword xs) =
    req `addQuery` toQuery ("jcr:content/proxyPassword", Just xs)
instance HasOptionalParam PostAgent JcrcontentProxyPort where
  applyOptionalParam req (JcrcontentProxyPort xs) =
    req `addQuery` toQuery ("jcr:content/proxyPort", Just xs)
instance HasOptionalParam PostAgent JcrcontentProxyUser where
  applyOptionalParam req (JcrcontentProxyUser xs) =
    req `addQuery` toQuery ("jcr:content/proxyUser", Just xs)
instance HasOptionalParam PostAgent JcrcontentQueueBatchMaxSize where
  applyOptionalParam req (JcrcontentQueueBatchMaxSize xs) =
    req `addQuery` toQuery ("jcr:content/queueBatchMaxSize", Just xs)
instance HasOptionalParam PostAgent JcrcontentQueueBatchMode where
  applyOptionalParam req (JcrcontentQueueBatchMode xs) =
    req `addQuery` toQuery ("jcr:content/queueBatchMode", Just xs)
instance HasOptionalParam PostAgent JcrcontentQueueBatchWaitTime where
  applyOptionalParam req (JcrcontentQueueBatchWaitTime xs) =
    req `addQuery` toQuery ("jcr:content/queueBatchWaitTime", Just xs)
instance HasOptionalParam PostAgent JcrcontentRetryDelay where
  applyOptionalParam req (JcrcontentRetryDelay xs) =
    req `addQuery` toQuery ("jcr:content/retryDelay", Just xs)
instance HasOptionalParam PostAgent JcrcontentReverseReplication where
  applyOptionalParam req (JcrcontentReverseReplication xs) =
    req `addQuery` toQuery ("jcr:content/reverseReplication", Just xs)
instance HasOptionalParam PostAgent JcrcontentSerializationType where
  applyOptionalParam req (JcrcontentSerializationType xs) =
    req `addQuery` toQuery ("jcr:content/serializationType", Just xs)
instance HasOptionalParam PostAgent JcrcontentSlingresourceType where
  applyOptionalParam req (JcrcontentSlingresourceType xs) =
    req `addQuery` toQuery ("jcr:content/sling:resourceType", Just xs)
instance HasOptionalParam PostAgent JcrcontentSsl where
  applyOptionalParam req (JcrcontentSsl xs) =
    req `addQuery` toQuery ("jcr:content/ssl", Just xs)
instance HasOptionalParam PostAgent JcrcontentTransportNtlmDomain where
  applyOptionalParam req (JcrcontentTransportNtlmDomain xs) =
    req `addQuery` toQuery ("jcr:content/transportNTLMDomain", Just xs)
instance HasOptionalParam PostAgent JcrcontentTransportNtlmHost where
  applyOptionalParam req (JcrcontentTransportNtlmHost xs) =
    req `addQuery` toQuery ("jcr:content/transportNTLMHost", Just xs)
instance HasOptionalParam PostAgent JcrcontentTransportPassword where
  applyOptionalParam req (JcrcontentTransportPassword xs) =
    req `addQuery` toQuery ("jcr:content/transportPassword", Just xs)
instance HasOptionalParam PostAgent JcrcontentTransportUri where
  applyOptionalParam req (JcrcontentTransportUri xs) =
    req `addQuery` toQuery ("jcr:content/transportUri", Just xs)
instance HasOptionalParam PostAgent JcrcontentTransportUser where
  applyOptionalParam req (JcrcontentTransportUser xs) =
    req `addQuery` toQuery ("jcr:content/transportUser", Just xs)
instance HasOptionalParam PostAgent JcrcontentTriggerDistribute where
  applyOptionalParam req (JcrcontentTriggerDistribute xs) =
    req `addQuery` toQuery ("jcr:content/triggerDistribute", Just xs)
instance HasOptionalParam PostAgent JcrcontentTriggerModified where
  applyOptionalParam req (JcrcontentTriggerModified xs) =
    req `addQuery` toQuery ("jcr:content/triggerModified", Just xs)
instance HasOptionalParam PostAgent JcrcontentTriggerOnOffTime where
  applyOptionalParam req (JcrcontentTriggerOnOffTime xs) =
    req `addQuery` toQuery ("jcr:content/triggerOnOffTime", Just xs)
instance HasOptionalParam PostAgent JcrcontentTriggerReceive where
  applyOptionalParam req (JcrcontentTriggerReceive xs) =
    req `addQuery` toQuery ("jcr:content/triggerReceive", Just xs)
instance HasOptionalParam PostAgent JcrcontentTriggerSpecific where
  applyOptionalParam req (JcrcontentTriggerSpecific xs) =
    req `addQuery` toQuery ("jcr:content/triggerSpecific", Just xs)
instance HasOptionalParam PostAgent JcrcontentUserId where
  applyOptionalParam req (JcrcontentUserId xs) =
    req `addQuery` toQuery ("jcr:content/userId", Just xs)
instance HasOptionalParam PostAgent JcrprimaryType where
  applyOptionalParam req (JcrprimaryType xs) =
    req `addQuery` toQuery ("jcr:primaryType", Just xs)
instance HasOptionalParam PostAgent Operation where
  applyOptionalParam req (Operation xs) =
    req `addQuery` toQuery (":operation", Just xs)
instance Produces PostAgent MimeNoContent


-- *** postAuthorizableKeystore

-- | @POST \/{intermediatePath}\/{authorizableId}.ks.html@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
postAuthorizableKeystore 
  :: (Consumes PostAuthorizableKeystore MimeMultipartFormData)
  => IntermediatePath -- ^ "intermediatePath"
  -> AuthorizableId -- ^ "authorizableId"
  -> AdobeExperienceManager(AEM)Request PostAuthorizableKeystore MimeMultipartFormData KeystoreInfo MimePlainText
postAuthorizableKeystore (IntermediatePath intermediatePath) (AuthorizableId authorizableId) =
  _mkRequest "POST" ["/",toPath intermediatePath,"/",toPath authorizableId,".ks.html"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data PostAuthorizableKeystore  
instance HasOptionalParam PostAuthorizableKeystore CertChain where
  applyOptionalParam req (CertChain xs) =
    req `_addMultiFormPart` NH.partFileSource "cert-chain" xs
instance HasOptionalParam PostAuthorizableKeystore Pk where
  applyOptionalParam req (Pk xs) =
    req `_addMultiFormPart` NH.partFileSource "pk" xs
instance HasOptionalParam PostAuthorizableKeystore KeyStore where
  applyOptionalParam req (KeyStore xs) =
    req `_addMultiFormPart` NH.partFileSource "keyStore" xs
instance HasOptionalParam PostAuthorizableKeystore Operation where
  applyOptionalParam req (Operation xs) =
    req `addQuery` toQuery (":operation", Just xs)
instance HasOptionalParam PostAuthorizableKeystore CurrentPassword where
  applyOptionalParam req (CurrentPassword xs) =
    req `addQuery` toQuery ("currentPassword", Just xs)
instance HasOptionalParam PostAuthorizableKeystore NewPassword where
  applyOptionalParam req (NewPassword xs) =
    req `addQuery` toQuery ("newPassword", Just xs)
instance HasOptionalParam PostAuthorizableKeystore RePassword where
  applyOptionalParam req (RePassword xs) =
    req `addQuery` toQuery ("rePassword", Just xs)
instance HasOptionalParam PostAuthorizableKeystore KeyPassword where
  applyOptionalParam req (KeyPassword xs) =
    req `addQuery` toQuery ("keyPassword", Just xs)
instance HasOptionalParam PostAuthorizableKeystore KeyStorePass where
  applyOptionalParam req (KeyStorePass xs) =
    req `addQuery` toQuery ("keyStorePass", Just xs)
instance HasOptionalParam PostAuthorizableKeystore Alias where
  applyOptionalParam req (Alias xs) =
    req `addQuery` toQuery ("alias", Just xs)
instance HasOptionalParam PostAuthorizableKeystore NewAlias where
  applyOptionalParam req (NewAlias xs) =
    req `addQuery` toQuery ("newAlias", Just xs)
instance HasOptionalParam PostAuthorizableKeystore RemoveAlias where
  applyOptionalParam req (RemoveAlias xs) =
    req `addQuery` toQuery ("removeAlias", Just xs)

-- | @multipart/form-data@
instance Consumes PostAuthorizableKeystore MimeMultipartFormData

-- | @text/plain@
instance Produces PostAuthorizableKeystore MimePlainText


-- *** postAuthorizables

-- | @POST \/libs\/granite\/security\/post\/authorizables@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
postAuthorizables 
  :: AuthorizableId -- ^ "authorizableId"
  -> IntermediatePath -- ^ "intermediatePath"
  -> AdobeExperienceManager(AEM)Request PostAuthorizables MimeNoContent Text MimeTextHtml
postAuthorizables (AuthorizableId authorizableId) (IntermediatePath intermediatePath) =
  _mkRequest "POST" ["/libs/granite/security/post/authorizables"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)
    `addQuery` toQuery ("authorizableId", Just authorizableId)
    `addQuery` toQuery ("intermediatePath", Just intermediatePath)

data PostAuthorizables  
instance HasOptionalParam PostAuthorizables CreateUser where
  applyOptionalParam req (CreateUser xs) =
    req `addQuery` toQuery ("createUser", Just xs)
instance HasOptionalParam PostAuthorizables CreateGroup where
  applyOptionalParam req (CreateGroup xs) =
    req `addQuery` toQuery ("createGroup", Just xs)
instance HasOptionalParam PostAuthorizables Reppassword where
  applyOptionalParam req (Reppassword xs) =
    req `addQuery` toQuery ("rep:password", Just xs)
instance HasOptionalParam PostAuthorizables ProfileGivenName where
  applyOptionalParam req (ProfileGivenName xs) =
    req `addQuery` toQuery ("profile/givenName", Just xs)
-- | @text/html@
instance Produces PostAuthorizables MimeTextHtml


-- *** postConfigAdobeGraniteSamlAuthenticationHandler

-- | @POST \/apps\/system\/config\/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
postConfigAdobeGraniteSamlAuthenticationHandler 
  :: AdobeExperienceManager(AEM)Request PostConfigAdobeGraniteSamlAuthenticationHandler MimeNoContent NoContent MimeNoContent
postConfigAdobeGraniteSamlAuthenticationHandler =
  _mkRequest "POST" ["/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data PostConfigAdobeGraniteSamlAuthenticationHandler  
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler KeyStorePassword where
  applyOptionalParam req (KeyStorePassword xs) =
    req `addQuery` toQuery ("keyStorePassword", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler KeyStorePasswordTypeHint where
  applyOptionalParam req (KeyStorePasswordTypeHint xs) =
    req `addQuery` toQuery ("keyStorePassword@TypeHint", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `addQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler ServiceRankingTypeHint where
  applyOptionalParam req (ServiceRankingTypeHint xs) =
    req `addQuery` toQuery ("service.ranking@TypeHint", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler IdpHttpRedirect where
  applyOptionalParam req (IdpHttpRedirect xs) =
    req `addQuery` toQuery ("idpHttpRedirect", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler IdpHttpRedirectTypeHint where
  applyOptionalParam req (IdpHttpRedirectTypeHint xs) =
    req `addQuery` toQuery ("idpHttpRedirect@TypeHint", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler CreateUserBool where
  applyOptionalParam req (CreateUserBool xs) =
    req `addQuery` toQuery ("createUser", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler CreateUserTypeHint where
  applyOptionalParam req (CreateUserTypeHint xs) =
    req `addQuery` toQuery ("createUser@TypeHint", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler DefaultRedirectUrl where
  applyOptionalParam req (DefaultRedirectUrl xs) =
    req `addQuery` toQuery ("defaultRedirectUrl", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler DefaultRedirectUrlTypeHint where
  applyOptionalParam req (DefaultRedirectUrlTypeHint xs) =
    req `addQuery` toQuery ("defaultRedirectUrl@TypeHint", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler UserIdAttribute where
  applyOptionalParam req (UserIdAttribute xs) =
    req `addQuery` toQuery ("userIDAttribute", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler UserIdAttributeTypeHint where
  applyOptionalParam req (UserIdAttributeTypeHint xs) =
    req `addQuery` toQuery ("userIDAttribute@TypeHint", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler DefaultGroups where
  applyOptionalParam req (DefaultGroups xs) =
    req `addQuery` toQueryColl MultiParamArray ("defaultGroups", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler DefaultGroupsTypeHint where
  applyOptionalParam req (DefaultGroupsTypeHint xs) =
    req `addQuery` toQuery ("defaultGroups@TypeHint", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler IdpCertAlias where
  applyOptionalParam req (IdpCertAlias xs) =
    req `addQuery` toQuery ("idpCertAlias", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler IdpCertAliasTypeHint where
  applyOptionalParam req (IdpCertAliasTypeHint xs) =
    req `addQuery` toQuery ("idpCertAlias@TypeHint", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler AddGroupMemberships where
  applyOptionalParam req (AddGroupMemberships xs) =
    req `addQuery` toQuery ("addGroupMemberships", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler AddGroupMembershipsTypeHint where
  applyOptionalParam req (AddGroupMembershipsTypeHint xs) =
    req `addQuery` toQuery ("addGroupMemberships@TypeHint", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler PathText where
  applyOptionalParam req (PathText xs) =
    req `addQuery` toQueryColl MultiParamArray ("path", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler PathTypeHint where
  applyOptionalParam req (PathTypeHint xs) =
    req `addQuery` toQuery ("path@TypeHint", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler SynchronizeAttributes where
  applyOptionalParam req (SynchronizeAttributes xs) =
    req `addQuery` toQueryColl MultiParamArray ("synchronizeAttributes", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler SynchronizeAttributesTypeHint where
  applyOptionalParam req (SynchronizeAttributesTypeHint xs) =
    req `addQuery` toQuery ("synchronizeAttributes@TypeHint", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler ClockTolerance where
  applyOptionalParam req (ClockTolerance xs) =
    req `addQuery` toQuery ("clockTolerance", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler ClockToleranceTypeHint where
  applyOptionalParam req (ClockToleranceTypeHint xs) =
    req `addQuery` toQuery ("clockTolerance@TypeHint", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler GroupMembershipAttribute where
  applyOptionalParam req (GroupMembershipAttribute xs) =
    req `addQuery` toQuery ("groupMembershipAttribute", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler GroupMembershipAttributeTypeHint where
  applyOptionalParam req (GroupMembershipAttributeTypeHint xs) =
    req `addQuery` toQuery ("groupMembershipAttribute@TypeHint", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler IdpUrl where
  applyOptionalParam req (IdpUrl xs) =
    req `addQuery` toQuery ("idpUrl", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler IdpUrlTypeHint where
  applyOptionalParam req (IdpUrlTypeHint xs) =
    req `addQuery` toQuery ("idpUrl@TypeHint", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler LogoutUrl where
  applyOptionalParam req (LogoutUrl xs) =
    req `addQuery` toQuery ("logoutUrl", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler LogoutUrlTypeHint where
  applyOptionalParam req (LogoutUrlTypeHint xs) =
    req `addQuery` toQuery ("logoutUrl@TypeHint", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler ServiceProviderEntityId where
  applyOptionalParam req (ServiceProviderEntityId xs) =
    req `addQuery` toQuery ("serviceProviderEntityId", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler ServiceProviderEntityIdTypeHint where
  applyOptionalParam req (ServiceProviderEntityIdTypeHint xs) =
    req `addQuery` toQuery ("serviceProviderEntityId@TypeHint", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler AssertionConsumerServiceUrl where
  applyOptionalParam req (AssertionConsumerServiceUrl xs) =
    req `addQuery` toQuery ("assertionConsumerServiceURL", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler AssertionConsumerServiceUrlTypeHint where
  applyOptionalParam req (AssertionConsumerServiceUrlTypeHint xs) =
    req `addQuery` toQuery ("assertionConsumerServiceURL@TypeHint", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler HandleLogout where
  applyOptionalParam req (HandleLogout xs) =
    req `addQuery` toQuery ("handleLogout", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler HandleLogoutTypeHint where
  applyOptionalParam req (HandleLogoutTypeHint xs) =
    req `addQuery` toQuery ("handleLogout@TypeHint", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler SpPrivateKeyAlias where
  applyOptionalParam req (SpPrivateKeyAlias xs) =
    req `addQuery` toQuery ("spPrivateKeyAlias", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler SpPrivateKeyAliasTypeHint where
  applyOptionalParam req (SpPrivateKeyAliasTypeHint xs) =
    req `addQuery` toQuery ("spPrivateKeyAlias@TypeHint", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler UseEncryption where
  applyOptionalParam req (UseEncryption xs) =
    req `addQuery` toQuery ("useEncryption", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler UseEncryptionTypeHint where
  applyOptionalParam req (UseEncryptionTypeHint xs) =
    req `addQuery` toQuery ("useEncryption@TypeHint", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler NameIdFormat where
  applyOptionalParam req (NameIdFormat xs) =
    req `addQuery` toQuery ("nameIdFormat", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler NameIdFormatTypeHint where
  applyOptionalParam req (NameIdFormatTypeHint xs) =
    req `addQuery` toQuery ("nameIdFormat@TypeHint", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler DigestMethod where
  applyOptionalParam req (DigestMethod xs) =
    req `addQuery` toQuery ("digestMethod", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler DigestMethodTypeHint where
  applyOptionalParam req (DigestMethodTypeHint xs) =
    req `addQuery` toQuery ("digestMethod@TypeHint", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler SignatureMethod where
  applyOptionalParam req (SignatureMethod xs) =
    req `addQuery` toQuery ("signatureMethod", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler SignatureMethodTypeHint where
  applyOptionalParam req (SignatureMethodTypeHint xs) =
    req `addQuery` toQuery ("signatureMethod@TypeHint", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler UserIntermediatePath where
  applyOptionalParam req (UserIntermediatePath xs) =
    req `addQuery` toQuery ("userIntermediatePath", Just xs)
instance HasOptionalParam PostConfigAdobeGraniteSamlAuthenticationHandler UserIntermediatePathTypeHint where
  applyOptionalParam req (UserIntermediatePathTypeHint xs) =
    req `addQuery` toQuery ("userIntermediatePath@TypeHint", Just xs)
instance Produces PostConfigAdobeGraniteSamlAuthenticationHandler MimeNoContent


-- *** postConfigApacheFelixJettyBasedHttpService

-- | @POST \/apps\/system\/config\/org.apache.felix.http@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
postConfigApacheFelixJettyBasedHttpService 
  :: AdobeExperienceManager(AEM)Request PostConfigApacheFelixJettyBasedHttpService MimeNoContent NoContent MimeNoContent
postConfigApacheFelixJettyBasedHttpService =
  _mkRequest "POST" ["/apps/system/config/org.apache.felix.http"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data PostConfigApacheFelixJettyBasedHttpService  
instance HasOptionalParam PostConfigApacheFelixJettyBasedHttpService OrgApacheFelixHttpsNio where
  applyOptionalParam req (OrgApacheFelixHttpsNio xs) =
    req `addQuery` toQuery ("org.apache.felix.https.nio", Just xs)
instance HasOptionalParam PostConfigApacheFelixJettyBasedHttpService OrgApacheFelixHttpsNioTypeHint where
  applyOptionalParam req (OrgApacheFelixHttpsNioTypeHint xs) =
    req `addQuery` toQuery ("org.apache.felix.https.nio@TypeHint", Just xs)
instance HasOptionalParam PostConfigApacheFelixJettyBasedHttpService OrgApacheFelixHttpsKeystore where
  applyOptionalParam req (OrgApacheFelixHttpsKeystore xs) =
    req `addQuery` toQuery ("org.apache.felix.https.keystore", Just xs)
instance HasOptionalParam PostConfigApacheFelixJettyBasedHttpService OrgApacheFelixHttpsKeystoreTypeHint where
  applyOptionalParam req (OrgApacheFelixHttpsKeystoreTypeHint xs) =
    req `addQuery` toQuery ("org.apache.felix.https.keystore@TypeHint", Just xs)
instance HasOptionalParam PostConfigApacheFelixJettyBasedHttpService OrgApacheFelixHttpsKeystorePassword where
  applyOptionalParam req (OrgApacheFelixHttpsKeystorePassword xs) =
    req `addQuery` toQuery ("org.apache.felix.https.keystore.password", Just xs)
instance HasOptionalParam PostConfigApacheFelixJettyBasedHttpService OrgApacheFelixHttpsKeystorePasswordTypeHint where
  applyOptionalParam req (OrgApacheFelixHttpsKeystorePasswordTypeHint xs) =
    req `addQuery` toQuery ("org.apache.felix.https.keystore.password@TypeHint", Just xs)
instance HasOptionalParam PostConfigApacheFelixJettyBasedHttpService OrgApacheFelixHttpsKeystoreKey where
  applyOptionalParam req (OrgApacheFelixHttpsKeystoreKey xs) =
    req `addQuery` toQuery ("org.apache.felix.https.keystore.key", Just xs)
instance HasOptionalParam PostConfigApacheFelixJettyBasedHttpService OrgApacheFelixHttpsKeystoreKeyTypeHint where
  applyOptionalParam req (OrgApacheFelixHttpsKeystoreKeyTypeHint xs) =
    req `addQuery` toQuery ("org.apache.felix.https.keystore.key@TypeHint", Just xs)
instance HasOptionalParam PostConfigApacheFelixJettyBasedHttpService OrgApacheFelixHttpsKeystoreKeyPassword where
  applyOptionalParam req (OrgApacheFelixHttpsKeystoreKeyPassword xs) =
    req `addQuery` toQuery ("org.apache.felix.https.keystore.key.password", Just xs)
instance HasOptionalParam PostConfigApacheFelixJettyBasedHttpService OrgApacheFelixHttpsKeystoreKeyPasswordTypeHint where
  applyOptionalParam req (OrgApacheFelixHttpsKeystoreKeyPasswordTypeHint xs) =
    req `addQuery` toQuery ("org.apache.felix.https.keystore.key.password@TypeHint", Just xs)
instance HasOptionalParam PostConfigApacheFelixJettyBasedHttpService OrgApacheFelixHttpsTruststore where
  applyOptionalParam req (OrgApacheFelixHttpsTruststore xs) =
    req `addQuery` toQuery ("org.apache.felix.https.truststore", Just xs)
instance HasOptionalParam PostConfigApacheFelixJettyBasedHttpService OrgApacheFelixHttpsTruststoreTypeHint where
  applyOptionalParam req (OrgApacheFelixHttpsTruststoreTypeHint xs) =
    req `addQuery` toQuery ("org.apache.felix.https.truststore@TypeHint", Just xs)
instance HasOptionalParam PostConfigApacheFelixJettyBasedHttpService OrgApacheFelixHttpsTruststorePassword where
  applyOptionalParam req (OrgApacheFelixHttpsTruststorePassword xs) =
    req `addQuery` toQuery ("org.apache.felix.https.truststore.password", Just xs)
instance HasOptionalParam PostConfigApacheFelixJettyBasedHttpService OrgApacheFelixHttpsTruststorePasswordTypeHint where
  applyOptionalParam req (OrgApacheFelixHttpsTruststorePasswordTypeHint xs) =
    req `addQuery` toQuery ("org.apache.felix.https.truststore.password@TypeHint", Just xs)
instance HasOptionalParam PostConfigApacheFelixJettyBasedHttpService OrgApacheFelixHttpsClientcertificate where
  applyOptionalParam req (OrgApacheFelixHttpsClientcertificate xs) =
    req `addQuery` toQuery ("org.apache.felix.https.clientcertificate", Just xs)
instance HasOptionalParam PostConfigApacheFelixJettyBasedHttpService OrgApacheFelixHttpsClientcertificateTypeHint where
  applyOptionalParam req (OrgApacheFelixHttpsClientcertificateTypeHint xs) =
    req `addQuery` toQuery ("org.apache.felix.https.clientcertificate@TypeHint", Just xs)
instance HasOptionalParam PostConfigApacheFelixJettyBasedHttpService OrgApacheFelixHttpsEnable where
  applyOptionalParam req (OrgApacheFelixHttpsEnable xs) =
    req `addQuery` toQuery ("org.apache.felix.https.enable", Just xs)
instance HasOptionalParam PostConfigApacheFelixJettyBasedHttpService OrgApacheFelixHttpsEnableTypeHint where
  applyOptionalParam req (OrgApacheFelixHttpsEnableTypeHint xs) =
    req `addQuery` toQuery ("org.apache.felix.https.enable@TypeHint", Just xs)
instance HasOptionalParam PostConfigApacheFelixJettyBasedHttpService OrgOsgiServiceHttpPortSecure where
  applyOptionalParam req (OrgOsgiServiceHttpPortSecure xs) =
    req `addQuery` toQuery ("org.osgi.service.http.port.secure", Just xs)
instance HasOptionalParam PostConfigApacheFelixJettyBasedHttpService OrgOsgiServiceHttpPortSecureTypeHint where
  applyOptionalParam req (OrgOsgiServiceHttpPortSecureTypeHint xs) =
    req `addQuery` toQuery ("org.osgi.service.http.port.secure@TypeHint", Just xs)
instance Produces PostConfigApacheFelixJettyBasedHttpService MimeNoContent


-- *** postConfigApacheHttpComponentsProxyConfiguration

-- | @POST \/apps\/system\/config\/org.apache.http.proxyconfigurator.config@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
postConfigApacheHttpComponentsProxyConfiguration 
  :: AdobeExperienceManager(AEM)Request PostConfigApacheHttpComponentsProxyConfiguration MimeNoContent NoContent MimeNoContent
postConfigApacheHttpComponentsProxyConfiguration =
  _mkRequest "POST" ["/apps/system/config/org.apache.http.proxyconfigurator.config"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data PostConfigApacheHttpComponentsProxyConfiguration  
instance HasOptionalParam PostConfigApacheHttpComponentsProxyConfiguration ProxyHost where
  applyOptionalParam req (ProxyHost xs) =
    req `addQuery` toQuery ("proxy.host", Just xs)
instance HasOptionalParam PostConfigApacheHttpComponentsProxyConfiguration ProxyHostTypeHint where
  applyOptionalParam req (ProxyHostTypeHint xs) =
    req `addQuery` toQuery ("proxy.host@TypeHint", Just xs)
instance HasOptionalParam PostConfigApacheHttpComponentsProxyConfiguration ProxyPort where
  applyOptionalParam req (ProxyPort xs) =
    req `addQuery` toQuery ("proxy.port", Just xs)
instance HasOptionalParam PostConfigApacheHttpComponentsProxyConfiguration ProxyPortTypeHint where
  applyOptionalParam req (ProxyPortTypeHint xs) =
    req `addQuery` toQuery ("proxy.port@TypeHint", Just xs)
instance HasOptionalParam PostConfigApacheHttpComponentsProxyConfiguration ProxyExceptions where
  applyOptionalParam req (ProxyExceptions xs) =
    req `addQuery` toQueryColl MultiParamArray ("proxy.exceptions", Just xs)
instance HasOptionalParam PostConfigApacheHttpComponentsProxyConfiguration ProxyExceptionsTypeHint where
  applyOptionalParam req (ProxyExceptionsTypeHint xs) =
    req `addQuery` toQuery ("proxy.exceptions@TypeHint", Just xs)
instance HasOptionalParam PostConfigApacheHttpComponentsProxyConfiguration ProxyEnabled where
  applyOptionalParam req (ProxyEnabled xs) =
    req `addQuery` toQuery ("proxy.enabled", Just xs)
instance HasOptionalParam PostConfigApacheHttpComponentsProxyConfiguration ProxyEnabledTypeHint where
  applyOptionalParam req (ProxyEnabledTypeHint xs) =
    req `addQuery` toQuery ("proxy.enabled@TypeHint", Just xs)
instance HasOptionalParam PostConfigApacheHttpComponentsProxyConfiguration ProxyUser where
  applyOptionalParam req (ProxyUser xs) =
    req `addQuery` toQuery ("proxy.user", Just xs)
instance HasOptionalParam PostConfigApacheHttpComponentsProxyConfiguration ProxyUserTypeHint where
  applyOptionalParam req (ProxyUserTypeHint xs) =
    req `addQuery` toQuery ("proxy.user@TypeHint", Just xs)
instance HasOptionalParam PostConfigApacheHttpComponentsProxyConfiguration ProxyPassword where
  applyOptionalParam req (ProxyPassword xs) =
    req `addQuery` toQuery ("proxy.password", Just xs)
instance HasOptionalParam PostConfigApacheHttpComponentsProxyConfiguration ProxyPasswordTypeHint where
  applyOptionalParam req (ProxyPasswordTypeHint xs) =
    req `addQuery` toQuery ("proxy.password@TypeHint", Just xs)
instance Produces PostConfigApacheHttpComponentsProxyConfiguration MimeNoContent


-- *** postConfigApacheSlingDavExServlet

-- | @POST \/apps\/system\/config\/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
postConfigApacheSlingDavExServlet 
  :: AdobeExperienceManager(AEM)Request PostConfigApacheSlingDavExServlet MimeNoContent NoContent MimeNoContent
postConfigApacheSlingDavExServlet =
  _mkRequest "POST" ["/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data PostConfigApacheSlingDavExServlet  
instance HasOptionalParam PostConfigApacheSlingDavExServlet Alias where
  applyOptionalParam req (Alias xs) =
    req `addQuery` toQuery ("alias", Just xs)
instance HasOptionalParam PostConfigApacheSlingDavExServlet AliasTypeHint where
  applyOptionalParam req (AliasTypeHint xs) =
    req `addQuery` toQuery ("alias@TypeHint", Just xs)
instance HasOptionalParam PostConfigApacheSlingDavExServlet DavCreateAbsoluteUri where
  applyOptionalParam req (DavCreateAbsoluteUri xs) =
    req `addQuery` toQuery ("dav.create-absolute-uri", Just xs)
instance HasOptionalParam PostConfigApacheSlingDavExServlet DavCreateAbsoluteUriTypeHint where
  applyOptionalParam req (DavCreateAbsoluteUriTypeHint xs) =
    req `addQuery` toQuery ("dav.create-absolute-uri@TypeHint", Just xs)
instance Produces PostConfigApacheSlingDavExServlet MimeNoContent


-- *** postConfigApacheSlingGetServlet

-- | @POST \/apps\/system\/config\/org.apache.sling.servlets.get.DefaultGetServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
postConfigApacheSlingGetServlet 
  :: AdobeExperienceManager(AEM)Request PostConfigApacheSlingGetServlet MimeNoContent NoContent MimeNoContent
postConfigApacheSlingGetServlet =
  _mkRequest "POST" ["/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data PostConfigApacheSlingGetServlet  
instance HasOptionalParam PostConfigApacheSlingGetServlet JsonMaximumresults where
  applyOptionalParam req (JsonMaximumresults xs) =
    req `addQuery` toQuery ("json.maximumresults", Just xs)
instance HasOptionalParam PostConfigApacheSlingGetServlet JsonMaximumresultsTypeHint where
  applyOptionalParam req (JsonMaximumresultsTypeHint xs) =
    req `addQuery` toQuery ("json.maximumresults@TypeHint", Just xs)
instance HasOptionalParam PostConfigApacheSlingGetServlet EnableHtml where
  applyOptionalParam req (EnableHtml xs) =
    req `addQuery` toQuery ("enable.html", Just xs)
instance HasOptionalParam PostConfigApacheSlingGetServlet EnableHtmlTypeHint where
  applyOptionalParam req (EnableHtmlTypeHint xs) =
    req `addQuery` toQuery ("enable.html@TypeHint", Just xs)
instance HasOptionalParam PostConfigApacheSlingGetServlet EnableTxt where
  applyOptionalParam req (EnableTxt xs) =
    req `addQuery` toQuery ("enable.txt", Just xs)
instance HasOptionalParam PostConfigApacheSlingGetServlet EnableTxtTypeHint where
  applyOptionalParam req (EnableTxtTypeHint xs) =
    req `addQuery` toQuery ("enable.txt@TypeHint", Just xs)
instance HasOptionalParam PostConfigApacheSlingGetServlet EnableXml where
  applyOptionalParam req (EnableXml xs) =
    req `addQuery` toQuery ("enable.xml", Just xs)
instance HasOptionalParam PostConfigApacheSlingGetServlet EnableXmlTypeHint where
  applyOptionalParam req (EnableXmlTypeHint xs) =
    req `addQuery` toQuery ("enable.xml@TypeHint", Just xs)
instance Produces PostConfigApacheSlingGetServlet MimeNoContent


-- *** postConfigApacheSlingReferrerFilter

-- | @POST \/apps\/system\/config\/org.apache.sling.security.impl.ReferrerFilter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
postConfigApacheSlingReferrerFilter 
  :: AdobeExperienceManager(AEM)Request PostConfigApacheSlingReferrerFilter MimeNoContent NoContent MimeNoContent
postConfigApacheSlingReferrerFilter =
  _mkRequest "POST" ["/apps/system/config/org.apache.sling.security.impl.ReferrerFilter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data PostConfigApacheSlingReferrerFilter  
instance HasOptionalParam PostConfigApacheSlingReferrerFilter AllowEmpty where
  applyOptionalParam req (AllowEmpty xs) =
    req `addQuery` toQuery ("allow.empty", Just xs)
instance HasOptionalParam PostConfigApacheSlingReferrerFilter AllowEmptyTypeHint where
  applyOptionalParam req (AllowEmptyTypeHint xs) =
    req `addQuery` toQuery ("allow.empty@TypeHint", Just xs)
instance HasOptionalParam PostConfigApacheSlingReferrerFilter AllowHosts where
  applyOptionalParam req (AllowHosts xs) =
    req `addQuery` toQuery ("allow.hosts", Just xs)
instance HasOptionalParam PostConfigApacheSlingReferrerFilter AllowHostsTypeHint where
  applyOptionalParam req (AllowHostsTypeHint xs) =
    req `addQuery` toQuery ("allow.hosts@TypeHint", Just xs)
instance HasOptionalParam PostConfigApacheSlingReferrerFilter AllowHostsRegexp where
  applyOptionalParam req (AllowHostsRegexp xs) =
    req `addQuery` toQuery ("allow.hosts.regexp", Just xs)
instance HasOptionalParam PostConfigApacheSlingReferrerFilter AllowHostsRegexpTypeHint where
  applyOptionalParam req (AllowHostsRegexpTypeHint xs) =
    req `addQuery` toQuery ("allow.hosts.regexp@TypeHint", Just xs)
instance HasOptionalParam PostConfigApacheSlingReferrerFilter FilterMethods where
  applyOptionalParam req (FilterMethods xs) =
    req `addQuery` toQuery ("filter.methods", Just xs)
instance HasOptionalParam PostConfigApacheSlingReferrerFilter FilterMethodsTypeHint where
  applyOptionalParam req (FilterMethodsTypeHint xs) =
    req `addQuery` toQuery ("filter.methods@TypeHint", Just xs)
instance Produces PostConfigApacheSlingReferrerFilter MimeNoContent


-- *** postConfigProperty

-- | @POST \/apps\/system\/config\/{configNodeName}@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
postConfigProperty 
  :: ConfigNodeName -- ^ "configNodeName"
  -> AdobeExperienceManager(AEM)Request PostConfigProperty MimeNoContent NoContent MimeNoContent
postConfigProperty (ConfigNodeName configNodeName) =
  _mkRequest "POST" ["/apps/system/config/",toPath configNodeName]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data PostConfigProperty  
instance Produces PostConfigProperty MimeNoContent


-- *** postNode

-- | @POST \/{path}\/{name}@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
postNode 
  :: (Consumes PostNode MimeMultipartFormData)
  => Path -- ^ "path"
  -> Name -- ^ "name"
  -> AdobeExperienceManager(AEM)Request PostNode MimeMultipartFormData NoContent MimeNoContent
postNode (Path path) (Name name) =
  _mkRequest "POST" ["/",toPath path,"/",toPath name]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data PostNode  
instance HasOptionalParam PostNode File where
  applyOptionalParam req (File xs) =
    req `_addMultiFormPart` NH.partFileSource "file" xs
instance HasOptionalParam PostNode Operation where
  applyOptionalParam req (Operation xs) =
    req `addQuery` toQuery (":operation", Just xs)
instance HasOptionalParam PostNode DeleteAuthorizable where
  applyOptionalParam req (DeleteAuthorizable xs) =
    req `addQuery` toQuery ("deleteAuthorizable", Just xs)

-- | @multipart/form-data@
instance Consumes PostNode MimeMultipartFormData

instance Produces PostNode MimeNoContent


-- *** postNodeRw

-- | @POST \/{path}\/{name}.rw.html@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
postNodeRw 
  :: Path -- ^ "path"
  -> Name -- ^ "name"
  -> AdobeExperienceManager(AEM)Request PostNodeRw MimeNoContent NoContent MimeNoContent
postNodeRw (Path path) (Name name) =
  _mkRequest "POST" ["/",toPath path,"/",toPath name,".rw.html"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data PostNodeRw  
instance HasOptionalParam PostNodeRw AddMembers where
  applyOptionalParam req (AddMembers xs) =
    req `addQuery` toQuery ("addMembers", Just xs)
instance Produces PostNodeRw MimeNoContent


-- *** postPath

-- | @POST \/{path}\/@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
postPath 
  :: Path -- ^ "path"
  -> JcrprimaryType -- ^ "jcrprimaryType"
  -> Name -- ^ "name"
  -> AdobeExperienceManager(AEM)Request PostPath MimeNoContent NoContent MimeNoContent
postPath (Path path) (JcrprimaryType jcrprimaryType) (Name name) =
  _mkRequest "POST" ["/",toPath path,"/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)
    `addQuery` toQuery ("jcr:primaryType", Just jcrprimaryType)
    `addQuery` toQuery (":name", Just name)

data PostPath  
instance Produces PostPath MimeNoContent


-- *** postQuery

-- | @POST \/bin\/querybuilder.json@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
postQuery 
  :: Path -- ^ "path"
  -> PLimit -- ^ "pLimit"
  -> Param1property -- ^ "_1property"
  -> Param1propertyValue -- ^ "_1propertyValue"
  -> AdobeExperienceManager(AEM)Request PostQuery MimeNoContent Text MimeJSON
postQuery (Path path) (PLimit pLimit) (Param1property _1property) (Param1propertyValue _1propertyValue) =
  _mkRequest "POST" ["/bin/querybuilder.json"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)
    `addQuery` toQuery ("path", Just path)
    `addQuery` toQuery ("p.limit", Just pLimit)
    `addQuery` toQuery ("1_property", Just _1property)
    `addQuery` toQuery ("1_property.value", Just _1propertyValue)

data PostQuery  
-- | @application/json@
instance Produces PostQuery MimeJSON


-- *** postTreeActivation

-- | @POST \/etc\/replication\/treeactivation.html@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
postTreeActivation 
  :: Ignoredeactivated -- ^ "ignoredeactivated"
  -> Onlymodified -- ^ "onlymodified"
  -> Path -- ^ "path"
  -> AdobeExperienceManager(AEM)Request PostTreeActivation MimeNoContent NoContent MimeNoContent
postTreeActivation (Ignoredeactivated ignoredeactivated) (Onlymodified onlymodified) (Path path) =
  _mkRequest "POST" ["/etc/replication/treeactivation.html"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)
    `addQuery` toQuery ("ignoredeactivated", Just ignoredeactivated)
    `addQuery` toQuery ("onlymodified", Just onlymodified)
    `addQuery` toQuery ("path", Just path)

data PostTreeActivation  
instance Produces PostTreeActivation MimeNoContent


-- *** postTruststore

-- | @POST \/libs\/granite\/security\/post\/truststore@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
postTruststore 
  :: (Consumes PostTruststore MimeMultipartFormData)
  => AdobeExperienceManager(AEM)Request PostTruststore MimeMultipartFormData Text MimePlainText
postTruststore =
  _mkRequest "POST" ["/libs/granite/security/post/truststore"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data PostTruststore  
instance HasOptionalParam PostTruststore Certificate where
  applyOptionalParam req (Certificate xs) =
    req `_addMultiFormPart` NH.partFileSource "certificate" xs
instance HasOptionalParam PostTruststore Operation where
  applyOptionalParam req (Operation xs) =
    req `addQuery` toQuery (":operation", Just xs)
instance HasOptionalParam PostTruststore NewPassword where
  applyOptionalParam req (NewPassword xs) =
    req `addQuery` toQuery ("newPassword", Just xs)
instance HasOptionalParam PostTruststore RePassword where
  applyOptionalParam req (RePassword xs) =
    req `addQuery` toQuery ("rePassword", Just xs)
instance HasOptionalParam PostTruststore KeyStoreType where
  applyOptionalParam req (KeyStoreType xs) =
    req `addQuery` toQuery ("keyStoreType", Just xs)
instance HasOptionalParam PostTruststore RemoveAlias where
  applyOptionalParam req (RemoveAlias xs) =
    req `addQuery` toQuery ("removeAlias", Just xs)

-- | @multipart/form-data@
instance Consumes PostTruststore MimeMultipartFormData

-- | @text/plain@
instance Produces PostTruststore MimePlainText


-- *** postTruststorePKCS12

-- | @POST \/etc\/truststore@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
postTruststorePKCS12 
  :: (Consumes PostTruststorePKCS12 MimeMultipartFormData)
  => AdobeExperienceManager(AEM)Request PostTruststorePKCS12 MimeMultipartFormData Text MimePlainText
postTruststorePKCS12 =
  _mkRequest "POST" ["/etc/truststore"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data PostTruststorePKCS12  
instance HasOptionalParam PostTruststorePKCS12 TruststoreP12 where
  applyOptionalParam req (TruststoreP12 xs) =
    req `_addMultiFormPart` NH.partFileSource "truststore.p12" xs

-- | @multipart/form-data@
instance Consumes PostTruststorePKCS12 MimeMultipartFormData

-- | @text/plain@
instance Produces PostTruststorePKCS12 MimePlainText

