/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.GraniteApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 * Version: 3.5.0-pre.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.GraniteApi');


/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.GraniteApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('GraniteApiBasePath') ?
                   /** @type {!string} */ ($injector.get('GraniteApiBasePath')) :
                   'http://localhost';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('GraniteApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('GraniteApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.GraniteApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * 
 * @param {!string} keystorePassword 
 * @param {!string} keystorePasswordConfirm 
 * @param {!string} truststorePassword 
 * @param {!string} truststorePasswordConfirm 
 * @param {!string} httpsHostname 
 * @param {!string} httpsPort 
 * @param {!Object=} opt_privatekeyFile 
 * @param {!Object=} opt_certificateFile 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.GraniteApi.prototype.sslSetup = function(keystorePassword, keystorePasswordConfirm, truststorePassword, truststorePasswordConfirm, httpsHostname, httpsPort, opt_privatekeyFile, opt_certificateFile, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/libs/granite/security/post/sslSetup.html';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'keystorePassword' is set
  if (!keystorePassword) {
    throw new Error('Missing required parameter keystorePassword when calling sslSetup');
  }
  // verify required parameter 'keystorePasswordConfirm' is set
  if (!keystorePasswordConfirm) {
    throw new Error('Missing required parameter keystorePasswordConfirm when calling sslSetup');
  }
  // verify required parameter 'truststorePassword' is set
  if (!truststorePassword) {
    throw new Error('Missing required parameter truststorePassword when calling sslSetup');
  }
  // verify required parameter 'truststorePasswordConfirm' is set
  if (!truststorePasswordConfirm) {
    throw new Error('Missing required parameter truststorePasswordConfirm when calling sslSetup');
  }
  // verify required parameter 'httpsHostname' is set
  if (!httpsHostname) {
    throw new Error('Missing required parameter httpsHostname when calling sslSetup');
  }
  // verify required parameter 'httpsPort' is set
  if (!httpsPort) {
    throw new Error('Missing required parameter httpsPort when calling sslSetup');
  }
  if (keystorePassword !== undefined) {
    queryParameters['keystorePassword'] = keystorePassword;
  }

  if (keystorePasswordConfirm !== undefined) {
    queryParameters['keystorePasswordConfirm'] = keystorePasswordConfirm;
  }

  if (truststorePassword !== undefined) {
    queryParameters['truststorePassword'] = truststorePassword;
  }

  if (truststorePasswordConfirm !== undefined) {
    queryParameters['truststorePasswordConfirm'] = truststorePasswordConfirm;
  }

  if (httpsHostname !== undefined) {
    queryParameters['httpsHostname'] = httpsHostname;
  }

  if (httpsPort !== undefined) {
    queryParameters['httpsPort'] = httpsPort;
  }

  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['privatekeyFile'] = opt_privatekeyFile;

  formParams['certificateFile'] = opt_certificateFile;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
