/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.ConsoleApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 * Version: 3.5.0-pre.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.ConsoleApi');

goog.require('API.Client.BundleInfo');
goog.require('API.Client.SamlConfigurationInfo');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.ConsoleApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('ConsoleApiBasePath') ?
                   /** @type {!string} */ ($injector.get('ConsoleApiBasePath')) :
                   'http://localhost';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('ConsoleApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('ConsoleApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.ConsoleApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!string>>}
 */
API.Client.ConsoleApi.prototype.getAemProductInfo = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/status-productinfo.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} name 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.BundleInfo>}
 */
API.Client.ConsoleApi.prototype.getBundleInfo = function(name, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/bundles/{name}.json'
      .replace('{' + 'name' + '}', String(name));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'name' is set
  if (!name) {
    throw new Error('Missing required parameter name when calling getBundleInfo');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.ConsoleApi.prototype.getConfigMgr = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} name 
 * @param {!string} action 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ConsoleApi.prototype.postBundle = function(name, action, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/bundles/{name}'
      .replace('{' + 'name' + '}', String(name));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'name' is set
  if (!name) {
    throw new Error('Missing required parameter name when calling postBundle');
  }
  // verify required parameter 'action' is set
  if (!action) {
    throw new Error('Missing required parameter action when calling postBundle');
  }
  if (action !== undefined) {
    queryParameters['action'] = action;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} action 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ConsoleApi.prototype.postJmxRepository = function(action, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/jmx/com.adobe.granite:type=Repository/op/{action}'
      .replace('{' + 'action' + '}', String(action));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'action' is set
  if (!action) {
    throw new Error('Missing required parameter action when calling postJmxRepository');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_path 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_idpUrl 
 * @param {!string=} opt_idpCertAlias 
 * @param {!boolean=} opt_idpHttpRedirect 
 * @param {!string=} opt_serviceProviderEntityId 
 * @param {!string=} opt_assertionConsumerServiceURL 
 * @param {!string=} opt_spPrivateKeyAlias 
 * @param {!string=} opt_keyStorePassword 
 * @param {!string=} opt_defaultRedirectUrl 
 * @param {!string=} opt_userIDAttribute 
 * @param {!boolean=} opt_useEncryption 
 * @param {!boolean=} opt_createUser 
 * @param {!boolean=} opt_addGroupMemberships 
 * @param {!string=} opt_groupMembershipAttribute 
 * @param {!Array<!string>=} opt_defaultGroups 
 * @param {!string=} opt_nameIdFormat 
 * @param {!Array<!string>=} opt_synchronizeAttributes 
 * @param {!boolean=} opt_handleLogout 
 * @param {!string=} opt_logoutUrl 
 * @param {!number=} opt_clockTolerance 
 * @param {!string=} opt_digestMethod 
 * @param {!string=} opt_signatureMethod 
 * @param {!string=} opt_userIntermediatePath 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.SamlConfigurationInfo>}
 */
API.Client.ConsoleApi.prototype.postSamlConfiguration = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_path, opt_serviceRanking, opt_idpUrl, opt_idpCertAlias, opt_idpHttpRedirect, opt_serviceProviderEntityId, opt_assertionConsumerServiceURL, opt_spPrivateKeyAlias, opt_keyStorePassword, opt_defaultRedirectUrl, opt_userIDAttribute, opt_useEncryption, opt_createUser, opt_addGroupMemberships, opt_groupMembershipAttribute, opt_defaultGroups, opt_nameIdFormat, opt_synchronizeAttributes, opt_handleLogout, opt_logoutUrl, opt_clockTolerance, opt_digestMethod, opt_signatureMethod, opt_userIntermediatePath, opt_propertylist, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_path !== undefined) {
    queryParameters['path'] = opt_path;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_idpUrl !== undefined) {
    queryParameters['idpUrl'] = opt_idpUrl;
  }

  if (opt_idpCertAlias !== undefined) {
    queryParameters['idpCertAlias'] = opt_idpCertAlias;
  }

  if (opt_idpHttpRedirect !== undefined) {
    queryParameters['idpHttpRedirect'] = opt_idpHttpRedirect;
  }

  if (opt_serviceProviderEntityId !== undefined) {
    queryParameters['serviceProviderEntityId'] = opt_serviceProviderEntityId;
  }

  if (opt_assertionConsumerServiceURL !== undefined) {
    queryParameters['assertionConsumerServiceURL'] = opt_assertionConsumerServiceURL;
  }

  if (opt_spPrivateKeyAlias !== undefined) {
    queryParameters['spPrivateKeyAlias'] = opt_spPrivateKeyAlias;
  }

  if (opt_keyStorePassword !== undefined) {
    queryParameters['keyStorePassword'] = opt_keyStorePassword;
  }

  if (opt_defaultRedirectUrl !== undefined) {
    queryParameters['defaultRedirectUrl'] = opt_defaultRedirectUrl;
  }

  if (opt_userIDAttribute !== undefined) {
    queryParameters['userIDAttribute'] = opt_userIDAttribute;
  }

  if (opt_useEncryption !== undefined) {
    queryParameters['useEncryption'] = opt_useEncryption;
  }

  if (opt_createUser !== undefined) {
    queryParameters['createUser'] = opt_createUser;
  }

  if (opt_addGroupMemberships !== undefined) {
    queryParameters['addGroupMemberships'] = opt_addGroupMemberships;
  }

  if (opt_groupMembershipAttribute !== undefined) {
    queryParameters['groupMembershipAttribute'] = opt_groupMembershipAttribute;
  }

  if (opt_defaultGroups !== undefined) {
    queryParameters['defaultGroups'] = opt_defaultGroups;
  }

  if (opt_nameIdFormat !== undefined) {
    queryParameters['nameIdFormat'] = opt_nameIdFormat;
  }

  if (opt_synchronizeAttributes !== undefined) {
    queryParameters['synchronizeAttributes'] = opt_synchronizeAttributes;
  }

  if (opt_handleLogout !== undefined) {
    queryParameters['handleLogout'] = opt_handleLogout;
  }

  if (opt_logoutUrl !== undefined) {
    queryParameters['logoutUrl'] = opt_logoutUrl;
  }

  if (opt_clockTolerance !== undefined) {
    queryParameters['clockTolerance'] = opt_clockTolerance;
  }

  if (opt_digestMethod !== undefined) {
    queryParameters['digestMethod'] = opt_digestMethod;
  }

  if (opt_signatureMethod !== undefined) {
    queryParameters['signatureMethod'] = opt_signatureMethod;
  }

  if (opt_userIntermediatePath !== undefined) {
    queryParameters['userIntermediatePath'] = opt_userIntermediatePath;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
