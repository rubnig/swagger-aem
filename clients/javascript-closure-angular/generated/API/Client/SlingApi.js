/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.SlingApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 * Version: 3.5.0-pre.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.SlingApi');

goog.require('API.Client.KeystoreInfo');
goog.require('API.Client.TruststoreInfo');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.SlingApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('SlingApiBasePath') ?
                   /** @type {!string} */ ($injector.get('SlingApiBasePath')) :
                   'http://localhost';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('SlingApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('SlingApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.SlingApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * 
 * @param {!string} runmode 
 * @param {!string} name 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SlingApi.prototype.deleteAgent = function(runmode, name, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/etc/replication/agents.{runmode}/{name}'
      .replace('{' + 'runmode' + '}', String(runmode))
      .replace('{' + 'name' + '}', String(name));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'runmode' is set
  if (!runmode) {
    throw new Error('Missing required parameter runmode when calling deleteAgent');
  }
  // verify required parameter 'name' is set
  if (!name) {
    throw new Error('Missing required parameter name when calling deleteAgent');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} path 
 * @param {!string} name 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SlingApi.prototype.deleteNode = function(path, name, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/{path}/{name}'
      .replace('{' + 'path' + '}', String(path))
      .replace('{' + 'name' + '}', String(name));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'path' is set
  if (!path) {
    throw new Error('Missing required parameter path when calling deleteNode');
  }
  // verify required parameter 'name' is set
  if (!name) {
    throw new Error('Missing required parameter name when calling deleteNode');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} runmode 
 * @param {!string} name 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SlingApi.prototype.getAgent = function(runmode, name, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/etc/replication/agents.{runmode}/{name}'
      .replace('{' + 'runmode' + '}', String(runmode))
      .replace('{' + 'name' + '}', String(name));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'runmode' is set
  if (!runmode) {
    throw new Error('Missing required parameter runmode when calling getAgent');
  }
  // verify required parameter 'name' is set
  if (!name) {
    throw new Error('Missing required parameter name when calling getAgent');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} runmode 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.SlingApi.prototype.getAgents = function(runmode, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/etc/replication/agents.{runmode}.-1.json'
      .replace('{' + 'runmode' + '}', String(runmode));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'runmode' is set
  if (!runmode) {
    throw new Error('Missing required parameter runmode when calling getAgents');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} intermediatePath 
 * @param {!string} authorizableId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.KeystoreInfo>}
 */
API.Client.SlingApi.prototype.getAuthorizableKeystore = function(intermediatePath, authorizableId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/{intermediatePath}/{authorizableId}.ks.json'
      .replace('{' + 'intermediatePath' + '}', String(intermediatePath))
      .replace('{' + 'authorizableId' + '}', String(authorizableId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'intermediatePath' is set
  if (!intermediatePath) {
    throw new Error('Missing required parameter intermediatePath when calling getAuthorizableKeystore');
  }
  // verify required parameter 'authorizableId' is set
  if (!authorizableId) {
    throw new Error('Missing required parameter authorizableId when calling getAuthorizableKeystore');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} intermediatePath 
 * @param {!string} authorizableId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Object>}
 */
API.Client.SlingApi.prototype.getKeystore = function(intermediatePath, authorizableId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/{intermediatePath}/{authorizableId}/keystore/store.p12'
      .replace('{' + 'intermediatePath' + '}', String(intermediatePath))
      .replace('{' + 'authorizableId' + '}', String(authorizableId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'intermediatePath' is set
  if (!intermediatePath) {
    throw new Error('Missing required parameter intermediatePath when calling getKeystore');
  }
  // verify required parameter 'authorizableId' is set
  if (!authorizableId) {
    throw new Error('Missing required parameter authorizableId when calling getKeystore');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} path 
 * @param {!string} name 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SlingApi.prototype.getNode = function(path, name, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/{path}/{name}'
      .replace('{' + 'path' + '}', String(path))
      .replace('{' + 'name' + '}', String(name));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'path' is set
  if (!path) {
    throw new Error('Missing required parameter path when calling getNode');
  }
  // verify required parameter 'name' is set
  if (!name) {
    throw new Error('Missing required parameter name when calling getNode');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} group 
 * @param {!string} name 
 * @param {!string} version 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Object>}
 */
API.Client.SlingApi.prototype.getPackage = function(group, name, version, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/etc/packages/{group}/{name}-{version}.zip'
      .replace('{' + 'group' + '}', String(group))
      .replace('{' + 'name' + '}', String(name))
      .replace('{' + 'version' + '}', String(version));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'group' is set
  if (!group) {
    throw new Error('Missing required parameter group when calling getPackage');
  }
  // verify required parameter 'name' is set
  if (!name) {
    throw new Error('Missing required parameter name when calling getPackage');
  }
  // verify required parameter 'version' is set
  if (!version) {
    throw new Error('Missing required parameter version when calling getPackage');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} group 
 * @param {!string} name 
 * @param {!string} version 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.SlingApi.prototype.getPackageFilter = function(group, name, version, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json'
      .replace('{' + 'group' + '}', String(group))
      .replace('{' + 'name' + '}', String(name))
      .replace('{' + 'version' + '}', String(version));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'group' is set
  if (!group) {
    throw new Error('Missing required parameter group when calling getPackageFilter');
  }
  // verify required parameter 'name' is set
  if (!name) {
    throw new Error('Missing required parameter name when calling getPackageFilter');
  }
  // verify required parameter 'version' is set
  if (!version) {
    throw new Error('Missing required parameter version when calling getPackageFilter');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} path 
 * @param {!number} pLimit 
 * @param {!string} _1property 
 * @param {!string} _1propertyValue 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.SlingApi.prototype.getQuery = function(path, pLimit, _1property, _1propertyValue, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/bin/querybuilder.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'path' is set
  if (!path) {
    throw new Error('Missing required parameter path when calling getQuery');
  }
  // verify required parameter 'pLimit' is set
  if (!pLimit) {
    throw new Error('Missing required parameter pLimit when calling getQuery');
  }
  // verify required parameter '_1property' is set
  if (!_1property) {
    throw new Error('Missing required parameter _1property when calling getQuery');
  }
  // verify required parameter '_1propertyValue' is set
  if (!_1propertyValue) {
    throw new Error('Missing required parameter _1propertyValue when calling getQuery');
  }
  if (path !== undefined) {
    queryParameters['path'] = path;
  }

  if (pLimit !== undefined) {
    queryParameters['p.limit'] = pLimit;
  }

  if (_1property !== undefined) {
    queryParameters['1_property'] = _1property;
  }

  if (_1propertyValue !== undefined) {
    queryParameters['1_property.value'] = _1propertyValue;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Object>}
 */
API.Client.SlingApi.prototype.getTruststore = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/etc/truststore/truststore.p12';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.TruststoreInfo>}
 */
API.Client.SlingApi.prototype.getTruststoreInfo = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/libs/granite/security/truststore.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} runmode 
 * @param {!string} name 
 * @param {!boolean=} opt_jcrcontentCqdistribute 
 * @param {!string=} opt_jcrcontentCqdistributeTypeHint 
 * @param {!string=} opt_jcrcontentCqname 
 * @param {!string=} opt_jcrcontentCqtemplate 
 * @param {!boolean=} opt_jcrcontentEnabled 
 * @param {!string=} opt_jcrcontentJcrdescription 
 * @param {!string=} opt_jcrcontentJcrlastModified 
 * @param {!string=} opt_jcrcontentJcrlastModifiedBy 
 * @param {!string=} opt_jcrcontentJcrmixinTypes 
 * @param {!string=} opt_jcrcontentJcrtitle 
 * @param {!string=} opt_jcrcontentLogLevel 
 * @param {!boolean=} opt_jcrcontentNoStatusUpdate 
 * @param {!boolean=} opt_jcrcontentNoVersioning 
 * @param {!number=} opt_jcrcontentProtocolConnectTimeout 
 * @param {!boolean=} opt_jcrcontentProtocolHTTPConnectionClosed 
 * @param {!string=} opt_jcrcontentProtocolHTTPExpired 
 * @param {!Array<!string>=} opt_jcrcontentProtocolHTTPHeaders 
 * @param {!string=} opt_jcrcontentProtocolHTTPHeadersTypeHint 
 * @param {!string=} opt_jcrcontentProtocolHTTPMethod 
 * @param {!boolean=} opt_jcrcontentProtocolHTTPSRelaxed 
 * @param {!string=} opt_jcrcontentProtocolInterface 
 * @param {!number=} opt_jcrcontentProtocolSocketTimeout 
 * @param {!string=} opt_jcrcontentProtocolVersion 
 * @param {!string=} opt_jcrcontentProxyNTLMDomain 
 * @param {!string=} opt_jcrcontentProxyNTLMHost 
 * @param {!string=} opt_jcrcontentProxyHost 
 * @param {!string=} opt_jcrcontentProxyPassword 
 * @param {!number=} opt_jcrcontentProxyPort 
 * @param {!string=} opt_jcrcontentProxyUser 
 * @param {!number=} opt_jcrcontentQueueBatchMaxSize 
 * @param {!string=} opt_jcrcontentQueueBatchMode 
 * @param {!number=} opt_jcrcontentQueueBatchWaitTime 
 * @param {!string=} opt_jcrcontentRetryDelay 
 * @param {!boolean=} opt_jcrcontentReverseReplication 
 * @param {!string=} opt_jcrcontentSerializationType 
 * @param {!string=} opt_jcrcontentSlingresourceType 
 * @param {!string=} opt_jcrcontentSsl 
 * @param {!string=} opt_jcrcontentTransportNTLMDomain 
 * @param {!string=} opt_jcrcontentTransportNTLMHost 
 * @param {!string=} opt_jcrcontentTransportPassword 
 * @param {!string=} opt_jcrcontentTransportUri 
 * @param {!string=} opt_jcrcontentTransportUser 
 * @param {!boolean=} opt_jcrcontentTriggerDistribute 
 * @param {!boolean=} opt_jcrcontentTriggerModified 
 * @param {!boolean=} opt_jcrcontentTriggerOnOffTime 
 * @param {!boolean=} opt_jcrcontentTriggerReceive 
 * @param {!boolean=} opt_jcrcontentTriggerSpecific 
 * @param {!string=} opt_jcrcontentUserId 
 * @param {!string=} opt_jcrprimaryType 
 * @param {!string=} opt_operation 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SlingApi.prototype.postAgent = function(runmode, name, opt_jcrcontentCqdistribute, opt_jcrcontentCqdistributeTypeHint, opt_jcrcontentCqname, opt_jcrcontentCqtemplate, opt_jcrcontentEnabled, opt_jcrcontentJcrdescription, opt_jcrcontentJcrlastModified, opt_jcrcontentJcrlastModifiedBy, opt_jcrcontentJcrmixinTypes, opt_jcrcontentJcrtitle, opt_jcrcontentLogLevel, opt_jcrcontentNoStatusUpdate, opt_jcrcontentNoVersioning, opt_jcrcontentProtocolConnectTimeout, opt_jcrcontentProtocolHTTPConnectionClosed, opt_jcrcontentProtocolHTTPExpired, opt_jcrcontentProtocolHTTPHeaders, opt_jcrcontentProtocolHTTPHeadersTypeHint, opt_jcrcontentProtocolHTTPMethod, opt_jcrcontentProtocolHTTPSRelaxed, opt_jcrcontentProtocolInterface, opt_jcrcontentProtocolSocketTimeout, opt_jcrcontentProtocolVersion, opt_jcrcontentProxyNTLMDomain, opt_jcrcontentProxyNTLMHost, opt_jcrcontentProxyHost, opt_jcrcontentProxyPassword, opt_jcrcontentProxyPort, opt_jcrcontentProxyUser, opt_jcrcontentQueueBatchMaxSize, opt_jcrcontentQueueBatchMode, opt_jcrcontentQueueBatchWaitTime, opt_jcrcontentRetryDelay, opt_jcrcontentReverseReplication, opt_jcrcontentSerializationType, opt_jcrcontentSlingresourceType, opt_jcrcontentSsl, opt_jcrcontentTransportNTLMDomain, opt_jcrcontentTransportNTLMHost, opt_jcrcontentTransportPassword, opt_jcrcontentTransportUri, opt_jcrcontentTransportUser, opt_jcrcontentTriggerDistribute, opt_jcrcontentTriggerModified, opt_jcrcontentTriggerOnOffTime, opt_jcrcontentTriggerReceive, opt_jcrcontentTriggerSpecific, opt_jcrcontentUserId, opt_jcrprimaryType, opt_operation, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/etc/replication/agents.{runmode}/{name}'
      .replace('{' + 'runmode' + '}', String(runmode))
      .replace('{' + 'name' + '}', String(name));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'runmode' is set
  if (!runmode) {
    throw new Error('Missing required parameter runmode when calling postAgent');
  }
  // verify required parameter 'name' is set
  if (!name) {
    throw new Error('Missing required parameter name when calling postAgent');
  }
  if (opt_jcrcontentCqdistribute !== undefined) {
    queryParameters['jcr:content/cq:distribute'] = opt_jcrcontentCqdistribute;
  }

  if (opt_jcrcontentCqdistributeTypeHint !== undefined) {
    queryParameters['jcr:content/cq:distribute@TypeHint'] = opt_jcrcontentCqdistributeTypeHint;
  }

  if (opt_jcrcontentCqname !== undefined) {
    queryParameters['jcr:content/cq:name'] = opt_jcrcontentCqname;
  }

  if (opt_jcrcontentCqtemplate !== undefined) {
    queryParameters['jcr:content/cq:template'] = opt_jcrcontentCqtemplate;
  }

  if (opt_jcrcontentEnabled !== undefined) {
    queryParameters['jcr:content/enabled'] = opt_jcrcontentEnabled;
  }

  if (opt_jcrcontentJcrdescription !== undefined) {
    queryParameters['jcr:content/jcr:description'] = opt_jcrcontentJcrdescription;
  }

  if (opt_jcrcontentJcrlastModified !== undefined) {
    queryParameters['jcr:content/jcr:lastModified'] = opt_jcrcontentJcrlastModified;
  }

  if (opt_jcrcontentJcrlastModifiedBy !== undefined) {
    queryParameters['jcr:content/jcr:lastModifiedBy'] = opt_jcrcontentJcrlastModifiedBy;
  }

  if (opt_jcrcontentJcrmixinTypes !== undefined) {
    queryParameters['jcr:content/jcr:mixinTypes'] = opt_jcrcontentJcrmixinTypes;
  }

  if (opt_jcrcontentJcrtitle !== undefined) {
    queryParameters['jcr:content/jcr:title'] = opt_jcrcontentJcrtitle;
  }

  if (opt_jcrcontentLogLevel !== undefined) {
    queryParameters['jcr:content/logLevel'] = opt_jcrcontentLogLevel;
  }

  if (opt_jcrcontentNoStatusUpdate !== undefined) {
    queryParameters['jcr:content/noStatusUpdate'] = opt_jcrcontentNoStatusUpdate;
  }

  if (opt_jcrcontentNoVersioning !== undefined) {
    queryParameters['jcr:content/noVersioning'] = opt_jcrcontentNoVersioning;
  }

  if (opt_jcrcontentProtocolConnectTimeout !== undefined) {
    queryParameters['jcr:content/protocolConnectTimeout'] = opt_jcrcontentProtocolConnectTimeout;
  }

  if (opt_jcrcontentProtocolHTTPConnectionClosed !== undefined) {
    queryParameters['jcr:content/protocolHTTPConnectionClosed'] = opt_jcrcontentProtocolHTTPConnectionClosed;
  }

  if (opt_jcrcontentProtocolHTTPExpired !== undefined) {
    queryParameters['jcr:content/protocolHTTPExpired'] = opt_jcrcontentProtocolHTTPExpired;
  }

  if (opt_jcrcontentProtocolHTTPHeaders !== undefined) {
    queryParameters['jcr:content/protocolHTTPHeaders'] = opt_jcrcontentProtocolHTTPHeaders;
  }

  if (opt_jcrcontentProtocolHTTPHeadersTypeHint !== undefined) {
    queryParameters['jcr:content/protocolHTTPHeaders@TypeHint'] = opt_jcrcontentProtocolHTTPHeadersTypeHint;
  }

  if (opt_jcrcontentProtocolHTTPMethod !== undefined) {
    queryParameters['jcr:content/protocolHTTPMethod'] = opt_jcrcontentProtocolHTTPMethod;
  }

  if (opt_jcrcontentProtocolHTTPSRelaxed !== undefined) {
    queryParameters['jcr:content/protocolHTTPSRelaxed'] = opt_jcrcontentProtocolHTTPSRelaxed;
  }

  if (opt_jcrcontentProtocolInterface !== undefined) {
    queryParameters['jcr:content/protocolInterface'] = opt_jcrcontentProtocolInterface;
  }

  if (opt_jcrcontentProtocolSocketTimeout !== undefined) {
    queryParameters['jcr:content/protocolSocketTimeout'] = opt_jcrcontentProtocolSocketTimeout;
  }

  if (opt_jcrcontentProtocolVersion !== undefined) {
    queryParameters['jcr:content/protocolVersion'] = opt_jcrcontentProtocolVersion;
  }

  if (opt_jcrcontentProxyNTLMDomain !== undefined) {
    queryParameters['jcr:content/proxyNTLMDomain'] = opt_jcrcontentProxyNTLMDomain;
  }

  if (opt_jcrcontentProxyNTLMHost !== undefined) {
    queryParameters['jcr:content/proxyNTLMHost'] = opt_jcrcontentProxyNTLMHost;
  }

  if (opt_jcrcontentProxyHost !== undefined) {
    queryParameters['jcr:content/proxyHost'] = opt_jcrcontentProxyHost;
  }

  if (opt_jcrcontentProxyPassword !== undefined) {
    queryParameters['jcr:content/proxyPassword'] = opt_jcrcontentProxyPassword;
  }

  if (opt_jcrcontentProxyPort !== undefined) {
    queryParameters['jcr:content/proxyPort'] = opt_jcrcontentProxyPort;
  }

  if (opt_jcrcontentProxyUser !== undefined) {
    queryParameters['jcr:content/proxyUser'] = opt_jcrcontentProxyUser;
  }

  if (opt_jcrcontentQueueBatchMaxSize !== undefined) {
    queryParameters['jcr:content/queueBatchMaxSize'] = opt_jcrcontentQueueBatchMaxSize;
  }

  if (opt_jcrcontentQueueBatchMode !== undefined) {
    queryParameters['jcr:content/queueBatchMode'] = opt_jcrcontentQueueBatchMode;
  }

  if (opt_jcrcontentQueueBatchWaitTime !== undefined) {
    queryParameters['jcr:content/queueBatchWaitTime'] = opt_jcrcontentQueueBatchWaitTime;
  }

  if (opt_jcrcontentRetryDelay !== undefined) {
    queryParameters['jcr:content/retryDelay'] = opt_jcrcontentRetryDelay;
  }

  if (opt_jcrcontentReverseReplication !== undefined) {
    queryParameters['jcr:content/reverseReplication'] = opt_jcrcontentReverseReplication;
  }

  if (opt_jcrcontentSerializationType !== undefined) {
    queryParameters['jcr:content/serializationType'] = opt_jcrcontentSerializationType;
  }

  if (opt_jcrcontentSlingresourceType !== undefined) {
    queryParameters['jcr:content/sling:resourceType'] = opt_jcrcontentSlingresourceType;
  }

  if (opt_jcrcontentSsl !== undefined) {
    queryParameters['jcr:content/ssl'] = opt_jcrcontentSsl;
  }

  if (opt_jcrcontentTransportNTLMDomain !== undefined) {
    queryParameters['jcr:content/transportNTLMDomain'] = opt_jcrcontentTransportNTLMDomain;
  }

  if (opt_jcrcontentTransportNTLMHost !== undefined) {
    queryParameters['jcr:content/transportNTLMHost'] = opt_jcrcontentTransportNTLMHost;
  }

  if (opt_jcrcontentTransportPassword !== undefined) {
    queryParameters['jcr:content/transportPassword'] = opt_jcrcontentTransportPassword;
  }

  if (opt_jcrcontentTransportUri !== undefined) {
    queryParameters['jcr:content/transportUri'] = opt_jcrcontentTransportUri;
  }

  if (opt_jcrcontentTransportUser !== undefined) {
    queryParameters['jcr:content/transportUser'] = opt_jcrcontentTransportUser;
  }

  if (opt_jcrcontentTriggerDistribute !== undefined) {
    queryParameters['jcr:content/triggerDistribute'] = opt_jcrcontentTriggerDistribute;
  }

  if (opt_jcrcontentTriggerModified !== undefined) {
    queryParameters['jcr:content/triggerModified'] = opt_jcrcontentTriggerModified;
  }

  if (opt_jcrcontentTriggerOnOffTime !== undefined) {
    queryParameters['jcr:content/triggerOnOffTime'] = opt_jcrcontentTriggerOnOffTime;
  }

  if (opt_jcrcontentTriggerReceive !== undefined) {
    queryParameters['jcr:content/triggerReceive'] = opt_jcrcontentTriggerReceive;
  }

  if (opt_jcrcontentTriggerSpecific !== undefined) {
    queryParameters['jcr:content/triggerSpecific'] = opt_jcrcontentTriggerSpecific;
  }

  if (opt_jcrcontentUserId !== undefined) {
    queryParameters['jcr:content/userId'] = opt_jcrcontentUserId;
  }

  if (opt_jcrprimaryType !== undefined) {
    queryParameters['jcr:primaryType'] = opt_jcrprimaryType;
  }

  if (opt_operation !== undefined) {
    queryParameters[':operation'] = opt_operation;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} intermediatePath 
 * @param {!string} authorizableId 
 * @param {!string=} opt_operation 
 * @param {!string=} opt_currentPassword 
 * @param {!string=} opt_newPassword 
 * @param {!string=} opt_rePassword 
 * @param {!string=} opt_keyPassword 
 * @param {!string=} opt_keyStorePass 
 * @param {!string=} opt_alias 
 * @param {!string=} opt_newAlias 
 * @param {!string=} opt_removeAlias 
 * @param {!Object=} opt_certChain 
 * @param {!Object=} opt_pk 
 * @param {!Object=} opt_keyStore 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.KeystoreInfo>}
 */
API.Client.SlingApi.prototype.postAuthorizableKeystore = function(intermediatePath, authorizableId, opt_operation, opt_currentPassword, opt_newPassword, opt_rePassword, opt_keyPassword, opt_keyStorePass, opt_alias, opt_newAlias, opt_removeAlias, opt_certChain, opt_pk, opt_keyStore, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/{intermediatePath}/{authorizableId}.ks.html'
      .replace('{' + 'intermediatePath' + '}', String(intermediatePath))
      .replace('{' + 'authorizableId' + '}', String(authorizableId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'intermediatePath' is set
  if (!intermediatePath) {
    throw new Error('Missing required parameter intermediatePath when calling postAuthorizableKeystore');
  }
  // verify required parameter 'authorizableId' is set
  if (!authorizableId) {
    throw new Error('Missing required parameter authorizableId when calling postAuthorizableKeystore');
  }
  if (opt_operation !== undefined) {
    queryParameters[':operation'] = opt_operation;
  }

  if (opt_currentPassword !== undefined) {
    queryParameters['currentPassword'] = opt_currentPassword;
  }

  if (opt_newPassword !== undefined) {
    queryParameters['newPassword'] = opt_newPassword;
  }

  if (opt_rePassword !== undefined) {
    queryParameters['rePassword'] = opt_rePassword;
  }

  if (opt_keyPassword !== undefined) {
    queryParameters['keyPassword'] = opt_keyPassword;
  }

  if (opt_keyStorePass !== undefined) {
    queryParameters['keyStorePass'] = opt_keyStorePass;
  }

  if (opt_alias !== undefined) {
    queryParameters['alias'] = opt_alias;
  }

  if (opt_newAlias !== undefined) {
    queryParameters['newAlias'] = opt_newAlias;
  }

  if (opt_removeAlias !== undefined) {
    queryParameters['removeAlias'] = opt_removeAlias;
  }

  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['cert-chain'] = opt_certChain;

  formParams['pk'] = opt_pk;

  formParams['keyStore'] = opt_keyStore;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} authorizableId 
 * @param {!string} intermediatePath 
 * @param {!string=} opt_createUser 
 * @param {!string=} opt_createGroup 
 * @param {!string=} opt_reppassword 
 * @param {!string=} opt_profileGivenName 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.SlingApi.prototype.postAuthorizables = function(authorizableId, intermediatePath, opt_createUser, opt_createGroup, opt_reppassword, opt_profileGivenName, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/libs/granite/security/post/authorizables';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'authorizableId' is set
  if (!authorizableId) {
    throw new Error('Missing required parameter authorizableId when calling postAuthorizables');
  }
  // verify required parameter 'intermediatePath' is set
  if (!intermediatePath) {
    throw new Error('Missing required parameter intermediatePath when calling postAuthorizables');
  }
  if (authorizableId !== undefined) {
    queryParameters['authorizableId'] = authorizableId;
  }

  if (intermediatePath !== undefined) {
    queryParameters['intermediatePath'] = intermediatePath;
  }

  if (opt_createUser !== undefined) {
    queryParameters['createUser'] = opt_createUser;
  }

  if (opt_createGroup !== undefined) {
    queryParameters['createGroup'] = opt_createGroup;
  }

  if (opt_reppassword !== undefined) {
    queryParameters['rep:password'] = opt_reppassword;
  }

  if (opt_profileGivenName !== undefined) {
    queryParameters['profile/givenName'] = opt_profileGivenName;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string=} opt_keyStorePassword 
 * @param {!string=} opt_keyStorePasswordTypeHint 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_serviceRankingTypeHint 
 * @param {!boolean=} opt_idpHttpRedirect 
 * @param {!string=} opt_idpHttpRedirectTypeHint 
 * @param {!boolean=} opt_createUser 
 * @param {!string=} opt_createUserTypeHint 
 * @param {!string=} opt_defaultRedirectUrl 
 * @param {!string=} opt_defaultRedirectUrlTypeHint 
 * @param {!string=} opt_userIDAttribute 
 * @param {!string=} opt_userIDAttributeTypeHint 
 * @param {!Array<!string>=} opt_defaultGroups 
 * @param {!string=} opt_defaultGroupsTypeHint 
 * @param {!string=} opt_idpCertAlias 
 * @param {!string=} opt_idpCertAliasTypeHint 
 * @param {!boolean=} opt_addGroupMemberships 
 * @param {!string=} opt_addGroupMembershipsTypeHint 
 * @param {!Array<!string>=} opt_path 
 * @param {!string=} opt_pathTypeHint 
 * @param {!Array<!string>=} opt_synchronizeAttributes 
 * @param {!string=} opt_synchronizeAttributesTypeHint 
 * @param {!number=} opt_clockTolerance 
 * @param {!string=} opt_clockToleranceTypeHint 
 * @param {!string=} opt_groupMembershipAttribute 
 * @param {!string=} opt_groupMembershipAttributeTypeHint 
 * @param {!string=} opt_idpUrl 
 * @param {!string=} opt_idpUrlTypeHint 
 * @param {!string=} opt_logoutUrl 
 * @param {!string=} opt_logoutUrlTypeHint 
 * @param {!string=} opt_serviceProviderEntityId 
 * @param {!string=} opt_serviceProviderEntityIdTypeHint 
 * @param {!string=} opt_assertionConsumerServiceURL 
 * @param {!string=} opt_assertionConsumerServiceURLTypeHint 
 * @param {!boolean=} opt_handleLogout 
 * @param {!string=} opt_handleLogoutTypeHint 
 * @param {!string=} opt_spPrivateKeyAlias 
 * @param {!string=} opt_spPrivateKeyAliasTypeHint 
 * @param {!boolean=} opt_useEncryption 
 * @param {!string=} opt_useEncryptionTypeHint 
 * @param {!string=} opt_nameIdFormat 
 * @param {!string=} opt_nameIdFormatTypeHint 
 * @param {!string=} opt_digestMethod 
 * @param {!string=} opt_digestMethodTypeHint 
 * @param {!string=} opt_signatureMethod 
 * @param {!string=} opt_signatureMethodTypeHint 
 * @param {!string=} opt_userIntermediatePath 
 * @param {!string=} opt_userIntermediatePathTypeHint 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SlingApi.prototype.postConfigAdobeGraniteSamlAuthenticationHandler = function(opt_keyStorePassword, opt_keyStorePasswordTypeHint, opt_serviceRanking, opt_serviceRankingTypeHint, opt_idpHttpRedirect, opt_idpHttpRedirectTypeHint, opt_createUser, opt_createUserTypeHint, opt_defaultRedirectUrl, opt_defaultRedirectUrlTypeHint, opt_userIDAttribute, opt_userIDAttributeTypeHint, opt_defaultGroups, opt_defaultGroupsTypeHint, opt_idpCertAlias, opt_idpCertAliasTypeHint, opt_addGroupMemberships, opt_addGroupMembershipsTypeHint, opt_path, opt_pathTypeHint, opt_synchronizeAttributes, opt_synchronizeAttributesTypeHint, opt_clockTolerance, opt_clockToleranceTypeHint, opt_groupMembershipAttribute, opt_groupMembershipAttributeTypeHint, opt_idpUrl, opt_idpUrlTypeHint, opt_logoutUrl, opt_logoutUrlTypeHint, opt_serviceProviderEntityId, opt_serviceProviderEntityIdTypeHint, opt_assertionConsumerServiceURL, opt_assertionConsumerServiceURLTypeHint, opt_handleLogout, opt_handleLogoutTypeHint, opt_spPrivateKeyAlias, opt_spPrivateKeyAliasTypeHint, opt_useEncryption, opt_useEncryptionTypeHint, opt_nameIdFormat, opt_nameIdFormatTypeHint, opt_digestMethod, opt_digestMethodTypeHint, opt_signatureMethod, opt_signatureMethodTypeHint, opt_userIntermediatePath, opt_userIntermediatePathTypeHint, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_keyStorePassword !== undefined) {
    queryParameters['keyStorePassword'] = opt_keyStorePassword;
  }

  if (opt_keyStorePasswordTypeHint !== undefined) {
    queryParameters['keyStorePassword@TypeHint'] = opt_keyStorePasswordTypeHint;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_serviceRankingTypeHint !== undefined) {
    queryParameters['service.ranking@TypeHint'] = opt_serviceRankingTypeHint;
  }

  if (opt_idpHttpRedirect !== undefined) {
    queryParameters['idpHttpRedirect'] = opt_idpHttpRedirect;
  }

  if (opt_idpHttpRedirectTypeHint !== undefined) {
    queryParameters['idpHttpRedirect@TypeHint'] = opt_idpHttpRedirectTypeHint;
  }

  if (opt_createUser !== undefined) {
    queryParameters['createUser'] = opt_createUser;
  }

  if (opt_createUserTypeHint !== undefined) {
    queryParameters['createUser@TypeHint'] = opt_createUserTypeHint;
  }

  if (opt_defaultRedirectUrl !== undefined) {
    queryParameters['defaultRedirectUrl'] = opt_defaultRedirectUrl;
  }

  if (opt_defaultRedirectUrlTypeHint !== undefined) {
    queryParameters['defaultRedirectUrl@TypeHint'] = opt_defaultRedirectUrlTypeHint;
  }

  if (opt_userIDAttribute !== undefined) {
    queryParameters['userIDAttribute'] = opt_userIDAttribute;
  }

  if (opt_userIDAttributeTypeHint !== undefined) {
    queryParameters['userIDAttribute@TypeHint'] = opt_userIDAttributeTypeHint;
  }

  if (opt_defaultGroups !== undefined) {
    queryParameters['defaultGroups'] = opt_defaultGroups;
  }

  if (opt_defaultGroupsTypeHint !== undefined) {
    queryParameters['defaultGroups@TypeHint'] = opt_defaultGroupsTypeHint;
  }

  if (opt_idpCertAlias !== undefined) {
    queryParameters['idpCertAlias'] = opt_idpCertAlias;
  }

  if (opt_idpCertAliasTypeHint !== undefined) {
    queryParameters['idpCertAlias@TypeHint'] = opt_idpCertAliasTypeHint;
  }

  if (opt_addGroupMemberships !== undefined) {
    queryParameters['addGroupMemberships'] = opt_addGroupMemberships;
  }

  if (opt_addGroupMembershipsTypeHint !== undefined) {
    queryParameters['addGroupMemberships@TypeHint'] = opt_addGroupMembershipsTypeHint;
  }

  if (opt_path !== undefined) {
    queryParameters['path'] = opt_path;
  }

  if (opt_pathTypeHint !== undefined) {
    queryParameters['path@TypeHint'] = opt_pathTypeHint;
  }

  if (opt_synchronizeAttributes !== undefined) {
    queryParameters['synchronizeAttributes'] = opt_synchronizeAttributes;
  }

  if (opt_synchronizeAttributesTypeHint !== undefined) {
    queryParameters['synchronizeAttributes@TypeHint'] = opt_synchronizeAttributesTypeHint;
  }

  if (opt_clockTolerance !== undefined) {
    queryParameters['clockTolerance'] = opt_clockTolerance;
  }

  if (opt_clockToleranceTypeHint !== undefined) {
    queryParameters['clockTolerance@TypeHint'] = opt_clockToleranceTypeHint;
  }

  if (opt_groupMembershipAttribute !== undefined) {
    queryParameters['groupMembershipAttribute'] = opt_groupMembershipAttribute;
  }

  if (opt_groupMembershipAttributeTypeHint !== undefined) {
    queryParameters['groupMembershipAttribute@TypeHint'] = opt_groupMembershipAttributeTypeHint;
  }

  if (opt_idpUrl !== undefined) {
    queryParameters['idpUrl'] = opt_idpUrl;
  }

  if (opt_idpUrlTypeHint !== undefined) {
    queryParameters['idpUrl@TypeHint'] = opt_idpUrlTypeHint;
  }

  if (opt_logoutUrl !== undefined) {
    queryParameters['logoutUrl'] = opt_logoutUrl;
  }

  if (opt_logoutUrlTypeHint !== undefined) {
    queryParameters['logoutUrl@TypeHint'] = opt_logoutUrlTypeHint;
  }

  if (opt_serviceProviderEntityId !== undefined) {
    queryParameters['serviceProviderEntityId'] = opt_serviceProviderEntityId;
  }

  if (opt_serviceProviderEntityIdTypeHint !== undefined) {
    queryParameters['serviceProviderEntityId@TypeHint'] = opt_serviceProviderEntityIdTypeHint;
  }

  if (opt_assertionConsumerServiceURL !== undefined) {
    queryParameters['assertionConsumerServiceURL'] = opt_assertionConsumerServiceURL;
  }

  if (opt_assertionConsumerServiceURLTypeHint !== undefined) {
    queryParameters['assertionConsumerServiceURL@TypeHint'] = opt_assertionConsumerServiceURLTypeHint;
  }

  if (opt_handleLogout !== undefined) {
    queryParameters['handleLogout'] = opt_handleLogout;
  }

  if (opt_handleLogoutTypeHint !== undefined) {
    queryParameters['handleLogout@TypeHint'] = opt_handleLogoutTypeHint;
  }

  if (opt_spPrivateKeyAlias !== undefined) {
    queryParameters['spPrivateKeyAlias'] = opt_spPrivateKeyAlias;
  }

  if (opt_spPrivateKeyAliasTypeHint !== undefined) {
    queryParameters['spPrivateKeyAlias@TypeHint'] = opt_spPrivateKeyAliasTypeHint;
  }

  if (opt_useEncryption !== undefined) {
    queryParameters['useEncryption'] = opt_useEncryption;
  }

  if (opt_useEncryptionTypeHint !== undefined) {
    queryParameters['useEncryption@TypeHint'] = opt_useEncryptionTypeHint;
  }

  if (opt_nameIdFormat !== undefined) {
    queryParameters['nameIdFormat'] = opt_nameIdFormat;
  }

  if (opt_nameIdFormatTypeHint !== undefined) {
    queryParameters['nameIdFormat@TypeHint'] = opt_nameIdFormatTypeHint;
  }

  if (opt_digestMethod !== undefined) {
    queryParameters['digestMethod'] = opt_digestMethod;
  }

  if (opt_digestMethodTypeHint !== undefined) {
    queryParameters['digestMethod@TypeHint'] = opt_digestMethodTypeHint;
  }

  if (opt_signatureMethod !== undefined) {
    queryParameters['signatureMethod'] = opt_signatureMethod;
  }

  if (opt_signatureMethodTypeHint !== undefined) {
    queryParameters['signatureMethod@TypeHint'] = opt_signatureMethodTypeHint;
  }

  if (opt_userIntermediatePath !== undefined) {
    queryParameters['userIntermediatePath'] = opt_userIntermediatePath;
  }

  if (opt_userIntermediatePathTypeHint !== undefined) {
    queryParameters['userIntermediatePath@TypeHint'] = opt_userIntermediatePathTypeHint;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_orgApacheFelixHttpsNio 
 * @param {!string=} opt_orgApacheFelixHttpsNioTypeHint 
 * @param {!string=} opt_orgApacheFelixHttpsKeystore 
 * @param {!string=} opt_orgApacheFelixHttpsKeystoreTypeHint 
 * @param {!string=} opt_orgApacheFelixHttpsKeystorePassword 
 * @param {!string=} opt_orgApacheFelixHttpsKeystorePasswordTypeHint 
 * @param {!string=} opt_orgApacheFelixHttpsKeystoreKey 
 * @param {!string=} opt_orgApacheFelixHttpsKeystoreKeyTypeHint 
 * @param {!string=} opt_orgApacheFelixHttpsKeystoreKeyPassword 
 * @param {!string=} opt_orgApacheFelixHttpsKeystoreKeyPasswordTypeHint 
 * @param {!string=} opt_orgApacheFelixHttpsTruststore 
 * @param {!string=} opt_orgApacheFelixHttpsTruststoreTypeHint 
 * @param {!string=} opt_orgApacheFelixHttpsTruststorePassword 
 * @param {!string=} opt_orgApacheFelixHttpsTruststorePasswordTypeHint 
 * @param {!string=} opt_orgApacheFelixHttpsClientcertificate 
 * @param {!string=} opt_orgApacheFelixHttpsClientcertificateTypeHint 
 * @param {!boolean=} opt_orgApacheFelixHttpsEnable 
 * @param {!string=} opt_orgApacheFelixHttpsEnableTypeHint 
 * @param {!string=} opt_orgOsgiServiceHttpPortSecure 
 * @param {!string=} opt_orgOsgiServiceHttpPortSecureTypeHint 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SlingApi.prototype.postConfigApacheFelixJettyBasedHttpService = function(opt_orgApacheFelixHttpsNio, opt_orgApacheFelixHttpsNioTypeHint, opt_orgApacheFelixHttpsKeystore, opt_orgApacheFelixHttpsKeystoreTypeHint, opt_orgApacheFelixHttpsKeystorePassword, opt_orgApacheFelixHttpsKeystorePasswordTypeHint, opt_orgApacheFelixHttpsKeystoreKey, opt_orgApacheFelixHttpsKeystoreKeyTypeHint, opt_orgApacheFelixHttpsKeystoreKeyPassword, opt_orgApacheFelixHttpsKeystoreKeyPasswordTypeHint, opt_orgApacheFelixHttpsTruststore, opt_orgApacheFelixHttpsTruststoreTypeHint, opt_orgApacheFelixHttpsTruststorePassword, opt_orgApacheFelixHttpsTruststorePasswordTypeHint, opt_orgApacheFelixHttpsClientcertificate, opt_orgApacheFelixHttpsClientcertificateTypeHint, opt_orgApacheFelixHttpsEnable, opt_orgApacheFelixHttpsEnableTypeHint, opt_orgOsgiServiceHttpPortSecure, opt_orgOsgiServiceHttpPortSecureTypeHint, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/apps/system/config/org.apache.felix.http';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_orgApacheFelixHttpsNio !== undefined) {
    queryParameters['org.apache.felix.https.nio'] = opt_orgApacheFelixHttpsNio;
  }

  if (opt_orgApacheFelixHttpsNioTypeHint !== undefined) {
    queryParameters['org.apache.felix.https.nio@TypeHint'] = opt_orgApacheFelixHttpsNioTypeHint;
  }

  if (opt_orgApacheFelixHttpsKeystore !== undefined) {
    queryParameters['org.apache.felix.https.keystore'] = opt_orgApacheFelixHttpsKeystore;
  }

  if (opt_orgApacheFelixHttpsKeystoreTypeHint !== undefined) {
    queryParameters['org.apache.felix.https.keystore@TypeHint'] = opt_orgApacheFelixHttpsKeystoreTypeHint;
  }

  if (opt_orgApacheFelixHttpsKeystorePassword !== undefined) {
    queryParameters['org.apache.felix.https.keystore.password'] = opt_orgApacheFelixHttpsKeystorePassword;
  }

  if (opt_orgApacheFelixHttpsKeystorePasswordTypeHint !== undefined) {
    queryParameters['org.apache.felix.https.keystore.password@TypeHint'] = opt_orgApacheFelixHttpsKeystorePasswordTypeHint;
  }

  if (opt_orgApacheFelixHttpsKeystoreKey !== undefined) {
    queryParameters['org.apache.felix.https.keystore.key'] = opt_orgApacheFelixHttpsKeystoreKey;
  }

  if (opt_orgApacheFelixHttpsKeystoreKeyTypeHint !== undefined) {
    queryParameters['org.apache.felix.https.keystore.key@TypeHint'] = opt_orgApacheFelixHttpsKeystoreKeyTypeHint;
  }

  if (opt_orgApacheFelixHttpsKeystoreKeyPassword !== undefined) {
    queryParameters['org.apache.felix.https.keystore.key.password'] = opt_orgApacheFelixHttpsKeystoreKeyPassword;
  }

  if (opt_orgApacheFelixHttpsKeystoreKeyPasswordTypeHint !== undefined) {
    queryParameters['org.apache.felix.https.keystore.key.password@TypeHint'] = opt_orgApacheFelixHttpsKeystoreKeyPasswordTypeHint;
  }

  if (opt_orgApacheFelixHttpsTruststore !== undefined) {
    queryParameters['org.apache.felix.https.truststore'] = opt_orgApacheFelixHttpsTruststore;
  }

  if (opt_orgApacheFelixHttpsTruststoreTypeHint !== undefined) {
    queryParameters['org.apache.felix.https.truststore@TypeHint'] = opt_orgApacheFelixHttpsTruststoreTypeHint;
  }

  if (opt_orgApacheFelixHttpsTruststorePassword !== undefined) {
    queryParameters['org.apache.felix.https.truststore.password'] = opt_orgApacheFelixHttpsTruststorePassword;
  }

  if (opt_orgApacheFelixHttpsTruststorePasswordTypeHint !== undefined) {
    queryParameters['org.apache.felix.https.truststore.password@TypeHint'] = opt_orgApacheFelixHttpsTruststorePasswordTypeHint;
  }

  if (opt_orgApacheFelixHttpsClientcertificate !== undefined) {
    queryParameters['org.apache.felix.https.clientcertificate'] = opt_orgApacheFelixHttpsClientcertificate;
  }

  if (opt_orgApacheFelixHttpsClientcertificateTypeHint !== undefined) {
    queryParameters['org.apache.felix.https.clientcertificate@TypeHint'] = opt_orgApacheFelixHttpsClientcertificateTypeHint;
  }

  if (opt_orgApacheFelixHttpsEnable !== undefined) {
    queryParameters['org.apache.felix.https.enable'] = opt_orgApacheFelixHttpsEnable;
  }

  if (opt_orgApacheFelixHttpsEnableTypeHint !== undefined) {
    queryParameters['org.apache.felix.https.enable@TypeHint'] = opt_orgApacheFelixHttpsEnableTypeHint;
  }

  if (opt_orgOsgiServiceHttpPortSecure !== undefined) {
    queryParameters['org.osgi.service.http.port.secure'] = opt_orgOsgiServiceHttpPortSecure;
  }

  if (opt_orgOsgiServiceHttpPortSecureTypeHint !== undefined) {
    queryParameters['org.osgi.service.http.port.secure@TypeHint'] = opt_orgOsgiServiceHttpPortSecureTypeHint;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string=} opt_proxyHost 
 * @param {!string=} opt_proxyHostTypeHint 
 * @param {!number=} opt_proxyPort 
 * @param {!string=} opt_proxyPortTypeHint 
 * @param {!Array<!string>=} opt_proxyExceptions 
 * @param {!string=} opt_proxyExceptionsTypeHint 
 * @param {!boolean=} opt_proxyEnabled 
 * @param {!string=} opt_proxyEnabledTypeHint 
 * @param {!string=} opt_proxyUser 
 * @param {!string=} opt_proxyUserTypeHint 
 * @param {!string=} opt_proxyPassword 
 * @param {!string=} opt_proxyPasswordTypeHint 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SlingApi.prototype.postConfigApacheHttpComponentsProxyConfiguration = function(opt_proxyHost, opt_proxyHostTypeHint, opt_proxyPort, opt_proxyPortTypeHint, opt_proxyExceptions, opt_proxyExceptionsTypeHint, opt_proxyEnabled, opt_proxyEnabledTypeHint, opt_proxyUser, opt_proxyUserTypeHint, opt_proxyPassword, opt_proxyPasswordTypeHint, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/apps/system/config/org.apache.http.proxyconfigurator.config';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_proxyHost !== undefined) {
    queryParameters['proxy.host'] = opt_proxyHost;
  }

  if (opt_proxyHostTypeHint !== undefined) {
    queryParameters['proxy.host@TypeHint'] = opt_proxyHostTypeHint;
  }

  if (opt_proxyPort !== undefined) {
    queryParameters['proxy.port'] = opt_proxyPort;
  }

  if (opt_proxyPortTypeHint !== undefined) {
    queryParameters['proxy.port@TypeHint'] = opt_proxyPortTypeHint;
  }

  if (opt_proxyExceptions !== undefined) {
    queryParameters['proxy.exceptions'] = opt_proxyExceptions;
  }

  if (opt_proxyExceptionsTypeHint !== undefined) {
    queryParameters['proxy.exceptions@TypeHint'] = opt_proxyExceptionsTypeHint;
  }

  if (opt_proxyEnabled !== undefined) {
    queryParameters['proxy.enabled'] = opt_proxyEnabled;
  }

  if (opt_proxyEnabledTypeHint !== undefined) {
    queryParameters['proxy.enabled@TypeHint'] = opt_proxyEnabledTypeHint;
  }

  if (opt_proxyUser !== undefined) {
    queryParameters['proxy.user'] = opt_proxyUser;
  }

  if (opt_proxyUserTypeHint !== undefined) {
    queryParameters['proxy.user@TypeHint'] = opt_proxyUserTypeHint;
  }

  if (opt_proxyPassword !== undefined) {
    queryParameters['proxy.password'] = opt_proxyPassword;
  }

  if (opt_proxyPasswordTypeHint !== undefined) {
    queryParameters['proxy.password@TypeHint'] = opt_proxyPasswordTypeHint;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string=} opt_alias 
 * @param {!string=} opt_aliasTypeHint 
 * @param {!boolean=} opt_davCreateAbsoluteUri 
 * @param {!string=} opt_davCreateAbsoluteUriTypeHint 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SlingApi.prototype.postConfigApacheSlingDavExServlet = function(opt_alias, opt_aliasTypeHint, opt_davCreateAbsoluteUri, opt_davCreateAbsoluteUriTypeHint, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_alias !== undefined) {
    queryParameters['alias'] = opt_alias;
  }

  if (opt_aliasTypeHint !== undefined) {
    queryParameters['alias@TypeHint'] = opt_aliasTypeHint;
  }

  if (opt_davCreateAbsoluteUri !== undefined) {
    queryParameters['dav.create-absolute-uri'] = opt_davCreateAbsoluteUri;
  }

  if (opt_davCreateAbsoluteUriTypeHint !== undefined) {
    queryParameters['dav.create-absolute-uri@TypeHint'] = opt_davCreateAbsoluteUriTypeHint;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string=} opt_jsonMaximumresults 
 * @param {!string=} opt_jsonMaximumresultsTypeHint 
 * @param {!boolean=} opt_enableHtml 
 * @param {!string=} opt_enableHtmlTypeHint 
 * @param {!boolean=} opt_enableTxt 
 * @param {!string=} opt_enableTxtTypeHint 
 * @param {!boolean=} opt_enableXml 
 * @param {!string=} opt_enableXmlTypeHint 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SlingApi.prototype.postConfigApacheSlingGetServlet = function(opt_jsonMaximumresults, opt_jsonMaximumresultsTypeHint, opt_enableHtml, opt_enableHtmlTypeHint, opt_enableTxt, opt_enableTxtTypeHint, opt_enableXml, opt_enableXmlTypeHint, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_jsonMaximumresults !== undefined) {
    queryParameters['json.maximumresults'] = opt_jsonMaximumresults;
  }

  if (opt_jsonMaximumresultsTypeHint !== undefined) {
    queryParameters['json.maximumresults@TypeHint'] = opt_jsonMaximumresultsTypeHint;
  }

  if (opt_enableHtml !== undefined) {
    queryParameters['enable.html'] = opt_enableHtml;
  }

  if (opt_enableHtmlTypeHint !== undefined) {
    queryParameters['enable.html@TypeHint'] = opt_enableHtmlTypeHint;
  }

  if (opt_enableTxt !== undefined) {
    queryParameters['enable.txt'] = opt_enableTxt;
  }

  if (opt_enableTxtTypeHint !== undefined) {
    queryParameters['enable.txt@TypeHint'] = opt_enableTxtTypeHint;
  }

  if (opt_enableXml !== undefined) {
    queryParameters['enable.xml'] = opt_enableXml;
  }

  if (opt_enableXmlTypeHint !== undefined) {
    queryParameters['enable.xml@TypeHint'] = opt_enableXmlTypeHint;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_allowEmpty 
 * @param {!string=} opt_allowEmptyTypeHint 
 * @param {!string=} opt_allowHosts 
 * @param {!string=} opt_allowHostsTypeHint 
 * @param {!string=} opt_allowHostsRegexp 
 * @param {!string=} opt_allowHostsRegexpTypeHint 
 * @param {!string=} opt_filterMethods 
 * @param {!string=} opt_filterMethodsTypeHint 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SlingApi.prototype.postConfigApacheSlingReferrerFilter = function(opt_allowEmpty, opt_allowEmptyTypeHint, opt_allowHosts, opt_allowHostsTypeHint, opt_allowHostsRegexp, opt_allowHostsRegexpTypeHint, opt_filterMethods, opt_filterMethodsTypeHint, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/apps/system/config/org.apache.sling.security.impl.ReferrerFilter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_allowEmpty !== undefined) {
    queryParameters['allow.empty'] = opt_allowEmpty;
  }

  if (opt_allowEmptyTypeHint !== undefined) {
    queryParameters['allow.empty@TypeHint'] = opt_allowEmptyTypeHint;
  }

  if (opt_allowHosts !== undefined) {
    queryParameters['allow.hosts'] = opt_allowHosts;
  }

  if (opt_allowHostsTypeHint !== undefined) {
    queryParameters['allow.hosts@TypeHint'] = opt_allowHostsTypeHint;
  }

  if (opt_allowHostsRegexp !== undefined) {
    queryParameters['allow.hosts.regexp'] = opt_allowHostsRegexp;
  }

  if (opt_allowHostsRegexpTypeHint !== undefined) {
    queryParameters['allow.hosts.regexp@TypeHint'] = opt_allowHostsRegexpTypeHint;
  }

  if (opt_filterMethods !== undefined) {
    queryParameters['filter.methods'] = opt_filterMethods;
  }

  if (opt_filterMethodsTypeHint !== undefined) {
    queryParameters['filter.methods@TypeHint'] = opt_filterMethodsTypeHint;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} configNodeName 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SlingApi.prototype.postConfigProperty = function(configNodeName, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/apps/system/config/{configNodeName}'
      .replace('{' + 'configNodeName' + '}', String(configNodeName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'configNodeName' is set
  if (!configNodeName) {
    throw new Error('Missing required parameter configNodeName when calling postConfigProperty');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} path 
 * @param {!string} name 
 * @param {!string=} opt_operation 
 * @param {!string=} opt_deleteAuthorizable 
 * @param {!Object=} opt_file 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SlingApi.prototype.postNode = function(path, name, opt_operation, opt_deleteAuthorizable, opt_file, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/{path}/{name}'
      .replace('{' + 'path' + '}', String(path))
      .replace('{' + 'name' + '}', String(name));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'path' is set
  if (!path) {
    throw new Error('Missing required parameter path when calling postNode');
  }
  // verify required parameter 'name' is set
  if (!name) {
    throw new Error('Missing required parameter name when calling postNode');
  }
  if (opt_operation !== undefined) {
    queryParameters[':operation'] = opt_operation;
  }

  if (opt_deleteAuthorizable !== undefined) {
    queryParameters['deleteAuthorizable'] = opt_deleteAuthorizable;
  }

  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['file'] = opt_file;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} path 
 * @param {!string} name 
 * @param {!string=} opt_addMembers 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SlingApi.prototype.postNodeRw = function(path, name, opt_addMembers, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/{path}/{name}.rw.html'
      .replace('{' + 'path' + '}', String(path))
      .replace('{' + 'name' + '}', String(name));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'path' is set
  if (!path) {
    throw new Error('Missing required parameter path when calling postNodeRw');
  }
  // verify required parameter 'name' is set
  if (!name) {
    throw new Error('Missing required parameter name when calling postNodeRw');
  }
  if (opt_addMembers !== undefined) {
    queryParameters['addMembers'] = opt_addMembers;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} path 
 * @param {!string} jcrprimaryType 
 * @param {!string} name 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SlingApi.prototype.postPath = function(path, jcrprimaryType, name, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/{path}/'
      .replace('{' + 'path' + '}', String(path));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'path' is set
  if (!path) {
    throw new Error('Missing required parameter path when calling postPath');
  }
  // verify required parameter 'jcrprimaryType' is set
  if (!jcrprimaryType) {
    throw new Error('Missing required parameter jcrprimaryType when calling postPath');
  }
  // verify required parameter 'name' is set
  if (!name) {
    throw new Error('Missing required parameter name when calling postPath');
  }
  if (jcrprimaryType !== undefined) {
    queryParameters['jcr:primaryType'] = jcrprimaryType;
  }

  if (name !== undefined) {
    queryParameters[':name'] = name;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} path 
 * @param {!number} pLimit 
 * @param {!string} _1property 
 * @param {!string} _1propertyValue 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.SlingApi.prototype.postQuery = function(path, pLimit, _1property, _1propertyValue, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/bin/querybuilder.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'path' is set
  if (!path) {
    throw new Error('Missing required parameter path when calling postQuery');
  }
  // verify required parameter 'pLimit' is set
  if (!pLimit) {
    throw new Error('Missing required parameter pLimit when calling postQuery');
  }
  // verify required parameter '_1property' is set
  if (!_1property) {
    throw new Error('Missing required parameter _1property when calling postQuery');
  }
  // verify required parameter '_1propertyValue' is set
  if (!_1propertyValue) {
    throw new Error('Missing required parameter _1propertyValue when calling postQuery');
  }
  if (path !== undefined) {
    queryParameters['path'] = path;
  }

  if (pLimit !== undefined) {
    queryParameters['p.limit'] = pLimit;
  }

  if (_1property !== undefined) {
    queryParameters['1_property'] = _1property;
  }

  if (_1propertyValue !== undefined) {
    queryParameters['1_property.value'] = _1propertyValue;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean} ignoredeactivated 
 * @param {!boolean} onlymodified 
 * @param {!string} path 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SlingApi.prototype.postTreeActivation = function(ignoredeactivated, onlymodified, path, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/etc/replication/treeactivation.html';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'ignoredeactivated' is set
  if (!ignoredeactivated) {
    throw new Error('Missing required parameter ignoredeactivated when calling postTreeActivation');
  }
  // verify required parameter 'onlymodified' is set
  if (!onlymodified) {
    throw new Error('Missing required parameter onlymodified when calling postTreeActivation');
  }
  // verify required parameter 'path' is set
  if (!path) {
    throw new Error('Missing required parameter path when calling postTreeActivation');
  }
  if (ignoredeactivated !== undefined) {
    queryParameters['ignoredeactivated'] = ignoredeactivated;
  }

  if (onlymodified !== undefined) {
    queryParameters['onlymodified'] = onlymodified;
  }

  if (path !== undefined) {
    queryParameters['path'] = path;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string=} opt_operation 
 * @param {!string=} opt_newPassword 
 * @param {!string=} opt_rePassword 
 * @param {!string=} opt_keyStoreType 
 * @param {!string=} opt_removeAlias 
 * @param {!Object=} opt_certificate 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.SlingApi.prototype.postTruststore = function(opt_operation, opt_newPassword, opt_rePassword, opt_keyStoreType, opt_removeAlias, opt_certificate, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/libs/granite/security/post/truststore';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  if (opt_operation !== undefined) {
    queryParameters[':operation'] = opt_operation;
  }

  if (opt_newPassword !== undefined) {
    queryParameters['newPassword'] = opt_newPassword;
  }

  if (opt_rePassword !== undefined) {
    queryParameters['rePassword'] = opt_rePassword;
  }

  if (opt_keyStoreType !== undefined) {
    queryParameters['keyStoreType'] = opt_keyStoreType;
  }

  if (opt_removeAlias !== undefined) {
    queryParameters['removeAlias'] = opt_removeAlias;
  }

  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['certificate'] = opt_certificate;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!Object=} opt_truststoreP12 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.SlingApi.prototype.postTruststorePKCS12 = function(opt_truststoreP12, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/etc/truststore';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['truststore.p12'] = opt_truststoreP12;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
