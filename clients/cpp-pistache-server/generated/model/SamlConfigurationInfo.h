/**
* Adobe Experience Manager (AEM) API
* Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
*
* The version of the OpenAPI document: 3.5.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * SamlConfigurationInfo.h
 *
 * 
 */

#ifndef SamlConfigurationInfo_H_
#define SamlConfigurationInfo_H_


#include <string>
#include "SamlConfigurationProperties.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  SamlConfigurationInfo
{
public:
    SamlConfigurationInfo();
    virtual ~SamlConfigurationInfo() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const SamlConfigurationInfo& rhs) const;
    bool operator!=(const SamlConfigurationInfo& rhs) const;

    /////////////////////////////////////////////
    /// SamlConfigurationInfo members

    /// <summary>
    /// Persistent Identity (PID)
    /// </summary>
    std::string getPid() const;
    void setPid(std::string const& value);
    bool pidIsSet() const;
    void unsetPid();
    /// <summary>
    /// Title
    /// </summary>
    std::string getTitle() const;
    void setTitle(std::string const& value);
    bool titleIsSet() const;
    void unsetTitle();
    /// <summary>
    /// Title
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string const& value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// needed for configuration binding
    /// </summary>
    std::string getBundleLocation() const;
    void setBundleLocation(std::string const& value);
    bool bundleLocationIsSet() const;
    void unsetBundle_location();
    /// <summary>
    /// needed for configuraiton binding
    /// </summary>
    std::string getServiceLocation() const;
    void setServiceLocation(std::string const& value);
    bool serviceLocationIsSet() const;
    void unsetService_location();
    /// <summary>
    /// 
    /// </summary>
    SamlConfigurationProperties getProperties() const;
    void setProperties(SamlConfigurationProperties const& value);
    bool propertiesIsSet() const;
    void unsetProperties();

    friend void to_json(nlohmann::json& j, const SamlConfigurationInfo& o);
    friend void from_json(const nlohmann::json& j, SamlConfigurationInfo& o);
protected:
    std::string m_Pid;
    bool m_PidIsSet;
    std::string m_Title;
    bool m_TitleIsSet;
    std::string m_Description;
    bool m_DescriptionIsSet;
    std::string m_Bundle_location;
    bool m_Bundle_locationIsSet;
    std::string m_Service_location;
    bool m_Service_locationIsSet;
    SamlConfigurationProperties m_Properties;
    bool m_PropertiesIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* SamlConfigurationInfo_H_ */
