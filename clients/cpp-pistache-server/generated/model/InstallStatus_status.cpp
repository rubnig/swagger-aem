/**
* Adobe Experience Manager (AEM) API
* Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
*
* The version of the OpenAPI document: 3.5.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "InstallStatus_status.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

InstallStatus_status::InstallStatus_status()
{
    m_Finished = false;
    m_FinishedIsSet = false;
    m_ItemCount = 0;
    m_ItemCountIsSet = false;
    
}

void InstallStatus_status::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool InstallStatus_status::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool InstallStatus_status::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "InstallStatus_status" : pathPrefix;

            
    return success;
}

bool InstallStatus_status::operator==(const InstallStatus_status& rhs) const
{
    return
    
    
    
    ((!finishedIsSet() && !rhs.finishedIsSet()) || (finishedIsSet() && rhs.finishedIsSet() && isFinished() == rhs.isFinished())) &&
    
    
    ((!itemCountIsSet() && !rhs.itemCountIsSet()) || (itemCountIsSet() && rhs.itemCountIsSet() && getItemCount() == rhs.getItemCount()))
    
    ;
}

bool InstallStatus_status::operator!=(const InstallStatus_status& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const InstallStatus_status& o)
{
    j = nlohmann::json();
    if(o.finishedIsSet())
        j["finished"] = o.m_Finished;
    if(o.itemCountIsSet())
        j["itemCount"] = o.m_ItemCount;
    
}

void from_json(const nlohmann::json& j, InstallStatus_status& o)
{
    if(j.find("finished") != j.end())
    {
        j.at("finished").get_to(o.m_Finished);
        o.m_FinishedIsSet = true;
    } 
    if(j.find("itemCount") != j.end())
    {
        j.at("itemCount").get_to(o.m_ItemCount);
        o.m_ItemCountIsSet = true;
    } 
    
}

bool InstallStatus_status::isFinished() const
{
    return m_Finished;
}
void InstallStatus_status::setFinished(bool const value)
{
    m_Finished = value;
    m_FinishedIsSet = true;
}
bool InstallStatus_status::finishedIsSet() const
{
    return m_FinishedIsSet;
}
void InstallStatus_status::unsetFinished()
{
    m_FinishedIsSet = false;
}
int32_t InstallStatus_status::getItemCount() const
{
    return m_ItemCount;
}
void InstallStatus_status::setItemCount(int32_t const value)
{
    m_ItemCount = value;
    m_ItemCountIsSet = true;
}
bool InstallStatus_status::itemCountIsSet() const
{
    return m_ItemCountIsSet;
}
void InstallStatus_status::unsetItemCount()
{
    m_ItemCountIsSet = false;
}


} // namespace org::openapitools::server::model

