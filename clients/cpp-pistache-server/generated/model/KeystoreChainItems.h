/**
* Adobe Experience Manager (AEM) API
* Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
*
* The version of the OpenAPI document: 3.5.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * KeystoreChainItems.h
 *
 * 
 */

#ifndef KeystoreChainItems_H_
#define KeystoreChainItems_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  KeystoreChainItems
{
public:
    KeystoreChainItems();
    virtual ~KeystoreChainItems() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const KeystoreChainItems& rhs) const;
    bool operator!=(const KeystoreChainItems& rhs) const;

    /////////////////////////////////////////////
    /// KeystoreChainItems members

    /// <summary>
    /// e.g. \&quot;CN&#x3D;localhost\&quot;
    /// </summary>
    std::string getSubject() const;
    void setSubject(std::string const& value);
    bool subjectIsSet() const;
    void unsetSubject();
    /// <summary>
    /// e.g. \&quot;CN&#x3D;Admin\&quot;
    /// </summary>
    std::string getIssuer() const;
    void setIssuer(std::string const& value);
    bool issuerIsSet() const;
    void unsetIssuer();
    /// <summary>
    /// e.g. \&quot;Sun Jul 01 12:00:00 AEST 2018\&quot;
    /// </summary>
    std::string getNotBefore() const;
    void setNotBefore(std::string const& value);
    bool notBeforeIsSet() const;
    void unsetNotBefore();
    /// <summary>
    /// e.g. \&quot;Sun Jun 30 23:59:50 AEST 2019\&quot;
    /// </summary>
    std::string getNotAfter() const;
    void setNotAfter(std::string const& value);
    bool notAfterIsSet() const;
    void unsetNotAfter();
    /// <summary>
    /// 18165099476682912368
    /// </summary>
    int32_t getSerialNumber() const;
    void setSerialNumber(int32_t const value);
    bool serialNumberIsSet() const;
    void unsetSerialNumber();

    friend void to_json(nlohmann::json& j, const KeystoreChainItems& o);
    friend void from_json(const nlohmann::json& j, KeystoreChainItems& o);
protected:
    std::string m_Subject;
    bool m_SubjectIsSet;
    std::string m_Issuer;
    bool m_IssuerIsSet;
    std::string m_NotBefore;
    bool m_NotBeforeIsSet;
    std::string m_NotAfter;
    bool m_NotAfterIsSet;
    int32_t m_SerialNumber;
    bool m_SerialNumberIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* KeystoreChainItems_H_ */
