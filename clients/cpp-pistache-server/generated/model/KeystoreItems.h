/**
* Adobe Experience Manager (AEM) API
* Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
*
* The version of the OpenAPI document: 3.5.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * KeystoreItems.h
 *
 * 
 */

#ifndef KeystoreItems_H_
#define KeystoreItems_H_


#include <string>
#include "KeystoreChainItems.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  KeystoreItems
{
public:
    KeystoreItems();
    virtual ~KeystoreItems() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const KeystoreItems& rhs) const;
    bool operator!=(const KeystoreItems& rhs) const;

    /////////////////////////////////////////////
    /// KeystoreItems members

    /// <summary>
    /// Keystore alias name
    /// </summary>
    std::string getAlias() const;
    void setAlias(std::string const& value);
    bool aliasIsSet() const;
    void unsetAlias();
    /// <summary>
    /// e.g. \&quot;privateKey\&quot;
    /// </summary>
    std::string getEntryType() const;
    void setEntryType(std::string const& value);
    bool entryTypeIsSet() const;
    void unsetEntryType();
    /// <summary>
    /// e.g. \&quot;RSA\&quot;
    /// </summary>
    std::string getAlgorithm() const;
    void setAlgorithm(std::string const& value);
    bool algorithmIsSet() const;
    void unsetAlgorithm();
    /// <summary>
    /// e.g. \&quot;PKCS#8\&quot;
    /// </summary>
    std::string getFormat() const;
    void setFormat(std::string const& value);
    bool formatIsSet() const;
    void unsetFormat();
    /// <summary>
    /// 
    /// </summary>
    std::vector<KeystoreChainItems> getChain() const;
    void setChain(std::vector<KeystoreChainItems> const& value);
    bool chainIsSet() const;
    void unsetChain();

    friend void to_json(nlohmann::json& j, const KeystoreItems& o);
    friend void from_json(const nlohmann::json& j, KeystoreItems& o);
protected:
    std::string m_Alias;
    bool m_AliasIsSet;
    std::string m_EntryType;
    bool m_EntryTypeIsSet;
    std::string m_Algorithm;
    bool m_AlgorithmIsSet;
    std::string m_Format;
    bool m_FormatIsSet;
    std::vector<KeystoreChainItems> m_Chain;
    bool m_ChainIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* KeystoreItems_H_ */
