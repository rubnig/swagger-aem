/**
* Adobe Experience Manager (AEM) API
* Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
*
* The version of the OpenAPI document: 3.5.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "KeystoreInfo.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

KeystoreInfo::KeystoreInfo()
{
    m_AliasesIsSet = false;
    m_Exists = false;
    m_ExistsIsSet = false;
    
}

void KeystoreInfo::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool KeystoreInfo::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool KeystoreInfo::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "KeystoreInfo" : pathPrefix;

         
    if (aliasesIsSet())
    {
        const std::vector<KeystoreItems>& value = m_Aliases;
        const std::string currentValuePath = _pathPrefix + ".aliases";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const KeystoreItems& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".aliases") && success;
 
                i++;
            }
        }

    }
        
    return success;
}

bool KeystoreInfo::operator==(const KeystoreInfo& rhs) const
{
    return
    
    
    
    ((!aliasesIsSet() && !rhs.aliasesIsSet()) || (aliasesIsSet() && rhs.aliasesIsSet() && getAliases() == rhs.getAliases())) &&
    
    
    ((!existsIsSet() && !rhs.existsIsSet()) || (existsIsSet() && rhs.existsIsSet() && isExists() == rhs.isExists()))
    
    ;
}

bool KeystoreInfo::operator!=(const KeystoreInfo& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const KeystoreInfo& o)
{
    j = nlohmann::json();
    if(o.aliasesIsSet() || !o.m_Aliases.empty())
        j["aliases"] = o.m_Aliases;
    if(o.existsIsSet())
        j["exists"] = o.m_Exists;
    
}

void from_json(const nlohmann::json& j, KeystoreInfo& o)
{
    if(j.find("aliases") != j.end())
    {
        j.at("aliases").get_to(o.m_Aliases);
        o.m_AliasesIsSet = true;
    } 
    if(j.find("exists") != j.end())
    {
        j.at("exists").get_to(o.m_Exists);
        o.m_ExistsIsSet = true;
    } 
    
}

std::vector<KeystoreItems> KeystoreInfo::getAliases() const
{
    return m_Aliases;
}
void KeystoreInfo::setAliases(std::vector<KeystoreItems> const& value)
{
    m_Aliases = value;
    m_AliasesIsSet = true;
}
bool KeystoreInfo::aliasesIsSet() const
{
    return m_AliasesIsSet;
}
void KeystoreInfo::unsetAliases()
{
    m_AliasesIsSet = false;
}
bool KeystoreInfo::isExists() const
{
    return m_Exists;
}
void KeystoreInfo::setExists(bool const value)
{
    m_Exists = value;
    m_ExistsIsSet = true;
}
bool KeystoreInfo::existsIsSet() const
{
    return m_ExistsIsSet;
}
void KeystoreInfo::unsetExists()
{
    m_ExistsIsSet = false;
}


} // namespace org::openapitools::server::model

