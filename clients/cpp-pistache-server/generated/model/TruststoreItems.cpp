/**
* Adobe Experience Manager (AEM) API
* Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
*
* The version of the OpenAPI document: 3.5.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "TruststoreItems.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

TruststoreItems::TruststoreItems()
{
    m_Alias = "";
    m_AliasIsSet = false;
    m_EntryType = "";
    m_EntryTypeIsSet = false;
    m_Subject = "";
    m_SubjectIsSet = false;
    m_Issuer = "";
    m_IssuerIsSet = false;
    m_NotBefore = "";
    m_NotBeforeIsSet = false;
    m_NotAfter = "";
    m_NotAfterIsSet = false;
    m_SerialNumber = 0;
    m_SerialNumberIsSet = false;
    
}

void TruststoreItems::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool TruststoreItems::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool TruststoreItems::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "TruststoreItems" : pathPrefix;

                                
    return success;
}

bool TruststoreItems::operator==(const TruststoreItems& rhs) const
{
    return
    
    
    
    ((!aliasIsSet() && !rhs.aliasIsSet()) || (aliasIsSet() && rhs.aliasIsSet() && getAlias() == rhs.getAlias())) &&
    
    
    ((!entryTypeIsSet() && !rhs.entryTypeIsSet()) || (entryTypeIsSet() && rhs.entryTypeIsSet() && getEntryType() == rhs.getEntryType())) &&
    
    
    ((!subjectIsSet() && !rhs.subjectIsSet()) || (subjectIsSet() && rhs.subjectIsSet() && getSubject() == rhs.getSubject())) &&
    
    
    ((!issuerIsSet() && !rhs.issuerIsSet()) || (issuerIsSet() && rhs.issuerIsSet() && getIssuer() == rhs.getIssuer())) &&
    
    
    ((!notBeforeIsSet() && !rhs.notBeforeIsSet()) || (notBeforeIsSet() && rhs.notBeforeIsSet() && getNotBefore() == rhs.getNotBefore())) &&
    
    
    ((!notAfterIsSet() && !rhs.notAfterIsSet()) || (notAfterIsSet() && rhs.notAfterIsSet() && getNotAfter() == rhs.getNotAfter())) &&
    
    
    ((!serialNumberIsSet() && !rhs.serialNumberIsSet()) || (serialNumberIsSet() && rhs.serialNumberIsSet() && getSerialNumber() == rhs.getSerialNumber()))
    
    ;
}

bool TruststoreItems::operator!=(const TruststoreItems& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const TruststoreItems& o)
{
    j = nlohmann::json();
    if(o.aliasIsSet())
        j["alias"] = o.m_Alias;
    if(o.entryTypeIsSet())
        j["entryType"] = o.m_EntryType;
    if(o.subjectIsSet())
        j["subject"] = o.m_Subject;
    if(o.issuerIsSet())
        j["issuer"] = o.m_Issuer;
    if(o.notBeforeIsSet())
        j["notBefore"] = o.m_NotBefore;
    if(o.notAfterIsSet())
        j["notAfter"] = o.m_NotAfter;
    if(o.serialNumberIsSet())
        j["serialNumber"] = o.m_SerialNumber;
    
}

void from_json(const nlohmann::json& j, TruststoreItems& o)
{
    if(j.find("alias") != j.end())
    {
        j.at("alias").get_to(o.m_Alias);
        o.m_AliasIsSet = true;
    } 
    if(j.find("entryType") != j.end())
    {
        j.at("entryType").get_to(o.m_EntryType);
        o.m_EntryTypeIsSet = true;
    } 
    if(j.find("subject") != j.end())
    {
        j.at("subject").get_to(o.m_Subject);
        o.m_SubjectIsSet = true;
    } 
    if(j.find("issuer") != j.end())
    {
        j.at("issuer").get_to(o.m_Issuer);
        o.m_IssuerIsSet = true;
    } 
    if(j.find("notBefore") != j.end())
    {
        j.at("notBefore").get_to(o.m_NotBefore);
        o.m_NotBeforeIsSet = true;
    } 
    if(j.find("notAfter") != j.end())
    {
        j.at("notAfter").get_to(o.m_NotAfter);
        o.m_NotAfterIsSet = true;
    } 
    if(j.find("serialNumber") != j.end())
    {
        j.at("serialNumber").get_to(o.m_SerialNumber);
        o.m_SerialNumberIsSet = true;
    } 
    
}

std::string TruststoreItems::getAlias() const
{
    return m_Alias;
}
void TruststoreItems::setAlias(std::string const& value)
{
    m_Alias = value;
    m_AliasIsSet = true;
}
bool TruststoreItems::aliasIsSet() const
{
    return m_AliasIsSet;
}
void TruststoreItems::unsetAlias()
{
    m_AliasIsSet = false;
}
std::string TruststoreItems::getEntryType() const
{
    return m_EntryType;
}
void TruststoreItems::setEntryType(std::string const& value)
{
    m_EntryType = value;
    m_EntryTypeIsSet = true;
}
bool TruststoreItems::entryTypeIsSet() const
{
    return m_EntryTypeIsSet;
}
void TruststoreItems::unsetEntryType()
{
    m_EntryTypeIsSet = false;
}
std::string TruststoreItems::getSubject() const
{
    return m_Subject;
}
void TruststoreItems::setSubject(std::string const& value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}
bool TruststoreItems::subjectIsSet() const
{
    return m_SubjectIsSet;
}
void TruststoreItems::unsetSubject()
{
    m_SubjectIsSet = false;
}
std::string TruststoreItems::getIssuer() const
{
    return m_Issuer;
}
void TruststoreItems::setIssuer(std::string const& value)
{
    m_Issuer = value;
    m_IssuerIsSet = true;
}
bool TruststoreItems::issuerIsSet() const
{
    return m_IssuerIsSet;
}
void TruststoreItems::unsetIssuer()
{
    m_IssuerIsSet = false;
}
std::string TruststoreItems::getNotBefore() const
{
    return m_NotBefore;
}
void TruststoreItems::setNotBefore(std::string const& value)
{
    m_NotBefore = value;
    m_NotBeforeIsSet = true;
}
bool TruststoreItems::notBeforeIsSet() const
{
    return m_NotBeforeIsSet;
}
void TruststoreItems::unsetNotBefore()
{
    m_NotBeforeIsSet = false;
}
std::string TruststoreItems::getNotAfter() const
{
    return m_NotAfter;
}
void TruststoreItems::setNotAfter(std::string const& value)
{
    m_NotAfter = value;
    m_NotAfterIsSet = true;
}
bool TruststoreItems::notAfterIsSet() const
{
    return m_NotAfterIsSet;
}
void TruststoreItems::unsetNotAfter()
{
    m_NotAfterIsSet = false;
}
int32_t TruststoreItems::getSerialNumber() const
{
    return m_SerialNumber;
}
void TruststoreItems::setSerialNumber(int32_t const value)
{
    m_SerialNumber = value;
    m_SerialNumberIsSet = true;
}
bool TruststoreItems::serialNumberIsSet() const
{
    return m_SerialNumberIsSet;
}
void TruststoreItems::unsetSerialNumber()
{
    m_SerialNumberIsSet = false;
}


} // namespace org::openapitools::server::model

