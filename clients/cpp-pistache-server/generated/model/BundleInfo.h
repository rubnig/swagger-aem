/**
* Adobe Experience Manager (AEM) API
* Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
*
* The version of the OpenAPI document: 3.5.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * BundleInfo.h
 *
 * 
 */

#ifndef BundleInfo_H_
#define BundleInfo_H_


#include "BundleData.h"
#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  BundleInfo
{
public:
    BundleInfo();
    virtual ~BundleInfo() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const BundleInfo& rhs) const;
    bool operator!=(const BundleInfo& rhs) const;

    /////////////////////////////////////////////
    /// BundleInfo members

    /// <summary>
    /// Status description of all bundles
    /// </summary>
    std::string getStatus() const;
    void setStatus(std::string const& value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t> getS() const;
    void setS(std::vector<int32_t> const value);
    bool SIsSet() const;
    void unsets();
    /// <summary>
    /// 
    /// </summary>
    std::vector<BundleData> getData() const;
    void setData(std::vector<BundleData> const& value);
    bool dataIsSet() const;
    void unsetData();

    friend void to_json(nlohmann::json& j, const BundleInfo& o);
    friend void from_json(const nlohmann::json& j, BundleInfo& o);
protected:
    std::string m_Status;
    bool m_StatusIsSet;
    std::vector<int32_t> m_s;
    bool m_sIsSet;
    std::vector<BundleData> m_Data;
    bool m_DataIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* BundleInfo_H_ */
