/**
* Adobe Experience Manager (AEM) API
* Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
*
* The version of the OpenAPI document: 3.5.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "BundleData.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

BundleData::BundleData()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_Fragment = false;
    m_FragmentIsSet = false;
    m_StateRaw = 0;
    m_StateRawIsSet = false;
    m_State = "";
    m_StateIsSet = false;
    m_Version = "";
    m_VersionIsSet = false;
    m_SymbolicName = "";
    m_SymbolicNameIsSet = false;
    m_Category = "";
    m_CategoryIsSet = false;
    m_PropsIsSet = false;
    
}

void BundleData::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool BundleData::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool BundleData::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "BundleData" : pathPrefix;

                                         
    if (propsIsSet())
    {
        const std::vector<BundleDataProp>& value = m_Props;
        const std::string currentValuePath = _pathPrefix + ".props";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const BundleDataProp& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".props") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool BundleData::operator==(const BundleData& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!fragmentIsSet() && !rhs.fragmentIsSet()) || (fragmentIsSet() && rhs.fragmentIsSet() && isFragment() == rhs.isFragment())) &&
    
    
    ((!stateRawIsSet() && !rhs.stateRawIsSet()) || (stateRawIsSet() && rhs.stateRawIsSet() && getStateRaw() == rhs.getStateRaw())) &&
    
    
    ((!stateIsSet() && !rhs.stateIsSet()) || (stateIsSet() && rhs.stateIsSet() && getState() == rhs.getState())) &&
    
    
    ((!versionIsSet() && !rhs.versionIsSet()) || (versionIsSet() && rhs.versionIsSet() && getVersion() == rhs.getVersion())) &&
    
    
    ((!symbolicNameIsSet() && !rhs.symbolicNameIsSet()) || (symbolicNameIsSet() && rhs.symbolicNameIsSet() && getSymbolicName() == rhs.getSymbolicName())) &&
    
    
    ((!categoryIsSet() && !rhs.categoryIsSet()) || (categoryIsSet() && rhs.categoryIsSet() && getCategory() == rhs.getCategory())) &&
    
    
    ((!propsIsSet() && !rhs.propsIsSet()) || (propsIsSet() && rhs.propsIsSet() && getProps() == rhs.getProps()))
    
    ;
}

bool BundleData::operator!=(const BundleData& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const BundleData& o)
{
    j = nlohmann::json();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.fragmentIsSet())
        j["fragment"] = o.m_Fragment;
    if(o.stateRawIsSet())
        j["stateRaw"] = o.m_StateRaw;
    if(o.stateIsSet())
        j["state"] = o.m_State;
    if(o.versionIsSet())
        j["version"] = o.m_Version;
    if(o.symbolicNameIsSet())
        j["symbolicName"] = o.m_SymbolicName;
    if(o.categoryIsSet())
        j["category"] = o.m_Category;
    if(o.propsIsSet() || !o.m_Props.empty())
        j["props"] = o.m_Props;
    
}

void from_json(const nlohmann::json& j, BundleData& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("fragment") != j.end())
    {
        j.at("fragment").get_to(o.m_Fragment);
        o.m_FragmentIsSet = true;
    } 
    if(j.find("stateRaw") != j.end())
    {
        j.at("stateRaw").get_to(o.m_StateRaw);
        o.m_StateRawIsSet = true;
    } 
    if(j.find("state") != j.end())
    {
        j.at("state").get_to(o.m_State);
        o.m_StateIsSet = true;
    } 
    if(j.find("version") != j.end())
    {
        j.at("version").get_to(o.m_Version);
        o.m_VersionIsSet = true;
    } 
    if(j.find("symbolicName") != j.end())
    {
        j.at("symbolicName").get_to(o.m_SymbolicName);
        o.m_SymbolicNameIsSet = true;
    } 
    if(j.find("category") != j.end())
    {
        j.at("category").get_to(o.m_Category);
        o.m_CategoryIsSet = true;
    } 
    if(j.find("props") != j.end())
    {
        j.at("props").get_to(o.m_Props);
        o.m_PropsIsSet = true;
    } 
    
}

int32_t BundleData::getId() const
{
    return m_Id;
}
void BundleData::setId(int32_t const value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool BundleData::idIsSet() const
{
    return m_IdIsSet;
}
void BundleData::unsetId()
{
    m_IdIsSet = false;
}
std::string BundleData::getName() const
{
    return m_Name;
}
void BundleData::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool BundleData::nameIsSet() const
{
    return m_NameIsSet;
}
void BundleData::unsetName()
{
    m_NameIsSet = false;
}
bool BundleData::isFragment() const
{
    return m_Fragment;
}
void BundleData::setFragment(bool const value)
{
    m_Fragment = value;
    m_FragmentIsSet = true;
}
bool BundleData::fragmentIsSet() const
{
    return m_FragmentIsSet;
}
void BundleData::unsetFragment()
{
    m_FragmentIsSet = false;
}
int32_t BundleData::getStateRaw() const
{
    return m_StateRaw;
}
void BundleData::setStateRaw(int32_t const value)
{
    m_StateRaw = value;
    m_StateRawIsSet = true;
}
bool BundleData::stateRawIsSet() const
{
    return m_StateRawIsSet;
}
void BundleData::unsetStateRaw()
{
    m_StateRawIsSet = false;
}
std::string BundleData::getState() const
{
    return m_State;
}
void BundleData::setState(std::string const& value)
{
    m_State = value;
    m_StateIsSet = true;
}
bool BundleData::stateIsSet() const
{
    return m_StateIsSet;
}
void BundleData::unsetState()
{
    m_StateIsSet = false;
}
std::string BundleData::getVersion() const
{
    return m_Version;
}
void BundleData::setVersion(std::string const& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}
bool BundleData::versionIsSet() const
{
    return m_VersionIsSet;
}
void BundleData::unsetVersion()
{
    m_VersionIsSet = false;
}
std::string BundleData::getSymbolicName() const
{
    return m_SymbolicName;
}
void BundleData::setSymbolicName(std::string const& value)
{
    m_SymbolicName = value;
    m_SymbolicNameIsSet = true;
}
bool BundleData::symbolicNameIsSet() const
{
    return m_SymbolicNameIsSet;
}
void BundleData::unsetSymbolicName()
{
    m_SymbolicNameIsSet = false;
}
std::string BundleData::getCategory() const
{
    return m_Category;
}
void BundleData::setCategory(std::string const& value)
{
    m_Category = value;
    m_CategoryIsSet = true;
}
bool BundleData::categoryIsSet() const
{
    return m_CategoryIsSet;
}
void BundleData::unsetCategory()
{
    m_CategoryIsSet = false;
}
std::vector<BundleDataProp> BundleData::getProps() const
{
    return m_Props;
}
void BundleData::setProps(std::vector<BundleDataProp> const& value)
{
    m_Props = value;
    m_PropsIsSet = true;
}
bool BundleData::propsIsSet() const
{
    return m_PropsIsSet;
}
void BundleData::unsetProps()
{
    m_PropsIsSet = false;
}


} // namespace org::openapitools::server::model

