/**
* Adobe Experience Manager (AEM) API
* Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
*
* The version of the OpenAPI document: 3.5.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * SamlConfigurationPropertyItemsBoolean.h
 *
 * 
 */

#ifndef SamlConfigurationPropertyItemsBoolean_H_
#define SamlConfigurationPropertyItemsBoolean_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  SamlConfigurationPropertyItemsBoolean
{
public:
    SamlConfigurationPropertyItemsBoolean();
    virtual ~SamlConfigurationPropertyItemsBoolean() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const SamlConfigurationPropertyItemsBoolean& rhs) const;
    bool operator!=(const SamlConfigurationPropertyItemsBoolean& rhs) const;

    /////////////////////////////////////////////
    /// SamlConfigurationPropertyItemsBoolean members

    /// <summary>
    /// property name
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// True if optional
    /// </summary>
    bool isOptional() const;
    void setOptional(bool const value);
    bool optionalIsSet() const;
    void unsetOptional();
    /// <summary>
    /// True if property is set
    /// </summary>
    bool isIsSet() const;
    void setIsSet(bool const value);
    bool isSetIsSet() const;
    void unsetIs_set();
    /// <summary>
    /// Property type, 1&#x3D;String, 3&#x3D;long, 11&#x3D;boolean, 12&#x3D;Password
    /// </summary>
    int32_t getType() const;
    void setType(int32_t const value);
    bool typeIsSet() const;
    void unsetType();
    /// <summary>
    /// Property value
    /// </summary>
    bool isValue() const;
    void setValue(bool const value);
    bool valueIsSet() const;
    void unsetValue();
    /// <summary>
    /// Property description
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string const& value);
    bool descriptionIsSet() const;
    void unsetDescription();

    friend void to_json(nlohmann::json& j, const SamlConfigurationPropertyItemsBoolean& o);
    friend void from_json(const nlohmann::json& j, SamlConfigurationPropertyItemsBoolean& o);
protected:
    std::string m_Name;
    bool m_NameIsSet;
    bool m_Optional;
    bool m_OptionalIsSet;
    bool m_Is_set;
    bool m_Is_setIsSet;
    int32_t m_Type;
    bool m_TypeIsSet;
    bool m_Value;
    bool m_ValueIsSet;
    std::string m_Description;
    bool m_DescriptionIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* SamlConfigurationPropertyItemsBoolean_H_ */
