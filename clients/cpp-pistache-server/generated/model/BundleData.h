/**
* Adobe Experience Manager (AEM) API
* Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
*
* The version of the OpenAPI document: 3.5.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * BundleData.h
 *
 * 
 */

#ifndef BundleData_H_
#define BundleData_H_


#include "BundleDataProp.h"
#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  BundleData
{
public:
    BundleData();
    virtual ~BundleData() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const BundleData& rhs) const;
    bool operator!=(const BundleData& rhs) const;

    /////////////////////////////////////////////
    /// BundleData members

    /// <summary>
    /// Bundle ID
    /// </summary>
    int32_t getId() const;
    void setId(int32_t const value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// Bundle name
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// Is bundle a fragment
    /// </summary>
    bool isFragment() const;
    void setFragment(bool const value);
    bool fragmentIsSet() const;
    void unsetFragment();
    /// <summary>
    /// Numeric raw bundle state value
    /// </summary>
    int32_t getStateRaw() const;
    void setStateRaw(int32_t const value);
    bool stateRawIsSet() const;
    void unsetStateRaw();
    /// <summary>
    /// Bundle state value
    /// </summary>
    std::string getState() const;
    void setState(std::string const& value);
    bool stateIsSet() const;
    void unsetState();
    /// <summary>
    /// Bundle version
    /// </summary>
    std::string getVersion() const;
    void setVersion(std::string const& value);
    bool versionIsSet() const;
    void unsetVersion();
    /// <summary>
    /// Bundle symbolic name
    /// </summary>
    std::string getSymbolicName() const;
    void setSymbolicName(std::string const& value);
    bool symbolicNameIsSet() const;
    void unsetSymbolicName();
    /// <summary>
    /// Bundle category
    /// </summary>
    std::string getCategory() const;
    void setCategory(std::string const& value);
    bool categoryIsSet() const;
    void unsetCategory();
    /// <summary>
    /// 
    /// </summary>
    std::vector<BundleDataProp> getProps() const;
    void setProps(std::vector<BundleDataProp> const& value);
    bool propsIsSet() const;
    void unsetProps();

    friend void to_json(nlohmann::json& j, const BundleData& o);
    friend void from_json(const nlohmann::json& j, BundleData& o);
protected:
    int32_t m_Id;
    bool m_IdIsSet;
    std::string m_Name;
    bool m_NameIsSet;
    bool m_Fragment;
    bool m_FragmentIsSet;
    int32_t m_StateRaw;
    bool m_StateRawIsSet;
    std::string m_State;
    bool m_StateIsSet;
    std::string m_Version;
    bool m_VersionIsSet;
    std::string m_SymbolicName;
    bool m_SymbolicNameIsSet;
    std::string m_Category;
    bool m_CategoryIsSet;
    std::vector<BundleDataProp> m_Props;
    bool m_PropsIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* BundleData_H_ */
