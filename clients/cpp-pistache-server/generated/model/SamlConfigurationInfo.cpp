/**
* Adobe Experience Manager (AEM) API
* Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
*
* The version of the OpenAPI document: 3.5.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "SamlConfigurationInfo.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

SamlConfigurationInfo::SamlConfigurationInfo()
{
    m_Pid = "";
    m_PidIsSet = false;
    m_Title = "";
    m_TitleIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    m_Bundle_location = "";
    m_Bundle_locationIsSet = false;
    m_Service_location = "";
    m_Service_locationIsSet = false;
    m_PropertiesIsSet = false;
    
}

void SamlConfigurationInfo::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool SamlConfigurationInfo::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool SamlConfigurationInfo::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "SamlConfigurationInfo" : pathPrefix;

                            
    return success;
}

bool SamlConfigurationInfo::operator==(const SamlConfigurationInfo& rhs) const
{
    return
    
    
    
    ((!pidIsSet() && !rhs.pidIsSet()) || (pidIsSet() && rhs.pidIsSet() && getPid() == rhs.getPid())) &&
    
    
    ((!titleIsSet() && !rhs.titleIsSet()) || (titleIsSet() && rhs.titleIsSet() && getTitle() == rhs.getTitle())) &&
    
    
    ((!descriptionIsSet() && !rhs.descriptionIsSet()) || (descriptionIsSet() && rhs.descriptionIsSet() && getDescription() == rhs.getDescription())) &&
    
    
    ((!bundleLocationIsSet() && !rhs.bundleLocationIsSet()) || (bundleLocationIsSet() && rhs.bundleLocationIsSet() && getBundleLocation() == rhs.getBundleLocation())) &&
    
    
    ((!serviceLocationIsSet() && !rhs.serviceLocationIsSet()) || (serviceLocationIsSet() && rhs.serviceLocationIsSet() && getServiceLocation() == rhs.getServiceLocation())) &&
    
    
    ((!propertiesIsSet() && !rhs.propertiesIsSet()) || (propertiesIsSet() && rhs.propertiesIsSet() && getProperties() == rhs.getProperties()))
    
    ;
}

bool SamlConfigurationInfo::operator!=(const SamlConfigurationInfo& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SamlConfigurationInfo& o)
{
    j = nlohmann::json();
    if(o.pidIsSet())
        j["pid"] = o.m_Pid;
    if(o.titleIsSet())
        j["title"] = o.m_Title;
    if(o.descriptionIsSet())
        j["description"] = o.m_Description;
    if(o.bundleLocationIsSet())
        j["bundle_location"] = o.m_Bundle_location;
    if(o.serviceLocationIsSet())
        j["service_location"] = o.m_Service_location;
    if(o.propertiesIsSet())
        j["properties"] = o.m_Properties;
    
}

void from_json(const nlohmann::json& j, SamlConfigurationInfo& o)
{
    if(j.find("pid") != j.end())
    {
        j.at("pid").get_to(o.m_Pid);
        o.m_PidIsSet = true;
    } 
    if(j.find("title") != j.end())
    {
        j.at("title").get_to(o.m_Title);
        o.m_TitleIsSet = true;
    } 
    if(j.find("description") != j.end())
    {
        j.at("description").get_to(o.m_Description);
        o.m_DescriptionIsSet = true;
    } 
    if(j.find("bundle_location") != j.end())
    {
        j.at("bundle_location").get_to(o.m_Bundle_location);
        o.m_Bundle_locationIsSet = true;
    } 
    if(j.find("service_location") != j.end())
    {
        j.at("service_location").get_to(o.m_Service_location);
        o.m_Service_locationIsSet = true;
    } 
    if(j.find("properties") != j.end())
    {
        j.at("properties").get_to(o.m_Properties);
        o.m_PropertiesIsSet = true;
    } 
    
}

std::string SamlConfigurationInfo::getPid() const
{
    return m_Pid;
}
void SamlConfigurationInfo::setPid(std::string const& value)
{
    m_Pid = value;
    m_PidIsSet = true;
}
bool SamlConfigurationInfo::pidIsSet() const
{
    return m_PidIsSet;
}
void SamlConfigurationInfo::unsetPid()
{
    m_PidIsSet = false;
}
std::string SamlConfigurationInfo::getTitle() const
{
    return m_Title;
}
void SamlConfigurationInfo::setTitle(std::string const& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}
bool SamlConfigurationInfo::titleIsSet() const
{
    return m_TitleIsSet;
}
void SamlConfigurationInfo::unsetTitle()
{
    m_TitleIsSet = false;
}
std::string SamlConfigurationInfo::getDescription() const
{
    return m_Description;
}
void SamlConfigurationInfo::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool SamlConfigurationInfo::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void SamlConfigurationInfo::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::string SamlConfigurationInfo::getBundleLocation() const
{
    return m_Bundle_location;
}
void SamlConfigurationInfo::setBundleLocation(std::string const& value)
{
    m_Bundle_location = value;
    m_Bundle_locationIsSet = true;
}
bool SamlConfigurationInfo::bundleLocationIsSet() const
{
    return m_Bundle_locationIsSet;
}
void SamlConfigurationInfo::unsetBundle_location()
{
    m_Bundle_locationIsSet = false;
}
std::string SamlConfigurationInfo::getServiceLocation() const
{
    return m_Service_location;
}
void SamlConfigurationInfo::setServiceLocation(std::string const& value)
{
    m_Service_location = value;
    m_Service_locationIsSet = true;
}
bool SamlConfigurationInfo::serviceLocationIsSet() const
{
    return m_Service_locationIsSet;
}
void SamlConfigurationInfo::unsetService_location()
{
    m_Service_locationIsSet = false;
}
SamlConfigurationProperties SamlConfigurationInfo::getProperties() const
{
    return m_Properties;
}
void SamlConfigurationInfo::setProperties(SamlConfigurationProperties const& value)
{
    m_Properties = value;
    m_PropertiesIsSet = true;
}
bool SamlConfigurationInfo::propertiesIsSet() const
{
    return m_PropertiesIsSet;
}
void SamlConfigurationInfo::unsetProperties()
{
    m_PropertiesIsSet = false;
}


} // namespace org::openapitools::server::model

