/**
* Adobe Experience Manager (AEM) API
* Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
*
* The version of the OpenAPI document: 3.5.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "ConsoleApi.h"
#include "Helpers.h"

namespace org::openapitools::server::api
{

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

const std::string ConsoleApi::base = "";

ConsoleApi::ConsoleApi(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : router(rtr)
{
}

void ConsoleApi::init() {
    setupRoutes();
}

void ConsoleApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Get(*router, base + "/system/console/status-productinfo.json", Routes::bind(&ConsoleApi::get_aem_product_info_handler, this));
    Routes::Get(*router, base + "/system/console/bundles/:name.json", Routes::bind(&ConsoleApi::get_bundle_info_handler, this));
    Routes::Get(*router, base + "/system/console/configMgr", Routes::bind(&ConsoleApi::get_config_mgr_handler, this));
    Routes::Post(*router, base + "/system/console/bundles/:name", Routes::bind(&ConsoleApi::post_bundle_handler, this));
    Routes::Post(*router, base + "/system/console/jmx/com.adobe.granite:type=Repository/op/:action", Routes::bind(&ConsoleApi::post_jmx_repository_handler, this));
    Routes::Post(*router, base + "/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler", Routes::bind(&ConsoleApi::post_saml_configuration_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&ConsoleApi::console_api_default_handler, this));
}

std::pair<Pistache::Http::Code, std::string> ConsoleApi::handleParsingException(const std::exception& ex) const noexcept
{
    try {
        throw;
    } catch (nlohmann::detail::exception &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (org::openapitools::server::helpers::ValidationException &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (std::exception &e) {
        return std::make_pair(Pistache::Http::Code::Internal_Server_Error, e.what());
    }
}

std::pair<Pistache::Http::Code, std::string> ConsoleApi::handleOperationException(const std::exception& ex) const noexcept
{
    return std::make_pair(Pistache::Http::Code::Internal_Server_Error, ex.what());
}

void ConsoleApi::get_aem_product_info_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    try {


    try {
        this->get_aem_product_info(response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ConsoleApi::get_bundle_info_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto name = request.param(":name").as<std::string>();
    
    try {
        this->get_bundle_info(name, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ConsoleApi::get_config_mgr_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    try {


    try {
        this->get_config_mgr(response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ConsoleApi::post_bundle_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto name = request.param(":name").as<std::string>();
    
    // Getting the query params
    auto actionQuery = request.query().get("action");
    Pistache::Optional<std::string> action;
    if(!actionQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(actionQuery.get(), valueQuery_instance)){
            action = Pistache::Some(valueQuery_instance);
        }
    }
    
    try {
        this->post_bundle(name, action, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ConsoleApi::post_jmx_repository_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto action = request.param(":action").as<std::string>();
    
    try {
        this->post_jmx_repository(action, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ConsoleApi::post_saml_configuration_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the query params
    auto postQuery = request.query().get("post");
    Pistache::Optional<bool> post;
    if(!postQuery.isEmpty()){
        bool valueQuery_instance;
        if(fromStringValue(postQuery.get(), valueQuery_instance)){
            post = Pistache::Some(valueQuery_instance);
        }
    }
    auto applyQuery = request.query().get("apply");
    Pistache::Optional<bool> apply;
    if(!applyQuery.isEmpty()){
        bool valueQuery_instance;
        if(fromStringValue(applyQuery.get(), valueQuery_instance)){
            apply = Pistache::Some(valueQuery_instance);
        }
    }
    auto r_deleteQuery = request.query().get("delete");
    Pistache::Optional<bool> r_delete;
    if(!r_deleteQuery.isEmpty()){
        bool valueQuery_instance;
        if(fromStringValue(r_deleteQuery.get(), valueQuery_instance)){
            r_delete = Pistache::Some(valueQuery_instance);
        }
    }
    auto actionQuery = request.query().get("action");
    Pistache::Optional<std::string> action;
    if(!actionQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(actionQuery.get(), valueQuery_instance)){
            action = Pistache::Some(valueQuery_instance);
        }
    }
    auto DollarlocationQuery = request.query().get("$location");
    Pistache::Optional<std::string> Dollarlocation;
    if(!DollarlocationQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(DollarlocationQuery.get(), valueQuery_instance)){
            Dollarlocation = Pistache::Some(valueQuery_instance);
        }
    }
    auto pathQuery = request.query().get("path");
    Pistache::Optional<std::vector<std::string>> path;
    if(!pathQuery.isEmpty()){
        std::vector<std::string> valueQuery_instance;
        if(fromStringValue(pathQuery.get(), valueQuery_instance)){
            path = Pistache::Some(valueQuery_instance);
        }
    }
    auto servicePeriodrankingQuery = request.query().get("service.ranking");
    Pistache::Optional<int32_t> servicePeriodranking;
    if(!servicePeriodrankingQuery.isEmpty()){
        int32_t valueQuery_instance;
        if(fromStringValue(servicePeriodrankingQuery.get(), valueQuery_instance)){
            servicePeriodranking = Pistache::Some(valueQuery_instance);
        }
    }
    auto idpUrlQuery = request.query().get("idpUrl");
    Pistache::Optional<std::string> idpUrl;
    if(!idpUrlQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(idpUrlQuery.get(), valueQuery_instance)){
            idpUrl = Pistache::Some(valueQuery_instance);
        }
    }
    auto idpCertAliasQuery = request.query().get("idpCertAlias");
    Pistache::Optional<std::string> idpCertAlias;
    if(!idpCertAliasQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(idpCertAliasQuery.get(), valueQuery_instance)){
            idpCertAlias = Pistache::Some(valueQuery_instance);
        }
    }
    auto idpHttpRedirectQuery = request.query().get("idpHttpRedirect");
    Pistache::Optional<bool> idpHttpRedirect;
    if(!idpHttpRedirectQuery.isEmpty()){
        bool valueQuery_instance;
        if(fromStringValue(idpHttpRedirectQuery.get(), valueQuery_instance)){
            idpHttpRedirect = Pistache::Some(valueQuery_instance);
        }
    }
    auto serviceProviderEntityIdQuery = request.query().get("serviceProviderEntityId");
    Pistache::Optional<std::string> serviceProviderEntityId;
    if(!serviceProviderEntityIdQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(serviceProviderEntityIdQuery.get(), valueQuery_instance)){
            serviceProviderEntityId = Pistache::Some(valueQuery_instance);
        }
    }
    auto assertionConsumerServiceURLQuery = request.query().get("assertionConsumerServiceURL");
    Pistache::Optional<std::string> assertionConsumerServiceURL;
    if(!assertionConsumerServiceURLQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(assertionConsumerServiceURLQuery.get(), valueQuery_instance)){
            assertionConsumerServiceURL = Pistache::Some(valueQuery_instance);
        }
    }
    auto spPrivateKeyAliasQuery = request.query().get("spPrivateKeyAlias");
    Pistache::Optional<std::string> spPrivateKeyAlias;
    if(!spPrivateKeyAliasQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(spPrivateKeyAliasQuery.get(), valueQuery_instance)){
            spPrivateKeyAlias = Pistache::Some(valueQuery_instance);
        }
    }
    auto keyStorePasswordQuery = request.query().get("keyStorePassword");
    Pistache::Optional<std::string> keyStorePassword;
    if(!keyStorePasswordQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(keyStorePasswordQuery.get(), valueQuery_instance)){
            keyStorePassword = Pistache::Some(valueQuery_instance);
        }
    }
    auto defaultRedirectUrlQuery = request.query().get("defaultRedirectUrl");
    Pistache::Optional<std::string> defaultRedirectUrl;
    if(!defaultRedirectUrlQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(defaultRedirectUrlQuery.get(), valueQuery_instance)){
            defaultRedirectUrl = Pistache::Some(valueQuery_instance);
        }
    }
    auto userIDAttributeQuery = request.query().get("userIDAttribute");
    Pistache::Optional<std::string> userIDAttribute;
    if(!userIDAttributeQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(userIDAttributeQuery.get(), valueQuery_instance)){
            userIDAttribute = Pistache::Some(valueQuery_instance);
        }
    }
    auto useEncryptionQuery = request.query().get("useEncryption");
    Pistache::Optional<bool> useEncryption;
    if(!useEncryptionQuery.isEmpty()){
        bool valueQuery_instance;
        if(fromStringValue(useEncryptionQuery.get(), valueQuery_instance)){
            useEncryption = Pistache::Some(valueQuery_instance);
        }
    }
    auto createUserQuery = request.query().get("createUser");
    Pistache::Optional<bool> createUser;
    if(!createUserQuery.isEmpty()){
        bool valueQuery_instance;
        if(fromStringValue(createUserQuery.get(), valueQuery_instance)){
            createUser = Pistache::Some(valueQuery_instance);
        }
    }
    auto addGroupMembershipsQuery = request.query().get("addGroupMemberships");
    Pistache::Optional<bool> addGroupMemberships;
    if(!addGroupMembershipsQuery.isEmpty()){
        bool valueQuery_instance;
        if(fromStringValue(addGroupMembershipsQuery.get(), valueQuery_instance)){
            addGroupMemberships = Pistache::Some(valueQuery_instance);
        }
    }
    auto groupMembershipAttributeQuery = request.query().get("groupMembershipAttribute");
    Pistache::Optional<std::string> groupMembershipAttribute;
    if(!groupMembershipAttributeQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(groupMembershipAttributeQuery.get(), valueQuery_instance)){
            groupMembershipAttribute = Pistache::Some(valueQuery_instance);
        }
    }
    auto defaultGroupsQuery = request.query().get("defaultGroups");
    Pistache::Optional<std::vector<std::string>> defaultGroups;
    if(!defaultGroupsQuery.isEmpty()){
        std::vector<std::string> valueQuery_instance;
        if(fromStringValue(defaultGroupsQuery.get(), valueQuery_instance)){
            defaultGroups = Pistache::Some(valueQuery_instance);
        }
    }
    auto nameIdFormatQuery = request.query().get("nameIdFormat");
    Pistache::Optional<std::string> nameIdFormat;
    if(!nameIdFormatQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(nameIdFormatQuery.get(), valueQuery_instance)){
            nameIdFormat = Pistache::Some(valueQuery_instance);
        }
    }
    auto synchronizeAttributesQuery = request.query().get("synchronizeAttributes");
    Pistache::Optional<std::vector<std::string>> synchronizeAttributes;
    if(!synchronizeAttributesQuery.isEmpty()){
        std::vector<std::string> valueQuery_instance;
        if(fromStringValue(synchronizeAttributesQuery.get(), valueQuery_instance)){
            synchronizeAttributes = Pistache::Some(valueQuery_instance);
        }
    }
    auto handleLogoutQuery = request.query().get("handleLogout");
    Pistache::Optional<bool> handleLogout;
    if(!handleLogoutQuery.isEmpty()){
        bool valueQuery_instance;
        if(fromStringValue(handleLogoutQuery.get(), valueQuery_instance)){
            handleLogout = Pistache::Some(valueQuery_instance);
        }
    }
    auto logoutUrlQuery = request.query().get("logoutUrl");
    Pistache::Optional<std::string> logoutUrl;
    if(!logoutUrlQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(logoutUrlQuery.get(), valueQuery_instance)){
            logoutUrl = Pistache::Some(valueQuery_instance);
        }
    }
    auto clockToleranceQuery = request.query().get("clockTolerance");
    Pistache::Optional<int32_t> clockTolerance;
    if(!clockToleranceQuery.isEmpty()){
        int32_t valueQuery_instance;
        if(fromStringValue(clockToleranceQuery.get(), valueQuery_instance)){
            clockTolerance = Pistache::Some(valueQuery_instance);
        }
    }
    auto digestMethodQuery = request.query().get("digestMethod");
    Pistache::Optional<std::string> digestMethod;
    if(!digestMethodQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(digestMethodQuery.get(), valueQuery_instance)){
            digestMethod = Pistache::Some(valueQuery_instance);
        }
    }
    auto signatureMethodQuery = request.query().get("signatureMethod");
    Pistache::Optional<std::string> signatureMethod;
    if(!signatureMethodQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(signatureMethodQuery.get(), valueQuery_instance)){
            signatureMethod = Pistache::Some(valueQuery_instance);
        }
    }
    auto userIntermediatePathQuery = request.query().get("userIntermediatePath");
    Pistache::Optional<std::string> userIntermediatePath;
    if(!userIntermediatePathQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(userIntermediatePathQuery.get(), valueQuery_instance)){
            userIntermediatePath = Pistache::Some(valueQuery_instance);
        }
    }
    auto propertylistQuery = request.query().get("propertylist");
    Pistache::Optional<std::vector<std::string>> propertylist;
    if(!propertylistQuery.isEmpty()){
        std::vector<std::string> valueQuery_instance;
        if(fromStringValue(propertylistQuery.get(), valueQuery_instance)){
            propertylist = Pistache::Some(valueQuery_instance);
        }
    }
    
    try {
        this->post_saml_configuration(post, apply, r_delete, action, Dollarlocation, path, servicePeriodranking, idpUrl, idpCertAlias, idpHttpRedirect, serviceProviderEntityId, assertionConsumerServiceURL, spPrivateKeyAlias, keyStorePassword, defaultRedirectUrl, userIDAttribute, useEncryption, createUser, addGroupMemberships, groupMembershipAttribute, defaultGroups, nameIdFormat, synchronizeAttributes, handleLogout, logoutUrl, clockTolerance, digestMethod, signatureMethod, userIntermediatePath, propertylist, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}

void ConsoleApi::console_api_default_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

} // namespace org::openapitools::server::api

