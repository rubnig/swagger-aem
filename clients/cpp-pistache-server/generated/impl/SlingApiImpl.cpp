/**
* Adobe Experience Manager (AEM) API
* Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
*
* The version of the OpenAPI document: 3.5.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "SlingApiImpl.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

SlingApiImpl::SlingApiImpl(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : SlingApi(rtr)
{
}

void SlingApiImpl::delete_agent(const std::string &runmode, const std::string &name, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void SlingApiImpl::delete_node(const std::string &path, const std::string &name, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void SlingApiImpl::get_agent(const std::string &runmode, const std::string &name, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void SlingApiImpl::get_agents(const std::string &runmode, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void SlingApiImpl::get_authorizable_keystore(const std::string &intermediatePath, const std::string &authorizableId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void SlingApiImpl::get_keystore(const std::string &intermediatePath, const std::string &authorizableId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void SlingApiImpl::get_node(const std::string &path, const std::string &name, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void SlingApiImpl::get_package(const std::string &group, const std::string &name, const std::string &version, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void SlingApiImpl::get_package_filter(const std::string &group, const std::string &name, const std::string &version, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void SlingApiImpl::get_query(const Pistache::Optional<std::string> &path, const Pistache::Optional<double> &pPeriodlimit, const Pistache::Optional<std::string> &r_1_property, const Pistache::Optional<std::string> &r_1_property_value, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void SlingApiImpl::get_truststore(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void SlingApiImpl::get_truststore_info(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void SlingApiImpl::post_agent(const std::string &runmode, const std::string &name, const Pistache::Optional<bool> &jcrContentSlashcqDistribute, const Pistache::Optional<std::string> &jcrContentSlashcqDistributeAtTypeHint, const Pistache::Optional<std::string> &jcrContentSlashcqName, const Pistache::Optional<std::string> &jcrContentSlashcqTemplate, const Pistache::Optional<bool> &jcrContentSlashenabled, const Pistache::Optional<std::string> &jcrContentSlashjcrDescription, const Pistache::Optional<std::string> &jcrContentSlashjcrLastModified, const Pistache::Optional<std::string> &jcrContentSlashjcrLastModifiedBy, const Pistache::Optional<std::string> &jcrContentSlashjcrMixinTypes, const Pistache::Optional<std::string> &jcrContentSlashjcrTitle, const Pistache::Optional<std::string> &jcrContentSlashlogLevel, const Pistache::Optional<bool> &jcrContentSlashnoStatusUpdate, const Pistache::Optional<bool> &jcrContentSlashnoVersioning, const Pistache::Optional<double> &jcrContentSlashprotocolConnectTimeout, const Pistache::Optional<bool> &jcrContentSlashprotocolHTTPConnectionClosed, const Pistache::Optional<std::string> &jcrContentSlashprotocolHTTPExpired, const Pistache::Optional<std::vector<std::string>> &jcrContentSlashprotocolHTTPHeaders, const Pistache::Optional<std::string> &jcrContentSlashprotocolHTTPHeadersAtTypeHint, const Pistache::Optional<std::string> &jcrContentSlashprotocolHTTPMethod, const Pistache::Optional<bool> &jcrContentSlashprotocolHTTPSRelaxed, const Pistache::Optional<std::string> &jcrContentSlashprotocolInterface, const Pistache::Optional<double> &jcrContentSlashprotocolSocketTimeout, const Pistache::Optional<std::string> &jcrContentSlashprotocolVersion, const Pistache::Optional<std::string> &jcrContentSlashproxyNTLMDomain, const Pistache::Optional<std::string> &jcrContentSlashproxyNTLMHost, const Pistache::Optional<std::string> &jcrContentSlashproxyHost, const Pistache::Optional<std::string> &jcrContentSlashproxyPassword, const Pistache::Optional<double> &jcrContentSlashproxyPort, const Pistache::Optional<std::string> &jcrContentSlashproxyUser, const Pistache::Optional<double> &jcrContentSlashqueueBatchMaxSize, const Pistache::Optional<std::string> &jcrContentSlashqueueBatchMode, const Pistache::Optional<double> &jcrContentSlashqueueBatchWaitTime, const Pistache::Optional<std::string> &jcrContentSlashretryDelay, const Pistache::Optional<bool> &jcrContentSlashreverseReplication, const Pistache::Optional<std::string> &jcrContentSlashserializationType, const Pistache::Optional<std::string> &jcrContentSlashslingResourceType, const Pistache::Optional<std::string> &jcrContentSlashssl, const Pistache::Optional<std::string> &jcrContentSlashtransportNTLMDomain, const Pistache::Optional<std::string> &jcrContentSlashtransportNTLMHost, const Pistache::Optional<std::string> &jcrContentSlashtransportPassword, const Pistache::Optional<std::string> &jcrContentSlashtransportUri, const Pistache::Optional<std::string> &jcrContentSlashtransportUser, const Pistache::Optional<bool> &jcrContentSlashtriggerDistribute, const Pistache::Optional<bool> &jcrContentSlashtriggerModified, const Pistache::Optional<bool> &jcrContentSlashtriggerOnOffTime, const Pistache::Optional<bool> &jcrContentSlashtriggerReceive, const Pistache::Optional<bool> &jcrContentSlashtriggerSpecific, const Pistache::Optional<std::string> &jcrContentSlashuserId, const Pistache::Optional<std::string> &jcrPrimaryType, const Pistache::Optional<std::string> &operation, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void SlingApiImpl::post_authorizable_keystore(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter &response){
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void SlingApiImpl::post_authorizables(const Pistache::Optional<std::string> &authorizableId, const Pistache::Optional<std::string> &intermediatePath, const Pistache::Optional<std::string> &createUser, const Pistache::Optional<std::string> &createGroup, const Pistache::Optional<std::string> &repPassword, const Pistache::Optional<std::string> &profileSlashgivenName, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void SlingApiImpl::post_config_adobe_granite_saml_authentication_handler(const Pistache::Optional<std::string> &keyStorePassword, const Pistache::Optional<std::string> &keyStorePasswordAtTypeHint, const Pistache::Optional<int32_t> &servicePeriodranking, const Pistache::Optional<std::string> &servicePeriodrankingAtTypeHint, const Pistache::Optional<bool> &idpHttpRedirect, const Pistache::Optional<std::string> &idpHttpRedirectAtTypeHint, const Pistache::Optional<bool> &createUser, const Pistache::Optional<std::string> &createUserAtTypeHint, const Pistache::Optional<std::string> &defaultRedirectUrl, const Pistache::Optional<std::string> &defaultRedirectUrlAtTypeHint, const Pistache::Optional<std::string> &userIDAttribute, const Pistache::Optional<std::string> &userIDAttributeAtTypeHint, const Pistache::Optional<std::vector<std::string>> &defaultGroups, const Pistache::Optional<std::string> &defaultGroupsAtTypeHint, const Pistache::Optional<std::string> &idpCertAlias, const Pistache::Optional<std::string> &idpCertAliasAtTypeHint, const Pistache::Optional<bool> &addGroupMemberships, const Pistache::Optional<std::string> &addGroupMembershipsAtTypeHint, const Pistache::Optional<std::vector<std::string>> &path, const Pistache::Optional<std::string> &pathAtTypeHint, const Pistache::Optional<std::vector<std::string>> &synchronizeAttributes, const Pistache::Optional<std::string> &synchronizeAttributesAtTypeHint, const Pistache::Optional<int32_t> &clockTolerance, const Pistache::Optional<std::string> &clockToleranceAtTypeHint, const Pistache::Optional<std::string> &groupMembershipAttribute, const Pistache::Optional<std::string> &groupMembershipAttributeAtTypeHint, const Pistache::Optional<std::string> &idpUrl, const Pistache::Optional<std::string> &idpUrlAtTypeHint, const Pistache::Optional<std::string> &logoutUrl, const Pistache::Optional<std::string> &logoutUrlAtTypeHint, const Pistache::Optional<std::string> &serviceProviderEntityId, const Pistache::Optional<std::string> &serviceProviderEntityIdAtTypeHint, const Pistache::Optional<std::string> &assertionConsumerServiceURL, const Pistache::Optional<std::string> &assertionConsumerServiceURLAtTypeHint, const Pistache::Optional<bool> &handleLogout, const Pistache::Optional<std::string> &handleLogoutAtTypeHint, const Pistache::Optional<std::string> &spPrivateKeyAlias, const Pistache::Optional<std::string> &spPrivateKeyAliasAtTypeHint, const Pistache::Optional<bool> &useEncryption, const Pistache::Optional<std::string> &useEncryptionAtTypeHint, const Pistache::Optional<std::string> &nameIdFormat, const Pistache::Optional<std::string> &nameIdFormatAtTypeHint, const Pistache::Optional<std::string> &digestMethod, const Pistache::Optional<std::string> &digestMethodAtTypeHint, const Pistache::Optional<std::string> &signatureMethod, const Pistache::Optional<std::string> &signatureMethodAtTypeHint, const Pistache::Optional<std::string> &userIntermediatePath, const Pistache::Optional<std::string> &userIntermediatePathAtTypeHint, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void SlingApiImpl::post_config_apache_felix_jetty_based_http_service(const Pistache::Optional<bool> &orgPeriodapachePeriodfelixPeriodhttpsPeriodnio, const Pistache::Optional<std::string> &orgPeriodapachePeriodfelixPeriodhttpsPeriodnioAtTypeHint, const Pistache::Optional<std::string> &orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore, const Pistache::Optional<std::string> &orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystoreAtTypeHint, const Pistache::Optional<std::string> &orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword, const Pistache::Optional<std::string> &orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpasswordAtTypeHint, const Pistache::Optional<std::string> &orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkey, const Pistache::Optional<std::string> &orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyAtTypeHint, const Pistache::Optional<std::string> &orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword, const Pistache::Optional<std::string> &orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpasswordAtTypeHint, const Pistache::Optional<std::string> &orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore, const Pistache::Optional<std::string> &orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststoreAtTypeHint, const Pistache::Optional<std::string> &orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword, const Pistache::Optional<std::string> &orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpasswordAtTypeHint, const Pistache::Optional<std::string> &orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate, const Pistache::Optional<std::string> &orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificateAtTypeHint, const Pistache::Optional<bool> &orgPeriodapachePeriodfelixPeriodhttpsPeriodenable, const Pistache::Optional<std::string> &orgPeriodapachePeriodfelixPeriodhttpsPeriodenableAtTypeHint, const Pistache::Optional<std::string> &orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure, const Pistache::Optional<std::string> &orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecureAtTypeHint, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void SlingApiImpl::post_config_apache_http_components_proxy_configuration(const Pistache::Optional<std::string> &proxyPeriodhost, const Pistache::Optional<std::string> &proxyPeriodhostAtTypeHint, const Pistache::Optional<int32_t> &proxyPeriodport, const Pistache::Optional<std::string> &proxyPeriodportAtTypeHint, const Pistache::Optional<std::vector<std::string>> &proxyPeriodexceptions, const Pistache::Optional<std::string> &proxyPeriodexceptionsAtTypeHint, const Pistache::Optional<bool> &proxyPeriodenabled, const Pistache::Optional<std::string> &proxyPeriodenabledAtTypeHint, const Pistache::Optional<std::string> &proxyPerioduser, const Pistache::Optional<std::string> &proxyPerioduserAtTypeHint, const Pistache::Optional<std::string> &proxyPeriodpassword, const Pistache::Optional<std::string> &proxyPeriodpasswordAtTypeHint, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void SlingApiImpl::post_config_apache_sling_dav_ex_servlet(const Pistache::Optional<std::string> &alias, const Pistache::Optional<std::string> &aliasAtTypeHint, const Pistache::Optional<bool> &davPeriodcreateAbsoluteUri, const Pistache::Optional<std::string> &davPeriodcreateAbsoluteUriAtTypeHint, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void SlingApiImpl::post_config_apache_sling_get_servlet(const Pistache::Optional<std::string> &jsonPeriodmaximumresults, const Pistache::Optional<std::string> &jsonPeriodmaximumresultsAtTypeHint, const Pistache::Optional<bool> &enablePeriodhtml, const Pistache::Optional<std::string> &enablePeriodhtmlAtTypeHint, const Pistache::Optional<bool> &enablePeriodtxt, const Pistache::Optional<std::string> &enablePeriodtxtAtTypeHint, const Pistache::Optional<bool> &enablePeriodxml, const Pistache::Optional<std::string> &enablePeriodxmlAtTypeHint, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void SlingApiImpl::post_config_apache_sling_referrer_filter(const Pistache::Optional<bool> &allowPeriodempty, const Pistache::Optional<std::string> &allowPeriodemptyAtTypeHint, const Pistache::Optional<std::string> &allowPeriodhosts, const Pistache::Optional<std::string> &allowPeriodhostsAtTypeHint, const Pistache::Optional<std::string> &allowPeriodhostsPeriodregexp, const Pistache::Optional<std::string> &allowPeriodhostsPeriodregexpAtTypeHint, const Pistache::Optional<std::string> &filterPeriodmethods, const Pistache::Optional<std::string> &filterPeriodmethodsAtTypeHint, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void SlingApiImpl::post_config_property(const std::string &configNodeName, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void SlingApiImpl::post_node(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter &response){
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void SlingApiImpl::post_node_rw(const std::string &path, const std::string &name, const Pistache::Optional<std::string> &addMembers, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void SlingApiImpl::post_path(const std::string &path, const Pistache::Optional<std::string> &jcrPrimaryType, const Pistache::Optional<std::string> &name, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void SlingApiImpl::post_query(const Pistache::Optional<std::string> &path, const Pistache::Optional<double> &pPeriodlimit, const Pistache::Optional<std::string> &r_1_property, const Pistache::Optional<std::string> &r_1_property_value, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void SlingApiImpl::post_tree_activation(const Pistache::Optional<bool> &ignoredeactivated, const Pistache::Optional<bool> &onlymodified, const Pistache::Optional<std::string> &path, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void SlingApiImpl::post_truststore(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter &response){
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void SlingApiImpl::post_truststore_pkcs12(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter &response){
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}

}
}
}
}

