/**
* Adobe Experience Manager (AEM) API
* Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
*
* The version of the OpenAPI document: 3.5.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "ConsoleApiImpl.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

ConsoleApiImpl::ConsoleApiImpl(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : ConsoleApi(rtr)
{
}

void ConsoleApiImpl::get_aem_product_info(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ConsoleApiImpl::get_bundle_info(const std::string &name, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ConsoleApiImpl::get_config_mgr(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ConsoleApiImpl::post_bundle(const std::string &name, const Pistache::Optional<std::string> &action, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ConsoleApiImpl::post_jmx_repository(const std::string &action, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ConsoleApiImpl::post_saml_configuration(const Pistache::Optional<bool> &post, const Pistache::Optional<bool> &apply, const Pistache::Optional<bool> &r_delete, const Pistache::Optional<std::string> &action, const Pistache::Optional<std::string> &Dollarlocation, const Pistache::Optional<std::vector<std::string>> &path, const Pistache::Optional<int32_t> &servicePeriodranking, const Pistache::Optional<std::string> &idpUrl, const Pistache::Optional<std::string> &idpCertAlias, const Pistache::Optional<bool> &idpHttpRedirect, const Pistache::Optional<std::string> &serviceProviderEntityId, const Pistache::Optional<std::string> &assertionConsumerServiceURL, const Pistache::Optional<std::string> &spPrivateKeyAlias, const Pistache::Optional<std::string> &keyStorePassword, const Pistache::Optional<std::string> &defaultRedirectUrl, const Pistache::Optional<std::string> &userIDAttribute, const Pistache::Optional<bool> &useEncryption, const Pistache::Optional<bool> &createUser, const Pistache::Optional<bool> &addGroupMemberships, const Pistache::Optional<std::string> &groupMembershipAttribute, const Pistache::Optional<std::vector<std::string>> &defaultGroups, const Pistache::Optional<std::string> &nameIdFormat, const Pistache::Optional<std::vector<std::string>> &synchronizeAttributes, const Pistache::Optional<bool> &handleLogout, const Pistache::Optional<std::string> &logoutUrl, const Pistache::Optional<int32_t> &clockTolerance, const Pistache::Optional<std::string> &digestMethod, const Pistache::Optional<std::string> &signatureMethod, const Pistache::Optional<std::string> &userIntermediatePath, const Pistache::Optional<std::vector<std::string>> &propertylist, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}

}
}
}
}

