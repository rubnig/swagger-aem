/**
* Adobe Experience Manager (AEM) API
* Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
*
* The version of the OpenAPI document: 3.5.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "CrxApiImpl.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

CrxApiImpl::CrxApiImpl(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : CrxApi(rtr)
{
}

void CrxApiImpl::get_crxde_status(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void CrxApiImpl::get_install_status(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void CrxApiImpl::get_package_manager_servlet(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void CrxApiImpl::post_package_service(const Pistache::Optional<std::string> &cmd, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void CrxApiImpl::post_package_service_json(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter &response){
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void CrxApiImpl::post_package_update(const Pistache::Optional<std::string> &groupName, const Pistache::Optional<std::string> &packageName, const Pistache::Optional<std::string> &version, const Pistache::Optional<std::string> &path, const Pistache::Optional<std::string> &filter, const Pistache::Optional<std::string> &charset, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void CrxApiImpl::post_set_password(const Pistache::Optional<std::string> &old, const Pistache::Optional<std::string> &plain, const Pistache::Optional<std::string> &verify, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}

}
}
}
}

