/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import java.io.File
import org.openapitools.client.model.InstallStatus
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object CrxApi {

  def apply(baseUrl: String = "http://localhost") = new CrxApi(baseUrl)
}

class CrxApi(baseUrl: String) {
  
  /**
   * Expected answers:
   *   code 200 : String (CRXDE is enabled)
   *   code 404 : String (CRXDE is disabled)
   * 
   * Available security schemes:
   *   aemAuth (http)
   */
  def getCrxdeStatus()(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, baseUrl, "/crx/server/crx.default/jcr:root/.1.json", "application/json")
      .withCredentials(basicAuth).withSuccessResponse[String](200)
      .withErrorResponse[String](404)
      

  /**
   * Expected answers:
   *   code 200 : InstallStatus (Retrieved CRX package manager install status)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   */
  def getInstallStatus()(implicit basicAuth: BasicCredentials): ApiRequest[InstallStatus] =
    ApiRequest[InstallStatus](ApiMethods.GET, baseUrl, "/crx/packmgr/installstatus.jsp", "application/json")
      .withCredentials(basicAuth).withSuccessResponse[InstallStatus](200)
      .withDefaultErrorResponse[String]
      

  /**
   * Expected answers:
   *   code 404 : String (Package Manager Servlet is disabled)
   *   code 405 : String (Package Manager Servlet is active)
   * 
   * Available security schemes:
   *   aemAuth (http)
   */
  def getPackageManagerServlet()(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, baseUrl, "/crx/packmgr/service/script.html", "application/json")
      .withCredentials(basicAuth).withErrorResponse[String](404)
      .withErrorResponse[String](405)
      

  /**
   * Expected answers:
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param cmd 
   */
  def postPackageService(cmd: String)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, baseUrl, "/crx/packmgr/service.jsp", "application/json")
      .withCredentials(basicAuth).withQueryParam("cmd", cmd)
      .withDefaultErrorResponse[String]
      

  /**
   * Expected answers:
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param path 
   * @param cmd 
   * @param groupName 
   * @param packageName 
   * @param packageVersion 
   * @param charset 
   * @param force 
   * @param recursive 
   * @param `package` 
   */
  def postPackageServiceJson(path: String, cmd: String, groupName: Option[String] = None, packageName: Option[String] = None, packageVersion: Option[String] = None, charset: Option[String] = None, force: Option[Boolean] = None, recursive: Option[Boolean] = None, `package`: Option[File] = None)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, baseUrl, "/crx/packmgr/service/.json/{path}", "multipart/form-data")
      .withCredentials(basicAuth).withFormParam("package", `package`)
      .withQueryParam("cmd", cmd)
      .withQueryParam("groupName", groupName)
      .withQueryParam("packageName", packageName)
      .withQueryParam("packageVersion", packageVersion)
      .withQueryParam("_charset_", charset)
      .withQueryParam("force", force)
      .withQueryParam("recursive", recursive)
      .withPathParam("path", path)
      .withDefaultErrorResponse[String]
      

  /**
   * Expected answers:
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param groupName 
   * @param packageName 
   * @param version 
   * @param path 
   * @param filter 
   * @param charset 
   */
  def postPackageUpdate(groupName: String, packageName: String, version: String, path: String, filter: Option[String] = None, charset: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, baseUrl, "/crx/packmgr/update.jsp", "application/json")
      .withCredentials(basicAuth).withQueryParam("groupName", groupName)
      .withQueryParam("packageName", packageName)
      .withQueryParam("version", version)
      .withQueryParam("path", path)
      .withQueryParam("filter", filter)
      .withQueryParam("_charset_", charset)
      .withDefaultErrorResponse[String]
      

  /**
   * Expected answers:
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param old 
   * @param plain 
   * @param verify 
   */
  def postSetPassword(old: String, plain: String, verify: String)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, baseUrl, "/crx/explorer/ui/setpassword.jsp", "application/json")
      .withCredentials(basicAuth).withQueryParam("old", old)
      .withQueryParam("plain", plain)
      .withQueryParam("verify", verify)
      .withDefaultErrorResponse[String]
      



}

