/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.BigDecimal
import java.io.File
import org.openapitools.client.model.KeystoreInfo
import org.openapitools.client.model.TruststoreInfo
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object SlingApi {

  def apply(baseUrl: String = "http://localhost") = new SlingApi(baseUrl)
}

class SlingApi(baseUrl: String) {
  
  /**
   * Expected answers:
   *   code 0 :  (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param runmode 
   * @param name 
   */
  def deleteAgent(runmode: String, name: String)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, baseUrl, "/etc/replication/agents.{runmode}/{name}", "application/json")
      .withCredentials(basicAuth).withPathParam("runmode", runmode)
      .withPathParam("name", name)
      .withDefaultErrorResponse[Unit]
      

  /**
   * Expected answers:
   *   code 0 :  (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param path 
   * @param name 
   */
  def deleteNode(path: String, name: String)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, baseUrl, "/{path}/{name}", "application/json")
      .withCredentials(basicAuth).withPathParam("path", path)
      .withPathParam("name", name)
      .withDefaultErrorResponse[Unit]
      

  /**
   * Expected answers:
   *   code 0 :  (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param runmode 
   * @param name 
   */
  def getAgent(runmode: String, name: String)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, baseUrl, "/etc/replication/agents.{runmode}/{name}", "application/json")
      .withCredentials(basicAuth).withPathParam("runmode", runmode)
      .withPathParam("name", name)
      .withDefaultErrorResponse[Unit]
      

  /**
   * Expected answers:
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param runmode 
   */
  def getAgents(runmode: String)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, baseUrl, "/etc/replication/agents.{runmode}.-1.json", "application/json")
      .withCredentials(basicAuth).withPathParam("runmode", runmode)
      .withDefaultErrorResponse[String]
      

  /**
   * Expected answers:
   *   code 200 : KeystoreInfo (Retrieved Authorizable Keystore info)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param intermediatePath 
   * @param authorizableId 
   */
  def getAuthorizableKeystore(intermediatePath: String, authorizableId: String)(implicit basicAuth: BasicCredentials): ApiRequest[KeystoreInfo] =
    ApiRequest[KeystoreInfo](ApiMethods.GET, baseUrl, "/{intermediatePath}/{authorizableId}.ks.json", "application/json")
      .withCredentials(basicAuth).withPathParam("intermediatePath", intermediatePath)
      .withPathParam("authorizableId", authorizableId)
      .withSuccessResponse[KeystoreInfo](200)
      .withDefaultErrorResponse[String]
      

  /**
   * Expected answers:
   *   code 0 : File (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param intermediatePath 
   * @param authorizableId 
   */
  def getKeystore(intermediatePath: String, authorizableId: String)(implicit basicAuth: BasicCredentials): ApiRequest[File] =
    ApiRequest[File](ApiMethods.GET, baseUrl, "/{intermediatePath}/{authorizableId}/keystore/store.p12", "application/json")
      .withCredentials(basicAuth).withPathParam("intermediatePath", intermediatePath)
      .withPathParam("authorizableId", authorizableId)
      .withDefaultErrorResponse[File]
      

  /**
   * Expected answers:
   *   code 0 :  (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param path 
   * @param name 
   */
  def getNode(path: String, name: String)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, baseUrl, "/{path}/{name}", "application/json")
      .withCredentials(basicAuth).withPathParam("path", path)
      .withPathParam("name", name)
      .withDefaultErrorResponse[Unit]
      

  /**
   * Expected answers:
   *   code 0 : File (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param group 
   * @param name 
   * @param version 
   */
  def getPackage(group: String, name: String, version: String)(implicit basicAuth: BasicCredentials): ApiRequest[File] =
    ApiRequest[File](ApiMethods.GET, baseUrl, "/etc/packages/{group}/{name}-{version}.zip", "application/json")
      .withCredentials(basicAuth).withPathParam("group", group)
      .withPathParam("name", name)
      .withPathParam("version", version)
      .withDefaultErrorResponse[File]
      

  /**
   * Expected answers:
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param group 
   * @param name 
   * @param version 
   */
  def getPackageFilter(group: String, name: String, version: String)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, baseUrl, "/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json", "application/json")
      .withCredentials(basicAuth).withPathParam("group", group)
      .withPathParam("name", name)
      .withPathParam("version", version)
      .withDefaultErrorResponse[String]
      

  /**
   * Expected answers:
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param path 
   * @param pLimit 
   * @param `1property` 
   * @param `1propertyValue` 
   */
  def getQuery(path: String, pLimit: BigDecimal, `1property`: String, `1propertyValue`: String)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, baseUrl, "/bin/querybuilder.json", "application/json")
      .withCredentials(basicAuth).withQueryParam("path", path)
      .withQueryParam("p.limit", pLimit)
      .withQueryParam("1_property", `1property`)
      .withQueryParam("1_property.value", `1propertyValue`)
      .withDefaultErrorResponse[String]
      

  /**
   * Expected answers:
   *   code 0 : File (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   */
  def getTruststore()(implicit basicAuth: BasicCredentials): ApiRequest[File] =
    ApiRequest[File](ApiMethods.GET, baseUrl, "/etc/truststore/truststore.p12", "application/json")
      .withCredentials(basicAuth).withDefaultErrorResponse[File]
      

  /**
   * Expected answers:
   *   code 200 : TruststoreInfo (Retrieved AEM Truststore info)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   */
  def getTruststoreInfo()(implicit basicAuth: BasicCredentials): ApiRequest[TruststoreInfo] =
    ApiRequest[TruststoreInfo](ApiMethods.GET, baseUrl, "/libs/granite/security/truststore.json", "application/json")
      .withCredentials(basicAuth).withSuccessResponse[TruststoreInfo](200)
      .withDefaultErrorResponse[String]
      

  /**
   * Expected answers:
   *   code 0 :  (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param runmode 
   * @param name 
   * @param jcrcontentCqdistribute 
   * @param jcrcontentCqdistributeTypeHint 
   * @param jcrcontentCqname 
   * @param jcrcontentCqtemplate 
   * @param jcrcontentEnabled 
   * @param jcrcontentJcrdescription 
   * @param jcrcontentJcrlastModified 
   * @param jcrcontentJcrlastModifiedBy 
   * @param jcrcontentJcrmixinTypes 
   * @param jcrcontentJcrtitle 
   * @param jcrcontentLogLevel 
   * @param jcrcontentNoStatusUpdate 
   * @param jcrcontentNoVersioning 
   * @param jcrcontentProtocolConnectTimeout 
   * @param jcrcontentProtocolHTTPConnectionClosed 
   * @param jcrcontentProtocolHTTPExpired 
   * @param jcrcontentProtocolHTTPHeaders 
   * @param jcrcontentProtocolHTTPHeadersTypeHint 
   * @param jcrcontentProtocolHTTPMethod 
   * @param jcrcontentProtocolHTTPSRelaxed 
   * @param jcrcontentProtocolInterface 
   * @param jcrcontentProtocolSocketTimeout 
   * @param jcrcontentProtocolVersion 
   * @param jcrcontentProxyNTLMDomain 
   * @param jcrcontentProxyNTLMHost 
   * @param jcrcontentProxyHost 
   * @param jcrcontentProxyPassword 
   * @param jcrcontentProxyPort 
   * @param jcrcontentProxyUser 
   * @param jcrcontentQueueBatchMaxSize 
   * @param jcrcontentQueueBatchMode 
   * @param jcrcontentQueueBatchWaitTime 
   * @param jcrcontentRetryDelay 
   * @param jcrcontentReverseReplication 
   * @param jcrcontentSerializationType 
   * @param jcrcontentSlingresourceType 
   * @param jcrcontentSsl 
   * @param jcrcontentTransportNTLMDomain 
   * @param jcrcontentTransportNTLMHost 
   * @param jcrcontentTransportPassword 
   * @param jcrcontentTransportUri 
   * @param jcrcontentTransportUser 
   * @param jcrcontentTriggerDistribute 
   * @param jcrcontentTriggerModified 
   * @param jcrcontentTriggerOnOffTime 
   * @param jcrcontentTriggerReceive 
   * @param jcrcontentTriggerSpecific 
   * @param jcrcontentUserId 
   * @param jcrprimaryType 
   * @param operation 
   */
  def postAgent(runmode: String, name: String, jcrcontentCqdistribute: Option[Boolean] = None, jcrcontentCqdistributeTypeHint: Option[String] = None, jcrcontentCqname: Option[String] = None, jcrcontentCqtemplate: Option[String] = None, jcrcontentEnabled: Option[Boolean] = None, jcrcontentJcrdescription: Option[String] = None, jcrcontentJcrlastModified: Option[String] = None, jcrcontentJcrlastModifiedBy: Option[String] = None, jcrcontentJcrmixinTypes: Option[String] = None, jcrcontentJcrtitle: Option[String] = None, jcrcontentLogLevel: Option[String] = None, jcrcontentNoStatusUpdate: Option[Boolean] = None, jcrcontentNoVersioning: Option[Boolean] = None, jcrcontentProtocolConnectTimeout: Option[BigDecimal] = None, jcrcontentProtocolHTTPConnectionClosed: Option[Boolean] = None, jcrcontentProtocolHTTPExpired: Option[String] = None, jcrcontentProtocolHTTPHeaders: Seq[String], jcrcontentProtocolHTTPHeadersTypeHint: Option[String] = None, jcrcontentProtocolHTTPMethod: Option[String] = None, jcrcontentProtocolHTTPSRelaxed: Option[Boolean] = None, jcrcontentProtocolInterface: Option[String] = None, jcrcontentProtocolSocketTimeout: Option[BigDecimal] = None, jcrcontentProtocolVersion: Option[String] = None, jcrcontentProxyNTLMDomain: Option[String] = None, jcrcontentProxyNTLMHost: Option[String] = None, jcrcontentProxyHost: Option[String] = None, jcrcontentProxyPassword: Option[String] = None, jcrcontentProxyPort: Option[BigDecimal] = None, jcrcontentProxyUser: Option[String] = None, jcrcontentQueueBatchMaxSize: Option[BigDecimal] = None, jcrcontentQueueBatchMode: Option[String] = None, jcrcontentQueueBatchWaitTime: Option[BigDecimal] = None, jcrcontentRetryDelay: Option[String] = None, jcrcontentReverseReplication: Option[Boolean] = None, jcrcontentSerializationType: Option[String] = None, jcrcontentSlingresourceType: Option[String] = None, jcrcontentSsl: Option[String] = None, jcrcontentTransportNTLMDomain: Option[String] = None, jcrcontentTransportNTLMHost: Option[String] = None, jcrcontentTransportPassword: Option[String] = None, jcrcontentTransportUri: Option[String] = None, jcrcontentTransportUser: Option[String] = None, jcrcontentTriggerDistribute: Option[Boolean] = None, jcrcontentTriggerModified: Option[Boolean] = None, jcrcontentTriggerOnOffTime: Option[Boolean] = None, jcrcontentTriggerReceive: Option[Boolean] = None, jcrcontentTriggerSpecific: Option[Boolean] = None, jcrcontentUserId: Option[String] = None, jcrprimaryType: Option[String] = None, operation: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, baseUrl, "/etc/replication/agents.{runmode}/{name}", "application/json")
      .withCredentials(basicAuth).withQueryParam("jcr:content/cq:distribute", jcrcontentCqdistribute)
      .withQueryParam("jcr:content/cq:distribute@TypeHint", jcrcontentCqdistributeTypeHint)
      .withQueryParam("jcr:content/cq:name", jcrcontentCqname)
      .withQueryParam("jcr:content/cq:template", jcrcontentCqtemplate)
      .withQueryParam("jcr:content/enabled", jcrcontentEnabled)
      .withQueryParam("jcr:content/jcr:description", jcrcontentJcrdescription)
      .withQueryParam("jcr:content/jcr:lastModified", jcrcontentJcrlastModified)
      .withQueryParam("jcr:content/jcr:lastModifiedBy", jcrcontentJcrlastModifiedBy)
      .withQueryParam("jcr:content/jcr:mixinTypes", jcrcontentJcrmixinTypes)
      .withQueryParam("jcr:content/jcr:title", jcrcontentJcrtitle)
      .withQueryParam("jcr:content/logLevel", jcrcontentLogLevel)
      .withQueryParam("jcr:content/noStatusUpdate", jcrcontentNoStatusUpdate)
      .withQueryParam("jcr:content/noVersioning", jcrcontentNoVersioning)
      .withQueryParam("jcr:content/protocolConnectTimeout", jcrcontentProtocolConnectTimeout)
      .withQueryParam("jcr:content/protocolHTTPConnectionClosed", jcrcontentProtocolHTTPConnectionClosed)
      .withQueryParam("jcr:content/protocolHTTPExpired", jcrcontentProtocolHTTPExpired)
      .withQueryParam("jcr:content/protocolHTTPHeaders", ArrayValues(jcrcontentProtocolHTTPHeaders, MULTI))
      .withQueryParam("jcr:content/protocolHTTPHeaders@TypeHint", jcrcontentProtocolHTTPHeadersTypeHint)
      .withQueryParam("jcr:content/protocolHTTPMethod", jcrcontentProtocolHTTPMethod)
      .withQueryParam("jcr:content/protocolHTTPSRelaxed", jcrcontentProtocolHTTPSRelaxed)
      .withQueryParam("jcr:content/protocolInterface", jcrcontentProtocolInterface)
      .withQueryParam("jcr:content/protocolSocketTimeout", jcrcontentProtocolSocketTimeout)
      .withQueryParam("jcr:content/protocolVersion", jcrcontentProtocolVersion)
      .withQueryParam("jcr:content/proxyNTLMDomain", jcrcontentProxyNTLMDomain)
      .withQueryParam("jcr:content/proxyNTLMHost", jcrcontentProxyNTLMHost)
      .withQueryParam("jcr:content/proxyHost", jcrcontentProxyHost)
      .withQueryParam("jcr:content/proxyPassword", jcrcontentProxyPassword)
      .withQueryParam("jcr:content/proxyPort", jcrcontentProxyPort)
      .withQueryParam("jcr:content/proxyUser", jcrcontentProxyUser)
      .withQueryParam("jcr:content/queueBatchMaxSize", jcrcontentQueueBatchMaxSize)
      .withQueryParam("jcr:content/queueBatchMode", jcrcontentQueueBatchMode)
      .withQueryParam("jcr:content/queueBatchWaitTime", jcrcontentQueueBatchWaitTime)
      .withQueryParam("jcr:content/retryDelay", jcrcontentRetryDelay)
      .withQueryParam("jcr:content/reverseReplication", jcrcontentReverseReplication)
      .withQueryParam("jcr:content/serializationType", jcrcontentSerializationType)
      .withQueryParam("jcr:content/sling:resourceType", jcrcontentSlingresourceType)
      .withQueryParam("jcr:content/ssl", jcrcontentSsl)
      .withQueryParam("jcr:content/transportNTLMDomain", jcrcontentTransportNTLMDomain)
      .withQueryParam("jcr:content/transportNTLMHost", jcrcontentTransportNTLMHost)
      .withQueryParam("jcr:content/transportPassword", jcrcontentTransportPassword)
      .withQueryParam("jcr:content/transportUri", jcrcontentTransportUri)
      .withQueryParam("jcr:content/transportUser", jcrcontentTransportUser)
      .withQueryParam("jcr:content/triggerDistribute", jcrcontentTriggerDistribute)
      .withQueryParam("jcr:content/triggerModified", jcrcontentTriggerModified)
      .withQueryParam("jcr:content/triggerOnOffTime", jcrcontentTriggerOnOffTime)
      .withQueryParam("jcr:content/triggerReceive", jcrcontentTriggerReceive)
      .withQueryParam("jcr:content/triggerSpecific", jcrcontentTriggerSpecific)
      .withQueryParam("jcr:content/userId", jcrcontentUserId)
      .withQueryParam("jcr:primaryType", jcrprimaryType)
      .withQueryParam(":operation", operation)
      .withPathParam("runmode", runmode)
      .withPathParam("name", name)
      .withDefaultErrorResponse[Unit]
      

  /**
   * Expected answers:
   *   code 200 : KeystoreInfo (Retrieved Authorizable Keystore info)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param intermediatePath 
   * @param authorizableId 
   * @param operation 
   * @param currentPassword 
   * @param newPassword 
   * @param rePassword 
   * @param keyPassword 
   * @param keyStorePass 
   * @param alias 
   * @param newAlias 
   * @param removeAlias 
   * @param certChain 
   * @param pk 
   * @param keyStore 
   */
  def postAuthorizableKeystore(intermediatePath: String, authorizableId: String, operation: Option[String] = None, currentPassword: Option[String] = None, newPassword: Option[String] = None, rePassword: Option[String] = None, keyPassword: Option[String] = None, keyStorePass: Option[String] = None, alias: Option[String] = None, newAlias: Option[String] = None, removeAlias: Option[String] = None, certChain: Option[File] = None, pk: Option[File] = None, keyStore: Option[File] = None)(implicit basicAuth: BasicCredentials): ApiRequest[KeystoreInfo] =
    ApiRequest[KeystoreInfo](ApiMethods.POST, baseUrl, "/{intermediatePath}/{authorizableId}.ks.html", "multipart/form-data")
      .withCredentials(basicAuth).withFormParam("cert-chain", certChain)
      .withFormParam("pk", pk)
      .withFormParam("keyStore", keyStore)
      .withQueryParam(":operation", operation)
      .withQueryParam("currentPassword", currentPassword)
      .withQueryParam("newPassword", newPassword)
      .withQueryParam("rePassword", rePassword)
      .withQueryParam("keyPassword", keyPassword)
      .withQueryParam("keyStorePass", keyStorePass)
      .withQueryParam("alias", alias)
      .withQueryParam("newAlias", newAlias)
      .withQueryParam("removeAlias", removeAlias)
      .withPathParam("intermediatePath", intermediatePath)
      .withPathParam("authorizableId", authorizableId)
      .withSuccessResponse[KeystoreInfo](200)
      .withDefaultErrorResponse[String]
      

  /**
   * Expected answers:
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param authorizableId 
   * @param intermediatePath 
   * @param createUser 
   * @param createGroup 
   * @param reppassword 
   * @param profileGivenName 
   */
  def postAuthorizables(authorizableId: String, intermediatePath: String, createUser: Option[String] = None, createGroup: Option[String] = None, reppassword: Option[String] = None, profileGivenName: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, baseUrl, "/libs/granite/security/post/authorizables", "application/json")
      .withCredentials(basicAuth).withQueryParam("authorizableId", authorizableId)
      .withQueryParam("intermediatePath", intermediatePath)
      .withQueryParam("createUser", createUser)
      .withQueryParam("createGroup", createGroup)
      .withQueryParam("rep:password", reppassword)
      .withQueryParam("profile/givenName", profileGivenName)
      .withDefaultErrorResponse[String]
      

  /**
   * Expected answers:
   *   code 0 :  (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param keyStorePassword 
   * @param keyStorePasswordTypeHint 
   * @param serviceRanking 
   * @param serviceRankingTypeHint 
   * @param idpHttpRedirect 
   * @param idpHttpRedirectTypeHint 
   * @param createUser 
   * @param createUserTypeHint 
   * @param defaultRedirectUrl 
   * @param defaultRedirectUrlTypeHint 
   * @param userIDAttribute 
   * @param userIDAttributeTypeHint 
   * @param defaultGroups 
   * @param defaultGroupsTypeHint 
   * @param idpCertAlias 
   * @param idpCertAliasTypeHint 
   * @param addGroupMemberships 
   * @param addGroupMembershipsTypeHint 
   * @param path 
   * @param pathTypeHint 
   * @param synchronizeAttributes 
   * @param synchronizeAttributesTypeHint 
   * @param clockTolerance 
   * @param clockToleranceTypeHint 
   * @param groupMembershipAttribute 
   * @param groupMembershipAttributeTypeHint 
   * @param idpUrl 
   * @param idpUrlTypeHint 
   * @param logoutUrl 
   * @param logoutUrlTypeHint 
   * @param serviceProviderEntityId 
   * @param serviceProviderEntityIdTypeHint 
   * @param assertionConsumerServiceURL 
   * @param assertionConsumerServiceURLTypeHint 
   * @param handleLogout 
   * @param handleLogoutTypeHint 
   * @param spPrivateKeyAlias 
   * @param spPrivateKeyAliasTypeHint 
   * @param useEncryption 
   * @param useEncryptionTypeHint 
   * @param nameIdFormat 
   * @param nameIdFormatTypeHint 
   * @param digestMethod 
   * @param digestMethodTypeHint 
   * @param signatureMethod 
   * @param signatureMethodTypeHint 
   * @param userIntermediatePath 
   * @param userIntermediatePathTypeHint 
   */
  def postConfigAdobeGraniteSamlAuthenticationHandler(keyStorePassword: Option[String] = None, keyStorePasswordTypeHint: Option[String] = None, serviceRanking: Option[Int] = None, serviceRankingTypeHint: Option[String] = None, idpHttpRedirect: Option[Boolean] = None, idpHttpRedirectTypeHint: Option[String] = None, createUser: Option[Boolean] = None, createUserTypeHint: Option[String] = None, defaultRedirectUrl: Option[String] = None, defaultRedirectUrlTypeHint: Option[String] = None, userIDAttribute: Option[String] = None, userIDAttributeTypeHint: Option[String] = None, defaultGroups: Seq[String], defaultGroupsTypeHint: Option[String] = None, idpCertAlias: Option[String] = None, idpCertAliasTypeHint: Option[String] = None, addGroupMemberships: Option[Boolean] = None, addGroupMembershipsTypeHint: Option[String] = None, path: Seq[String], pathTypeHint: Option[String] = None, synchronizeAttributes: Seq[String], synchronizeAttributesTypeHint: Option[String] = None, clockTolerance: Option[Int] = None, clockToleranceTypeHint: Option[String] = None, groupMembershipAttribute: Option[String] = None, groupMembershipAttributeTypeHint: Option[String] = None, idpUrl: Option[String] = None, idpUrlTypeHint: Option[String] = None, logoutUrl: Option[String] = None, logoutUrlTypeHint: Option[String] = None, serviceProviderEntityId: Option[String] = None, serviceProviderEntityIdTypeHint: Option[String] = None, assertionConsumerServiceURL: Option[String] = None, assertionConsumerServiceURLTypeHint: Option[String] = None, handleLogout: Option[Boolean] = None, handleLogoutTypeHint: Option[String] = None, spPrivateKeyAlias: Option[String] = None, spPrivateKeyAliasTypeHint: Option[String] = None, useEncryption: Option[Boolean] = None, useEncryptionTypeHint: Option[String] = None, nameIdFormat: Option[String] = None, nameIdFormatTypeHint: Option[String] = None, digestMethod: Option[String] = None, digestMethodTypeHint: Option[String] = None, signatureMethod: Option[String] = None, signatureMethodTypeHint: Option[String] = None, userIntermediatePath: Option[String] = None, userIntermediatePathTypeHint: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, baseUrl, "/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config", "application/json")
      .withCredentials(basicAuth).withQueryParam("keyStorePassword", keyStorePassword)
      .withQueryParam("keyStorePassword@TypeHint", keyStorePasswordTypeHint)
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("service.ranking@TypeHint", serviceRankingTypeHint)
      .withQueryParam("idpHttpRedirect", idpHttpRedirect)
      .withQueryParam("idpHttpRedirect@TypeHint", idpHttpRedirectTypeHint)
      .withQueryParam("createUser", createUser)
      .withQueryParam("createUser@TypeHint", createUserTypeHint)
      .withQueryParam("defaultRedirectUrl", defaultRedirectUrl)
      .withQueryParam("defaultRedirectUrl@TypeHint", defaultRedirectUrlTypeHint)
      .withQueryParam("userIDAttribute", userIDAttribute)
      .withQueryParam("userIDAttribute@TypeHint", userIDAttributeTypeHint)
      .withQueryParam("defaultGroups", ArrayValues(defaultGroups, MULTI))
      .withQueryParam("defaultGroups@TypeHint", defaultGroupsTypeHint)
      .withQueryParam("idpCertAlias", idpCertAlias)
      .withQueryParam("idpCertAlias@TypeHint", idpCertAliasTypeHint)
      .withQueryParam("addGroupMemberships", addGroupMemberships)
      .withQueryParam("addGroupMemberships@TypeHint", addGroupMembershipsTypeHint)
      .withQueryParam("path", ArrayValues(path, MULTI))
      .withQueryParam("path@TypeHint", pathTypeHint)
      .withQueryParam("synchronizeAttributes", ArrayValues(synchronizeAttributes, MULTI))
      .withQueryParam("synchronizeAttributes@TypeHint", synchronizeAttributesTypeHint)
      .withQueryParam("clockTolerance", clockTolerance)
      .withQueryParam("clockTolerance@TypeHint", clockToleranceTypeHint)
      .withQueryParam("groupMembershipAttribute", groupMembershipAttribute)
      .withQueryParam("groupMembershipAttribute@TypeHint", groupMembershipAttributeTypeHint)
      .withQueryParam("idpUrl", idpUrl)
      .withQueryParam("idpUrl@TypeHint", idpUrlTypeHint)
      .withQueryParam("logoutUrl", logoutUrl)
      .withQueryParam("logoutUrl@TypeHint", logoutUrlTypeHint)
      .withQueryParam("serviceProviderEntityId", serviceProviderEntityId)
      .withQueryParam("serviceProviderEntityId@TypeHint", serviceProviderEntityIdTypeHint)
      .withQueryParam("assertionConsumerServiceURL", assertionConsumerServiceURL)
      .withQueryParam("assertionConsumerServiceURL@TypeHint", assertionConsumerServiceURLTypeHint)
      .withQueryParam("handleLogout", handleLogout)
      .withQueryParam("handleLogout@TypeHint", handleLogoutTypeHint)
      .withQueryParam("spPrivateKeyAlias", spPrivateKeyAlias)
      .withQueryParam("spPrivateKeyAlias@TypeHint", spPrivateKeyAliasTypeHint)
      .withQueryParam("useEncryption", useEncryption)
      .withQueryParam("useEncryption@TypeHint", useEncryptionTypeHint)
      .withQueryParam("nameIdFormat", nameIdFormat)
      .withQueryParam("nameIdFormat@TypeHint", nameIdFormatTypeHint)
      .withQueryParam("digestMethod", digestMethod)
      .withQueryParam("digestMethod@TypeHint", digestMethodTypeHint)
      .withQueryParam("signatureMethod", signatureMethod)
      .withQueryParam("signatureMethod@TypeHint", signatureMethodTypeHint)
      .withQueryParam("userIntermediatePath", userIntermediatePath)
      .withQueryParam("userIntermediatePath@TypeHint", userIntermediatePathTypeHint)
      .withDefaultErrorResponse[Unit]
      

  /**
   * Expected answers:
   *   code 0 :  (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param orgApacheFelixHttpsNio 
   * @param orgApacheFelixHttpsNioTypeHint 
   * @param orgApacheFelixHttpsKeystore 
   * @param orgApacheFelixHttpsKeystoreTypeHint 
   * @param orgApacheFelixHttpsKeystorePassword 
   * @param orgApacheFelixHttpsKeystorePasswordTypeHint 
   * @param orgApacheFelixHttpsKeystoreKey 
   * @param orgApacheFelixHttpsKeystoreKeyTypeHint 
   * @param orgApacheFelixHttpsKeystoreKeyPassword 
   * @param orgApacheFelixHttpsKeystoreKeyPasswordTypeHint 
   * @param orgApacheFelixHttpsTruststore 
   * @param orgApacheFelixHttpsTruststoreTypeHint 
   * @param orgApacheFelixHttpsTruststorePassword 
   * @param orgApacheFelixHttpsTruststorePasswordTypeHint 
   * @param orgApacheFelixHttpsClientcertificate 
   * @param orgApacheFelixHttpsClientcertificateTypeHint 
   * @param orgApacheFelixHttpsEnable 
   * @param orgApacheFelixHttpsEnableTypeHint 
   * @param orgOsgiServiceHttpPortSecure 
   * @param orgOsgiServiceHttpPortSecureTypeHint 
   */
  def postConfigApacheFelixJettyBasedHttpService(orgApacheFelixHttpsNio: Option[Boolean] = None, orgApacheFelixHttpsNioTypeHint: Option[String] = None, orgApacheFelixHttpsKeystore: Option[String] = None, orgApacheFelixHttpsKeystoreTypeHint: Option[String] = None, orgApacheFelixHttpsKeystorePassword: Option[String] = None, orgApacheFelixHttpsKeystorePasswordTypeHint: Option[String] = None, orgApacheFelixHttpsKeystoreKey: Option[String] = None, orgApacheFelixHttpsKeystoreKeyTypeHint: Option[String] = None, orgApacheFelixHttpsKeystoreKeyPassword: Option[String] = None, orgApacheFelixHttpsKeystoreKeyPasswordTypeHint: Option[String] = None, orgApacheFelixHttpsTruststore: Option[String] = None, orgApacheFelixHttpsTruststoreTypeHint: Option[String] = None, orgApacheFelixHttpsTruststorePassword: Option[String] = None, orgApacheFelixHttpsTruststorePasswordTypeHint: Option[String] = None, orgApacheFelixHttpsClientcertificate: Option[String] = None, orgApacheFelixHttpsClientcertificateTypeHint: Option[String] = None, orgApacheFelixHttpsEnable: Option[Boolean] = None, orgApacheFelixHttpsEnableTypeHint: Option[String] = None, orgOsgiServiceHttpPortSecure: Option[String] = None, orgOsgiServiceHttpPortSecureTypeHint: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, baseUrl, "/apps/system/config/org.apache.felix.http", "application/json")
      .withCredentials(basicAuth).withQueryParam("org.apache.felix.https.nio", orgApacheFelixHttpsNio)
      .withQueryParam("org.apache.felix.https.nio@TypeHint", orgApacheFelixHttpsNioTypeHint)
      .withQueryParam("org.apache.felix.https.keystore", orgApacheFelixHttpsKeystore)
      .withQueryParam("org.apache.felix.https.keystore@TypeHint", orgApacheFelixHttpsKeystoreTypeHint)
      .withQueryParam("org.apache.felix.https.keystore.password", orgApacheFelixHttpsKeystorePassword)
      .withQueryParam("org.apache.felix.https.keystore.password@TypeHint", orgApacheFelixHttpsKeystorePasswordTypeHint)
      .withQueryParam("org.apache.felix.https.keystore.key", orgApacheFelixHttpsKeystoreKey)
      .withQueryParam("org.apache.felix.https.keystore.key@TypeHint", orgApacheFelixHttpsKeystoreKeyTypeHint)
      .withQueryParam("org.apache.felix.https.keystore.key.password", orgApacheFelixHttpsKeystoreKeyPassword)
      .withQueryParam("org.apache.felix.https.keystore.key.password@TypeHint", orgApacheFelixHttpsKeystoreKeyPasswordTypeHint)
      .withQueryParam("org.apache.felix.https.truststore", orgApacheFelixHttpsTruststore)
      .withQueryParam("org.apache.felix.https.truststore@TypeHint", orgApacheFelixHttpsTruststoreTypeHint)
      .withQueryParam("org.apache.felix.https.truststore.password", orgApacheFelixHttpsTruststorePassword)
      .withQueryParam("org.apache.felix.https.truststore.password@TypeHint", orgApacheFelixHttpsTruststorePasswordTypeHint)
      .withQueryParam("org.apache.felix.https.clientcertificate", orgApacheFelixHttpsClientcertificate)
      .withQueryParam("org.apache.felix.https.clientcertificate@TypeHint", orgApacheFelixHttpsClientcertificateTypeHint)
      .withQueryParam("org.apache.felix.https.enable", orgApacheFelixHttpsEnable)
      .withQueryParam("org.apache.felix.https.enable@TypeHint", orgApacheFelixHttpsEnableTypeHint)
      .withQueryParam("org.osgi.service.http.port.secure", orgOsgiServiceHttpPortSecure)
      .withQueryParam("org.osgi.service.http.port.secure@TypeHint", orgOsgiServiceHttpPortSecureTypeHint)
      .withDefaultErrorResponse[Unit]
      

  /**
   * Expected answers:
   *   code 0 :  (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param proxyHost 
   * @param proxyHostTypeHint 
   * @param proxyPort 
   * @param proxyPortTypeHint 
   * @param proxyExceptions 
   * @param proxyExceptionsTypeHint 
   * @param proxyEnabled 
   * @param proxyEnabledTypeHint 
   * @param proxyUser 
   * @param proxyUserTypeHint 
   * @param proxyPassword 
   * @param proxyPasswordTypeHint 
   */
  def postConfigApacheHttpComponentsProxyConfiguration(proxyHost: Option[String] = None, proxyHostTypeHint: Option[String] = None, proxyPort: Option[Int] = None, proxyPortTypeHint: Option[String] = None, proxyExceptions: Seq[String], proxyExceptionsTypeHint: Option[String] = None, proxyEnabled: Option[Boolean] = None, proxyEnabledTypeHint: Option[String] = None, proxyUser: Option[String] = None, proxyUserTypeHint: Option[String] = None, proxyPassword: Option[String] = None, proxyPasswordTypeHint: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, baseUrl, "/apps/system/config/org.apache.http.proxyconfigurator.config", "application/json")
      .withCredentials(basicAuth).withQueryParam("proxy.host", proxyHost)
      .withQueryParam("proxy.host@TypeHint", proxyHostTypeHint)
      .withQueryParam("proxy.port", proxyPort)
      .withQueryParam("proxy.port@TypeHint", proxyPortTypeHint)
      .withQueryParam("proxy.exceptions", ArrayValues(proxyExceptions, MULTI))
      .withQueryParam("proxy.exceptions@TypeHint", proxyExceptionsTypeHint)
      .withQueryParam("proxy.enabled", proxyEnabled)
      .withQueryParam("proxy.enabled@TypeHint", proxyEnabledTypeHint)
      .withQueryParam("proxy.user", proxyUser)
      .withQueryParam("proxy.user@TypeHint", proxyUserTypeHint)
      .withQueryParam("proxy.password", proxyPassword)
      .withQueryParam("proxy.password@TypeHint", proxyPasswordTypeHint)
      .withDefaultErrorResponse[Unit]
      

  /**
   * Expected answers:
   *   code 0 :  (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param alias 
   * @param aliasTypeHint 
   * @param davCreateAbsoluteUri 
   * @param davCreateAbsoluteUriTypeHint 
   */
  def postConfigApacheSlingDavExServlet(alias: Option[String] = None, aliasTypeHint: Option[String] = None, davCreateAbsoluteUri: Option[Boolean] = None, davCreateAbsoluteUriTypeHint: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, baseUrl, "/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet", "application/json")
      .withCredentials(basicAuth).withQueryParam("alias", alias)
      .withQueryParam("alias@TypeHint", aliasTypeHint)
      .withQueryParam("dav.create-absolute-uri", davCreateAbsoluteUri)
      .withQueryParam("dav.create-absolute-uri@TypeHint", davCreateAbsoluteUriTypeHint)
      .withDefaultErrorResponse[Unit]
      

  /**
   * Expected answers:
   *   code 0 :  (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param jsonMaximumresults 
   * @param jsonMaximumresultsTypeHint 
   * @param enableHtml 
   * @param enableHtmlTypeHint 
   * @param enableTxt 
   * @param enableTxtTypeHint 
   * @param enableXml 
   * @param enableXmlTypeHint 
   */
  def postConfigApacheSlingGetServlet(jsonMaximumresults: Option[String] = None, jsonMaximumresultsTypeHint: Option[String] = None, enableHtml: Option[Boolean] = None, enableHtmlTypeHint: Option[String] = None, enableTxt: Option[Boolean] = None, enableTxtTypeHint: Option[String] = None, enableXml: Option[Boolean] = None, enableXmlTypeHint: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, baseUrl, "/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet", "application/json")
      .withCredentials(basicAuth).withQueryParam("json.maximumresults", jsonMaximumresults)
      .withQueryParam("json.maximumresults@TypeHint", jsonMaximumresultsTypeHint)
      .withQueryParam("enable.html", enableHtml)
      .withQueryParam("enable.html@TypeHint", enableHtmlTypeHint)
      .withQueryParam("enable.txt", enableTxt)
      .withQueryParam("enable.txt@TypeHint", enableTxtTypeHint)
      .withQueryParam("enable.xml", enableXml)
      .withQueryParam("enable.xml@TypeHint", enableXmlTypeHint)
      .withDefaultErrorResponse[Unit]
      

  /**
   * Expected answers:
   *   code 0 :  (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param allowEmpty 
   * @param allowEmptyTypeHint 
   * @param allowHosts 
   * @param allowHostsTypeHint 
   * @param allowHostsRegexp 
   * @param allowHostsRegexpTypeHint 
   * @param filterMethods 
   * @param filterMethodsTypeHint 
   */
  def postConfigApacheSlingReferrerFilter(allowEmpty: Option[Boolean] = None, allowEmptyTypeHint: Option[String] = None, allowHosts: Option[String] = None, allowHostsTypeHint: Option[String] = None, allowHostsRegexp: Option[String] = None, allowHostsRegexpTypeHint: Option[String] = None, filterMethods: Option[String] = None, filterMethodsTypeHint: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, baseUrl, "/apps/system/config/org.apache.sling.security.impl.ReferrerFilter", "application/json")
      .withCredentials(basicAuth).withQueryParam("allow.empty", allowEmpty)
      .withQueryParam("allow.empty@TypeHint", allowEmptyTypeHint)
      .withQueryParam("allow.hosts", allowHosts)
      .withQueryParam("allow.hosts@TypeHint", allowHostsTypeHint)
      .withQueryParam("allow.hosts.regexp", allowHostsRegexp)
      .withQueryParam("allow.hosts.regexp@TypeHint", allowHostsRegexpTypeHint)
      .withQueryParam("filter.methods", filterMethods)
      .withQueryParam("filter.methods@TypeHint", filterMethodsTypeHint)
      .withDefaultErrorResponse[Unit]
      

  /**
   * Expected answers:
   *   code 0 :  (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param configNodeName 
   */
  def postConfigProperty(configNodeName: String)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, baseUrl, "/apps/system/config/{configNodeName}", "application/json")
      .withCredentials(basicAuth).withPathParam("configNodeName", configNodeName)
      .withDefaultErrorResponse[Unit]
      

  /**
   * Expected answers:
   *   code 0 :  (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param path 
   * @param name 
   * @param operation 
   * @param deleteAuthorizable 
   * @param file 
   */
  def postNode(path: String, name: String, operation: Option[String] = None, deleteAuthorizable: Option[String] = None, file: Option[File] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, baseUrl, "/{path}/{name}", "multipart/form-data")
      .withCredentials(basicAuth).withFormParam("file", file)
      .withQueryParam(":operation", operation)
      .withQueryParam("deleteAuthorizable", deleteAuthorizable)
      .withPathParam("path", path)
      .withPathParam("name", name)
      .withDefaultErrorResponse[Unit]
      

  /**
   * Expected answers:
   *   code 0 :  (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param path 
   * @param name 
   * @param addMembers 
   */
  def postNodeRw(path: String, name: String, addMembers: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, baseUrl, "/{path}/{name}.rw.html", "application/json")
      .withCredentials(basicAuth).withQueryParam("addMembers", addMembers)
      .withPathParam("path", path)
      .withPathParam("name", name)
      .withDefaultErrorResponse[Unit]
      

  /**
   * Expected answers:
   *   code 0 :  (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param path 
   * @param jcrprimaryType 
   * @param name 
   */
  def postPath(path: String, jcrprimaryType: String, name: String)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, baseUrl, "/{path}/", "application/json")
      .withCredentials(basicAuth).withQueryParam("jcr:primaryType", jcrprimaryType)
      .withQueryParam(":name", name)
      .withPathParam("path", path)
      .withDefaultErrorResponse[Unit]
      

  /**
   * Expected answers:
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param path 
   * @param pLimit 
   * @param `1property` 
   * @param `1propertyValue` 
   */
  def postQuery(path: String, pLimit: BigDecimal, `1property`: String, `1propertyValue`: String)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, baseUrl, "/bin/querybuilder.json", "application/json")
      .withCredentials(basicAuth).withQueryParam("path", path)
      .withQueryParam("p.limit", pLimit)
      .withQueryParam("1_property", `1property`)
      .withQueryParam("1_property.value", `1propertyValue`)
      .withDefaultErrorResponse[String]
      

  /**
   * Expected answers:
   *   code 0 :  (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param ignoredeactivated 
   * @param onlymodified 
   * @param path 
   */
  def postTreeActivation(ignoredeactivated: Boolean, onlymodified: Boolean, path: String)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, baseUrl, "/etc/replication/treeactivation.html", "application/json")
      .withCredentials(basicAuth).withQueryParam("ignoredeactivated", ignoredeactivated)
      .withQueryParam("onlymodified", onlymodified)
      .withQueryParam("path", path)
      .withDefaultErrorResponse[Unit]
      

  /**
   * Expected answers:
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param operation 
   * @param newPassword 
   * @param rePassword 
   * @param keyStoreType 
   * @param removeAlias 
   * @param certificate 
   */
  def postTruststore(operation: Option[String] = None, newPassword: Option[String] = None, rePassword: Option[String] = None, keyStoreType: Option[String] = None, removeAlias: Option[String] = None, certificate: Option[File] = None)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, baseUrl, "/libs/granite/security/post/truststore", "multipart/form-data")
      .withCredentials(basicAuth).withFormParam("certificate", certificate)
      .withQueryParam(":operation", operation)
      .withQueryParam("newPassword", newPassword)
      .withQueryParam("rePassword", rePassword)
      .withQueryParam("keyStoreType", keyStoreType)
      .withQueryParam("removeAlias", removeAlias)
      .withDefaultErrorResponse[String]
      

  /**
   * Expected answers:
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param truststoreP12 
   */
  def postTruststorePKCS12(truststoreP12: Option[File] = None)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, baseUrl, "/etc/truststore", "multipart/form-data")
      .withCredentials(basicAuth).withFormParam("truststore.p12", truststoreP12)
      .withDefaultErrorResponse[String]
      



}

