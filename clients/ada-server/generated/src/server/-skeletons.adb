--  Adobe Experience Manager (AEM) API
--  Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
--
--  The version of the OpenAPI document: 3.5.0_pre.0
--  Contact: opensource@shinesolutions.com
--
--  NOTE: This package is auto generated by OpenAPI-Generator 5.2.1.
--  https://openapi-generator.tech
--  Do not edit the class manually.

pragma Warnings (Off, "*is not referenced");
with Swagger.Streams;
with Swagger.Servers.Operation;
package body .Skeletons is
   pragma Style_Checks ("-mr");
   pragma Warnings (Off, "*use clause for package*");

   use Swagger.Streams;

   package body Skeleton is


      package API_Get_Aem_Product_Info is
         new Swagger.Servers.Operation (Handler => Get_Aem_Product_Info,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/system/console/status-productinfo.json");

      --  
      procedure Get_Aem_Product_Info
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : Swagger.UString_Vectors.Vector;
      begin
         Impl.Get_Aem_Product_Info (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Aem_Product_Info;

      package API_Get_Bundle_Info is
         new Swagger.Servers.Operation (Handler => Get_Bundle_Info,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/system/console/bundles/{name}.json");

      --  
      procedure Get_Bundle_Info
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Name : Swagger.UString;
         Result : .Models.BundleInfo_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Name);
         Impl.Get_Bundle_Info
            (Name, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Bundle_Info;

      package API_Get_Config_Mgr is
         new Swagger.Servers.Operation (Handler => Get_Config_Mgr,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/system/console/configMgr");

      --  
      procedure Get_Config_Mgr
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : Swagger.UString;
      begin
         Impl.Get_Config_Mgr (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Config_Mgr;

      package API_Post_Bundle is
         new Swagger.Servers.Operation (Handler => Post_Bundle,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/system/console/bundles/{name}");

      --  
      procedure Post_Bundle
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Name : Swagger.UString;
         Action : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "action", Action);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Name);
         Impl.Post_Bundle
            (Name,
             Action, Context);

      end Post_Bundle;

      package API_Post_Jmx_Repository is
         new Swagger.Servers.Operation (Handler => Post_Jmx_Repository,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/system/console/jmx/com.adobe.granite:type=Repository/op/{action}");

      --  
      procedure Post_Jmx_Repository
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Action : Swagger.UString;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Action);
         Impl.Post_Jmx_Repository
            (Action, Context);

      end Post_Jmx_Repository;

      package API_Post_Saml_Configuration is
         new Swagger.Servers.Operation (Handler => Post_Saml_Configuration,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler");

      --  
      procedure Post_Saml_Configuration
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Post : Swagger.Nullable_Boolean;
         Apply : Swagger.Nullable_Boolean;
         Delete : Swagger.Nullable_Boolean;
         Action : Swagger.Nullable_UString;
         Dollarlocation : Swagger.Nullable_UString;
         Path : Swagger.UString_Vectors.Vector;
         Service_Periodranking : Swagger.Nullable_Integer;
         Idp_Url : Swagger.Nullable_UString;
         Idp_Cert_Alias : Swagger.Nullable_UString;
         Idp_Http_Redirect : Swagger.Nullable_Boolean;
         Service_Provider_Entity_Id : Swagger.Nullable_UString;
         Assertion_Consumer_Service_URL : Swagger.Nullable_UString;
         Sp_Private_Key_Alias : Swagger.Nullable_UString;
         Key_Store_Password : Swagger.Nullable_UString;
         Default_Redirect_Url : Swagger.Nullable_UString;
         User_IDAttribute : Swagger.Nullable_UString;
         Use_Encryption : Swagger.Nullable_Boolean;
         Create_User : Swagger.Nullable_Boolean;
         Add_Group_Memberships : Swagger.Nullable_Boolean;
         Group_Membership_Attribute : Swagger.Nullable_UString;
         Default_Groups : Swagger.UString_Vectors.Vector;
         Name_Id_Format : Swagger.Nullable_UString;
         Synchronize_Attributes : Swagger.UString_Vectors.Vector;
         Handle_Logout : Swagger.Nullable_Boolean;
         Logout_Url : Swagger.Nullable_UString;
         Clock_Tolerance : Swagger.Nullable_Integer;
         Digest_Method : Swagger.Nullable_UString;
         Signature_Method : Swagger.Nullable_UString;
         User_Intermediate_Path : Swagger.Nullable_UString;
         Propertylist : Swagger.UString_Vectors.Vector;
         Result : .Models.SamlConfigurationInfo_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "post", Post);
         Swagger.Servers.Get_Query_Parameter (Req, "apply", Apply);
         Swagger.Servers.Get_Query_Parameter (Req, "delete", Delete);
         Swagger.Servers.Get_Query_Parameter (Req, "action", Action);
         Swagger.Servers.Get_Query_Parameter (Req, "$location", Dollarlocation);
         Swagger.Servers.Get_Query_Parameter (Req, "path", Path);
         Swagger.Servers.Get_Query_Parameter (Req, "service.ranking", Service_Periodranking);
         Swagger.Servers.Get_Query_Parameter (Req, "idpUrl", Idp_Url);
         Swagger.Servers.Get_Query_Parameter (Req, "idpCertAlias", Idp_Cert_Alias);
         Swagger.Servers.Get_Query_Parameter (Req, "idpHttpRedirect", Idp_Http_Redirect);
         Swagger.Servers.Get_Query_Parameter (Req, "serviceProviderEntityId", Service_Provider_Entity_Id);
         Swagger.Servers.Get_Query_Parameter (Req, "assertionConsumerServiceURL", Assertion_Consumer_Service_URL);
         Swagger.Servers.Get_Query_Parameter (Req, "spPrivateKeyAlias", Sp_Private_Key_Alias);
         Swagger.Servers.Get_Query_Parameter (Req, "keyStorePassword", Key_Store_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "defaultRedirectUrl", Default_Redirect_Url);
         Swagger.Servers.Get_Query_Parameter (Req, "userIDAttribute", User_IDAttribute);
         Swagger.Servers.Get_Query_Parameter (Req, "useEncryption", Use_Encryption);
         Swagger.Servers.Get_Query_Parameter (Req, "createUser", Create_User);
         Swagger.Servers.Get_Query_Parameter (Req, "addGroupMemberships", Add_Group_Memberships);
         Swagger.Servers.Get_Query_Parameter (Req, "groupMembershipAttribute", Group_Membership_Attribute);
         Swagger.Servers.Get_Query_Parameter (Req, "defaultGroups", Default_Groups);
         Swagger.Servers.Get_Query_Parameter (Req, "nameIdFormat", Name_Id_Format);
         Swagger.Servers.Get_Query_Parameter (Req, "synchronizeAttributes", Synchronize_Attributes);
         Swagger.Servers.Get_Query_Parameter (Req, "handleLogout", Handle_Logout);
         Swagger.Servers.Get_Query_Parameter (Req, "logoutUrl", Logout_Url);
         Swagger.Servers.Get_Query_Parameter (Req, "clockTolerance", Clock_Tolerance);
         Swagger.Servers.Get_Query_Parameter (Req, "digestMethod", Digest_Method);
         Swagger.Servers.Get_Query_Parameter (Req, "signatureMethod", Signature_Method);
         Swagger.Servers.Get_Query_Parameter (Req, "userIntermediatePath", User_Intermediate_Path);
         Swagger.Servers.Get_Query_Parameter (Req, "propertylist", Propertylist);
         Impl.Post_Saml_Configuration
            (Post,
             Apply,
             Delete,
             Action,
             Dollarlocation,
             Path,
             Service_Periodranking,
             Idp_Url,
             Idp_Cert_Alias,
             Idp_Http_Redirect,
             Service_Provider_Entity_Id,
             Assertion_Consumer_Service_URL,
             Sp_Private_Key_Alias,
             Key_Store_Password,
             Default_Redirect_Url,
             User_IDAttribute,
             Use_Encryption,
             Create_User,
             Add_Group_Memberships,
             Group_Membership_Attribute,
             Default_Groups,
             Name_Id_Format,
             Synchronize_Attributes,
             Handle_Logout,
             Logout_Url,
             Clock_Tolerance,
             Digest_Method,
             Signature_Method,
             User_Intermediate_Path,
             Propertylist, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Post_Saml_Configuration;

      package API_Get_Login_Page is
         new Swagger.Servers.Operation (Handler => Get_Login_Page,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/libs/granite/core/content/login.html");

      --  
      procedure Get_Login_Page
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : Swagger.UString;
      begin
         Impl.Get_Login_Page (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Login_Page;

      package API_Post_Cq_Actions is
         new Swagger.Servers.Operation (Handler => Post_Cq_Actions,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/.cqactions.html");

      --  
      procedure Post_Cq_Actions
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Authorizable_Id : Swagger.UString;
         Changelog : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "authorizableId", Authorizable_Id);
         Swagger.Servers.Get_Query_Parameter (Req, "changelog", Changelog);
         Impl.Post_Cq_Actions
            (Authorizable_Id,
             Changelog, Context);

      end Post_Cq_Actions;

      package API_Get_Crxde_Status is
         new Swagger.Servers.Operation (Handler => Get_Crxde_Status,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/crx/server/crx.default/jcr:root/.1.json");

      --  
      procedure Get_Crxde_Status
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : Swagger.UString;
      begin
         Impl.Get_Crxde_Status (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Crxde_Status;

      package API_Get_Install_Status is
         new Swagger.Servers.Operation (Handler => Get_Install_Status,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/crx/packmgr/installstatus.jsp");

      --  
      procedure Get_Install_Status
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : .Models.InstallStatus_Type;
      begin
         Impl.Get_Install_Status (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Install_Status;

      package API_Get_Package_Manager_Servlet is
         new Swagger.Servers.Operation (Handler => Get_Package_Manager_Servlet,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/crx/packmgr/service/script.html");

      --  
      procedure Get_Package_Manager_Servlet
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
      begin
         Impl.Get_Package_Manager_Servlet (Context);

      end Get_Package_Manager_Servlet;

      package API_Post_Package_Service is
         new Swagger.Servers.Operation (Handler => Post_Package_Service,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/crx/packmgr/service.jsp");

      --  
      procedure Post_Package_Service
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Cmd : Swagger.UString;
         Result : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "cmd", Cmd);
         Impl.Post_Package_Service
            (Cmd, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Post_Package_Service;

      package API_Post_Package_Service_Json is
         new Swagger.Servers.Operation (Handler => Post_Package_Service_Json,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/crx/packmgr/service/.json/{path}");

      --  
      procedure Post_Package_Service_Json
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Path : Swagger.UString;
         Cmd : Swagger.UString;
         Group_Name : Swagger.Nullable_UString;
         Package_Name : Swagger.Nullable_UString;
         Package_Version : Swagger.Nullable_UString;
         Charset : Swagger.Nullable_UString;
         Force : Swagger.Nullable_Boolean;
         Recursive : Swagger.Nullable_Boolean;
         P_Package : Swagger.File_Part_Type;
         Result : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "cmd", Cmd);
         Swagger.Servers.Get_Query_Parameter (Req, "groupName", Group_Name);
         Swagger.Servers.Get_Query_Parameter (Req, "packageName", Package_Name);
         Swagger.Servers.Get_Query_Parameter (Req, "packageVersion", Package_Version);
         Swagger.Servers.Get_Query_Parameter (Req, "_charset_", Charset);
         Swagger.Servers.Get_Query_Parameter (Req, "force", Force);
         Swagger.Servers.Get_Query_Parameter (Req, "recursive", Recursive);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Path);
         Swagger.Servers.Get_Parameter (Context, "package", P_Package);
         Impl.Post_Package_Service_Json
            (Path,
             Cmd,
             Group_Name,
             Package_Name,
             Package_Version,
             Charset,
             Force,
             Recursive,
             P_Package, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Post_Package_Service_Json;

      package API_Post_Package_Update is
         new Swagger.Servers.Operation (Handler => Post_Package_Update,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/crx/packmgr/update.jsp");

      --  
      procedure Post_Package_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Group_Name : Swagger.UString;
         Package_Name : Swagger.UString;
         Version : Swagger.UString;
         Path : Swagger.UString;
         Filter : Swagger.Nullable_UString;
         Charset : Swagger.Nullable_UString;
         Result : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "groupName", Group_Name);
         Swagger.Servers.Get_Query_Parameter (Req, "packageName", Package_Name);
         Swagger.Servers.Get_Query_Parameter (Req, "version", Version);
         Swagger.Servers.Get_Query_Parameter (Req, "path", Path);
         Swagger.Servers.Get_Query_Parameter (Req, "filter", Filter);
         Swagger.Servers.Get_Query_Parameter (Req, "_charset_", Charset);
         Impl.Post_Package_Update
            (Group_Name,
             Package_Name,
             Version,
             Path,
             Filter,
             Charset, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Post_Package_Update;

      package API_Post_Set_Password is
         new Swagger.Servers.Operation (Handler => Post_Set_Password,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/crx/explorer/ui/setpassword.jsp");

      --  
      procedure Post_Set_Password
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Old : Swagger.UString;
         Plain : Swagger.UString;
         Verify : Swagger.UString;
         Result : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "old", Old);
         Swagger.Servers.Get_Query_Parameter (Req, "plain", Plain);
         Swagger.Servers.Get_Query_Parameter (Req, "verify", Verify);
         Impl.Post_Set_Password
            (Old,
             Plain,
             Verify, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Post_Set_Password;

      package API_Get_Aem_Health_Check is
         new Swagger.Servers.Operation (Handler => Get_Aem_Health_Check,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/system/health");

      --  
      procedure Get_Aem_Health_Check
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Tags : Swagger.Nullable_UString;
         Combine_Tags_Or : Swagger.Nullable_Boolean;
         Result : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "tags", Tags);
         Swagger.Servers.Get_Query_Parameter (Req, "combineTagsOr", Combine_Tags_Or);
         Impl.Get_Aem_Health_Check
            (Tags,
             Combine_Tags_Or, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Aem_Health_Check;

      package API_Post_Config_Aem_Health_Check_Servlet is
         new Swagger.Servers.Operation (Handler => Post_Config_Aem_Health_Check_Servlet,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck");

      --  
      procedure Post_Config_Aem_Health_Check_Servlet
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Bundles_Periodignored : Swagger.UString_Vectors.Vector;
         Bundles_Periodignored_At_Type_Hint : Swagger.Nullable_UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "bundles.ignored", Bundles_Periodignored);
         Swagger.Servers.Get_Query_Parameter (Req, "bundles.ignored@TypeHint", Bundles_Periodignored_At_Type_Hint);
         Impl.Post_Config_Aem_Health_Check_Servlet
            (Bundles_Periodignored,
             Bundles_Periodignored_At_Type_Hint, Context);

      end Post_Config_Aem_Health_Check_Servlet;

      package API_Post_Config_Aem_Password_Reset is
         new Swagger.Servers.Operation (Handler => Post_Config_Aem_Password_Reset,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/apps/system/config/com.shinesolutions.aem.passwordreset.Activator");

      --  
      procedure Post_Config_Aem_Password_Reset
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Pwdreset_Periodauthorizables : Swagger.UString_Vectors.Vector;
         Pwdreset_Periodauthorizables_At_Type_Hint : Swagger.Nullable_UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "pwdreset.authorizables", Pwdreset_Periodauthorizables);
         Swagger.Servers.Get_Query_Parameter (Req, "pwdreset.authorizables@TypeHint", Pwdreset_Periodauthorizables_At_Type_Hint);
         Impl.Post_Config_Aem_Password_Reset
            (Pwdreset_Periodauthorizables,
             Pwdreset_Periodauthorizables_At_Type_Hint, Context);

      end Post_Config_Aem_Password_Reset;

      package API_Ssl_Setup is
         new Swagger.Servers.Operation (Handler => Ssl_Setup,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/libs/granite/security/post/sslSetup.html");

      --  
      procedure Ssl_Setup
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Keystore_Password : Swagger.UString;
         Keystore_Password_Confirm : Swagger.UString;
         Truststore_Password : Swagger.UString;
         Truststore_Password_Confirm : Swagger.UString;
         Https_Hostname : Swagger.UString;
         Https_Port : Swagger.UString;
         Privatekey_File : Swagger.File_Part_Type;
         Certificate_File : Swagger.File_Part_Type;
         Result : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "keystorePassword", Keystore_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "keystorePasswordConfirm", Keystore_Password_Confirm);
         Swagger.Servers.Get_Query_Parameter (Req, "truststorePassword", Truststore_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "truststorePasswordConfirm", Truststore_Password_Confirm);
         Swagger.Servers.Get_Query_Parameter (Req, "httpsHostname", Https_Hostname);
         Swagger.Servers.Get_Query_Parameter (Req, "httpsPort", Https_Port);
         Swagger.Servers.Get_Parameter (Context, "privatekeyFile", Privatekey_File);
         Swagger.Servers.Get_Parameter (Context, "certificateFile", Certificate_File);
         Impl.Ssl_Setup
            (Keystore_Password,
             Keystore_Password_Confirm,
             Truststore_Password,
             Truststore_Password_Confirm,
             Https_Hostname,
             Https_Port,
             Privatekey_File,
             Certificate_File, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Ssl_Setup;

      package API_Delete_Agent is
         new Swagger.Servers.Operation (Handler => Delete_Agent,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/etc/replication/agents.{runmode}/{name}");

      --  
      procedure Delete_Agent
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Runmode : Swagger.UString;
         Name : Swagger.UString;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Runmode);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Name);
         Impl.Delete_Agent
            (Runmode,
             Name, Context);

      end Delete_Agent;

      package API_Delete_Node is
         new Swagger.Servers.Operation (Handler => Delete_Node,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/{path}/{name}");

      --  
      procedure Delete_Node
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Path : Swagger.UString;
         Name : Swagger.UString;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Path);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Name);
         Impl.Delete_Node
            (Path,
             Name, Context);

      end Delete_Node;

      package API_Get_Agent is
         new Swagger.Servers.Operation (Handler => Get_Agent,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/etc/replication/agents.{runmode}/{name}");

      --  
      procedure Get_Agent
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Runmode : Swagger.UString;
         Name : Swagger.UString;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Runmode);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Name);
         Impl.Get_Agent
            (Runmode,
             Name, Context);

      end Get_Agent;

      package API_Get_Agents is
         new Swagger.Servers.Operation (Handler => Get_Agents,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/etc/replication/agents.{runmode}.-1.json");

      --  
      procedure Get_Agents
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Runmode : Swagger.UString;
         Result : Swagger.UString;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Runmode);
         Impl.Get_Agents
            (Runmode, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Agents;

      package API_Get_Authorizable_Keystore is
         new Swagger.Servers.Operation (Handler => Get_Authorizable_Keystore,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/{intermediatePath}/{authorizableId}.ks.json");

      --  
      procedure Get_Authorizable_Keystore
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Intermediate_Path : Swagger.UString;
         Authorizable_Id : Swagger.UString;
         Result : .Models.KeystoreInfo_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Intermediate_Path);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Authorizable_Id);
         Impl.Get_Authorizable_Keystore
            (Intermediate_Path,
             Authorizable_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Authorizable_Keystore;

      package API_Get_Keystore is
         new Swagger.Servers.Operation (Handler => Get_Keystore,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/{intermediatePath}/{authorizableId}/keystore/store.p12");

      --  
      procedure Get_Keystore
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Intermediate_Path : Swagger.UString;
         Authorizable_Id : Swagger.UString;
         Result : Swagger.Http_Content_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Intermediate_Path);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Authorizable_Id);
         Impl.Get_Keystore
            (Intermediate_Path,
             Authorizable_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Keystore;

      package API_Get_Node is
         new Swagger.Servers.Operation (Handler => Get_Node,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/{path}/{name}");

      --  
      procedure Get_Node
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Path : Swagger.UString;
         Name : Swagger.UString;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Path);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Name);
         Impl.Get_Node
            (Path,
             Name, Context);

      end Get_Node;

      package API_Get_Package is
         new Swagger.Servers.Operation (Handler => Get_Package,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/etc/packages/{group}/{name}-{version}.zip");

      --  
      procedure Get_Package
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Group : Swagger.UString;
         Name : Swagger.UString;
         Version : Swagger.UString;
         Result : Swagger.Http_Content_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Group);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Name);
         Swagger.Servers.Get_Path_Parameter (Req, 3, Version);
         Impl.Get_Package
            (Group,
             Name,
             Version, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Package;

      package API_Get_Package_Filter is
         new Swagger.Servers.Operation (Handler => Get_Package_Filter,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json");

      --  
      procedure Get_Package_Filter
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Group : Swagger.UString;
         Name : Swagger.UString;
         Version : Swagger.UString;
         Result : Swagger.UString;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Group);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Name);
         Swagger.Servers.Get_Path_Parameter (Req, 3, Version);
         Impl.Get_Package_Filter
            (Group,
             Name,
             Version, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Package_Filter;

      package API_Get_Query is
         new Swagger.Servers.Operation (Handler => Get_Query,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/bin/querybuilder.json");

      --  
      procedure Get_Query
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Path : Swagger.UString;
         P_Periodlimit : Swagger.Number;
         P_1Property : Swagger.UString;
         P_1Property_Periodvalue : Swagger.UString;
         Result : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "path", Path);
         Swagger.Servers.Get_Query_Parameter (Req, "p.limit", P_Periodlimit);
         Swagger.Servers.Get_Query_Parameter (Req, "1_property", P_1Property);
         Swagger.Servers.Get_Query_Parameter (Req, "1_property.value", P_1Property_Periodvalue);
         Impl.Get_Query
            (Path,
             P_Periodlimit,
             P_1Property,
             P_1Property_Periodvalue, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Query;

      package API_Get_Truststore is
         new Swagger.Servers.Operation (Handler => Get_Truststore,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/etc/truststore/truststore.p12");

      --  
      procedure Get_Truststore
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : Swagger.Http_Content_Type;
      begin
         Impl.Get_Truststore (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Truststore;

      package API_Get_Truststore_Info is
         new Swagger.Servers.Operation (Handler => Get_Truststore_Info,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/libs/granite/security/truststore.json");

      --  
      procedure Get_Truststore_Info
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : .Models.TruststoreInfo_Type;
      begin
         Impl.Get_Truststore_Info (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Truststore_Info;

      package API_Post_Agent is
         new Swagger.Servers.Operation (Handler => Post_Agent,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/etc/replication/agents.{runmode}/{name}");

      --  
      procedure Post_Agent
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Runmode : Swagger.UString;
         Name : Swagger.UString;
         Jcr_Content_Slashcq_Distribute : Swagger.Nullable_Boolean;
         Jcr_Content_Slashcq_Distribute_At_Type_Hint : Swagger.Nullable_UString;
         Jcr_Content_Slashcq_Name : Swagger.Nullable_UString;
         Jcr_Content_Slashcq_Template : Swagger.Nullable_UString;
         Jcr_Content_Slashenabled : Swagger.Nullable_Boolean;
         Jcr_Content_Slashjcr_Description : Swagger.Nullable_UString;
         Jcr_Content_Slashjcr_Last_Modified : Swagger.Nullable_UString;
         Jcr_Content_Slashjcr_Last_Modified_By : Swagger.Nullable_UString;
         Jcr_Content_Slashjcr_Mixin_Types : Swagger.Nullable_UString;
         Jcr_Content_Slashjcr_Title : Swagger.Nullable_UString;
         Jcr_Content_Slashlog_Level : Swagger.Nullable_UString;
         Jcr_Content_Slashno_Status_Update : Swagger.Nullable_Boolean;
         Jcr_Content_Slashno_Versioning : Swagger.Nullable_Boolean;
         Jcr_Content_Slashprotocol_Connect_Timeout : Swagger.Number;
         Jcr_Content_Slashprotocol_HTTPConnection_Closed : Swagger.Nullable_Boolean;
         Jcr_Content_Slashprotocol_HTTPExpired : Swagger.Nullable_UString;
         Jcr_Content_Slashprotocol_HTTPHeaders : Swagger.UString_Vectors.Vector;
         Jcr_Content_Slashprotocol_HTTPHeaders_At_Type_Hint : Swagger.Nullable_UString;
         Jcr_Content_Slashprotocol_HTTPMethod : Swagger.Nullable_UString;
         Jcr_Content_Slashprotocol_HTTPSRelaxed : Swagger.Nullable_Boolean;
         Jcr_Content_Slashprotocol_Interface : Swagger.Nullable_UString;
         Jcr_Content_Slashprotocol_Socket_Timeout : Swagger.Number;
         Jcr_Content_Slashprotocol_Version : Swagger.Nullable_UString;
         Jcr_Content_Slashproxy_NTLMDomain : Swagger.Nullable_UString;
         Jcr_Content_Slashproxy_NTLMHost : Swagger.Nullable_UString;
         Jcr_Content_Slashproxy_Host : Swagger.Nullable_UString;
         Jcr_Content_Slashproxy_Password : Swagger.Nullable_UString;
         Jcr_Content_Slashproxy_Port : Swagger.Number;
         Jcr_Content_Slashproxy_User : Swagger.Nullable_UString;
         Jcr_Content_Slashqueue_Batch_Max_Size : Swagger.Number;
         Jcr_Content_Slashqueue_Batch_Mode : Swagger.Nullable_UString;
         Jcr_Content_Slashqueue_Batch_Wait_Time : Swagger.Number;
         Jcr_Content_Slashretry_Delay : Swagger.Nullable_UString;
         Jcr_Content_Slashreverse_Replication : Swagger.Nullable_Boolean;
         Jcr_Content_Slashserialization_Type : Swagger.Nullable_UString;
         Jcr_Content_Slashsling_Resource_Type : Swagger.Nullable_UString;
         Jcr_Content_Slashssl : Swagger.Nullable_UString;
         Jcr_Content_Slashtransport_NTLMDomain : Swagger.Nullable_UString;
         Jcr_Content_Slashtransport_NTLMHost : Swagger.Nullable_UString;
         Jcr_Content_Slashtransport_Password : Swagger.Nullable_UString;
         Jcr_Content_Slashtransport_Uri : Swagger.Nullable_UString;
         Jcr_Content_Slashtransport_User : Swagger.Nullable_UString;
         Jcr_Content_Slashtrigger_Distribute : Swagger.Nullable_Boolean;
         Jcr_Content_Slashtrigger_Modified : Swagger.Nullable_Boolean;
         Jcr_Content_Slashtrigger_On_Off_Time : Swagger.Nullable_Boolean;
         Jcr_Content_Slashtrigger_Receive : Swagger.Nullable_Boolean;
         Jcr_Content_Slashtrigger_Specific : Swagger.Nullable_Boolean;
         Jcr_Content_Slashuser_Id : Swagger.Nullable_UString;
         Jcr_Primary_Type : Swagger.Nullable_UString;
         Operation : Swagger.Nullable_UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/cq:distribute", Jcr_Content_Slashcq_Distribute);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/cq:distribute@TypeHint", Jcr_Content_Slashcq_Distribute_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/cq:name", Jcr_Content_Slashcq_Name);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/cq:template", Jcr_Content_Slashcq_Template);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/enabled", Jcr_Content_Slashenabled);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/jcr:description", Jcr_Content_Slashjcr_Description);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/jcr:lastModified", Jcr_Content_Slashjcr_Last_Modified);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/jcr:lastModifiedBy", Jcr_Content_Slashjcr_Last_Modified_By);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/jcr:mixinTypes", Jcr_Content_Slashjcr_Mixin_Types);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/jcr:title", Jcr_Content_Slashjcr_Title);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/logLevel", Jcr_Content_Slashlog_Level);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/noStatusUpdate", Jcr_Content_Slashno_Status_Update);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/noVersioning", Jcr_Content_Slashno_Versioning);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/protocolConnectTimeout", Jcr_Content_Slashprotocol_Connect_Timeout);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/protocolHTTPConnectionClosed", Jcr_Content_Slashprotocol_HTTPConnection_Closed);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/protocolHTTPExpired", Jcr_Content_Slashprotocol_HTTPExpired);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/protocolHTTPHeaders", Jcr_Content_Slashprotocol_HTTPHeaders);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/protocolHTTPHeaders@TypeHint", Jcr_Content_Slashprotocol_HTTPHeaders_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/protocolHTTPMethod", Jcr_Content_Slashprotocol_HTTPMethod);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/protocolHTTPSRelaxed", Jcr_Content_Slashprotocol_HTTPSRelaxed);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/protocolInterface", Jcr_Content_Slashprotocol_Interface);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/protocolSocketTimeout", Jcr_Content_Slashprotocol_Socket_Timeout);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/protocolVersion", Jcr_Content_Slashprotocol_Version);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/proxyNTLMDomain", Jcr_Content_Slashproxy_NTLMDomain);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/proxyNTLMHost", Jcr_Content_Slashproxy_NTLMHost);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/proxyHost", Jcr_Content_Slashproxy_Host);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/proxyPassword", Jcr_Content_Slashproxy_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/proxyPort", Jcr_Content_Slashproxy_Port);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/proxyUser", Jcr_Content_Slashproxy_User);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/queueBatchMaxSize", Jcr_Content_Slashqueue_Batch_Max_Size);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/queueBatchMode", Jcr_Content_Slashqueue_Batch_Mode);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/queueBatchWaitTime", Jcr_Content_Slashqueue_Batch_Wait_Time);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/retryDelay", Jcr_Content_Slashretry_Delay);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/reverseReplication", Jcr_Content_Slashreverse_Replication);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/serializationType", Jcr_Content_Slashserialization_Type);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/sling:resourceType", Jcr_Content_Slashsling_Resource_Type);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/ssl", Jcr_Content_Slashssl);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/transportNTLMDomain", Jcr_Content_Slashtransport_NTLMDomain);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/transportNTLMHost", Jcr_Content_Slashtransport_NTLMHost);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/transportPassword", Jcr_Content_Slashtransport_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/transportUri", Jcr_Content_Slashtransport_Uri);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/transportUser", Jcr_Content_Slashtransport_User);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/triggerDistribute", Jcr_Content_Slashtrigger_Distribute);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/triggerModified", Jcr_Content_Slashtrigger_Modified);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/triggerOnOffTime", Jcr_Content_Slashtrigger_On_Off_Time);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/triggerReceive", Jcr_Content_Slashtrigger_Receive);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/triggerSpecific", Jcr_Content_Slashtrigger_Specific);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/userId", Jcr_Content_Slashuser_Id);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:primaryType", Jcr_Primary_Type);
         Swagger.Servers.Get_Query_Parameter (Req, ":operation", Operation);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Runmode);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Name);
         Impl.Post_Agent
            (Runmode,
             Name,
             Jcr_Content_Slashcq_Distribute,
             Jcr_Content_Slashcq_Distribute_At_Type_Hint,
             Jcr_Content_Slashcq_Name,
             Jcr_Content_Slashcq_Template,
             Jcr_Content_Slashenabled,
             Jcr_Content_Slashjcr_Description,
             Jcr_Content_Slashjcr_Last_Modified,
             Jcr_Content_Slashjcr_Last_Modified_By,
             Jcr_Content_Slashjcr_Mixin_Types,
             Jcr_Content_Slashjcr_Title,
             Jcr_Content_Slashlog_Level,
             Jcr_Content_Slashno_Status_Update,
             Jcr_Content_Slashno_Versioning,
             Jcr_Content_Slashprotocol_Connect_Timeout,
             Jcr_Content_Slashprotocol_HTTPConnection_Closed,
             Jcr_Content_Slashprotocol_HTTPExpired,
             Jcr_Content_Slashprotocol_HTTPHeaders,
             Jcr_Content_Slashprotocol_HTTPHeaders_At_Type_Hint,
             Jcr_Content_Slashprotocol_HTTPMethod,
             Jcr_Content_Slashprotocol_HTTPSRelaxed,
             Jcr_Content_Slashprotocol_Interface,
             Jcr_Content_Slashprotocol_Socket_Timeout,
             Jcr_Content_Slashprotocol_Version,
             Jcr_Content_Slashproxy_NTLMDomain,
             Jcr_Content_Slashproxy_NTLMHost,
             Jcr_Content_Slashproxy_Host,
             Jcr_Content_Slashproxy_Password,
             Jcr_Content_Slashproxy_Port,
             Jcr_Content_Slashproxy_User,
             Jcr_Content_Slashqueue_Batch_Max_Size,
             Jcr_Content_Slashqueue_Batch_Mode,
             Jcr_Content_Slashqueue_Batch_Wait_Time,
             Jcr_Content_Slashretry_Delay,
             Jcr_Content_Slashreverse_Replication,
             Jcr_Content_Slashserialization_Type,
             Jcr_Content_Slashsling_Resource_Type,
             Jcr_Content_Slashssl,
             Jcr_Content_Slashtransport_NTLMDomain,
             Jcr_Content_Slashtransport_NTLMHost,
             Jcr_Content_Slashtransport_Password,
             Jcr_Content_Slashtransport_Uri,
             Jcr_Content_Slashtransport_User,
             Jcr_Content_Slashtrigger_Distribute,
             Jcr_Content_Slashtrigger_Modified,
             Jcr_Content_Slashtrigger_On_Off_Time,
             Jcr_Content_Slashtrigger_Receive,
             Jcr_Content_Slashtrigger_Specific,
             Jcr_Content_Slashuser_Id,
             Jcr_Primary_Type,
             Operation, Context);

      end Post_Agent;

      package API_Post_Authorizable_Keystore is
         new Swagger.Servers.Operation (Handler => Post_Authorizable_Keystore,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/{intermediatePath}/{authorizableId}.ks.html");

      --  
      procedure Post_Authorizable_Keystore
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Intermediate_Path : Swagger.UString;
         Authorizable_Id : Swagger.UString;
         Operation : Swagger.Nullable_UString;
         Current_Password : Swagger.Nullable_UString;
         New_Password : Swagger.Nullable_UString;
         Re_Password : Swagger.Nullable_UString;
         Key_Password : Swagger.Nullable_UString;
         Key_Store_Pass : Swagger.Nullable_UString;
         Alias : Swagger.Nullable_UString;
         New_Alias : Swagger.Nullable_UString;
         Remove_Alias : Swagger.Nullable_UString;
         Cert_Chain : Swagger.File_Part_Type;
         Pk : Swagger.File_Part_Type;
         Key_Store : Swagger.File_Part_Type;
         Result : .Models.KeystoreInfo_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, ":operation", Operation);
         Swagger.Servers.Get_Query_Parameter (Req, "currentPassword", Current_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "newPassword", New_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "rePassword", Re_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "keyPassword", Key_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "keyStorePass", Key_Store_Pass);
         Swagger.Servers.Get_Query_Parameter (Req, "alias", Alias);
         Swagger.Servers.Get_Query_Parameter (Req, "newAlias", New_Alias);
         Swagger.Servers.Get_Query_Parameter (Req, "removeAlias", Remove_Alias);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Intermediate_Path);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Authorizable_Id);
         Swagger.Servers.Get_Parameter (Context, "cert-chain", Cert_Chain);
         Swagger.Servers.Get_Parameter (Context, "pk", Pk);
         Swagger.Servers.Get_Parameter (Context, "keyStore", Key_Store);
         Impl.Post_Authorizable_Keystore
            (Intermediate_Path,
             Authorizable_Id,
             Operation,
             Current_Password,
             New_Password,
             Re_Password,
             Key_Password,
             Key_Store_Pass,
             Alias,
             New_Alias,
             Remove_Alias,
             Cert_Chain,
             Pk,
             Key_Store, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Post_Authorizable_Keystore;

      package API_Post_Authorizables is
         new Swagger.Servers.Operation (Handler => Post_Authorizables,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/libs/granite/security/post/authorizables");

      --  
      procedure Post_Authorizables
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Authorizable_Id : Swagger.UString;
         Intermediate_Path : Swagger.UString;
         Create_User : Swagger.Nullable_UString;
         Create_Group : Swagger.Nullable_UString;
         Rep_Password : Swagger.Nullable_UString;
         Profile_Slashgiven_Name : Swagger.Nullable_UString;
         Result : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "authorizableId", Authorizable_Id);
         Swagger.Servers.Get_Query_Parameter (Req, "intermediatePath", Intermediate_Path);
         Swagger.Servers.Get_Query_Parameter (Req, "createUser", Create_User);
         Swagger.Servers.Get_Query_Parameter (Req, "createGroup", Create_Group);
         Swagger.Servers.Get_Query_Parameter (Req, "rep:password", Rep_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "profile/givenName", Profile_Slashgiven_Name);
         Impl.Post_Authorizables
            (Authorizable_Id,
             Intermediate_Path,
             Create_User,
             Create_Group,
             Rep_Password,
             Profile_Slashgiven_Name, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Post_Authorizables;

      package API_Post_Config_Adobe_Granite_Saml_Authentication_Handler is
         new Swagger.Servers.Operation (Handler => Post_Config_Adobe_Granite_Saml_Authentication_Handler,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config");

      --  
      procedure Post_Config_Adobe_Granite_Saml_Authentication_Handler
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Key_Store_Password : Swagger.Nullable_UString;
         Key_Store_Password_At_Type_Hint : Swagger.Nullable_UString;
         Service_Periodranking : Swagger.Nullable_Integer;
         Service_Periodranking_At_Type_Hint : Swagger.Nullable_UString;
         Idp_Http_Redirect : Swagger.Nullable_Boolean;
         Idp_Http_Redirect_At_Type_Hint : Swagger.Nullable_UString;
         Create_User : Swagger.Nullable_Boolean;
         Create_User_At_Type_Hint : Swagger.Nullable_UString;
         Default_Redirect_Url : Swagger.Nullable_UString;
         Default_Redirect_Url_At_Type_Hint : Swagger.Nullable_UString;
         User_IDAttribute : Swagger.Nullable_UString;
         User_IDAttribute_At_Type_Hint : Swagger.Nullable_UString;
         Default_Groups : Swagger.UString_Vectors.Vector;
         Default_Groups_At_Type_Hint : Swagger.Nullable_UString;
         Idp_Cert_Alias : Swagger.Nullable_UString;
         Idp_Cert_Alias_At_Type_Hint : Swagger.Nullable_UString;
         Add_Group_Memberships : Swagger.Nullable_Boolean;
         Add_Group_Memberships_At_Type_Hint : Swagger.Nullable_UString;
         Path : Swagger.UString_Vectors.Vector;
         Path_At_Type_Hint : Swagger.Nullable_UString;
         Synchronize_Attributes : Swagger.UString_Vectors.Vector;
         Synchronize_Attributes_At_Type_Hint : Swagger.Nullable_UString;
         Clock_Tolerance : Swagger.Nullable_Integer;
         Clock_Tolerance_At_Type_Hint : Swagger.Nullable_UString;
         Group_Membership_Attribute : Swagger.Nullable_UString;
         Group_Membership_Attribute_At_Type_Hint : Swagger.Nullable_UString;
         Idp_Url : Swagger.Nullable_UString;
         Idp_Url_At_Type_Hint : Swagger.Nullable_UString;
         Logout_Url : Swagger.Nullable_UString;
         Logout_Url_At_Type_Hint : Swagger.Nullable_UString;
         Service_Provider_Entity_Id : Swagger.Nullable_UString;
         Service_Provider_Entity_Id_At_Type_Hint : Swagger.Nullable_UString;
         Assertion_Consumer_Service_URL : Swagger.Nullable_UString;
         Assertion_Consumer_Service_URLAt_Type_Hint : Swagger.Nullable_UString;
         Handle_Logout : Swagger.Nullable_Boolean;
         Handle_Logout_At_Type_Hint : Swagger.Nullable_UString;
         Sp_Private_Key_Alias : Swagger.Nullable_UString;
         Sp_Private_Key_Alias_At_Type_Hint : Swagger.Nullable_UString;
         Use_Encryption : Swagger.Nullable_Boolean;
         Use_Encryption_At_Type_Hint : Swagger.Nullable_UString;
         Name_Id_Format : Swagger.Nullable_UString;
         Name_Id_Format_At_Type_Hint : Swagger.Nullable_UString;
         Digest_Method : Swagger.Nullable_UString;
         Digest_Method_At_Type_Hint : Swagger.Nullable_UString;
         Signature_Method : Swagger.Nullable_UString;
         Signature_Method_At_Type_Hint : Swagger.Nullable_UString;
         User_Intermediate_Path : Swagger.Nullable_UString;
         User_Intermediate_Path_At_Type_Hint : Swagger.Nullable_UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "keyStorePassword", Key_Store_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "keyStorePassword@TypeHint", Key_Store_Password_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "service.ranking", Service_Periodranking);
         Swagger.Servers.Get_Query_Parameter (Req, "service.ranking@TypeHint", Service_Periodranking_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "idpHttpRedirect", Idp_Http_Redirect);
         Swagger.Servers.Get_Query_Parameter (Req, "idpHttpRedirect@TypeHint", Idp_Http_Redirect_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "createUser", Create_User);
         Swagger.Servers.Get_Query_Parameter (Req, "createUser@TypeHint", Create_User_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "defaultRedirectUrl", Default_Redirect_Url);
         Swagger.Servers.Get_Query_Parameter (Req, "defaultRedirectUrl@TypeHint", Default_Redirect_Url_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "userIDAttribute", User_IDAttribute);
         Swagger.Servers.Get_Query_Parameter (Req, "userIDAttribute@TypeHint", User_IDAttribute_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "defaultGroups", Default_Groups);
         Swagger.Servers.Get_Query_Parameter (Req, "defaultGroups@TypeHint", Default_Groups_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "idpCertAlias", Idp_Cert_Alias);
         Swagger.Servers.Get_Query_Parameter (Req, "idpCertAlias@TypeHint", Idp_Cert_Alias_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "addGroupMemberships", Add_Group_Memberships);
         Swagger.Servers.Get_Query_Parameter (Req, "addGroupMemberships@TypeHint", Add_Group_Memberships_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "path", Path);
         Swagger.Servers.Get_Query_Parameter (Req, "path@TypeHint", Path_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "synchronizeAttributes", Synchronize_Attributes);
         Swagger.Servers.Get_Query_Parameter (Req, "synchronizeAttributes@TypeHint", Synchronize_Attributes_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "clockTolerance", Clock_Tolerance);
         Swagger.Servers.Get_Query_Parameter (Req, "clockTolerance@TypeHint", Clock_Tolerance_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "groupMembershipAttribute", Group_Membership_Attribute);
         Swagger.Servers.Get_Query_Parameter (Req, "groupMembershipAttribute@TypeHint", Group_Membership_Attribute_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "idpUrl", Idp_Url);
         Swagger.Servers.Get_Query_Parameter (Req, "idpUrl@TypeHint", Idp_Url_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "logoutUrl", Logout_Url);
         Swagger.Servers.Get_Query_Parameter (Req, "logoutUrl@TypeHint", Logout_Url_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "serviceProviderEntityId", Service_Provider_Entity_Id);
         Swagger.Servers.Get_Query_Parameter (Req, "serviceProviderEntityId@TypeHint", Service_Provider_Entity_Id_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "assertionConsumerServiceURL", Assertion_Consumer_Service_URL);
         Swagger.Servers.Get_Query_Parameter (Req, "assertionConsumerServiceURL@TypeHint", Assertion_Consumer_Service_URLAt_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "handleLogout", Handle_Logout);
         Swagger.Servers.Get_Query_Parameter (Req, "handleLogout@TypeHint", Handle_Logout_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "spPrivateKeyAlias", Sp_Private_Key_Alias);
         Swagger.Servers.Get_Query_Parameter (Req, "spPrivateKeyAlias@TypeHint", Sp_Private_Key_Alias_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "useEncryption", Use_Encryption);
         Swagger.Servers.Get_Query_Parameter (Req, "useEncryption@TypeHint", Use_Encryption_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "nameIdFormat", Name_Id_Format);
         Swagger.Servers.Get_Query_Parameter (Req, "nameIdFormat@TypeHint", Name_Id_Format_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "digestMethod", Digest_Method);
         Swagger.Servers.Get_Query_Parameter (Req, "digestMethod@TypeHint", Digest_Method_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "signatureMethod", Signature_Method);
         Swagger.Servers.Get_Query_Parameter (Req, "signatureMethod@TypeHint", Signature_Method_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "userIntermediatePath", User_Intermediate_Path);
         Swagger.Servers.Get_Query_Parameter (Req, "userIntermediatePath@TypeHint", User_Intermediate_Path_At_Type_Hint);
         Impl.Post_Config_Adobe_Granite_Saml_Authentication_Handler
            (Key_Store_Password,
             Key_Store_Password_At_Type_Hint,
             Service_Periodranking,
             Service_Periodranking_At_Type_Hint,
             Idp_Http_Redirect,
             Idp_Http_Redirect_At_Type_Hint,
             Create_User,
             Create_User_At_Type_Hint,
             Default_Redirect_Url,
             Default_Redirect_Url_At_Type_Hint,
             User_IDAttribute,
             User_IDAttribute_At_Type_Hint,
             Default_Groups,
             Default_Groups_At_Type_Hint,
             Idp_Cert_Alias,
             Idp_Cert_Alias_At_Type_Hint,
             Add_Group_Memberships,
             Add_Group_Memberships_At_Type_Hint,
             Path,
             Path_At_Type_Hint,
             Synchronize_Attributes,
             Synchronize_Attributes_At_Type_Hint,
             Clock_Tolerance,
             Clock_Tolerance_At_Type_Hint,
             Group_Membership_Attribute,
             Group_Membership_Attribute_At_Type_Hint,
             Idp_Url,
             Idp_Url_At_Type_Hint,
             Logout_Url,
             Logout_Url_At_Type_Hint,
             Service_Provider_Entity_Id,
             Service_Provider_Entity_Id_At_Type_Hint,
             Assertion_Consumer_Service_URL,
             Assertion_Consumer_Service_URLAt_Type_Hint,
             Handle_Logout,
             Handle_Logout_At_Type_Hint,
             Sp_Private_Key_Alias,
             Sp_Private_Key_Alias_At_Type_Hint,
             Use_Encryption,
             Use_Encryption_At_Type_Hint,
             Name_Id_Format,
             Name_Id_Format_At_Type_Hint,
             Digest_Method,
             Digest_Method_At_Type_Hint,
             Signature_Method,
             Signature_Method_At_Type_Hint,
             User_Intermediate_Path,
             User_Intermediate_Path_At_Type_Hint, Context);

      end Post_Config_Adobe_Granite_Saml_Authentication_Handler;

      package API_Post_Config_Apache_Felix_Jetty_Based_Http_Service is
         new Swagger.Servers.Operation (Handler => Post_Config_Apache_Felix_Jetty_Based_Http_Service,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/apps/system/config/org.apache.felix.http");

      --  
      procedure Post_Config_Apache_Felix_Jetty_Based_Http_Service
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Org_Periodapache_Periodfelix_Periodhttps_Periodnio : Swagger.Nullable_Boolean;
         Org_Periodapache_Periodfelix_Periodhttps_Periodnio_At_Type_Hint : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_At_Type_Hint : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodpassword : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodpassword_At_Type_Hint : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_At_Type_Hint : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_Periodpassword : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_Periodpassword_At_Type_Hint : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_At_Type_Hint : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_Periodpassword : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_Periodpassword_At_Type_Hint : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodclientcertificate : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodclientcertificate_At_Type_Hint : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodenable : Swagger.Nullable_Boolean;
         Org_Periodapache_Periodfelix_Periodhttps_Periodenable_At_Type_Hint : Swagger.Nullable_UString;
         Org_Periodosgi_Periodservice_Periodhttp_Periodport_Periodsecure : Swagger.Nullable_UString;
         Org_Periodosgi_Periodservice_Periodhttp_Periodport_Periodsecure_At_Type_Hint : Swagger.Nullable_UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.nio", Org_Periodapache_Periodfelix_Periodhttps_Periodnio);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.nio@TypeHint", Org_Periodapache_Periodfelix_Periodhttps_Periodnio_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.keystore", Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.keystore@TypeHint", Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.keystore.password", Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodpassword);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.keystore.password@TypeHint", Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodpassword_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.keystore.key", Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.keystore.key@TypeHint", Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.keystore.key.password", Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_Periodpassword);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.keystore.key.password@TypeHint", Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_Periodpassword_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.truststore", Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.truststore@TypeHint", Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.truststore.password", Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_Periodpassword);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.truststore.password@TypeHint", Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_Periodpassword_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.clientcertificate", Org_Periodapache_Periodfelix_Periodhttps_Periodclientcertificate);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.clientcertificate@TypeHint", Org_Periodapache_Periodfelix_Periodhttps_Periodclientcertificate_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.enable", Org_Periodapache_Periodfelix_Periodhttps_Periodenable);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.enable@TypeHint", Org_Periodapache_Periodfelix_Periodhttps_Periodenable_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "org.osgi.service.http.port.secure", Org_Periodosgi_Periodservice_Periodhttp_Periodport_Periodsecure);
         Swagger.Servers.Get_Query_Parameter (Req, "org.osgi.service.http.port.secure@TypeHint", Org_Periodosgi_Periodservice_Periodhttp_Periodport_Periodsecure_At_Type_Hint);
         Impl.Post_Config_Apache_Felix_Jetty_Based_Http_Service
            (Org_Periodapache_Periodfelix_Periodhttps_Periodnio,
             Org_Periodapache_Periodfelix_Periodhttps_Periodnio_At_Type_Hint,
             Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore,
             Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_At_Type_Hint,
             Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodpassword,
             Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodpassword_At_Type_Hint,
             Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey,
             Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_At_Type_Hint,
             Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_Periodpassword,
             Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_Periodpassword_At_Type_Hint,
             Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore,
             Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_At_Type_Hint,
             Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_Periodpassword,
             Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_Periodpassword_At_Type_Hint,
             Org_Periodapache_Periodfelix_Periodhttps_Periodclientcertificate,
             Org_Periodapache_Periodfelix_Periodhttps_Periodclientcertificate_At_Type_Hint,
             Org_Periodapache_Periodfelix_Periodhttps_Periodenable,
             Org_Periodapache_Periodfelix_Periodhttps_Periodenable_At_Type_Hint,
             Org_Periodosgi_Periodservice_Periodhttp_Periodport_Periodsecure,
             Org_Periodosgi_Periodservice_Periodhttp_Periodport_Periodsecure_At_Type_Hint, Context);

      end Post_Config_Apache_Felix_Jetty_Based_Http_Service;

      package API_Post_Config_Apache_Http_Components_Proxy_Configuration is
         new Swagger.Servers.Operation (Handler => Post_Config_Apache_Http_Components_Proxy_Configuration,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/apps/system/config/org.apache.http.proxyconfigurator.config");

      --  
      procedure Post_Config_Apache_Http_Components_Proxy_Configuration
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Proxy_Periodhost : Swagger.Nullable_UString;
         Proxy_Periodhost_At_Type_Hint : Swagger.Nullable_UString;
         Proxy_Periodport : Swagger.Nullable_Integer;
         Proxy_Periodport_At_Type_Hint : Swagger.Nullable_UString;
         Proxy_Periodexceptions : Swagger.UString_Vectors.Vector;
         Proxy_Periodexceptions_At_Type_Hint : Swagger.Nullable_UString;
         Proxy_Periodenabled : Swagger.Nullable_Boolean;
         Proxy_Periodenabled_At_Type_Hint : Swagger.Nullable_UString;
         Proxy_Perioduser : Swagger.Nullable_UString;
         Proxy_Perioduser_At_Type_Hint : Swagger.Nullable_UString;
         Proxy_Periodpassword : Swagger.Nullable_UString;
         Proxy_Periodpassword_At_Type_Hint : Swagger.Nullable_UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "proxy.host", Proxy_Periodhost);
         Swagger.Servers.Get_Query_Parameter (Req, "proxy.host@TypeHint", Proxy_Periodhost_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "proxy.port", Proxy_Periodport);
         Swagger.Servers.Get_Query_Parameter (Req, "proxy.port@TypeHint", Proxy_Periodport_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "proxy.exceptions", Proxy_Periodexceptions);
         Swagger.Servers.Get_Query_Parameter (Req, "proxy.exceptions@TypeHint", Proxy_Periodexceptions_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "proxy.enabled", Proxy_Periodenabled);
         Swagger.Servers.Get_Query_Parameter (Req, "proxy.enabled@TypeHint", Proxy_Periodenabled_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "proxy.user", Proxy_Perioduser);
         Swagger.Servers.Get_Query_Parameter (Req, "proxy.user@TypeHint", Proxy_Perioduser_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "proxy.password", Proxy_Periodpassword);
         Swagger.Servers.Get_Query_Parameter (Req, "proxy.password@TypeHint", Proxy_Periodpassword_At_Type_Hint);
         Impl.Post_Config_Apache_Http_Components_Proxy_Configuration
            (Proxy_Periodhost,
             Proxy_Periodhost_At_Type_Hint,
             Proxy_Periodport,
             Proxy_Periodport_At_Type_Hint,
             Proxy_Periodexceptions,
             Proxy_Periodexceptions_At_Type_Hint,
             Proxy_Periodenabled,
             Proxy_Periodenabled_At_Type_Hint,
             Proxy_Perioduser,
             Proxy_Perioduser_At_Type_Hint,
             Proxy_Periodpassword,
             Proxy_Periodpassword_At_Type_Hint, Context);

      end Post_Config_Apache_Http_Components_Proxy_Configuration;

      package API_Post_Config_Apache_Sling_Dav_Ex_Servlet is
         new Swagger.Servers.Operation (Handler => Post_Config_Apache_Sling_Dav_Ex_Servlet,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet");

      --  
      procedure Post_Config_Apache_Sling_Dav_Ex_Servlet
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Alias : Swagger.Nullable_UString;
         Alias_At_Type_Hint : Swagger.Nullable_UString;
         Dav_Periodcreate_Absolute_Uri : Swagger.Nullable_Boolean;
         Dav_Periodcreate_Absolute_Uri_At_Type_Hint : Swagger.Nullable_UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "alias", Alias);
         Swagger.Servers.Get_Query_Parameter (Req, "alias@TypeHint", Alias_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "dav.create-absolute-uri", Dav_Periodcreate_Absolute_Uri);
         Swagger.Servers.Get_Query_Parameter (Req, "dav.create-absolute-uri@TypeHint", Dav_Periodcreate_Absolute_Uri_At_Type_Hint);
         Impl.Post_Config_Apache_Sling_Dav_Ex_Servlet
            (Alias,
             Alias_At_Type_Hint,
             Dav_Periodcreate_Absolute_Uri,
             Dav_Periodcreate_Absolute_Uri_At_Type_Hint, Context);

      end Post_Config_Apache_Sling_Dav_Ex_Servlet;

      package API_Post_Config_Apache_Sling_Get_Servlet is
         new Swagger.Servers.Operation (Handler => Post_Config_Apache_Sling_Get_Servlet,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet");

      --  
      procedure Post_Config_Apache_Sling_Get_Servlet
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Json_Periodmaximumresults : Swagger.Nullable_UString;
         Json_Periodmaximumresults_At_Type_Hint : Swagger.Nullable_UString;
         Enable_Periodhtml : Swagger.Nullable_Boolean;
         Enable_Periodhtml_At_Type_Hint : Swagger.Nullable_UString;
         Enable_Periodtxt : Swagger.Nullable_Boolean;
         Enable_Periodtxt_At_Type_Hint : Swagger.Nullable_UString;
         Enable_Periodxml : Swagger.Nullable_Boolean;
         Enable_Periodxml_At_Type_Hint : Swagger.Nullable_UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "json.maximumresults", Json_Periodmaximumresults);
         Swagger.Servers.Get_Query_Parameter (Req, "json.maximumresults@TypeHint", Json_Periodmaximumresults_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "enable.html", Enable_Periodhtml);
         Swagger.Servers.Get_Query_Parameter (Req, "enable.html@TypeHint", Enable_Periodhtml_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "enable.txt", Enable_Periodtxt);
         Swagger.Servers.Get_Query_Parameter (Req, "enable.txt@TypeHint", Enable_Periodtxt_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "enable.xml", Enable_Periodxml);
         Swagger.Servers.Get_Query_Parameter (Req, "enable.xml@TypeHint", Enable_Periodxml_At_Type_Hint);
         Impl.Post_Config_Apache_Sling_Get_Servlet
            (Json_Periodmaximumresults,
             Json_Periodmaximumresults_At_Type_Hint,
             Enable_Periodhtml,
             Enable_Periodhtml_At_Type_Hint,
             Enable_Periodtxt,
             Enable_Periodtxt_At_Type_Hint,
             Enable_Periodxml,
             Enable_Periodxml_At_Type_Hint, Context);

      end Post_Config_Apache_Sling_Get_Servlet;

      package API_Post_Config_Apache_Sling_Referrer_Filter is
         new Swagger.Servers.Operation (Handler => Post_Config_Apache_Sling_Referrer_Filter,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/apps/system/config/org.apache.sling.security.impl.ReferrerFilter");

      --  
      procedure Post_Config_Apache_Sling_Referrer_Filter
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Allow_Periodempty : Swagger.Nullable_Boolean;
         Allow_Periodempty_At_Type_Hint : Swagger.Nullable_UString;
         Allow_Periodhosts : Swagger.Nullable_UString;
         Allow_Periodhosts_At_Type_Hint : Swagger.Nullable_UString;
         Allow_Periodhosts_Periodregexp : Swagger.Nullable_UString;
         Allow_Periodhosts_Periodregexp_At_Type_Hint : Swagger.Nullable_UString;
         Filter_Periodmethods : Swagger.Nullable_UString;
         Filter_Periodmethods_At_Type_Hint : Swagger.Nullable_UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "allow.empty", Allow_Periodempty);
         Swagger.Servers.Get_Query_Parameter (Req, "allow.empty@TypeHint", Allow_Periodempty_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "allow.hosts", Allow_Periodhosts);
         Swagger.Servers.Get_Query_Parameter (Req, "allow.hosts@TypeHint", Allow_Periodhosts_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "allow.hosts.regexp", Allow_Periodhosts_Periodregexp);
         Swagger.Servers.Get_Query_Parameter (Req, "allow.hosts.regexp@TypeHint", Allow_Periodhosts_Periodregexp_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "filter.methods", Filter_Periodmethods);
         Swagger.Servers.Get_Query_Parameter (Req, "filter.methods@TypeHint", Filter_Periodmethods_At_Type_Hint);
         Impl.Post_Config_Apache_Sling_Referrer_Filter
            (Allow_Periodempty,
             Allow_Periodempty_At_Type_Hint,
             Allow_Periodhosts,
             Allow_Periodhosts_At_Type_Hint,
             Allow_Periodhosts_Periodregexp,
             Allow_Periodhosts_Periodregexp_At_Type_Hint,
             Filter_Periodmethods,
             Filter_Periodmethods_At_Type_Hint, Context);

      end Post_Config_Apache_Sling_Referrer_Filter;

      package API_Post_Config_Property is
         new Swagger.Servers.Operation (Handler => Post_Config_Property,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/apps/system/config/{configNodeName}");

      --  
      procedure Post_Config_Property
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Config_Node_Name : Swagger.UString;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Config_Node_Name);
         Impl.Post_Config_Property
            (Config_Node_Name, Context);

      end Post_Config_Property;

      package API_Post_Node is
         new Swagger.Servers.Operation (Handler => Post_Node,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/{path}/{name}");

      --  
      procedure Post_Node
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Path : Swagger.UString;
         Name : Swagger.UString;
         Operation : Swagger.Nullable_UString;
         Delete_Authorizable : Swagger.Nullable_UString;
         File : Swagger.File_Part_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, ":operation", Operation);
         Swagger.Servers.Get_Query_Parameter (Req, "deleteAuthorizable", Delete_Authorizable);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Path);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Name);
         Swagger.Servers.Get_Parameter (Context, "file", File);
         Impl.Post_Node
            (Path,
             Name,
             Operation,
             Delete_Authorizable,
             File, Context);

      end Post_Node;

      package API_Post_Node_Rw is
         new Swagger.Servers.Operation (Handler => Post_Node_Rw,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/{path}/{name}.rw.html");

      --  
      procedure Post_Node_Rw
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Path : Swagger.UString;
         Name : Swagger.UString;
         Add_Members : Swagger.Nullable_UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "addMembers", Add_Members);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Path);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Name);
         Impl.Post_Node_Rw
            (Path,
             Name,
             Add_Members, Context);

      end Post_Node_Rw;

      package API_Post_Path is
         new Swagger.Servers.Operation (Handler => Post_Path,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/{path}/");

      --  
      procedure Post_Path
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Path : Swagger.UString;
         Jcr_Primary_Type : Swagger.UString;
         Name : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:primaryType", Jcr_Primary_Type);
         Swagger.Servers.Get_Query_Parameter (Req, ":name", Name);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Path);
         Impl.Post_Path
            (Path,
             Jcr_Primary_Type,
             Name, Context);

      end Post_Path;

      package API_Post_Query is
         new Swagger.Servers.Operation (Handler => Post_Query,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/bin/querybuilder.json");

      --  
      procedure Post_Query
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Path : Swagger.UString;
         P_Periodlimit : Swagger.Number;
         P_1Property : Swagger.UString;
         P_1Property_Periodvalue : Swagger.UString;
         Result : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "path", Path);
         Swagger.Servers.Get_Query_Parameter (Req, "p.limit", P_Periodlimit);
         Swagger.Servers.Get_Query_Parameter (Req, "1_property", P_1Property);
         Swagger.Servers.Get_Query_Parameter (Req, "1_property.value", P_1Property_Periodvalue);
         Impl.Post_Query
            (Path,
             P_Periodlimit,
             P_1Property,
             P_1Property_Periodvalue, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Post_Query;

      package API_Post_Tree_Activation is
         new Swagger.Servers.Operation (Handler => Post_Tree_Activation,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/etc/replication/treeactivation.html");

      --  
      procedure Post_Tree_Activation
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ignoredeactivated : Boolean;
         Onlymodified : Boolean;
         Path : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "ignoredeactivated", Ignoredeactivated);
         Swagger.Servers.Get_Query_Parameter (Req, "onlymodified", Onlymodified);
         Swagger.Servers.Get_Query_Parameter (Req, "path", Path);
         Impl.Post_Tree_Activation
            (Ignoredeactivated,
             Onlymodified,
             Path, Context);

      end Post_Tree_Activation;

      package API_Post_Truststore is
         new Swagger.Servers.Operation (Handler => Post_Truststore,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/libs/granite/security/post/truststore");

      --  
      procedure Post_Truststore
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Operation : Swagger.Nullable_UString;
         New_Password : Swagger.Nullable_UString;
         Re_Password : Swagger.Nullable_UString;
         Key_Store_Type : Swagger.Nullable_UString;
         Remove_Alias : Swagger.Nullable_UString;
         Certificate : Swagger.File_Part_Type;
         Result : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, ":operation", Operation);
         Swagger.Servers.Get_Query_Parameter (Req, "newPassword", New_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "rePassword", Re_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "keyStoreType", Key_Store_Type);
         Swagger.Servers.Get_Query_Parameter (Req, "removeAlias", Remove_Alias);
         Swagger.Servers.Get_Parameter (Context, "certificate", Certificate);
         Impl.Post_Truststore
            (Operation,
             New_Password,
             Re_Password,
             Key_Store_Type,
             Remove_Alias,
             Certificate, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Post_Truststore;

      package API_Post_Truststore_PKCS12 is
         new Swagger.Servers.Operation (Handler => Post_Truststore_PKCS12,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/etc/truststore");

      --  
      procedure Post_Truststore_PKCS12
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Truststore_Periodp_12 : Swagger.File_Part_Type;
         Result : Swagger.UString;
      begin
         Swagger.Servers.Get_Parameter (Context, "truststore.p12", Truststore_Periodp_12);
         Impl.Post_Truststore_PKCS12
            (Truststore_Periodp_12, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Post_Truststore_PKCS12;

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Get_Aem_Product_Info.Definition);
         Swagger.Servers.Register (Server, API_Get_Bundle_Info.Definition);
         Swagger.Servers.Register (Server, API_Get_Config_Mgr.Definition);
         Swagger.Servers.Register (Server, API_Post_Bundle.Definition);
         Swagger.Servers.Register (Server, API_Post_Jmx_Repository.Definition);
         Swagger.Servers.Register (Server, API_Post_Saml_Configuration.Definition);
         Swagger.Servers.Register (Server, API_Get_Login_Page.Definition);
         Swagger.Servers.Register (Server, API_Post_Cq_Actions.Definition);
         Swagger.Servers.Register (Server, API_Get_Crxde_Status.Definition);
         Swagger.Servers.Register (Server, API_Get_Install_Status.Definition);
         Swagger.Servers.Register (Server, API_Get_Package_Manager_Servlet.Definition);
         Swagger.Servers.Register (Server, API_Post_Package_Service.Definition);
         Swagger.Servers.Register (Server, API_Post_Package_Service_Json.Definition);
         Swagger.Servers.Register (Server, API_Post_Package_Update.Definition);
         Swagger.Servers.Register (Server, API_Post_Set_Password.Definition);
         Swagger.Servers.Register (Server, API_Get_Aem_Health_Check.Definition);
         Swagger.Servers.Register (Server, API_Post_Config_Aem_Health_Check_Servlet.Definition);
         Swagger.Servers.Register (Server, API_Post_Config_Aem_Password_Reset.Definition);
         Swagger.Servers.Register (Server, API_Ssl_Setup.Definition);
         Swagger.Servers.Register (Server, API_Delete_Agent.Definition);
         Swagger.Servers.Register (Server, API_Delete_Node.Definition);
         Swagger.Servers.Register (Server, API_Get_Agent.Definition);
         Swagger.Servers.Register (Server, API_Get_Agents.Definition);
         Swagger.Servers.Register (Server, API_Get_Authorizable_Keystore.Definition);
         Swagger.Servers.Register (Server, API_Get_Keystore.Definition);
         Swagger.Servers.Register (Server, API_Get_Node.Definition);
         Swagger.Servers.Register (Server, API_Get_Package.Definition);
         Swagger.Servers.Register (Server, API_Get_Package_Filter.Definition);
         Swagger.Servers.Register (Server, API_Get_Query.Definition);
         Swagger.Servers.Register (Server, API_Get_Truststore.Definition);
         Swagger.Servers.Register (Server, API_Get_Truststore_Info.Definition);
         Swagger.Servers.Register (Server, API_Post_Agent.Definition);
         Swagger.Servers.Register (Server, API_Post_Authorizable_Keystore.Definition);
         Swagger.Servers.Register (Server, API_Post_Authorizables.Definition);
         Swagger.Servers.Register (Server, API_Post_Config_Adobe_Granite_Saml_Authentication_Handler.Definition);
         Swagger.Servers.Register (Server, API_Post_Config_Apache_Felix_Jetty_Based_Http_Service.Definition);
         Swagger.Servers.Register (Server, API_Post_Config_Apache_Http_Components_Proxy_Configuration.Definition);
         Swagger.Servers.Register (Server, API_Post_Config_Apache_Sling_Dav_Ex_Servlet.Definition);
         Swagger.Servers.Register (Server, API_Post_Config_Apache_Sling_Get_Servlet.Definition);
         Swagger.Servers.Register (Server, API_Post_Config_Apache_Sling_Referrer_Filter.Definition);
         Swagger.Servers.Register (Server, API_Post_Config_Property.Definition);
         Swagger.Servers.Register (Server, API_Post_Node.Definition);
         Swagger.Servers.Register (Server, API_Post_Node_Rw.Definition);
         Swagger.Servers.Register (Server, API_Post_Path.Definition);
         Swagger.Servers.Register (Server, API_Post_Query.Definition);
         Swagger.Servers.Register (Server, API_Post_Tree_Activation.Definition);
         Swagger.Servers.Register (Server, API_Post_Truststore.Definition);
         Swagger.Servers.Register (Server, API_Post_Truststore_PKCS12.Definition);
      end Register;

   end Skeleton;

   package body Shared_Instance is


      --  
      procedure Get_Aem_Product_Info
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : Swagger.UString_Vectors.Vector;
      begin
         Server.Get_Aem_Product_Info (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Aem_Product_Info;

      package API_Get_Aem_Product_Info is
         new Swagger.Servers.Operation (Handler => Get_Aem_Product_Info,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/system/console/status-productinfo.json");

      --  
      procedure Get_Bundle_Info
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Name : Swagger.UString;
         Result : .Models.BundleInfo_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Name);
         Server.Get_Bundle_Info
            (Name, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Bundle_Info;

      package API_Get_Bundle_Info is
         new Swagger.Servers.Operation (Handler => Get_Bundle_Info,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/system/console/bundles/{name}.json");

      --  
      procedure Get_Config_Mgr
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : Swagger.UString;
      begin
         Server.Get_Config_Mgr (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Config_Mgr;

      package API_Get_Config_Mgr is
         new Swagger.Servers.Operation (Handler => Get_Config_Mgr,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/system/console/configMgr");

      --  
      procedure Post_Bundle
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Name : Swagger.UString;
         Action : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "action", Action);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Name);
         Server.Post_Bundle
            (Name,
             Action, Context);

      end Post_Bundle;

      package API_Post_Bundle is
         new Swagger.Servers.Operation (Handler => Post_Bundle,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/system/console/bundles/{name}");

      --  
      procedure Post_Jmx_Repository
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Action : Swagger.UString;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Action);
         Server.Post_Jmx_Repository
            (Action, Context);

      end Post_Jmx_Repository;

      package API_Post_Jmx_Repository is
         new Swagger.Servers.Operation (Handler => Post_Jmx_Repository,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/system/console/jmx/com.adobe.granite:type=Repository/op/{action}");

      --  
      procedure Post_Saml_Configuration
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Post : Swagger.Nullable_Boolean;
         Apply : Swagger.Nullable_Boolean;
         Delete : Swagger.Nullable_Boolean;
         Action : Swagger.Nullable_UString;
         Dollarlocation : Swagger.Nullable_UString;
         Path : Swagger.UString_Vectors.Vector;
         Service_Periodranking : Swagger.Nullable_Integer;
         Idp_Url : Swagger.Nullable_UString;
         Idp_Cert_Alias : Swagger.Nullable_UString;
         Idp_Http_Redirect : Swagger.Nullable_Boolean;
         Service_Provider_Entity_Id : Swagger.Nullable_UString;
         Assertion_Consumer_Service_URL : Swagger.Nullable_UString;
         Sp_Private_Key_Alias : Swagger.Nullable_UString;
         Key_Store_Password : Swagger.Nullable_UString;
         Default_Redirect_Url : Swagger.Nullable_UString;
         User_IDAttribute : Swagger.Nullable_UString;
         Use_Encryption : Swagger.Nullable_Boolean;
         Create_User : Swagger.Nullable_Boolean;
         Add_Group_Memberships : Swagger.Nullable_Boolean;
         Group_Membership_Attribute : Swagger.Nullable_UString;
         Default_Groups : Swagger.UString_Vectors.Vector;
         Name_Id_Format : Swagger.Nullable_UString;
         Synchronize_Attributes : Swagger.UString_Vectors.Vector;
         Handle_Logout : Swagger.Nullable_Boolean;
         Logout_Url : Swagger.Nullable_UString;
         Clock_Tolerance : Swagger.Nullable_Integer;
         Digest_Method : Swagger.Nullable_UString;
         Signature_Method : Swagger.Nullable_UString;
         User_Intermediate_Path : Swagger.Nullable_UString;
         Propertylist : Swagger.UString_Vectors.Vector;
         Result : .Models.SamlConfigurationInfo_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "post", Post);
         Swagger.Servers.Get_Query_Parameter (Req, "apply", Apply);
         Swagger.Servers.Get_Query_Parameter (Req, "delete", Delete);
         Swagger.Servers.Get_Query_Parameter (Req, "action", Action);
         Swagger.Servers.Get_Query_Parameter (Req, "$location", Dollarlocation);
         Swagger.Servers.Get_Query_Parameter (Req, "path", Path);
         Swagger.Servers.Get_Query_Parameter (Req, "service.ranking", Service_Periodranking);
         Swagger.Servers.Get_Query_Parameter (Req, "idpUrl", Idp_Url);
         Swagger.Servers.Get_Query_Parameter (Req, "idpCertAlias", Idp_Cert_Alias);
         Swagger.Servers.Get_Query_Parameter (Req, "idpHttpRedirect", Idp_Http_Redirect);
         Swagger.Servers.Get_Query_Parameter (Req, "serviceProviderEntityId", Service_Provider_Entity_Id);
         Swagger.Servers.Get_Query_Parameter (Req, "assertionConsumerServiceURL", Assertion_Consumer_Service_URL);
         Swagger.Servers.Get_Query_Parameter (Req, "spPrivateKeyAlias", Sp_Private_Key_Alias);
         Swagger.Servers.Get_Query_Parameter (Req, "keyStorePassword", Key_Store_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "defaultRedirectUrl", Default_Redirect_Url);
         Swagger.Servers.Get_Query_Parameter (Req, "userIDAttribute", User_IDAttribute);
         Swagger.Servers.Get_Query_Parameter (Req, "useEncryption", Use_Encryption);
         Swagger.Servers.Get_Query_Parameter (Req, "createUser", Create_User);
         Swagger.Servers.Get_Query_Parameter (Req, "addGroupMemberships", Add_Group_Memberships);
         Swagger.Servers.Get_Query_Parameter (Req, "groupMembershipAttribute", Group_Membership_Attribute);
         Swagger.Servers.Get_Query_Parameter (Req, "defaultGroups", Default_Groups);
         Swagger.Servers.Get_Query_Parameter (Req, "nameIdFormat", Name_Id_Format);
         Swagger.Servers.Get_Query_Parameter (Req, "synchronizeAttributes", Synchronize_Attributes);
         Swagger.Servers.Get_Query_Parameter (Req, "handleLogout", Handle_Logout);
         Swagger.Servers.Get_Query_Parameter (Req, "logoutUrl", Logout_Url);
         Swagger.Servers.Get_Query_Parameter (Req, "clockTolerance", Clock_Tolerance);
         Swagger.Servers.Get_Query_Parameter (Req, "digestMethod", Digest_Method);
         Swagger.Servers.Get_Query_Parameter (Req, "signatureMethod", Signature_Method);
         Swagger.Servers.Get_Query_Parameter (Req, "userIntermediatePath", User_Intermediate_Path);
         Swagger.Servers.Get_Query_Parameter (Req, "propertylist", Propertylist);
         Server.Post_Saml_Configuration
            (Post,
             Apply,
             Delete,
             Action,
             Dollarlocation,
             Path,
             Service_Periodranking,
             Idp_Url,
             Idp_Cert_Alias,
             Idp_Http_Redirect,
             Service_Provider_Entity_Id,
             Assertion_Consumer_Service_URL,
             Sp_Private_Key_Alias,
             Key_Store_Password,
             Default_Redirect_Url,
             User_IDAttribute,
             Use_Encryption,
             Create_User,
             Add_Group_Memberships,
             Group_Membership_Attribute,
             Default_Groups,
             Name_Id_Format,
             Synchronize_Attributes,
             Handle_Logout,
             Logout_Url,
             Clock_Tolerance,
             Digest_Method,
             Signature_Method,
             User_Intermediate_Path,
             Propertylist, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Post_Saml_Configuration;

      package API_Post_Saml_Configuration is
         new Swagger.Servers.Operation (Handler => Post_Saml_Configuration,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler");

      --  
      procedure Get_Login_Page
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : Swagger.UString;
      begin
         Server.Get_Login_Page (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Login_Page;

      package API_Get_Login_Page is
         new Swagger.Servers.Operation (Handler => Get_Login_Page,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/libs/granite/core/content/login.html");

      --  
      procedure Post_Cq_Actions
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Authorizable_Id : Swagger.UString;
         Changelog : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "authorizableId", Authorizable_Id);
         Swagger.Servers.Get_Query_Parameter (Req, "changelog", Changelog);
         Server.Post_Cq_Actions
            (Authorizable_Id,
             Changelog, Context);

      end Post_Cq_Actions;

      package API_Post_Cq_Actions is
         new Swagger.Servers.Operation (Handler => Post_Cq_Actions,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/.cqactions.html");

      --  
      procedure Get_Crxde_Status
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : Swagger.UString;
      begin
         Server.Get_Crxde_Status (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Crxde_Status;

      package API_Get_Crxde_Status is
         new Swagger.Servers.Operation (Handler => Get_Crxde_Status,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/crx/server/crx.default/jcr:root/.1.json");

      --  
      procedure Get_Install_Status
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : .Models.InstallStatus_Type;
      begin
         Server.Get_Install_Status (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Install_Status;

      package API_Get_Install_Status is
         new Swagger.Servers.Operation (Handler => Get_Install_Status,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/crx/packmgr/installstatus.jsp");

      --  
      procedure Get_Package_Manager_Servlet
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
      begin
         Server.Get_Package_Manager_Servlet (Context);

      end Get_Package_Manager_Servlet;

      package API_Get_Package_Manager_Servlet is
         new Swagger.Servers.Operation (Handler => Get_Package_Manager_Servlet,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/crx/packmgr/service/script.html");

      --  
      procedure Post_Package_Service
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Cmd : Swagger.UString;
         Result : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "cmd", Cmd);
         Server.Post_Package_Service
            (Cmd, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Post_Package_Service;

      package API_Post_Package_Service is
         new Swagger.Servers.Operation (Handler => Post_Package_Service,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/crx/packmgr/service.jsp");

      --  
      procedure Post_Package_Service_Json
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Path : Swagger.UString;
         Cmd : Swagger.UString;
         Group_Name : Swagger.Nullable_UString;
         Package_Name : Swagger.Nullable_UString;
         Package_Version : Swagger.Nullable_UString;
         Charset : Swagger.Nullable_UString;
         Force : Swagger.Nullable_Boolean;
         Recursive : Swagger.Nullable_Boolean;
         P_Package : Swagger.File_Part_Type;
         Result : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "cmd", Cmd);
         Swagger.Servers.Get_Query_Parameter (Req, "groupName", Group_Name);
         Swagger.Servers.Get_Query_Parameter (Req, "packageName", Package_Name);
         Swagger.Servers.Get_Query_Parameter (Req, "packageVersion", Package_Version);
         Swagger.Servers.Get_Query_Parameter (Req, "_charset_", Charset);
         Swagger.Servers.Get_Query_Parameter (Req, "force", Force);
         Swagger.Servers.Get_Query_Parameter (Req, "recursive", Recursive);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Path);
         Swagger.Servers.Get_Parameter (Context, "package", P_Package);
         Server.Post_Package_Service_Json
            (Path,
             Cmd,
             Group_Name,
             Package_Name,
             Package_Version,
             Charset,
             Force,
             Recursive,
             P_Package, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Post_Package_Service_Json;

      package API_Post_Package_Service_Json is
         new Swagger.Servers.Operation (Handler => Post_Package_Service_Json,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/crx/packmgr/service/.json/{path}");

      --  
      procedure Post_Package_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Group_Name : Swagger.UString;
         Package_Name : Swagger.UString;
         Version : Swagger.UString;
         Path : Swagger.UString;
         Filter : Swagger.Nullable_UString;
         Charset : Swagger.Nullable_UString;
         Result : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "groupName", Group_Name);
         Swagger.Servers.Get_Query_Parameter (Req, "packageName", Package_Name);
         Swagger.Servers.Get_Query_Parameter (Req, "version", Version);
         Swagger.Servers.Get_Query_Parameter (Req, "path", Path);
         Swagger.Servers.Get_Query_Parameter (Req, "filter", Filter);
         Swagger.Servers.Get_Query_Parameter (Req, "_charset_", Charset);
         Server.Post_Package_Update
            (Group_Name,
             Package_Name,
             Version,
             Path,
             Filter,
             Charset, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Post_Package_Update;

      package API_Post_Package_Update is
         new Swagger.Servers.Operation (Handler => Post_Package_Update,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/crx/packmgr/update.jsp");

      --  
      procedure Post_Set_Password
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Old : Swagger.UString;
         Plain : Swagger.UString;
         Verify : Swagger.UString;
         Result : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "old", Old);
         Swagger.Servers.Get_Query_Parameter (Req, "plain", Plain);
         Swagger.Servers.Get_Query_Parameter (Req, "verify", Verify);
         Server.Post_Set_Password
            (Old,
             Plain,
             Verify, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Post_Set_Password;

      package API_Post_Set_Password is
         new Swagger.Servers.Operation (Handler => Post_Set_Password,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/crx/explorer/ui/setpassword.jsp");

      --  
      procedure Get_Aem_Health_Check
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Tags : Swagger.Nullable_UString;
         Combine_Tags_Or : Swagger.Nullable_Boolean;
         Result : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "tags", Tags);
         Swagger.Servers.Get_Query_Parameter (Req, "combineTagsOr", Combine_Tags_Or);
         Server.Get_Aem_Health_Check
            (Tags,
             Combine_Tags_Or, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Aem_Health_Check;

      package API_Get_Aem_Health_Check is
         new Swagger.Servers.Operation (Handler => Get_Aem_Health_Check,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/system/health");

      --  
      procedure Post_Config_Aem_Health_Check_Servlet
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Bundles_Periodignored : Swagger.UString_Vectors.Vector;
         Bundles_Periodignored_At_Type_Hint : Swagger.Nullable_UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "bundles.ignored", Bundles_Periodignored);
         Swagger.Servers.Get_Query_Parameter (Req, "bundles.ignored@TypeHint", Bundles_Periodignored_At_Type_Hint);
         Server.Post_Config_Aem_Health_Check_Servlet
            (Bundles_Periodignored,
             Bundles_Periodignored_At_Type_Hint, Context);

      end Post_Config_Aem_Health_Check_Servlet;

      package API_Post_Config_Aem_Health_Check_Servlet is
         new Swagger.Servers.Operation (Handler => Post_Config_Aem_Health_Check_Servlet,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck");

      --  
      procedure Post_Config_Aem_Password_Reset
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Pwdreset_Periodauthorizables : Swagger.UString_Vectors.Vector;
         Pwdreset_Periodauthorizables_At_Type_Hint : Swagger.Nullable_UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "pwdreset.authorizables", Pwdreset_Periodauthorizables);
         Swagger.Servers.Get_Query_Parameter (Req, "pwdreset.authorizables@TypeHint", Pwdreset_Periodauthorizables_At_Type_Hint);
         Server.Post_Config_Aem_Password_Reset
            (Pwdreset_Periodauthorizables,
             Pwdreset_Periodauthorizables_At_Type_Hint, Context);

      end Post_Config_Aem_Password_Reset;

      package API_Post_Config_Aem_Password_Reset is
         new Swagger.Servers.Operation (Handler => Post_Config_Aem_Password_Reset,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/apps/system/config/com.shinesolutions.aem.passwordreset.Activator");

      --  
      procedure Ssl_Setup
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Keystore_Password : Swagger.UString;
         Keystore_Password_Confirm : Swagger.UString;
         Truststore_Password : Swagger.UString;
         Truststore_Password_Confirm : Swagger.UString;
         Https_Hostname : Swagger.UString;
         Https_Port : Swagger.UString;
         Privatekey_File : Swagger.File_Part_Type;
         Certificate_File : Swagger.File_Part_Type;
         Result : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "keystorePassword", Keystore_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "keystorePasswordConfirm", Keystore_Password_Confirm);
         Swagger.Servers.Get_Query_Parameter (Req, "truststorePassword", Truststore_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "truststorePasswordConfirm", Truststore_Password_Confirm);
         Swagger.Servers.Get_Query_Parameter (Req, "httpsHostname", Https_Hostname);
         Swagger.Servers.Get_Query_Parameter (Req, "httpsPort", Https_Port);
         Swagger.Servers.Get_Parameter (Context, "privatekeyFile", Privatekey_File);
         Swagger.Servers.Get_Parameter (Context, "certificateFile", Certificate_File);
         Server.Ssl_Setup
            (Keystore_Password,
             Keystore_Password_Confirm,
             Truststore_Password,
             Truststore_Password_Confirm,
             Https_Hostname,
             Https_Port,
             Privatekey_File,
             Certificate_File, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Ssl_Setup;

      package API_Ssl_Setup is
         new Swagger.Servers.Operation (Handler => Ssl_Setup,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/libs/granite/security/post/sslSetup.html");

      --  
      procedure Delete_Agent
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Runmode : Swagger.UString;
         Name : Swagger.UString;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Runmode);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Name);
         Server.Delete_Agent
            (Runmode,
             Name, Context);

      end Delete_Agent;

      package API_Delete_Agent is
         new Swagger.Servers.Operation (Handler => Delete_Agent,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/etc/replication/agents.{runmode}/{name}");

      --  
      procedure Delete_Node
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Path : Swagger.UString;
         Name : Swagger.UString;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Path);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Name);
         Server.Delete_Node
            (Path,
             Name, Context);

      end Delete_Node;

      package API_Delete_Node is
         new Swagger.Servers.Operation (Handler => Delete_Node,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/{path}/{name}");

      --  
      procedure Get_Agent
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Runmode : Swagger.UString;
         Name : Swagger.UString;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Runmode);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Name);
         Server.Get_Agent
            (Runmode,
             Name, Context);

      end Get_Agent;

      package API_Get_Agent is
         new Swagger.Servers.Operation (Handler => Get_Agent,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/etc/replication/agents.{runmode}/{name}");

      --  
      procedure Get_Agents
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Runmode : Swagger.UString;
         Result : Swagger.UString;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Runmode);
         Server.Get_Agents
            (Runmode, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Agents;

      package API_Get_Agents is
         new Swagger.Servers.Operation (Handler => Get_Agents,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/etc/replication/agents.{runmode}.-1.json");

      --  
      procedure Get_Authorizable_Keystore
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Intermediate_Path : Swagger.UString;
         Authorizable_Id : Swagger.UString;
         Result : .Models.KeystoreInfo_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Intermediate_Path);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Authorizable_Id);
         Server.Get_Authorizable_Keystore
            (Intermediate_Path,
             Authorizable_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Authorizable_Keystore;

      package API_Get_Authorizable_Keystore is
         new Swagger.Servers.Operation (Handler => Get_Authorizable_Keystore,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/{intermediatePath}/{authorizableId}.ks.json");

      --  
      procedure Get_Keystore
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Intermediate_Path : Swagger.UString;
         Authorizable_Id : Swagger.UString;
         Result : Swagger.Http_Content_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Intermediate_Path);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Authorizable_Id);
         Server.Get_Keystore
            (Intermediate_Path,
             Authorizable_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Keystore;

      package API_Get_Keystore is
         new Swagger.Servers.Operation (Handler => Get_Keystore,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/{intermediatePath}/{authorizableId}/keystore/store.p12");

      --  
      procedure Get_Node
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Path : Swagger.UString;
         Name : Swagger.UString;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Path);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Name);
         Server.Get_Node
            (Path,
             Name, Context);

      end Get_Node;

      package API_Get_Node is
         new Swagger.Servers.Operation (Handler => Get_Node,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/{path}/{name}");

      --  
      procedure Get_Package
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Group : Swagger.UString;
         Name : Swagger.UString;
         Version : Swagger.UString;
         Result : Swagger.Http_Content_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Group);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Name);
         Swagger.Servers.Get_Path_Parameter (Req, 3, Version);
         Server.Get_Package
            (Group,
             Name,
             Version, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Package;

      package API_Get_Package is
         new Swagger.Servers.Operation (Handler => Get_Package,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/etc/packages/{group}/{name}-{version}.zip");

      --  
      procedure Get_Package_Filter
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Group : Swagger.UString;
         Name : Swagger.UString;
         Version : Swagger.UString;
         Result : Swagger.UString;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Group);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Name);
         Swagger.Servers.Get_Path_Parameter (Req, 3, Version);
         Server.Get_Package_Filter
            (Group,
             Name,
             Version, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Package_Filter;

      package API_Get_Package_Filter is
         new Swagger.Servers.Operation (Handler => Get_Package_Filter,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json");

      --  
      procedure Get_Query
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Path : Swagger.UString;
         P_Periodlimit : Swagger.Number;
         P_1Property : Swagger.UString;
         P_1Property_Periodvalue : Swagger.UString;
         Result : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "path", Path);
         Swagger.Servers.Get_Query_Parameter (Req, "p.limit", P_Periodlimit);
         Swagger.Servers.Get_Query_Parameter (Req, "1_property", P_1Property);
         Swagger.Servers.Get_Query_Parameter (Req, "1_property.value", P_1Property_Periodvalue);
         Server.Get_Query
            (Path,
             P_Periodlimit,
             P_1Property,
             P_1Property_Periodvalue, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Query;

      package API_Get_Query is
         new Swagger.Servers.Operation (Handler => Get_Query,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/bin/querybuilder.json");

      --  
      procedure Get_Truststore
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : Swagger.Http_Content_Type;
      begin
         Server.Get_Truststore (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Truststore;

      package API_Get_Truststore is
         new Swagger.Servers.Operation (Handler => Get_Truststore,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/etc/truststore/truststore.p12");

      --  
      procedure Get_Truststore_Info
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : .Models.TruststoreInfo_Type;
      begin
         Server.Get_Truststore_Info (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Truststore_Info;

      package API_Get_Truststore_Info is
         new Swagger.Servers.Operation (Handler => Get_Truststore_Info,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/libs/granite/security/truststore.json");

      --  
      procedure Post_Agent
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Runmode : Swagger.UString;
         Name : Swagger.UString;
         Jcr_Content_Slashcq_Distribute : Swagger.Nullable_Boolean;
         Jcr_Content_Slashcq_Distribute_At_Type_Hint : Swagger.Nullable_UString;
         Jcr_Content_Slashcq_Name : Swagger.Nullable_UString;
         Jcr_Content_Slashcq_Template : Swagger.Nullable_UString;
         Jcr_Content_Slashenabled : Swagger.Nullable_Boolean;
         Jcr_Content_Slashjcr_Description : Swagger.Nullable_UString;
         Jcr_Content_Slashjcr_Last_Modified : Swagger.Nullable_UString;
         Jcr_Content_Slashjcr_Last_Modified_By : Swagger.Nullable_UString;
         Jcr_Content_Slashjcr_Mixin_Types : Swagger.Nullable_UString;
         Jcr_Content_Slashjcr_Title : Swagger.Nullable_UString;
         Jcr_Content_Slashlog_Level : Swagger.Nullable_UString;
         Jcr_Content_Slashno_Status_Update : Swagger.Nullable_Boolean;
         Jcr_Content_Slashno_Versioning : Swagger.Nullable_Boolean;
         Jcr_Content_Slashprotocol_Connect_Timeout : Swagger.Number;
         Jcr_Content_Slashprotocol_HTTPConnection_Closed : Swagger.Nullable_Boolean;
         Jcr_Content_Slashprotocol_HTTPExpired : Swagger.Nullable_UString;
         Jcr_Content_Slashprotocol_HTTPHeaders : Swagger.UString_Vectors.Vector;
         Jcr_Content_Slashprotocol_HTTPHeaders_At_Type_Hint : Swagger.Nullable_UString;
         Jcr_Content_Slashprotocol_HTTPMethod : Swagger.Nullable_UString;
         Jcr_Content_Slashprotocol_HTTPSRelaxed : Swagger.Nullable_Boolean;
         Jcr_Content_Slashprotocol_Interface : Swagger.Nullable_UString;
         Jcr_Content_Slashprotocol_Socket_Timeout : Swagger.Number;
         Jcr_Content_Slashprotocol_Version : Swagger.Nullable_UString;
         Jcr_Content_Slashproxy_NTLMDomain : Swagger.Nullable_UString;
         Jcr_Content_Slashproxy_NTLMHost : Swagger.Nullable_UString;
         Jcr_Content_Slashproxy_Host : Swagger.Nullable_UString;
         Jcr_Content_Slashproxy_Password : Swagger.Nullable_UString;
         Jcr_Content_Slashproxy_Port : Swagger.Number;
         Jcr_Content_Slashproxy_User : Swagger.Nullable_UString;
         Jcr_Content_Slashqueue_Batch_Max_Size : Swagger.Number;
         Jcr_Content_Slashqueue_Batch_Mode : Swagger.Nullable_UString;
         Jcr_Content_Slashqueue_Batch_Wait_Time : Swagger.Number;
         Jcr_Content_Slashretry_Delay : Swagger.Nullable_UString;
         Jcr_Content_Slashreverse_Replication : Swagger.Nullable_Boolean;
         Jcr_Content_Slashserialization_Type : Swagger.Nullable_UString;
         Jcr_Content_Slashsling_Resource_Type : Swagger.Nullable_UString;
         Jcr_Content_Slashssl : Swagger.Nullable_UString;
         Jcr_Content_Slashtransport_NTLMDomain : Swagger.Nullable_UString;
         Jcr_Content_Slashtransport_NTLMHost : Swagger.Nullable_UString;
         Jcr_Content_Slashtransport_Password : Swagger.Nullable_UString;
         Jcr_Content_Slashtransport_Uri : Swagger.Nullable_UString;
         Jcr_Content_Slashtransport_User : Swagger.Nullable_UString;
         Jcr_Content_Slashtrigger_Distribute : Swagger.Nullable_Boolean;
         Jcr_Content_Slashtrigger_Modified : Swagger.Nullable_Boolean;
         Jcr_Content_Slashtrigger_On_Off_Time : Swagger.Nullable_Boolean;
         Jcr_Content_Slashtrigger_Receive : Swagger.Nullable_Boolean;
         Jcr_Content_Slashtrigger_Specific : Swagger.Nullable_Boolean;
         Jcr_Content_Slashuser_Id : Swagger.Nullable_UString;
         Jcr_Primary_Type : Swagger.Nullable_UString;
         Operation : Swagger.Nullable_UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/cq:distribute", Jcr_Content_Slashcq_Distribute);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/cq:distribute@TypeHint", Jcr_Content_Slashcq_Distribute_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/cq:name", Jcr_Content_Slashcq_Name);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/cq:template", Jcr_Content_Slashcq_Template);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/enabled", Jcr_Content_Slashenabled);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/jcr:description", Jcr_Content_Slashjcr_Description);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/jcr:lastModified", Jcr_Content_Slashjcr_Last_Modified);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/jcr:lastModifiedBy", Jcr_Content_Slashjcr_Last_Modified_By);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/jcr:mixinTypes", Jcr_Content_Slashjcr_Mixin_Types);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/jcr:title", Jcr_Content_Slashjcr_Title);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/logLevel", Jcr_Content_Slashlog_Level);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/noStatusUpdate", Jcr_Content_Slashno_Status_Update);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/noVersioning", Jcr_Content_Slashno_Versioning);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/protocolConnectTimeout", Jcr_Content_Slashprotocol_Connect_Timeout);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/protocolHTTPConnectionClosed", Jcr_Content_Slashprotocol_HTTPConnection_Closed);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/protocolHTTPExpired", Jcr_Content_Slashprotocol_HTTPExpired);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/protocolHTTPHeaders", Jcr_Content_Slashprotocol_HTTPHeaders);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/protocolHTTPHeaders@TypeHint", Jcr_Content_Slashprotocol_HTTPHeaders_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/protocolHTTPMethod", Jcr_Content_Slashprotocol_HTTPMethod);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/protocolHTTPSRelaxed", Jcr_Content_Slashprotocol_HTTPSRelaxed);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/protocolInterface", Jcr_Content_Slashprotocol_Interface);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/protocolSocketTimeout", Jcr_Content_Slashprotocol_Socket_Timeout);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/protocolVersion", Jcr_Content_Slashprotocol_Version);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/proxyNTLMDomain", Jcr_Content_Slashproxy_NTLMDomain);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/proxyNTLMHost", Jcr_Content_Slashproxy_NTLMHost);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/proxyHost", Jcr_Content_Slashproxy_Host);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/proxyPassword", Jcr_Content_Slashproxy_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/proxyPort", Jcr_Content_Slashproxy_Port);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/proxyUser", Jcr_Content_Slashproxy_User);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/queueBatchMaxSize", Jcr_Content_Slashqueue_Batch_Max_Size);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/queueBatchMode", Jcr_Content_Slashqueue_Batch_Mode);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/queueBatchWaitTime", Jcr_Content_Slashqueue_Batch_Wait_Time);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/retryDelay", Jcr_Content_Slashretry_Delay);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/reverseReplication", Jcr_Content_Slashreverse_Replication);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/serializationType", Jcr_Content_Slashserialization_Type);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/sling:resourceType", Jcr_Content_Slashsling_Resource_Type);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/ssl", Jcr_Content_Slashssl);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/transportNTLMDomain", Jcr_Content_Slashtransport_NTLMDomain);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/transportNTLMHost", Jcr_Content_Slashtransport_NTLMHost);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/transportPassword", Jcr_Content_Slashtransport_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/transportUri", Jcr_Content_Slashtransport_Uri);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/transportUser", Jcr_Content_Slashtransport_User);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/triggerDistribute", Jcr_Content_Slashtrigger_Distribute);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/triggerModified", Jcr_Content_Slashtrigger_Modified);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/triggerOnOffTime", Jcr_Content_Slashtrigger_On_Off_Time);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/triggerReceive", Jcr_Content_Slashtrigger_Receive);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/triggerSpecific", Jcr_Content_Slashtrigger_Specific);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:content/userId", Jcr_Content_Slashuser_Id);
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:primaryType", Jcr_Primary_Type);
         Swagger.Servers.Get_Query_Parameter (Req, ":operation", Operation);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Runmode);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Name);
         Server.Post_Agent
            (Runmode,
             Name,
             Jcr_Content_Slashcq_Distribute,
             Jcr_Content_Slashcq_Distribute_At_Type_Hint,
             Jcr_Content_Slashcq_Name,
             Jcr_Content_Slashcq_Template,
             Jcr_Content_Slashenabled,
             Jcr_Content_Slashjcr_Description,
             Jcr_Content_Slashjcr_Last_Modified,
             Jcr_Content_Slashjcr_Last_Modified_By,
             Jcr_Content_Slashjcr_Mixin_Types,
             Jcr_Content_Slashjcr_Title,
             Jcr_Content_Slashlog_Level,
             Jcr_Content_Slashno_Status_Update,
             Jcr_Content_Slashno_Versioning,
             Jcr_Content_Slashprotocol_Connect_Timeout,
             Jcr_Content_Slashprotocol_HTTPConnection_Closed,
             Jcr_Content_Slashprotocol_HTTPExpired,
             Jcr_Content_Slashprotocol_HTTPHeaders,
             Jcr_Content_Slashprotocol_HTTPHeaders_At_Type_Hint,
             Jcr_Content_Slashprotocol_HTTPMethod,
             Jcr_Content_Slashprotocol_HTTPSRelaxed,
             Jcr_Content_Slashprotocol_Interface,
             Jcr_Content_Slashprotocol_Socket_Timeout,
             Jcr_Content_Slashprotocol_Version,
             Jcr_Content_Slashproxy_NTLMDomain,
             Jcr_Content_Slashproxy_NTLMHost,
             Jcr_Content_Slashproxy_Host,
             Jcr_Content_Slashproxy_Password,
             Jcr_Content_Slashproxy_Port,
             Jcr_Content_Slashproxy_User,
             Jcr_Content_Slashqueue_Batch_Max_Size,
             Jcr_Content_Slashqueue_Batch_Mode,
             Jcr_Content_Slashqueue_Batch_Wait_Time,
             Jcr_Content_Slashretry_Delay,
             Jcr_Content_Slashreverse_Replication,
             Jcr_Content_Slashserialization_Type,
             Jcr_Content_Slashsling_Resource_Type,
             Jcr_Content_Slashssl,
             Jcr_Content_Slashtransport_NTLMDomain,
             Jcr_Content_Slashtransport_NTLMHost,
             Jcr_Content_Slashtransport_Password,
             Jcr_Content_Slashtransport_Uri,
             Jcr_Content_Slashtransport_User,
             Jcr_Content_Slashtrigger_Distribute,
             Jcr_Content_Slashtrigger_Modified,
             Jcr_Content_Slashtrigger_On_Off_Time,
             Jcr_Content_Slashtrigger_Receive,
             Jcr_Content_Slashtrigger_Specific,
             Jcr_Content_Slashuser_Id,
             Jcr_Primary_Type,
             Operation, Context);

      end Post_Agent;

      package API_Post_Agent is
         new Swagger.Servers.Operation (Handler => Post_Agent,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/etc/replication/agents.{runmode}/{name}");

      --  
      procedure Post_Authorizable_Keystore
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Intermediate_Path : Swagger.UString;
         Authorizable_Id : Swagger.UString;
         Operation : Swagger.Nullable_UString;
         Current_Password : Swagger.Nullable_UString;
         New_Password : Swagger.Nullable_UString;
         Re_Password : Swagger.Nullable_UString;
         Key_Password : Swagger.Nullable_UString;
         Key_Store_Pass : Swagger.Nullable_UString;
         Alias : Swagger.Nullable_UString;
         New_Alias : Swagger.Nullable_UString;
         Remove_Alias : Swagger.Nullable_UString;
         Cert_Chain : Swagger.File_Part_Type;
         Pk : Swagger.File_Part_Type;
         Key_Store : Swagger.File_Part_Type;
         Result : .Models.KeystoreInfo_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, ":operation", Operation);
         Swagger.Servers.Get_Query_Parameter (Req, "currentPassword", Current_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "newPassword", New_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "rePassword", Re_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "keyPassword", Key_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "keyStorePass", Key_Store_Pass);
         Swagger.Servers.Get_Query_Parameter (Req, "alias", Alias);
         Swagger.Servers.Get_Query_Parameter (Req, "newAlias", New_Alias);
         Swagger.Servers.Get_Query_Parameter (Req, "removeAlias", Remove_Alias);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Intermediate_Path);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Authorizable_Id);
         Swagger.Servers.Get_Parameter (Context, "cert-chain", Cert_Chain);
         Swagger.Servers.Get_Parameter (Context, "pk", Pk);
         Swagger.Servers.Get_Parameter (Context, "keyStore", Key_Store);
         Server.Post_Authorizable_Keystore
            (Intermediate_Path,
             Authorizable_Id,
             Operation,
             Current_Password,
             New_Password,
             Re_Password,
             Key_Password,
             Key_Store_Pass,
             Alias,
             New_Alias,
             Remove_Alias,
             Cert_Chain,
             Pk,
             Key_Store, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Post_Authorizable_Keystore;

      package API_Post_Authorizable_Keystore is
         new Swagger.Servers.Operation (Handler => Post_Authorizable_Keystore,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/{intermediatePath}/{authorizableId}.ks.html");

      --  
      procedure Post_Authorizables
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Authorizable_Id : Swagger.UString;
         Intermediate_Path : Swagger.UString;
         Create_User : Swagger.Nullable_UString;
         Create_Group : Swagger.Nullable_UString;
         Rep_Password : Swagger.Nullable_UString;
         Profile_Slashgiven_Name : Swagger.Nullable_UString;
         Result : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "authorizableId", Authorizable_Id);
         Swagger.Servers.Get_Query_Parameter (Req, "intermediatePath", Intermediate_Path);
         Swagger.Servers.Get_Query_Parameter (Req, "createUser", Create_User);
         Swagger.Servers.Get_Query_Parameter (Req, "createGroup", Create_Group);
         Swagger.Servers.Get_Query_Parameter (Req, "rep:password", Rep_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "profile/givenName", Profile_Slashgiven_Name);
         Server.Post_Authorizables
            (Authorizable_Id,
             Intermediate_Path,
             Create_User,
             Create_Group,
             Rep_Password,
             Profile_Slashgiven_Name, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Post_Authorizables;

      package API_Post_Authorizables is
         new Swagger.Servers.Operation (Handler => Post_Authorizables,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/libs/granite/security/post/authorizables");

      --  
      procedure Post_Config_Adobe_Granite_Saml_Authentication_Handler
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Key_Store_Password : Swagger.Nullable_UString;
         Key_Store_Password_At_Type_Hint : Swagger.Nullable_UString;
         Service_Periodranking : Swagger.Nullable_Integer;
         Service_Periodranking_At_Type_Hint : Swagger.Nullable_UString;
         Idp_Http_Redirect : Swagger.Nullable_Boolean;
         Idp_Http_Redirect_At_Type_Hint : Swagger.Nullable_UString;
         Create_User : Swagger.Nullable_Boolean;
         Create_User_At_Type_Hint : Swagger.Nullable_UString;
         Default_Redirect_Url : Swagger.Nullable_UString;
         Default_Redirect_Url_At_Type_Hint : Swagger.Nullable_UString;
         User_IDAttribute : Swagger.Nullable_UString;
         User_IDAttribute_At_Type_Hint : Swagger.Nullable_UString;
         Default_Groups : Swagger.UString_Vectors.Vector;
         Default_Groups_At_Type_Hint : Swagger.Nullable_UString;
         Idp_Cert_Alias : Swagger.Nullable_UString;
         Idp_Cert_Alias_At_Type_Hint : Swagger.Nullable_UString;
         Add_Group_Memberships : Swagger.Nullable_Boolean;
         Add_Group_Memberships_At_Type_Hint : Swagger.Nullable_UString;
         Path : Swagger.UString_Vectors.Vector;
         Path_At_Type_Hint : Swagger.Nullable_UString;
         Synchronize_Attributes : Swagger.UString_Vectors.Vector;
         Synchronize_Attributes_At_Type_Hint : Swagger.Nullable_UString;
         Clock_Tolerance : Swagger.Nullable_Integer;
         Clock_Tolerance_At_Type_Hint : Swagger.Nullable_UString;
         Group_Membership_Attribute : Swagger.Nullable_UString;
         Group_Membership_Attribute_At_Type_Hint : Swagger.Nullable_UString;
         Idp_Url : Swagger.Nullable_UString;
         Idp_Url_At_Type_Hint : Swagger.Nullable_UString;
         Logout_Url : Swagger.Nullable_UString;
         Logout_Url_At_Type_Hint : Swagger.Nullable_UString;
         Service_Provider_Entity_Id : Swagger.Nullable_UString;
         Service_Provider_Entity_Id_At_Type_Hint : Swagger.Nullable_UString;
         Assertion_Consumer_Service_URL : Swagger.Nullable_UString;
         Assertion_Consumer_Service_URLAt_Type_Hint : Swagger.Nullable_UString;
         Handle_Logout : Swagger.Nullable_Boolean;
         Handle_Logout_At_Type_Hint : Swagger.Nullable_UString;
         Sp_Private_Key_Alias : Swagger.Nullable_UString;
         Sp_Private_Key_Alias_At_Type_Hint : Swagger.Nullable_UString;
         Use_Encryption : Swagger.Nullable_Boolean;
         Use_Encryption_At_Type_Hint : Swagger.Nullable_UString;
         Name_Id_Format : Swagger.Nullable_UString;
         Name_Id_Format_At_Type_Hint : Swagger.Nullable_UString;
         Digest_Method : Swagger.Nullable_UString;
         Digest_Method_At_Type_Hint : Swagger.Nullable_UString;
         Signature_Method : Swagger.Nullable_UString;
         Signature_Method_At_Type_Hint : Swagger.Nullable_UString;
         User_Intermediate_Path : Swagger.Nullable_UString;
         User_Intermediate_Path_At_Type_Hint : Swagger.Nullable_UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "keyStorePassword", Key_Store_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "keyStorePassword@TypeHint", Key_Store_Password_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "service.ranking", Service_Periodranking);
         Swagger.Servers.Get_Query_Parameter (Req, "service.ranking@TypeHint", Service_Periodranking_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "idpHttpRedirect", Idp_Http_Redirect);
         Swagger.Servers.Get_Query_Parameter (Req, "idpHttpRedirect@TypeHint", Idp_Http_Redirect_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "createUser", Create_User);
         Swagger.Servers.Get_Query_Parameter (Req, "createUser@TypeHint", Create_User_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "defaultRedirectUrl", Default_Redirect_Url);
         Swagger.Servers.Get_Query_Parameter (Req, "defaultRedirectUrl@TypeHint", Default_Redirect_Url_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "userIDAttribute", User_IDAttribute);
         Swagger.Servers.Get_Query_Parameter (Req, "userIDAttribute@TypeHint", User_IDAttribute_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "defaultGroups", Default_Groups);
         Swagger.Servers.Get_Query_Parameter (Req, "defaultGroups@TypeHint", Default_Groups_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "idpCertAlias", Idp_Cert_Alias);
         Swagger.Servers.Get_Query_Parameter (Req, "idpCertAlias@TypeHint", Idp_Cert_Alias_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "addGroupMemberships", Add_Group_Memberships);
         Swagger.Servers.Get_Query_Parameter (Req, "addGroupMemberships@TypeHint", Add_Group_Memberships_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "path", Path);
         Swagger.Servers.Get_Query_Parameter (Req, "path@TypeHint", Path_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "synchronizeAttributes", Synchronize_Attributes);
         Swagger.Servers.Get_Query_Parameter (Req, "synchronizeAttributes@TypeHint", Synchronize_Attributes_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "clockTolerance", Clock_Tolerance);
         Swagger.Servers.Get_Query_Parameter (Req, "clockTolerance@TypeHint", Clock_Tolerance_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "groupMembershipAttribute", Group_Membership_Attribute);
         Swagger.Servers.Get_Query_Parameter (Req, "groupMembershipAttribute@TypeHint", Group_Membership_Attribute_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "idpUrl", Idp_Url);
         Swagger.Servers.Get_Query_Parameter (Req, "idpUrl@TypeHint", Idp_Url_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "logoutUrl", Logout_Url);
         Swagger.Servers.Get_Query_Parameter (Req, "logoutUrl@TypeHint", Logout_Url_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "serviceProviderEntityId", Service_Provider_Entity_Id);
         Swagger.Servers.Get_Query_Parameter (Req, "serviceProviderEntityId@TypeHint", Service_Provider_Entity_Id_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "assertionConsumerServiceURL", Assertion_Consumer_Service_URL);
         Swagger.Servers.Get_Query_Parameter (Req, "assertionConsumerServiceURL@TypeHint", Assertion_Consumer_Service_URLAt_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "handleLogout", Handle_Logout);
         Swagger.Servers.Get_Query_Parameter (Req, "handleLogout@TypeHint", Handle_Logout_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "spPrivateKeyAlias", Sp_Private_Key_Alias);
         Swagger.Servers.Get_Query_Parameter (Req, "spPrivateKeyAlias@TypeHint", Sp_Private_Key_Alias_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "useEncryption", Use_Encryption);
         Swagger.Servers.Get_Query_Parameter (Req, "useEncryption@TypeHint", Use_Encryption_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "nameIdFormat", Name_Id_Format);
         Swagger.Servers.Get_Query_Parameter (Req, "nameIdFormat@TypeHint", Name_Id_Format_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "digestMethod", Digest_Method);
         Swagger.Servers.Get_Query_Parameter (Req, "digestMethod@TypeHint", Digest_Method_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "signatureMethod", Signature_Method);
         Swagger.Servers.Get_Query_Parameter (Req, "signatureMethod@TypeHint", Signature_Method_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "userIntermediatePath", User_Intermediate_Path);
         Swagger.Servers.Get_Query_Parameter (Req, "userIntermediatePath@TypeHint", User_Intermediate_Path_At_Type_Hint);
         Server.Post_Config_Adobe_Granite_Saml_Authentication_Handler
            (Key_Store_Password,
             Key_Store_Password_At_Type_Hint,
             Service_Periodranking,
             Service_Periodranking_At_Type_Hint,
             Idp_Http_Redirect,
             Idp_Http_Redirect_At_Type_Hint,
             Create_User,
             Create_User_At_Type_Hint,
             Default_Redirect_Url,
             Default_Redirect_Url_At_Type_Hint,
             User_IDAttribute,
             User_IDAttribute_At_Type_Hint,
             Default_Groups,
             Default_Groups_At_Type_Hint,
             Idp_Cert_Alias,
             Idp_Cert_Alias_At_Type_Hint,
             Add_Group_Memberships,
             Add_Group_Memberships_At_Type_Hint,
             Path,
             Path_At_Type_Hint,
             Synchronize_Attributes,
             Synchronize_Attributes_At_Type_Hint,
             Clock_Tolerance,
             Clock_Tolerance_At_Type_Hint,
             Group_Membership_Attribute,
             Group_Membership_Attribute_At_Type_Hint,
             Idp_Url,
             Idp_Url_At_Type_Hint,
             Logout_Url,
             Logout_Url_At_Type_Hint,
             Service_Provider_Entity_Id,
             Service_Provider_Entity_Id_At_Type_Hint,
             Assertion_Consumer_Service_URL,
             Assertion_Consumer_Service_URLAt_Type_Hint,
             Handle_Logout,
             Handle_Logout_At_Type_Hint,
             Sp_Private_Key_Alias,
             Sp_Private_Key_Alias_At_Type_Hint,
             Use_Encryption,
             Use_Encryption_At_Type_Hint,
             Name_Id_Format,
             Name_Id_Format_At_Type_Hint,
             Digest_Method,
             Digest_Method_At_Type_Hint,
             Signature_Method,
             Signature_Method_At_Type_Hint,
             User_Intermediate_Path,
             User_Intermediate_Path_At_Type_Hint, Context);

      end Post_Config_Adobe_Granite_Saml_Authentication_Handler;

      package API_Post_Config_Adobe_Granite_Saml_Authentication_Handler is
         new Swagger.Servers.Operation (Handler => Post_Config_Adobe_Granite_Saml_Authentication_Handler,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config");

      --  
      procedure Post_Config_Apache_Felix_Jetty_Based_Http_Service
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Org_Periodapache_Periodfelix_Periodhttps_Periodnio : Swagger.Nullable_Boolean;
         Org_Periodapache_Periodfelix_Periodhttps_Periodnio_At_Type_Hint : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_At_Type_Hint : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodpassword : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodpassword_At_Type_Hint : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_At_Type_Hint : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_Periodpassword : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_Periodpassword_At_Type_Hint : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_At_Type_Hint : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_Periodpassword : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_Periodpassword_At_Type_Hint : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodclientcertificate : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodclientcertificate_At_Type_Hint : Swagger.Nullable_UString;
         Org_Periodapache_Periodfelix_Periodhttps_Periodenable : Swagger.Nullable_Boolean;
         Org_Periodapache_Periodfelix_Periodhttps_Periodenable_At_Type_Hint : Swagger.Nullable_UString;
         Org_Periodosgi_Periodservice_Periodhttp_Periodport_Periodsecure : Swagger.Nullable_UString;
         Org_Periodosgi_Periodservice_Periodhttp_Periodport_Periodsecure_At_Type_Hint : Swagger.Nullable_UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.nio", Org_Periodapache_Periodfelix_Periodhttps_Periodnio);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.nio@TypeHint", Org_Periodapache_Periodfelix_Periodhttps_Periodnio_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.keystore", Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.keystore@TypeHint", Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.keystore.password", Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodpassword);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.keystore.password@TypeHint", Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodpassword_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.keystore.key", Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.keystore.key@TypeHint", Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.keystore.key.password", Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_Periodpassword);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.keystore.key.password@TypeHint", Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_Periodpassword_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.truststore", Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.truststore@TypeHint", Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.truststore.password", Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_Periodpassword);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.truststore.password@TypeHint", Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_Periodpassword_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.clientcertificate", Org_Periodapache_Periodfelix_Periodhttps_Periodclientcertificate);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.clientcertificate@TypeHint", Org_Periodapache_Periodfelix_Periodhttps_Periodclientcertificate_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.enable", Org_Periodapache_Periodfelix_Periodhttps_Periodenable);
         Swagger.Servers.Get_Query_Parameter (Req, "org.apache.felix.https.enable@TypeHint", Org_Periodapache_Periodfelix_Periodhttps_Periodenable_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "org.osgi.service.http.port.secure", Org_Periodosgi_Periodservice_Periodhttp_Periodport_Periodsecure);
         Swagger.Servers.Get_Query_Parameter (Req, "org.osgi.service.http.port.secure@TypeHint", Org_Periodosgi_Periodservice_Periodhttp_Periodport_Periodsecure_At_Type_Hint);
         Server.Post_Config_Apache_Felix_Jetty_Based_Http_Service
            (Org_Periodapache_Periodfelix_Periodhttps_Periodnio,
             Org_Periodapache_Periodfelix_Periodhttps_Periodnio_At_Type_Hint,
             Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore,
             Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_At_Type_Hint,
             Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodpassword,
             Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodpassword_At_Type_Hint,
             Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey,
             Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_At_Type_Hint,
             Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_Periodpassword,
             Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_Periodpassword_At_Type_Hint,
             Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore,
             Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_At_Type_Hint,
             Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_Periodpassword,
             Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_Periodpassword_At_Type_Hint,
             Org_Periodapache_Periodfelix_Periodhttps_Periodclientcertificate,
             Org_Periodapache_Periodfelix_Periodhttps_Periodclientcertificate_At_Type_Hint,
             Org_Periodapache_Periodfelix_Periodhttps_Periodenable,
             Org_Periodapache_Periodfelix_Periodhttps_Periodenable_At_Type_Hint,
             Org_Periodosgi_Periodservice_Periodhttp_Periodport_Periodsecure,
             Org_Periodosgi_Periodservice_Periodhttp_Periodport_Periodsecure_At_Type_Hint, Context);

      end Post_Config_Apache_Felix_Jetty_Based_Http_Service;

      package API_Post_Config_Apache_Felix_Jetty_Based_Http_Service is
         new Swagger.Servers.Operation (Handler => Post_Config_Apache_Felix_Jetty_Based_Http_Service,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/apps/system/config/org.apache.felix.http");

      --  
      procedure Post_Config_Apache_Http_Components_Proxy_Configuration
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Proxy_Periodhost : Swagger.Nullable_UString;
         Proxy_Periodhost_At_Type_Hint : Swagger.Nullable_UString;
         Proxy_Periodport : Swagger.Nullable_Integer;
         Proxy_Periodport_At_Type_Hint : Swagger.Nullable_UString;
         Proxy_Periodexceptions : Swagger.UString_Vectors.Vector;
         Proxy_Periodexceptions_At_Type_Hint : Swagger.Nullable_UString;
         Proxy_Periodenabled : Swagger.Nullable_Boolean;
         Proxy_Periodenabled_At_Type_Hint : Swagger.Nullable_UString;
         Proxy_Perioduser : Swagger.Nullable_UString;
         Proxy_Perioduser_At_Type_Hint : Swagger.Nullable_UString;
         Proxy_Periodpassword : Swagger.Nullable_UString;
         Proxy_Periodpassword_At_Type_Hint : Swagger.Nullable_UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "proxy.host", Proxy_Periodhost);
         Swagger.Servers.Get_Query_Parameter (Req, "proxy.host@TypeHint", Proxy_Periodhost_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "proxy.port", Proxy_Periodport);
         Swagger.Servers.Get_Query_Parameter (Req, "proxy.port@TypeHint", Proxy_Periodport_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "proxy.exceptions", Proxy_Periodexceptions);
         Swagger.Servers.Get_Query_Parameter (Req, "proxy.exceptions@TypeHint", Proxy_Periodexceptions_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "proxy.enabled", Proxy_Periodenabled);
         Swagger.Servers.Get_Query_Parameter (Req, "proxy.enabled@TypeHint", Proxy_Periodenabled_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "proxy.user", Proxy_Perioduser);
         Swagger.Servers.Get_Query_Parameter (Req, "proxy.user@TypeHint", Proxy_Perioduser_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "proxy.password", Proxy_Periodpassword);
         Swagger.Servers.Get_Query_Parameter (Req, "proxy.password@TypeHint", Proxy_Periodpassword_At_Type_Hint);
         Server.Post_Config_Apache_Http_Components_Proxy_Configuration
            (Proxy_Periodhost,
             Proxy_Periodhost_At_Type_Hint,
             Proxy_Periodport,
             Proxy_Periodport_At_Type_Hint,
             Proxy_Periodexceptions,
             Proxy_Periodexceptions_At_Type_Hint,
             Proxy_Periodenabled,
             Proxy_Periodenabled_At_Type_Hint,
             Proxy_Perioduser,
             Proxy_Perioduser_At_Type_Hint,
             Proxy_Periodpassword,
             Proxy_Periodpassword_At_Type_Hint, Context);

      end Post_Config_Apache_Http_Components_Proxy_Configuration;

      package API_Post_Config_Apache_Http_Components_Proxy_Configuration is
         new Swagger.Servers.Operation (Handler => Post_Config_Apache_Http_Components_Proxy_Configuration,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/apps/system/config/org.apache.http.proxyconfigurator.config");

      --  
      procedure Post_Config_Apache_Sling_Dav_Ex_Servlet
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Alias : Swagger.Nullable_UString;
         Alias_At_Type_Hint : Swagger.Nullable_UString;
         Dav_Periodcreate_Absolute_Uri : Swagger.Nullable_Boolean;
         Dav_Periodcreate_Absolute_Uri_At_Type_Hint : Swagger.Nullable_UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "alias", Alias);
         Swagger.Servers.Get_Query_Parameter (Req, "alias@TypeHint", Alias_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "dav.create-absolute-uri", Dav_Periodcreate_Absolute_Uri);
         Swagger.Servers.Get_Query_Parameter (Req, "dav.create-absolute-uri@TypeHint", Dav_Periodcreate_Absolute_Uri_At_Type_Hint);
         Server.Post_Config_Apache_Sling_Dav_Ex_Servlet
            (Alias,
             Alias_At_Type_Hint,
             Dav_Periodcreate_Absolute_Uri,
             Dav_Periodcreate_Absolute_Uri_At_Type_Hint, Context);

      end Post_Config_Apache_Sling_Dav_Ex_Servlet;

      package API_Post_Config_Apache_Sling_Dav_Ex_Servlet is
         new Swagger.Servers.Operation (Handler => Post_Config_Apache_Sling_Dav_Ex_Servlet,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet");

      --  
      procedure Post_Config_Apache_Sling_Get_Servlet
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Json_Periodmaximumresults : Swagger.Nullable_UString;
         Json_Periodmaximumresults_At_Type_Hint : Swagger.Nullable_UString;
         Enable_Periodhtml : Swagger.Nullable_Boolean;
         Enable_Periodhtml_At_Type_Hint : Swagger.Nullable_UString;
         Enable_Periodtxt : Swagger.Nullable_Boolean;
         Enable_Periodtxt_At_Type_Hint : Swagger.Nullable_UString;
         Enable_Periodxml : Swagger.Nullable_Boolean;
         Enable_Periodxml_At_Type_Hint : Swagger.Nullable_UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "json.maximumresults", Json_Periodmaximumresults);
         Swagger.Servers.Get_Query_Parameter (Req, "json.maximumresults@TypeHint", Json_Periodmaximumresults_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "enable.html", Enable_Periodhtml);
         Swagger.Servers.Get_Query_Parameter (Req, "enable.html@TypeHint", Enable_Periodhtml_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "enable.txt", Enable_Periodtxt);
         Swagger.Servers.Get_Query_Parameter (Req, "enable.txt@TypeHint", Enable_Periodtxt_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "enable.xml", Enable_Periodxml);
         Swagger.Servers.Get_Query_Parameter (Req, "enable.xml@TypeHint", Enable_Periodxml_At_Type_Hint);
         Server.Post_Config_Apache_Sling_Get_Servlet
            (Json_Periodmaximumresults,
             Json_Periodmaximumresults_At_Type_Hint,
             Enable_Periodhtml,
             Enable_Periodhtml_At_Type_Hint,
             Enable_Periodtxt,
             Enable_Periodtxt_At_Type_Hint,
             Enable_Periodxml,
             Enable_Periodxml_At_Type_Hint, Context);

      end Post_Config_Apache_Sling_Get_Servlet;

      package API_Post_Config_Apache_Sling_Get_Servlet is
         new Swagger.Servers.Operation (Handler => Post_Config_Apache_Sling_Get_Servlet,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet");

      --  
      procedure Post_Config_Apache_Sling_Referrer_Filter
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Allow_Periodempty : Swagger.Nullable_Boolean;
         Allow_Periodempty_At_Type_Hint : Swagger.Nullable_UString;
         Allow_Periodhosts : Swagger.Nullable_UString;
         Allow_Periodhosts_At_Type_Hint : Swagger.Nullable_UString;
         Allow_Periodhosts_Periodregexp : Swagger.Nullable_UString;
         Allow_Periodhosts_Periodregexp_At_Type_Hint : Swagger.Nullable_UString;
         Filter_Periodmethods : Swagger.Nullable_UString;
         Filter_Periodmethods_At_Type_Hint : Swagger.Nullable_UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "allow.empty", Allow_Periodempty);
         Swagger.Servers.Get_Query_Parameter (Req, "allow.empty@TypeHint", Allow_Periodempty_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "allow.hosts", Allow_Periodhosts);
         Swagger.Servers.Get_Query_Parameter (Req, "allow.hosts@TypeHint", Allow_Periodhosts_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "allow.hosts.regexp", Allow_Periodhosts_Periodregexp);
         Swagger.Servers.Get_Query_Parameter (Req, "allow.hosts.regexp@TypeHint", Allow_Periodhosts_Periodregexp_At_Type_Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "filter.methods", Filter_Periodmethods);
         Swagger.Servers.Get_Query_Parameter (Req, "filter.methods@TypeHint", Filter_Periodmethods_At_Type_Hint);
         Server.Post_Config_Apache_Sling_Referrer_Filter
            (Allow_Periodempty,
             Allow_Periodempty_At_Type_Hint,
             Allow_Periodhosts,
             Allow_Periodhosts_At_Type_Hint,
             Allow_Periodhosts_Periodregexp,
             Allow_Periodhosts_Periodregexp_At_Type_Hint,
             Filter_Periodmethods,
             Filter_Periodmethods_At_Type_Hint, Context);

      end Post_Config_Apache_Sling_Referrer_Filter;

      package API_Post_Config_Apache_Sling_Referrer_Filter is
         new Swagger.Servers.Operation (Handler => Post_Config_Apache_Sling_Referrer_Filter,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/apps/system/config/org.apache.sling.security.impl.ReferrerFilter");

      --  
      procedure Post_Config_Property
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Config_Node_Name : Swagger.UString;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Config_Node_Name);
         Server.Post_Config_Property
            (Config_Node_Name, Context);

      end Post_Config_Property;

      package API_Post_Config_Property is
         new Swagger.Servers.Operation (Handler => Post_Config_Property,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/apps/system/config/{configNodeName}");

      --  
      procedure Post_Node
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Path : Swagger.UString;
         Name : Swagger.UString;
         Operation : Swagger.Nullable_UString;
         Delete_Authorizable : Swagger.Nullable_UString;
         File : Swagger.File_Part_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, ":operation", Operation);
         Swagger.Servers.Get_Query_Parameter (Req, "deleteAuthorizable", Delete_Authorizable);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Path);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Name);
         Swagger.Servers.Get_Parameter (Context, "file", File);
         Server.Post_Node
            (Path,
             Name,
             Operation,
             Delete_Authorizable,
             File, Context);

      end Post_Node;

      package API_Post_Node is
         new Swagger.Servers.Operation (Handler => Post_Node,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/{path}/{name}");

      --  
      procedure Post_Node_Rw
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Path : Swagger.UString;
         Name : Swagger.UString;
         Add_Members : Swagger.Nullable_UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "addMembers", Add_Members);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Path);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Name);
         Server.Post_Node_Rw
            (Path,
             Name,
             Add_Members, Context);

      end Post_Node_Rw;

      package API_Post_Node_Rw is
         new Swagger.Servers.Operation (Handler => Post_Node_Rw,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/{path}/{name}.rw.html");

      --  
      procedure Post_Path
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Path : Swagger.UString;
         Jcr_Primary_Type : Swagger.UString;
         Name : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "jcr:primaryType", Jcr_Primary_Type);
         Swagger.Servers.Get_Query_Parameter (Req, ":name", Name);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Path);
         Server.Post_Path
            (Path,
             Jcr_Primary_Type,
             Name, Context);

      end Post_Path;

      package API_Post_Path is
         new Swagger.Servers.Operation (Handler => Post_Path,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/{path}/");

      --  
      procedure Post_Query
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Path : Swagger.UString;
         P_Periodlimit : Swagger.Number;
         P_1Property : Swagger.UString;
         P_1Property_Periodvalue : Swagger.UString;
         Result : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "path", Path);
         Swagger.Servers.Get_Query_Parameter (Req, "p.limit", P_Periodlimit);
         Swagger.Servers.Get_Query_Parameter (Req, "1_property", P_1Property);
         Swagger.Servers.Get_Query_Parameter (Req, "1_property.value", P_1Property_Periodvalue);
         Server.Post_Query
            (Path,
             P_Periodlimit,
             P_1Property,
             P_1Property_Periodvalue, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Post_Query;

      package API_Post_Query is
         new Swagger.Servers.Operation (Handler => Post_Query,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/bin/querybuilder.json");

      --  
      procedure Post_Tree_Activation
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ignoredeactivated : Boolean;
         Onlymodified : Boolean;
         Path : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "ignoredeactivated", Ignoredeactivated);
         Swagger.Servers.Get_Query_Parameter (Req, "onlymodified", Onlymodified);
         Swagger.Servers.Get_Query_Parameter (Req, "path", Path);
         Server.Post_Tree_Activation
            (Ignoredeactivated,
             Onlymodified,
             Path, Context);

      end Post_Tree_Activation;

      package API_Post_Tree_Activation is
         new Swagger.Servers.Operation (Handler => Post_Tree_Activation,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/etc/replication/treeactivation.html");

      --  
      procedure Post_Truststore
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Operation : Swagger.Nullable_UString;
         New_Password : Swagger.Nullable_UString;
         Re_Password : Swagger.Nullable_UString;
         Key_Store_Type : Swagger.Nullable_UString;
         Remove_Alias : Swagger.Nullable_UString;
         Certificate : Swagger.File_Part_Type;
         Result : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, ":operation", Operation);
         Swagger.Servers.Get_Query_Parameter (Req, "newPassword", New_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "rePassword", Re_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "keyStoreType", Key_Store_Type);
         Swagger.Servers.Get_Query_Parameter (Req, "removeAlias", Remove_Alias);
         Swagger.Servers.Get_Parameter (Context, "certificate", Certificate);
         Server.Post_Truststore
            (Operation,
             New_Password,
             Re_Password,
             Key_Store_Type,
             Remove_Alias,
             Certificate, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Post_Truststore;

      package API_Post_Truststore is
         new Swagger.Servers.Operation (Handler => Post_Truststore,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/libs/granite/security/post/truststore");

      --  
      procedure Post_Truststore_PKCS12
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Truststore_Periodp_12 : Swagger.File_Part_Type;
         Result : Swagger.UString;
      begin
         Swagger.Servers.Get_Parameter (Context, "truststore.p12", Truststore_Periodp_12);
         Server.Post_Truststore_PKCS12
            (Truststore_Periodp_12, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Post_Truststore_PKCS12;

      package API_Post_Truststore_PKCS12 is
         new Swagger.Servers.Operation (Handler => Post_Truststore_PKCS12,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/etc/truststore");

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Get_Aem_Product_Info.Definition);
         Swagger.Servers.Register (Server, API_Get_Bundle_Info.Definition);
         Swagger.Servers.Register (Server, API_Get_Config_Mgr.Definition);
         Swagger.Servers.Register (Server, API_Post_Bundle.Definition);
         Swagger.Servers.Register (Server, API_Post_Jmx_Repository.Definition);
         Swagger.Servers.Register (Server, API_Post_Saml_Configuration.Definition);
         Swagger.Servers.Register (Server, API_Get_Login_Page.Definition);
         Swagger.Servers.Register (Server, API_Post_Cq_Actions.Definition);
         Swagger.Servers.Register (Server, API_Get_Crxde_Status.Definition);
         Swagger.Servers.Register (Server, API_Get_Install_Status.Definition);
         Swagger.Servers.Register (Server, API_Get_Package_Manager_Servlet.Definition);
         Swagger.Servers.Register (Server, API_Post_Package_Service.Definition);
         Swagger.Servers.Register (Server, API_Post_Package_Service_Json.Definition);
         Swagger.Servers.Register (Server, API_Post_Package_Update.Definition);
         Swagger.Servers.Register (Server, API_Post_Set_Password.Definition);
         Swagger.Servers.Register (Server, API_Get_Aem_Health_Check.Definition);
         Swagger.Servers.Register (Server, API_Post_Config_Aem_Health_Check_Servlet.Definition);
         Swagger.Servers.Register (Server, API_Post_Config_Aem_Password_Reset.Definition);
         Swagger.Servers.Register (Server, API_Ssl_Setup.Definition);
         Swagger.Servers.Register (Server, API_Delete_Agent.Definition);
         Swagger.Servers.Register (Server, API_Delete_Node.Definition);
         Swagger.Servers.Register (Server, API_Get_Agent.Definition);
         Swagger.Servers.Register (Server, API_Get_Agents.Definition);
         Swagger.Servers.Register (Server, API_Get_Authorizable_Keystore.Definition);
         Swagger.Servers.Register (Server, API_Get_Keystore.Definition);
         Swagger.Servers.Register (Server, API_Get_Node.Definition);
         Swagger.Servers.Register (Server, API_Get_Package.Definition);
         Swagger.Servers.Register (Server, API_Get_Package_Filter.Definition);
         Swagger.Servers.Register (Server, API_Get_Query.Definition);
         Swagger.Servers.Register (Server, API_Get_Truststore.Definition);
         Swagger.Servers.Register (Server, API_Get_Truststore_Info.Definition);
         Swagger.Servers.Register (Server, API_Post_Agent.Definition);
         Swagger.Servers.Register (Server, API_Post_Authorizable_Keystore.Definition);
         Swagger.Servers.Register (Server, API_Post_Authorizables.Definition);
         Swagger.Servers.Register (Server, API_Post_Config_Adobe_Granite_Saml_Authentication_Handler.Definition);
         Swagger.Servers.Register (Server, API_Post_Config_Apache_Felix_Jetty_Based_Http_Service.Definition);
         Swagger.Servers.Register (Server, API_Post_Config_Apache_Http_Components_Proxy_Configuration.Definition);
         Swagger.Servers.Register (Server, API_Post_Config_Apache_Sling_Dav_Ex_Servlet.Definition);
         Swagger.Servers.Register (Server, API_Post_Config_Apache_Sling_Get_Servlet.Definition);
         Swagger.Servers.Register (Server, API_Post_Config_Apache_Sling_Referrer_Filter.Definition);
         Swagger.Servers.Register (Server, API_Post_Config_Property.Definition);
         Swagger.Servers.Register (Server, API_Post_Node.Definition);
         Swagger.Servers.Register (Server, API_Post_Node_Rw.Definition);
         Swagger.Servers.Register (Server, API_Post_Path.Definition);
         Swagger.Servers.Register (Server, API_Post_Query.Definition);
         Swagger.Servers.Register (Server, API_Post_Tree_Activation.Definition);
         Swagger.Servers.Register (Server, API_Post_Truststore.Definition);
         Swagger.Servers.Register (Server, API_Post_Truststore_PKCS12.Definition);
      end Register;

      protected body Server is
         --  
         procedure Get_Aem_Product_Info (Result : out Swagger.UString_Vectors.Vector;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Aem_Product_Info (Result, Context);
         end Get_Aem_Product_Info;

         --  
         procedure Get_Bundle_Info
            (Name : in Swagger.UString;
             Result : out .Models.BundleInfo_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Bundle_Info
               (Name,
                Result,
                Context);
         end Get_Bundle_Info;

         --  
         procedure Get_Config_Mgr (Result : out Swagger.UString;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Config_Mgr (Result, Context);
         end Get_Config_Mgr;

         --  
         procedure Post_Bundle
            (Name : in Swagger.UString;
             Action : in Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Bundle
               (Name,
                Action,
                Context);
         end Post_Bundle;

         --  
         procedure Post_Jmx_Repository
            (Action : in Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Jmx_Repository
               (Action,
                Context);
         end Post_Jmx_Repository;

         --  
         procedure Post_Saml_Configuration
            (Post : in Swagger.Nullable_Boolean;
             Apply : in Swagger.Nullable_Boolean;
             Delete : in Swagger.Nullable_Boolean;
             Action : in Swagger.Nullable_UString;
             Dollarlocation : in Swagger.Nullable_UString;
             Path : in Swagger.UString_Vectors.Vector;
             Service_Periodranking : in Swagger.Nullable_Integer;
             Idp_Url : in Swagger.Nullable_UString;
             Idp_Cert_Alias : in Swagger.Nullable_UString;
             Idp_Http_Redirect : in Swagger.Nullable_Boolean;
             Service_Provider_Entity_Id : in Swagger.Nullable_UString;
             Assertion_Consumer_Service_URL : in Swagger.Nullable_UString;
             Sp_Private_Key_Alias : in Swagger.Nullable_UString;
             Key_Store_Password : in Swagger.Nullable_UString;
             Default_Redirect_Url : in Swagger.Nullable_UString;
             User_IDAttribute : in Swagger.Nullable_UString;
             Use_Encryption : in Swagger.Nullable_Boolean;
             Create_User : in Swagger.Nullable_Boolean;
             Add_Group_Memberships : in Swagger.Nullable_Boolean;
             Group_Membership_Attribute : in Swagger.Nullable_UString;
             Default_Groups : in Swagger.UString_Vectors.Vector;
             Name_Id_Format : in Swagger.Nullable_UString;
             Synchronize_Attributes : in Swagger.UString_Vectors.Vector;
             Handle_Logout : in Swagger.Nullable_Boolean;
             Logout_Url : in Swagger.Nullable_UString;
             Clock_Tolerance : in Swagger.Nullable_Integer;
             Digest_Method : in Swagger.Nullable_UString;
             Signature_Method : in Swagger.Nullable_UString;
             User_Intermediate_Path : in Swagger.Nullable_UString;
             Propertylist : in Swagger.UString_Vectors.Vector;
             Result : out .Models.SamlConfigurationInfo_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Saml_Configuration
               (Post,
                Apply,
                Delete,
                Action,
                Dollarlocation,
                Path,
                Service_Periodranking,
                Idp_Url,
                Idp_Cert_Alias,
                Idp_Http_Redirect,
                Service_Provider_Entity_Id,
                Assertion_Consumer_Service_URL,
                Sp_Private_Key_Alias,
                Key_Store_Password,
                Default_Redirect_Url,
                User_IDAttribute,
                Use_Encryption,
                Create_User,
                Add_Group_Memberships,
                Group_Membership_Attribute,
                Default_Groups,
                Name_Id_Format,
                Synchronize_Attributes,
                Handle_Logout,
                Logout_Url,
                Clock_Tolerance,
                Digest_Method,
                Signature_Method,
                User_Intermediate_Path,
                Propertylist,
                Result,
                Context);
         end Post_Saml_Configuration;

         --  
         procedure Get_Login_Page (Result : out Swagger.UString;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Login_Page (Result, Context);
         end Get_Login_Page;

         --  
         procedure Post_Cq_Actions
            (Authorizable_Id : in Swagger.UString;
             Changelog : in Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Cq_Actions
               (Authorizable_Id,
                Changelog,
                Context);
         end Post_Cq_Actions;

         --  
         procedure Get_Crxde_Status (Result : out Swagger.UString;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Crxde_Status (Result, Context);
         end Get_Crxde_Status;

         --  
         procedure Get_Install_Status (Result : out .Models.InstallStatus_Type;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Install_Status (Result, Context);
         end Get_Install_Status;

         --  
         procedure Get_Package_Manager_Servlet (Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Package_Manager_Servlet (Context);
         end Get_Package_Manager_Servlet;

         --  
         procedure Post_Package_Service
            (Cmd : in Swagger.UString;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Package_Service
               (Cmd,
                Result,
                Context);
         end Post_Package_Service;

         --  
         procedure Post_Package_Service_Json
            (Path : in Swagger.UString;
             Cmd : in Swagger.UString;
             Group_Name : in Swagger.Nullable_UString;
             Package_Name : in Swagger.Nullable_UString;
             Package_Version : in Swagger.Nullable_UString;
             Charset : in Swagger.Nullable_UString;
             Force : in Swagger.Nullable_Boolean;
             Recursive : in Swagger.Nullable_Boolean;
             P_Package : in Swagger.File_Part_Type;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Package_Service_Json
               (Path,
                Cmd,
                Group_Name,
                Package_Name,
                Package_Version,
                Charset,
                Force,
                Recursive,
                P_Package,
                Result,
                Context);
         end Post_Package_Service_Json;

         --  
         procedure Post_Package_Update
            (Group_Name : in Swagger.UString;
             Package_Name : in Swagger.UString;
             Version : in Swagger.UString;
             Path : in Swagger.UString;
             Filter : in Swagger.Nullable_UString;
             Charset : in Swagger.Nullable_UString;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Package_Update
               (Group_Name,
                Package_Name,
                Version,
                Path,
                Filter,
                Charset,
                Result,
                Context);
         end Post_Package_Update;

         --  
         procedure Post_Set_Password
            (Old : in Swagger.UString;
             Plain : in Swagger.UString;
             Verify : in Swagger.UString;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Set_Password
               (Old,
                Plain,
                Verify,
                Result,
                Context);
         end Post_Set_Password;

         --  
         procedure Get_Aem_Health_Check
            (Tags : in Swagger.Nullable_UString;
             Combine_Tags_Or : in Swagger.Nullable_Boolean;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Aem_Health_Check
               (Tags,
                Combine_Tags_Or,
                Result,
                Context);
         end Get_Aem_Health_Check;

         --  
         procedure Post_Config_Aem_Health_Check_Servlet
            (Bundles_Periodignored : in Swagger.UString_Vectors.Vector;
             Bundles_Periodignored_At_Type_Hint : in Swagger.Nullable_UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Config_Aem_Health_Check_Servlet
               (Bundles_Periodignored,
                Bundles_Periodignored_At_Type_Hint,
                Context);
         end Post_Config_Aem_Health_Check_Servlet;

         --  
         procedure Post_Config_Aem_Password_Reset
            (Pwdreset_Periodauthorizables : in Swagger.UString_Vectors.Vector;
             Pwdreset_Periodauthorizables_At_Type_Hint : in Swagger.Nullable_UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Config_Aem_Password_Reset
               (Pwdreset_Periodauthorizables,
                Pwdreset_Periodauthorizables_At_Type_Hint,
                Context);
         end Post_Config_Aem_Password_Reset;

         --  
         procedure Ssl_Setup
            (Keystore_Password : in Swagger.UString;
             Keystore_Password_Confirm : in Swagger.UString;
             Truststore_Password : in Swagger.UString;
             Truststore_Password_Confirm : in Swagger.UString;
             Https_Hostname : in Swagger.UString;
             Https_Port : in Swagger.UString;
             Privatekey_File : in Swagger.File_Part_Type;
             Certificate_File : in Swagger.File_Part_Type;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ssl_Setup
               (Keystore_Password,
                Keystore_Password_Confirm,
                Truststore_Password,
                Truststore_Password_Confirm,
                Https_Hostname,
                Https_Port,
                Privatekey_File,
                Certificate_File,
                Result,
                Context);
         end Ssl_Setup;

         --  
         procedure Delete_Agent
            (Runmode : in Swagger.UString;
             Name : in Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Delete_Agent
               (Runmode,
                Name,
                Context);
         end Delete_Agent;

         --  
         procedure Delete_Node
            (Path : in Swagger.UString;
             Name : in Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Delete_Node
               (Path,
                Name,
                Context);
         end Delete_Node;

         --  
         procedure Get_Agent
            (Runmode : in Swagger.UString;
             Name : in Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Agent
               (Runmode,
                Name,
                Context);
         end Get_Agent;

         --  
         procedure Get_Agents
            (Runmode : in Swagger.UString;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Agents
               (Runmode,
                Result,
                Context);
         end Get_Agents;

         --  
         procedure Get_Authorizable_Keystore
            (Intermediate_Path : in Swagger.UString;
             Authorizable_Id : in Swagger.UString;
             Result : out .Models.KeystoreInfo_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Authorizable_Keystore
               (Intermediate_Path,
                Authorizable_Id,
                Result,
                Context);
         end Get_Authorizable_Keystore;

         --  
         procedure Get_Keystore
            (Intermediate_Path : in Swagger.UString;
             Authorizable_Id : in Swagger.UString;
             Result : out Swagger.Http_Content_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Keystore
               (Intermediate_Path,
                Authorizable_Id,
                Result,
                Context);
         end Get_Keystore;

         --  
         procedure Get_Node
            (Path : in Swagger.UString;
             Name : in Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Node
               (Path,
                Name,
                Context);
         end Get_Node;

         --  
         procedure Get_Package
            (Group : in Swagger.UString;
             Name : in Swagger.UString;
             Version : in Swagger.UString;
             Result : out Swagger.Http_Content_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Package
               (Group,
                Name,
                Version,
                Result,
                Context);
         end Get_Package;

         --  
         procedure Get_Package_Filter
            (Group : in Swagger.UString;
             Name : in Swagger.UString;
             Version : in Swagger.UString;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Package_Filter
               (Group,
                Name,
                Version,
                Result,
                Context);
         end Get_Package_Filter;

         --  
         procedure Get_Query
            (Path : in Swagger.UString;
             P_Periodlimit : in Swagger.Number;
             P_1Property : in Swagger.UString;
             P_1Property_Periodvalue : in Swagger.UString;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Query
               (Path,
                P_Periodlimit,
                P_1Property,
                P_1Property_Periodvalue,
                Result,
                Context);
         end Get_Query;

         --  
         procedure Get_Truststore (Result : out Swagger.Http_Content_Type;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Truststore (Result, Context);
         end Get_Truststore;

         --  
         procedure Get_Truststore_Info (Result : out .Models.TruststoreInfo_Type;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Truststore_Info (Result, Context);
         end Get_Truststore_Info;

         --  
         procedure Post_Agent
            (Runmode : in Swagger.UString;
             Name : in Swagger.UString;
             Jcr_Content_Slashcq_Distribute : in Swagger.Nullable_Boolean;
             Jcr_Content_Slashcq_Distribute_At_Type_Hint : in Swagger.Nullable_UString;
             Jcr_Content_Slashcq_Name : in Swagger.Nullable_UString;
             Jcr_Content_Slashcq_Template : in Swagger.Nullable_UString;
             Jcr_Content_Slashenabled : in Swagger.Nullable_Boolean;
             Jcr_Content_Slashjcr_Description : in Swagger.Nullable_UString;
             Jcr_Content_Slashjcr_Last_Modified : in Swagger.Nullable_UString;
             Jcr_Content_Slashjcr_Last_Modified_By : in Swagger.Nullable_UString;
             Jcr_Content_Slashjcr_Mixin_Types : in Swagger.Nullable_UString;
             Jcr_Content_Slashjcr_Title : in Swagger.Nullable_UString;
             Jcr_Content_Slashlog_Level : in Swagger.Nullable_UString;
             Jcr_Content_Slashno_Status_Update : in Swagger.Nullable_Boolean;
             Jcr_Content_Slashno_Versioning : in Swagger.Nullable_Boolean;
             Jcr_Content_Slashprotocol_Connect_Timeout : in Swagger.Number;
             Jcr_Content_Slashprotocol_HTTPConnection_Closed : in Swagger.Nullable_Boolean;
             Jcr_Content_Slashprotocol_HTTPExpired : in Swagger.Nullable_UString;
             Jcr_Content_Slashprotocol_HTTPHeaders : in Swagger.UString_Vectors.Vector;
             Jcr_Content_Slashprotocol_HTTPHeaders_At_Type_Hint : in Swagger.Nullable_UString;
             Jcr_Content_Slashprotocol_HTTPMethod : in Swagger.Nullable_UString;
             Jcr_Content_Slashprotocol_HTTPSRelaxed : in Swagger.Nullable_Boolean;
             Jcr_Content_Slashprotocol_Interface : in Swagger.Nullable_UString;
             Jcr_Content_Slashprotocol_Socket_Timeout : in Swagger.Number;
             Jcr_Content_Slashprotocol_Version : in Swagger.Nullable_UString;
             Jcr_Content_Slashproxy_NTLMDomain : in Swagger.Nullable_UString;
             Jcr_Content_Slashproxy_NTLMHost : in Swagger.Nullable_UString;
             Jcr_Content_Slashproxy_Host : in Swagger.Nullable_UString;
             Jcr_Content_Slashproxy_Password : in Swagger.Nullable_UString;
             Jcr_Content_Slashproxy_Port : in Swagger.Number;
             Jcr_Content_Slashproxy_User : in Swagger.Nullable_UString;
             Jcr_Content_Slashqueue_Batch_Max_Size : in Swagger.Number;
             Jcr_Content_Slashqueue_Batch_Mode : in Swagger.Nullable_UString;
             Jcr_Content_Slashqueue_Batch_Wait_Time : in Swagger.Number;
             Jcr_Content_Slashretry_Delay : in Swagger.Nullable_UString;
             Jcr_Content_Slashreverse_Replication : in Swagger.Nullable_Boolean;
             Jcr_Content_Slashserialization_Type : in Swagger.Nullable_UString;
             Jcr_Content_Slashsling_Resource_Type : in Swagger.Nullable_UString;
             Jcr_Content_Slashssl : in Swagger.Nullable_UString;
             Jcr_Content_Slashtransport_NTLMDomain : in Swagger.Nullable_UString;
             Jcr_Content_Slashtransport_NTLMHost : in Swagger.Nullable_UString;
             Jcr_Content_Slashtransport_Password : in Swagger.Nullable_UString;
             Jcr_Content_Slashtransport_Uri : in Swagger.Nullable_UString;
             Jcr_Content_Slashtransport_User : in Swagger.Nullable_UString;
             Jcr_Content_Slashtrigger_Distribute : in Swagger.Nullable_Boolean;
             Jcr_Content_Slashtrigger_Modified : in Swagger.Nullable_Boolean;
             Jcr_Content_Slashtrigger_On_Off_Time : in Swagger.Nullable_Boolean;
             Jcr_Content_Slashtrigger_Receive : in Swagger.Nullable_Boolean;
             Jcr_Content_Slashtrigger_Specific : in Swagger.Nullable_Boolean;
             Jcr_Content_Slashuser_Id : in Swagger.Nullable_UString;
             Jcr_Primary_Type : in Swagger.Nullable_UString;
             Operation : in Swagger.Nullable_UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Agent
               (Runmode,
                Name,
                Jcr_Content_Slashcq_Distribute,
                Jcr_Content_Slashcq_Distribute_At_Type_Hint,
                Jcr_Content_Slashcq_Name,
                Jcr_Content_Slashcq_Template,
                Jcr_Content_Slashenabled,
                Jcr_Content_Slashjcr_Description,
                Jcr_Content_Slashjcr_Last_Modified,
                Jcr_Content_Slashjcr_Last_Modified_By,
                Jcr_Content_Slashjcr_Mixin_Types,
                Jcr_Content_Slashjcr_Title,
                Jcr_Content_Slashlog_Level,
                Jcr_Content_Slashno_Status_Update,
                Jcr_Content_Slashno_Versioning,
                Jcr_Content_Slashprotocol_Connect_Timeout,
                Jcr_Content_Slashprotocol_HTTPConnection_Closed,
                Jcr_Content_Slashprotocol_HTTPExpired,
                Jcr_Content_Slashprotocol_HTTPHeaders,
                Jcr_Content_Slashprotocol_HTTPHeaders_At_Type_Hint,
                Jcr_Content_Slashprotocol_HTTPMethod,
                Jcr_Content_Slashprotocol_HTTPSRelaxed,
                Jcr_Content_Slashprotocol_Interface,
                Jcr_Content_Slashprotocol_Socket_Timeout,
                Jcr_Content_Slashprotocol_Version,
                Jcr_Content_Slashproxy_NTLMDomain,
                Jcr_Content_Slashproxy_NTLMHost,
                Jcr_Content_Slashproxy_Host,
                Jcr_Content_Slashproxy_Password,
                Jcr_Content_Slashproxy_Port,
                Jcr_Content_Slashproxy_User,
                Jcr_Content_Slashqueue_Batch_Max_Size,
                Jcr_Content_Slashqueue_Batch_Mode,
                Jcr_Content_Slashqueue_Batch_Wait_Time,
                Jcr_Content_Slashretry_Delay,
                Jcr_Content_Slashreverse_Replication,
                Jcr_Content_Slashserialization_Type,
                Jcr_Content_Slashsling_Resource_Type,
                Jcr_Content_Slashssl,
                Jcr_Content_Slashtransport_NTLMDomain,
                Jcr_Content_Slashtransport_NTLMHost,
                Jcr_Content_Slashtransport_Password,
                Jcr_Content_Slashtransport_Uri,
                Jcr_Content_Slashtransport_User,
                Jcr_Content_Slashtrigger_Distribute,
                Jcr_Content_Slashtrigger_Modified,
                Jcr_Content_Slashtrigger_On_Off_Time,
                Jcr_Content_Slashtrigger_Receive,
                Jcr_Content_Slashtrigger_Specific,
                Jcr_Content_Slashuser_Id,
                Jcr_Primary_Type,
                Operation,
                Context);
         end Post_Agent;

         --  
         procedure Post_Authorizable_Keystore
            (Intermediate_Path : in Swagger.UString;
             Authorizable_Id : in Swagger.UString;
             Operation : in Swagger.Nullable_UString;
             Current_Password : in Swagger.Nullable_UString;
             New_Password : in Swagger.Nullable_UString;
             Re_Password : in Swagger.Nullable_UString;
             Key_Password : in Swagger.Nullable_UString;
             Key_Store_Pass : in Swagger.Nullable_UString;
             Alias : in Swagger.Nullable_UString;
             New_Alias : in Swagger.Nullable_UString;
             Remove_Alias : in Swagger.Nullable_UString;
             Cert_Chain : in Swagger.File_Part_Type;
             Pk : in Swagger.File_Part_Type;
             Key_Store : in Swagger.File_Part_Type;
             Result : out .Models.KeystoreInfo_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Authorizable_Keystore
               (Intermediate_Path,
                Authorizable_Id,
                Operation,
                Current_Password,
                New_Password,
                Re_Password,
                Key_Password,
                Key_Store_Pass,
                Alias,
                New_Alias,
                Remove_Alias,
                Cert_Chain,
                Pk,
                Key_Store,
                Result,
                Context);
         end Post_Authorizable_Keystore;

         --  
         procedure Post_Authorizables
            (Authorizable_Id : in Swagger.UString;
             Intermediate_Path : in Swagger.UString;
             Create_User : in Swagger.Nullable_UString;
             Create_Group : in Swagger.Nullable_UString;
             Rep_Password : in Swagger.Nullable_UString;
             Profile_Slashgiven_Name : in Swagger.Nullable_UString;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Authorizables
               (Authorizable_Id,
                Intermediate_Path,
                Create_User,
                Create_Group,
                Rep_Password,
                Profile_Slashgiven_Name,
                Result,
                Context);
         end Post_Authorizables;

         --  
         procedure Post_Config_Adobe_Granite_Saml_Authentication_Handler
            (Key_Store_Password : in Swagger.Nullable_UString;
             Key_Store_Password_At_Type_Hint : in Swagger.Nullable_UString;
             Service_Periodranking : in Swagger.Nullable_Integer;
             Service_Periodranking_At_Type_Hint : in Swagger.Nullable_UString;
             Idp_Http_Redirect : in Swagger.Nullable_Boolean;
             Idp_Http_Redirect_At_Type_Hint : in Swagger.Nullable_UString;
             Create_User : in Swagger.Nullable_Boolean;
             Create_User_At_Type_Hint : in Swagger.Nullable_UString;
             Default_Redirect_Url : in Swagger.Nullable_UString;
             Default_Redirect_Url_At_Type_Hint : in Swagger.Nullable_UString;
             User_IDAttribute : in Swagger.Nullable_UString;
             User_IDAttribute_At_Type_Hint : in Swagger.Nullable_UString;
             Default_Groups : in Swagger.UString_Vectors.Vector;
             Default_Groups_At_Type_Hint : in Swagger.Nullable_UString;
             Idp_Cert_Alias : in Swagger.Nullable_UString;
             Idp_Cert_Alias_At_Type_Hint : in Swagger.Nullable_UString;
             Add_Group_Memberships : in Swagger.Nullable_Boolean;
             Add_Group_Memberships_At_Type_Hint : in Swagger.Nullable_UString;
             Path : in Swagger.UString_Vectors.Vector;
             Path_At_Type_Hint : in Swagger.Nullable_UString;
             Synchronize_Attributes : in Swagger.UString_Vectors.Vector;
             Synchronize_Attributes_At_Type_Hint : in Swagger.Nullable_UString;
             Clock_Tolerance : in Swagger.Nullable_Integer;
             Clock_Tolerance_At_Type_Hint : in Swagger.Nullable_UString;
             Group_Membership_Attribute : in Swagger.Nullable_UString;
             Group_Membership_Attribute_At_Type_Hint : in Swagger.Nullable_UString;
             Idp_Url : in Swagger.Nullable_UString;
             Idp_Url_At_Type_Hint : in Swagger.Nullable_UString;
             Logout_Url : in Swagger.Nullable_UString;
             Logout_Url_At_Type_Hint : in Swagger.Nullable_UString;
             Service_Provider_Entity_Id : in Swagger.Nullable_UString;
             Service_Provider_Entity_Id_At_Type_Hint : in Swagger.Nullable_UString;
             Assertion_Consumer_Service_URL : in Swagger.Nullable_UString;
             Assertion_Consumer_Service_URLAt_Type_Hint : in Swagger.Nullable_UString;
             Handle_Logout : in Swagger.Nullable_Boolean;
             Handle_Logout_At_Type_Hint : in Swagger.Nullable_UString;
             Sp_Private_Key_Alias : in Swagger.Nullable_UString;
             Sp_Private_Key_Alias_At_Type_Hint : in Swagger.Nullable_UString;
             Use_Encryption : in Swagger.Nullable_Boolean;
             Use_Encryption_At_Type_Hint : in Swagger.Nullable_UString;
             Name_Id_Format : in Swagger.Nullable_UString;
             Name_Id_Format_At_Type_Hint : in Swagger.Nullable_UString;
             Digest_Method : in Swagger.Nullable_UString;
             Digest_Method_At_Type_Hint : in Swagger.Nullable_UString;
             Signature_Method : in Swagger.Nullable_UString;
             Signature_Method_At_Type_Hint : in Swagger.Nullable_UString;
             User_Intermediate_Path : in Swagger.Nullable_UString;
             User_Intermediate_Path_At_Type_Hint : in Swagger.Nullable_UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Config_Adobe_Granite_Saml_Authentication_Handler
               (Key_Store_Password,
                Key_Store_Password_At_Type_Hint,
                Service_Periodranking,
                Service_Periodranking_At_Type_Hint,
                Idp_Http_Redirect,
                Idp_Http_Redirect_At_Type_Hint,
                Create_User,
                Create_User_At_Type_Hint,
                Default_Redirect_Url,
                Default_Redirect_Url_At_Type_Hint,
                User_IDAttribute,
                User_IDAttribute_At_Type_Hint,
                Default_Groups,
                Default_Groups_At_Type_Hint,
                Idp_Cert_Alias,
                Idp_Cert_Alias_At_Type_Hint,
                Add_Group_Memberships,
                Add_Group_Memberships_At_Type_Hint,
                Path,
                Path_At_Type_Hint,
                Synchronize_Attributes,
                Synchronize_Attributes_At_Type_Hint,
                Clock_Tolerance,
                Clock_Tolerance_At_Type_Hint,
                Group_Membership_Attribute,
                Group_Membership_Attribute_At_Type_Hint,
                Idp_Url,
                Idp_Url_At_Type_Hint,
                Logout_Url,
                Logout_Url_At_Type_Hint,
                Service_Provider_Entity_Id,
                Service_Provider_Entity_Id_At_Type_Hint,
                Assertion_Consumer_Service_URL,
                Assertion_Consumer_Service_URLAt_Type_Hint,
                Handle_Logout,
                Handle_Logout_At_Type_Hint,
                Sp_Private_Key_Alias,
                Sp_Private_Key_Alias_At_Type_Hint,
                Use_Encryption,
                Use_Encryption_At_Type_Hint,
                Name_Id_Format,
                Name_Id_Format_At_Type_Hint,
                Digest_Method,
                Digest_Method_At_Type_Hint,
                Signature_Method,
                Signature_Method_At_Type_Hint,
                User_Intermediate_Path,
                User_Intermediate_Path_At_Type_Hint,
                Context);
         end Post_Config_Adobe_Granite_Saml_Authentication_Handler;

         --  
         procedure Post_Config_Apache_Felix_Jetty_Based_Http_Service
            (Org_Periodapache_Periodfelix_Periodhttps_Periodnio : in Swagger.Nullable_Boolean;
             Org_Periodapache_Periodfelix_Periodhttps_Periodnio_At_Type_Hint : in Swagger.Nullable_UString;
             Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore : in Swagger.Nullable_UString;
             Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_At_Type_Hint : in Swagger.Nullable_UString;
             Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodpassword : in Swagger.Nullable_UString;
             Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodpassword_At_Type_Hint : in Swagger.Nullable_UString;
             Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey : in Swagger.Nullable_UString;
             Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_At_Type_Hint : in Swagger.Nullable_UString;
             Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_Periodpassword : in Swagger.Nullable_UString;
             Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_Periodpassword_At_Type_Hint : in Swagger.Nullable_UString;
             Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore : in Swagger.Nullable_UString;
             Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_At_Type_Hint : in Swagger.Nullable_UString;
             Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_Periodpassword : in Swagger.Nullable_UString;
             Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_Periodpassword_At_Type_Hint : in Swagger.Nullable_UString;
             Org_Periodapache_Periodfelix_Periodhttps_Periodclientcertificate : in Swagger.Nullable_UString;
             Org_Periodapache_Periodfelix_Periodhttps_Periodclientcertificate_At_Type_Hint : in Swagger.Nullable_UString;
             Org_Periodapache_Periodfelix_Periodhttps_Periodenable : in Swagger.Nullable_Boolean;
             Org_Periodapache_Periodfelix_Periodhttps_Periodenable_At_Type_Hint : in Swagger.Nullable_UString;
             Org_Periodosgi_Periodservice_Periodhttp_Periodport_Periodsecure : in Swagger.Nullable_UString;
             Org_Periodosgi_Periodservice_Periodhttp_Periodport_Periodsecure_At_Type_Hint : in Swagger.Nullable_UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Config_Apache_Felix_Jetty_Based_Http_Service
               (Org_Periodapache_Periodfelix_Periodhttps_Periodnio,
                Org_Periodapache_Periodfelix_Periodhttps_Periodnio_At_Type_Hint,
                Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore,
                Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_At_Type_Hint,
                Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodpassword,
                Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodpassword_At_Type_Hint,
                Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey,
                Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_At_Type_Hint,
                Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_Periodpassword,
                Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_Periodpassword_At_Type_Hint,
                Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore,
                Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_At_Type_Hint,
                Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_Periodpassword,
                Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_Periodpassword_At_Type_Hint,
                Org_Periodapache_Periodfelix_Periodhttps_Periodclientcertificate,
                Org_Periodapache_Periodfelix_Periodhttps_Periodclientcertificate_At_Type_Hint,
                Org_Periodapache_Periodfelix_Periodhttps_Periodenable,
                Org_Periodapache_Periodfelix_Periodhttps_Periodenable_At_Type_Hint,
                Org_Periodosgi_Periodservice_Periodhttp_Periodport_Periodsecure,
                Org_Periodosgi_Periodservice_Periodhttp_Periodport_Periodsecure_At_Type_Hint,
                Context);
         end Post_Config_Apache_Felix_Jetty_Based_Http_Service;

         --  
         procedure Post_Config_Apache_Http_Components_Proxy_Configuration
            (Proxy_Periodhost : in Swagger.Nullable_UString;
             Proxy_Periodhost_At_Type_Hint : in Swagger.Nullable_UString;
             Proxy_Periodport : in Swagger.Nullable_Integer;
             Proxy_Periodport_At_Type_Hint : in Swagger.Nullable_UString;
             Proxy_Periodexceptions : in Swagger.UString_Vectors.Vector;
             Proxy_Periodexceptions_At_Type_Hint : in Swagger.Nullable_UString;
             Proxy_Periodenabled : in Swagger.Nullable_Boolean;
             Proxy_Periodenabled_At_Type_Hint : in Swagger.Nullable_UString;
             Proxy_Perioduser : in Swagger.Nullable_UString;
             Proxy_Perioduser_At_Type_Hint : in Swagger.Nullable_UString;
             Proxy_Periodpassword : in Swagger.Nullable_UString;
             Proxy_Periodpassword_At_Type_Hint : in Swagger.Nullable_UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Config_Apache_Http_Components_Proxy_Configuration
               (Proxy_Periodhost,
                Proxy_Periodhost_At_Type_Hint,
                Proxy_Periodport,
                Proxy_Periodport_At_Type_Hint,
                Proxy_Periodexceptions,
                Proxy_Periodexceptions_At_Type_Hint,
                Proxy_Periodenabled,
                Proxy_Periodenabled_At_Type_Hint,
                Proxy_Perioduser,
                Proxy_Perioduser_At_Type_Hint,
                Proxy_Periodpassword,
                Proxy_Periodpassword_At_Type_Hint,
                Context);
         end Post_Config_Apache_Http_Components_Proxy_Configuration;

         --  
         procedure Post_Config_Apache_Sling_Dav_Ex_Servlet
            (Alias : in Swagger.Nullable_UString;
             Alias_At_Type_Hint : in Swagger.Nullable_UString;
             Dav_Periodcreate_Absolute_Uri : in Swagger.Nullable_Boolean;
             Dav_Periodcreate_Absolute_Uri_At_Type_Hint : in Swagger.Nullable_UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Config_Apache_Sling_Dav_Ex_Servlet
               (Alias,
                Alias_At_Type_Hint,
                Dav_Periodcreate_Absolute_Uri,
                Dav_Periodcreate_Absolute_Uri_At_Type_Hint,
                Context);
         end Post_Config_Apache_Sling_Dav_Ex_Servlet;

         --  
         procedure Post_Config_Apache_Sling_Get_Servlet
            (Json_Periodmaximumresults : in Swagger.Nullable_UString;
             Json_Periodmaximumresults_At_Type_Hint : in Swagger.Nullable_UString;
             Enable_Periodhtml : in Swagger.Nullable_Boolean;
             Enable_Periodhtml_At_Type_Hint : in Swagger.Nullable_UString;
             Enable_Periodtxt : in Swagger.Nullable_Boolean;
             Enable_Periodtxt_At_Type_Hint : in Swagger.Nullable_UString;
             Enable_Periodxml : in Swagger.Nullable_Boolean;
             Enable_Periodxml_At_Type_Hint : in Swagger.Nullable_UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Config_Apache_Sling_Get_Servlet
               (Json_Periodmaximumresults,
                Json_Periodmaximumresults_At_Type_Hint,
                Enable_Periodhtml,
                Enable_Periodhtml_At_Type_Hint,
                Enable_Periodtxt,
                Enable_Periodtxt_At_Type_Hint,
                Enable_Periodxml,
                Enable_Periodxml_At_Type_Hint,
                Context);
         end Post_Config_Apache_Sling_Get_Servlet;

         --  
         procedure Post_Config_Apache_Sling_Referrer_Filter
            (Allow_Periodempty : in Swagger.Nullable_Boolean;
             Allow_Periodempty_At_Type_Hint : in Swagger.Nullable_UString;
             Allow_Periodhosts : in Swagger.Nullable_UString;
             Allow_Periodhosts_At_Type_Hint : in Swagger.Nullable_UString;
             Allow_Periodhosts_Periodregexp : in Swagger.Nullable_UString;
             Allow_Periodhosts_Periodregexp_At_Type_Hint : in Swagger.Nullable_UString;
             Filter_Periodmethods : in Swagger.Nullable_UString;
             Filter_Periodmethods_At_Type_Hint : in Swagger.Nullable_UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Config_Apache_Sling_Referrer_Filter
               (Allow_Periodempty,
                Allow_Periodempty_At_Type_Hint,
                Allow_Periodhosts,
                Allow_Periodhosts_At_Type_Hint,
                Allow_Periodhosts_Periodregexp,
                Allow_Periodhosts_Periodregexp_At_Type_Hint,
                Filter_Periodmethods,
                Filter_Periodmethods_At_Type_Hint,
                Context);
         end Post_Config_Apache_Sling_Referrer_Filter;

         --  
         procedure Post_Config_Property
            (Config_Node_Name : in Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Config_Property
               (Config_Node_Name,
                Context);
         end Post_Config_Property;

         --  
         procedure Post_Node
            (Path : in Swagger.UString;
             Name : in Swagger.UString;
             Operation : in Swagger.Nullable_UString;
             Delete_Authorizable : in Swagger.Nullable_UString;
             File : in Swagger.File_Part_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Node
               (Path,
                Name,
                Operation,
                Delete_Authorizable,
                File,
                Context);
         end Post_Node;

         --  
         procedure Post_Node_Rw
            (Path : in Swagger.UString;
             Name : in Swagger.UString;
             Add_Members : in Swagger.Nullable_UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Node_Rw
               (Path,
                Name,
                Add_Members,
                Context);
         end Post_Node_Rw;

         --  
         procedure Post_Path
            (Path : in Swagger.UString;
             Jcr_Primary_Type : in Swagger.UString;
             Name : in Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Path
               (Path,
                Jcr_Primary_Type,
                Name,
                Context);
         end Post_Path;

         --  
         procedure Post_Query
            (Path : in Swagger.UString;
             P_Periodlimit : in Swagger.Number;
             P_1Property : in Swagger.UString;
             P_1Property_Periodvalue : in Swagger.UString;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Query
               (Path,
                P_Periodlimit,
                P_1Property,
                P_1Property_Periodvalue,
                Result,
                Context);
         end Post_Query;

         --  
         procedure Post_Tree_Activation
            (Ignoredeactivated : in Boolean;
             Onlymodified : in Boolean;
             Path : in Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Tree_Activation
               (Ignoredeactivated,
                Onlymodified,
                Path,
                Context);
         end Post_Tree_Activation;

         --  
         procedure Post_Truststore
            (Operation : in Swagger.Nullable_UString;
             New_Password : in Swagger.Nullable_UString;
             Re_Password : in Swagger.Nullable_UString;
             Key_Store_Type : in Swagger.Nullable_UString;
             Remove_Alias : in Swagger.Nullable_UString;
             Certificate : in Swagger.File_Part_Type;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Truststore
               (Operation,
                New_Password,
                Re_Password,
                Key_Store_Type,
                Remove_Alias,
                Certificate,
                Result,
                Context);
         end Post_Truststore;

         --  
         procedure Post_Truststore_PKCS12
            (Truststore_Periodp_12 : in Swagger.File_Part_Type;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Truststore_PKCS12
               (Truststore_Periodp_12,
                Result,
                Context);
         end Post_Truststore_PKCS12;

      end Server;

   end Shared_Instance;

end .Skeletons;
