/*
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// KeystoreItems
    /// </summary>
    [DataContract]
    public partial class KeystoreItems :  IEquatable<KeystoreItems>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KeystoreItems" /> class.
        /// </summary>
        /// <param name="alias">Keystore alias name.</param>
        /// <param name="entryType">e.g. \&quot;privateKey\&quot;.</param>
        /// <param name="algorithm">e.g. \&quot;RSA\&quot;.</param>
        /// <param name="format">e.g. \&quot;PKCS#8\&quot;.</param>
        /// <param name="chain">chain.</param>
        public KeystoreItems(string alias = default(string), string entryType = default(string), string algorithm = default(string), string format = default(string), List<KeystoreChainItems> chain = default(List<KeystoreChainItems>))
        {
            this.Alias = alias;
            this.EntryType = entryType;
            this.Algorithm = algorithm;
            this.Format = format;
            this.Chain = chain;
        }

        /// <summary>
        /// Keystore alias name
        /// </summary>
        /// <value>Keystore alias name</value>
        [DataMember(Name="alias", EmitDefaultValue=false)]
        public string Alias { get; set; }

        /// <summary>
        /// e.g. \&quot;privateKey\&quot;
        /// </summary>
        /// <value>e.g. \&quot;privateKey\&quot;</value>
        [DataMember(Name="entryType", EmitDefaultValue=false)]
        public string EntryType { get; set; }

        /// <summary>
        /// e.g. \&quot;RSA\&quot;
        /// </summary>
        /// <value>e.g. \&quot;RSA\&quot;</value>
        [DataMember(Name="algorithm", EmitDefaultValue=false)]
        public string Algorithm { get; set; }

        /// <summary>
        /// e.g. \&quot;PKCS#8\&quot;
        /// </summary>
        /// <value>e.g. \&quot;PKCS#8\&quot;</value>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public string Format { get; set; }

        /// <summary>
        /// Gets or Sets Chain
        /// </summary>
        [DataMember(Name="chain", EmitDefaultValue=false)]
        public List<KeystoreChainItems> Chain { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KeystoreItems {\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  EntryType: ").Append(EntryType).Append("\n");
            sb.Append("  Algorithm: ").Append(Algorithm).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Chain: ").Append(Chain).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KeystoreItems);
        }

        /// <summary>
        /// Returns true if KeystoreItems instances are equal
        /// </summary>
        /// <param name="input">Instance of KeystoreItems to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KeystoreItems input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Alias == input.Alias ||
                    (this.Alias != null &&
                    this.Alias.Equals(input.Alias))
                ) && 
                (
                    this.EntryType == input.EntryType ||
                    (this.EntryType != null &&
                    this.EntryType.Equals(input.EntryType))
                ) && 
                (
                    this.Algorithm == input.Algorithm ||
                    (this.Algorithm != null &&
                    this.Algorithm.Equals(input.Algorithm))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.Chain == input.Chain ||
                    this.Chain != null &&
                    input.Chain != null &&
                    this.Chain.SequenceEqual(input.Chain)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Alias != null)
                    hashCode = hashCode * 59 + this.Alias.GetHashCode();
                if (this.EntryType != null)
                    hashCode = hashCode * 59 + this.EntryType.GetHashCode();
                if (this.Algorithm != null)
                    hashCode = hashCode * 59 + this.Algorithm.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.Chain != null)
                    hashCode = hashCode * 59 + this.Chain.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
