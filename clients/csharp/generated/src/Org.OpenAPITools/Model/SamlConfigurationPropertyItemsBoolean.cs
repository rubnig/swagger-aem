/*
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SamlConfigurationPropertyItemsBoolean
    /// </summary>
    [DataContract]
    public partial class SamlConfigurationPropertyItemsBoolean :  IEquatable<SamlConfigurationPropertyItemsBoolean>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SamlConfigurationPropertyItemsBoolean" /> class.
        /// </summary>
        /// <param name="name">property name.</param>
        /// <param name="optional">True if optional.</param>
        /// <param name="isSet">True if property is set.</param>
        /// <param name="type">Property type, 1&#x3D;String, 3&#x3D;long, 11&#x3D;boolean, 12&#x3D;Password.</param>
        /// <param name="value">Property value.</param>
        /// <param name="description">Property description.</param>
        public SamlConfigurationPropertyItemsBoolean(string name = default(string), bool optional = default(bool), bool isSet = default(bool), int type = default(int), bool value = default(bool), string description = default(string))
        {
            this.Name = name;
            this.Optional = optional;
            this.IsSet = isSet;
            this.Type = type;
            this.Value = value;
            this.Description = description;
        }

        /// <summary>
        /// property name
        /// </summary>
        /// <value>property name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// True if optional
        /// </summary>
        /// <value>True if optional</value>
        [DataMember(Name="optional", EmitDefaultValue=false)]
        public bool Optional { get; set; }

        /// <summary>
        /// True if property is set
        /// </summary>
        /// <value>True if property is set</value>
        [DataMember(Name="is_set", EmitDefaultValue=false)]
        public bool IsSet { get; set; }

        /// <summary>
        /// Property type, 1&#x3D;String, 3&#x3D;long, 11&#x3D;boolean, 12&#x3D;Password
        /// </summary>
        /// <value>Property type, 1&#x3D;String, 3&#x3D;long, 11&#x3D;boolean, 12&#x3D;Password</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public int Type { get; set; }

        /// <summary>
        /// Property value
        /// </summary>
        /// <value>Property value</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public bool Value { get; set; }

        /// <summary>
        /// Property description
        /// </summary>
        /// <value>Property description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SamlConfigurationPropertyItemsBoolean {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Optional: ").Append(Optional).Append("\n");
            sb.Append("  IsSet: ").Append(IsSet).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SamlConfigurationPropertyItemsBoolean);
        }

        /// <summary>
        /// Returns true if SamlConfigurationPropertyItemsBoolean instances are equal
        /// </summary>
        /// <param name="input">Instance of SamlConfigurationPropertyItemsBoolean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SamlConfigurationPropertyItemsBoolean input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Optional == input.Optional ||
                    (this.Optional != null &&
                    this.Optional.Equals(input.Optional))
                ) && 
                (
                    this.IsSet == input.IsSet ||
                    (this.IsSet != null &&
                    this.IsSet.Equals(input.IsSet))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Optional != null)
                    hashCode = hashCode * 59 + this.Optional.GetHashCode();
                if (this.IsSet != null)
                    hashCode = hashCode * 59 + this.IsSet.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
