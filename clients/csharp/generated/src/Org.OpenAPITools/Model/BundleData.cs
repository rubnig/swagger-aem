/*
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BundleData
    /// </summary>
    [DataContract]
    public partial class BundleData :  IEquatable<BundleData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BundleData" /> class.
        /// </summary>
        /// <param name="id">Bundle ID.</param>
        /// <param name="name">Bundle name.</param>
        /// <param name="fragment">Is bundle a fragment.</param>
        /// <param name="stateRaw">Numeric raw bundle state value.</param>
        /// <param name="state">Bundle state value.</param>
        /// <param name="version">Bundle version.</param>
        /// <param name="symbolicName">Bundle symbolic name.</param>
        /// <param name="category">Bundle category.</param>
        /// <param name="props">props.</param>
        public BundleData(int id = default(int), string name = default(string), bool fragment = default(bool), int stateRaw = default(int), string state = default(string), string version = default(string), string symbolicName = default(string), string category = default(string), List<BundleDataProp> props = default(List<BundleDataProp>))
        {
            this.Id = id;
            this.Name = name;
            this.Fragment = fragment;
            this.StateRaw = stateRaw;
            this.State = state;
            this._Version = version;
            this.SymbolicName = symbolicName;
            this.Category = category;
            this.Props = props;
        }

        /// <summary>
        /// Bundle ID
        /// </summary>
        /// <value>Bundle ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// Bundle name
        /// </summary>
        /// <value>Bundle name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Is bundle a fragment
        /// </summary>
        /// <value>Is bundle a fragment</value>
        [DataMember(Name="fragment", EmitDefaultValue=false)]
        public bool Fragment { get; set; }

        /// <summary>
        /// Numeric raw bundle state value
        /// </summary>
        /// <value>Numeric raw bundle state value</value>
        [DataMember(Name="stateRaw", EmitDefaultValue=false)]
        public int StateRaw { get; set; }

        /// <summary>
        /// Bundle state value
        /// </summary>
        /// <value>Bundle state value</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Bundle version
        /// </summary>
        /// <value>Bundle version</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string _Version { get; set; }

        /// <summary>
        /// Bundle symbolic name
        /// </summary>
        /// <value>Bundle symbolic name</value>
        [DataMember(Name="symbolicName", EmitDefaultValue=false)]
        public string SymbolicName { get; set; }

        /// <summary>
        /// Bundle category
        /// </summary>
        /// <value>Bundle category</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets Props
        /// </summary>
        [DataMember(Name="props", EmitDefaultValue=false)]
        public List<BundleDataProp> Props { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BundleData {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Fragment: ").Append(Fragment).Append("\n");
            sb.Append("  StateRaw: ").Append(StateRaw).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  SymbolicName: ").Append(SymbolicName).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Props: ").Append(Props).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BundleData);
        }

        /// <summary>
        /// Returns true if BundleData instances are equal
        /// </summary>
        /// <param name="input">Instance of BundleData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BundleData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Fragment == input.Fragment ||
                    (this.Fragment != null &&
                    this.Fragment.Equals(input.Fragment))
                ) && 
                (
                    this.StateRaw == input.StateRaw ||
                    (this.StateRaw != null &&
                    this.StateRaw.Equals(input.StateRaw))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                ) && 
                (
                    this.SymbolicName == input.SymbolicName ||
                    (this.SymbolicName != null &&
                    this.SymbolicName.Equals(input.SymbolicName))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Props == input.Props ||
                    this.Props != null &&
                    input.Props != null &&
                    this.Props.SequenceEqual(input.Props)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Fragment != null)
                    hashCode = hashCode * 59 + this.Fragment.GetHashCode();
                if (this.StateRaw != null)
                    hashCode = hashCode * 59 + this.StateRaw.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this._Version != null)
                    hashCode = hashCode * 59 + this._Version.GetHashCode();
                if (this.SymbolicName != null)
                    hashCode = hashCode * 59 + this.SymbolicName.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Props != null)
                    hashCode = hashCode * 59 + this.Props.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
