/*
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGraniteApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keystorePassword"></param>
        /// <param name="keystorePasswordConfirm"></param>
        /// <param name="truststorePassword"></param>
        /// <param name="truststorePasswordConfirm"></param>
        /// <param name="httpsHostname"></param>
        /// <param name="httpsPort"></param>
        /// <param name="privatekeyFile"> (optional)</param>
        /// <param name="certificateFile"> (optional)</param>
        /// <returns>string</returns>
        string SslSetup (string keystorePassword, string keystorePasswordConfirm, string truststorePassword, string truststorePasswordConfirm, string httpsHostname, string httpsPort, System.IO.Stream privatekeyFile = default(System.IO.Stream), System.IO.Stream certificateFile = default(System.IO.Stream));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keystorePassword"></param>
        /// <param name="keystorePasswordConfirm"></param>
        /// <param name="truststorePassword"></param>
        /// <param name="truststorePasswordConfirm"></param>
        /// <param name="httpsHostname"></param>
        /// <param name="httpsPort"></param>
        /// <param name="privatekeyFile"> (optional)</param>
        /// <param name="certificateFile"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SslSetupWithHttpInfo (string keystorePassword, string keystorePasswordConfirm, string truststorePassword, string truststorePasswordConfirm, string httpsHostname, string httpsPort, System.IO.Stream privatekeyFile = default(System.IO.Stream), System.IO.Stream certificateFile = default(System.IO.Stream));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keystorePassword"></param>
        /// <param name="keystorePasswordConfirm"></param>
        /// <param name="truststorePassword"></param>
        /// <param name="truststorePasswordConfirm"></param>
        /// <param name="httpsHostname"></param>
        /// <param name="httpsPort"></param>
        /// <param name="privatekeyFile"> (optional)</param>
        /// <param name="certificateFile"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SslSetupAsync (string keystorePassword, string keystorePasswordConfirm, string truststorePassword, string truststorePasswordConfirm, string httpsHostname, string httpsPort, System.IO.Stream privatekeyFile = default(System.IO.Stream), System.IO.Stream certificateFile = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keystorePassword"></param>
        /// <param name="keystorePasswordConfirm"></param>
        /// <param name="truststorePassword"></param>
        /// <param name="truststorePasswordConfirm"></param>
        /// <param name="httpsHostname"></param>
        /// <param name="httpsPort"></param>
        /// <param name="privatekeyFile"> (optional)</param>
        /// <param name="certificateFile"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SslSetupWithHttpInfoAsync (string keystorePassword, string keystorePasswordConfirm, string truststorePassword, string truststorePasswordConfirm, string httpsHostname, string httpsPort, System.IO.Stream privatekeyFile = default(System.IO.Stream), System.IO.Stream certificateFile = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GraniteApi : IGraniteApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GraniteApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GraniteApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GraniteApi"/> class
        /// </summary>
        /// <returns></returns>
        public GraniteApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GraniteApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GraniteApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keystorePassword"></param>
        /// <param name="keystorePasswordConfirm"></param>
        /// <param name="truststorePassword"></param>
        /// <param name="truststorePasswordConfirm"></param>
        /// <param name="httpsHostname"></param>
        /// <param name="httpsPort"></param>
        /// <param name="privatekeyFile"> (optional)</param>
        /// <param name="certificateFile"> (optional)</param>
        /// <returns>string</returns>
        public string SslSetup (string keystorePassword, string keystorePasswordConfirm, string truststorePassword, string truststorePasswordConfirm, string httpsHostname, string httpsPort, System.IO.Stream privatekeyFile = default(System.IO.Stream), System.IO.Stream certificateFile = default(System.IO.Stream))
        {
             ApiResponse<string> localVarResponse = SslSetupWithHttpInfo(keystorePassword, keystorePasswordConfirm, truststorePassword, truststorePasswordConfirm, httpsHostname, httpsPort, privatekeyFile, certificateFile);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keystorePassword"></param>
        /// <param name="keystorePasswordConfirm"></param>
        /// <param name="truststorePassword"></param>
        /// <param name="truststorePasswordConfirm"></param>
        /// <param name="httpsHostname"></param>
        /// <param name="httpsPort"></param>
        /// <param name="privatekeyFile"> (optional)</param>
        /// <param name="certificateFile"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> SslSetupWithHttpInfo (string keystorePassword, string keystorePasswordConfirm, string truststorePassword, string truststorePasswordConfirm, string httpsHostname, string httpsPort, System.IO.Stream privatekeyFile = default(System.IO.Stream), System.IO.Stream certificateFile = default(System.IO.Stream))
        {
            // verify the required parameter 'keystorePassword' is set
            if (keystorePassword == null)
                throw new ApiException(400, "Missing required parameter 'keystorePassword' when calling GraniteApi->SslSetup");
            // verify the required parameter 'keystorePasswordConfirm' is set
            if (keystorePasswordConfirm == null)
                throw new ApiException(400, "Missing required parameter 'keystorePasswordConfirm' when calling GraniteApi->SslSetup");
            // verify the required parameter 'truststorePassword' is set
            if (truststorePassword == null)
                throw new ApiException(400, "Missing required parameter 'truststorePassword' when calling GraniteApi->SslSetup");
            // verify the required parameter 'truststorePasswordConfirm' is set
            if (truststorePasswordConfirm == null)
                throw new ApiException(400, "Missing required parameter 'truststorePasswordConfirm' when calling GraniteApi->SslSetup");
            // verify the required parameter 'httpsHostname' is set
            if (httpsHostname == null)
                throw new ApiException(400, "Missing required parameter 'httpsHostname' when calling GraniteApi->SslSetup");
            // verify the required parameter 'httpsPort' is set
            if (httpsPort == null)
                throw new ApiException(400, "Missing required parameter 'httpsPort' when calling GraniteApi->SslSetup");

            var localVarPath = "/libs/granite/security/post/sslSetup.html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keystorePassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keystorePassword", keystorePassword)); // query parameter
            if (keystorePasswordConfirm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keystorePasswordConfirm", keystorePasswordConfirm)); // query parameter
            if (truststorePassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "truststorePassword", truststorePassword)); // query parameter
            if (truststorePasswordConfirm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "truststorePasswordConfirm", truststorePasswordConfirm)); // query parameter
            if (httpsHostname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "httpsHostname", httpsHostname)); // query parameter
            if (httpsPort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "httpsPort", httpsPort)); // query parameter
            if (privatekeyFile != null) localVarFileParams.Add("privatekeyFile", this.Configuration.ApiClient.ParameterToFile("privatekeyFile", privatekeyFile));
            if (certificateFile != null) localVarFileParams.Add("certificateFile", this.Configuration.ApiClient.ParameterToFile("certificateFile", certificateFile));

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SslSetup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keystorePassword"></param>
        /// <param name="keystorePasswordConfirm"></param>
        /// <param name="truststorePassword"></param>
        /// <param name="truststorePasswordConfirm"></param>
        /// <param name="httpsHostname"></param>
        /// <param name="httpsPort"></param>
        /// <param name="privatekeyFile"> (optional)</param>
        /// <param name="certificateFile"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SslSetupAsync (string keystorePassword, string keystorePasswordConfirm, string truststorePassword, string truststorePasswordConfirm, string httpsHostname, string httpsPort, System.IO.Stream privatekeyFile = default(System.IO.Stream), System.IO.Stream certificateFile = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<string> localVarResponse = await SslSetupWithHttpInfoAsync(keystorePassword, keystorePasswordConfirm, truststorePassword, truststorePasswordConfirm, httpsHostname, httpsPort, privatekeyFile, certificateFile, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keystorePassword"></param>
        /// <param name="keystorePasswordConfirm"></param>
        /// <param name="truststorePassword"></param>
        /// <param name="truststorePasswordConfirm"></param>
        /// <param name="httpsHostname"></param>
        /// <param name="httpsPort"></param>
        /// <param name="privatekeyFile"> (optional)</param>
        /// <param name="certificateFile"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SslSetupWithHttpInfoAsync (string keystorePassword, string keystorePasswordConfirm, string truststorePassword, string truststorePasswordConfirm, string httpsHostname, string httpsPort, System.IO.Stream privatekeyFile = default(System.IO.Stream), System.IO.Stream certificateFile = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'keystorePassword' is set
            if (keystorePassword == null)
                throw new ApiException(400, "Missing required parameter 'keystorePassword' when calling GraniteApi->SslSetup");
            // verify the required parameter 'keystorePasswordConfirm' is set
            if (keystorePasswordConfirm == null)
                throw new ApiException(400, "Missing required parameter 'keystorePasswordConfirm' when calling GraniteApi->SslSetup");
            // verify the required parameter 'truststorePassword' is set
            if (truststorePassword == null)
                throw new ApiException(400, "Missing required parameter 'truststorePassword' when calling GraniteApi->SslSetup");
            // verify the required parameter 'truststorePasswordConfirm' is set
            if (truststorePasswordConfirm == null)
                throw new ApiException(400, "Missing required parameter 'truststorePasswordConfirm' when calling GraniteApi->SslSetup");
            // verify the required parameter 'httpsHostname' is set
            if (httpsHostname == null)
                throw new ApiException(400, "Missing required parameter 'httpsHostname' when calling GraniteApi->SslSetup");
            // verify the required parameter 'httpsPort' is set
            if (httpsPort == null)
                throw new ApiException(400, "Missing required parameter 'httpsPort' when calling GraniteApi->SslSetup");

            var localVarPath = "/libs/granite/security/post/sslSetup.html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keystorePassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keystorePassword", keystorePassword)); // query parameter
            if (keystorePasswordConfirm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keystorePasswordConfirm", keystorePasswordConfirm)); // query parameter
            if (truststorePassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "truststorePassword", truststorePassword)); // query parameter
            if (truststorePasswordConfirm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "truststorePasswordConfirm", truststorePasswordConfirm)); // query parameter
            if (httpsHostname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "httpsHostname", httpsHostname)); // query parameter
            if (httpsPort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "httpsPort", httpsPort)); // query parameter
            if (privatekeyFile != null) localVarFileParams.Add("privatekeyFile", this.Configuration.ApiClient.ParameterToFile("privatekeyFile", privatekeyFile));
            if (certificateFile != null) localVarFileParams.Add("certificateFile", this.Configuration.ApiClient.ParameterToFile("certificateFile", certificateFile));

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SslSetup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
