/*
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConsoleApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetAemProductInfo ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetAemProductInfoWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>BundleInfo</returns>
        BundleInfo GetBundleInfo (string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of BundleInfo</returns>
        ApiResponse<BundleInfo> GetBundleInfoWithHttpInfo (string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string GetConfigMgr ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetConfigMgrWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="action"></param>
        /// <returns></returns>
        void PostBundle (string name, string action);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="action"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostBundleWithHttpInfo (string name, string action);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"></param>
        /// <returns></returns>
        void PostJmxRepository (string action);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostJmxRepositoryWithHttpInfo (string action);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="idpUrl"> (optional)</param>
        /// <param name="idpCertAlias"> (optional)</param>
        /// <param name="idpHttpRedirect"> (optional)</param>
        /// <param name="serviceProviderEntityId"> (optional)</param>
        /// <param name="assertionConsumerServiceURL"> (optional)</param>
        /// <param name="spPrivateKeyAlias"> (optional)</param>
        /// <param name="keyStorePassword"> (optional)</param>
        /// <param name="defaultRedirectUrl"> (optional)</param>
        /// <param name="userIDAttribute"> (optional)</param>
        /// <param name="useEncryption"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="addGroupMemberships"> (optional)</param>
        /// <param name="groupMembershipAttribute"> (optional)</param>
        /// <param name="defaultGroups"> (optional)</param>
        /// <param name="nameIdFormat"> (optional)</param>
        /// <param name="synchronizeAttributes"> (optional)</param>
        /// <param name="handleLogout"> (optional)</param>
        /// <param name="logoutUrl"> (optional)</param>
        /// <param name="clockTolerance"> (optional)</param>
        /// <param name="digestMethod"> (optional)</param>
        /// <param name="signatureMethod"> (optional)</param>
        /// <param name="userIntermediatePath"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <returns>SamlConfigurationInfo</returns>
        SamlConfigurationInfo PostSamlConfiguration (bool? post = default(bool?), bool? apply = default(bool?), bool? delete = default(bool?), string action = default(string), string location = default(string), List<string> path = default(List<string>), int? serviceRanking = default(int?), string idpUrl = default(string), string idpCertAlias = default(string), bool? idpHttpRedirect = default(bool?), string serviceProviderEntityId = default(string), string assertionConsumerServiceURL = default(string), string spPrivateKeyAlias = default(string), string keyStorePassword = default(string), string defaultRedirectUrl = default(string), string userIDAttribute = default(string), bool? useEncryption = default(bool?), bool? createUser = default(bool?), bool? addGroupMemberships = default(bool?), string groupMembershipAttribute = default(string), List<string> defaultGroups = default(List<string>), string nameIdFormat = default(string), List<string> synchronizeAttributes = default(List<string>), bool? handleLogout = default(bool?), string logoutUrl = default(string), int? clockTolerance = default(int?), string digestMethod = default(string), string signatureMethod = default(string), string userIntermediatePath = default(string), List<string> propertylist = default(List<string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="idpUrl"> (optional)</param>
        /// <param name="idpCertAlias"> (optional)</param>
        /// <param name="idpHttpRedirect"> (optional)</param>
        /// <param name="serviceProviderEntityId"> (optional)</param>
        /// <param name="assertionConsumerServiceURL"> (optional)</param>
        /// <param name="spPrivateKeyAlias"> (optional)</param>
        /// <param name="keyStorePassword"> (optional)</param>
        /// <param name="defaultRedirectUrl"> (optional)</param>
        /// <param name="userIDAttribute"> (optional)</param>
        /// <param name="useEncryption"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="addGroupMemberships"> (optional)</param>
        /// <param name="groupMembershipAttribute"> (optional)</param>
        /// <param name="defaultGroups"> (optional)</param>
        /// <param name="nameIdFormat"> (optional)</param>
        /// <param name="synchronizeAttributes"> (optional)</param>
        /// <param name="handleLogout"> (optional)</param>
        /// <param name="logoutUrl"> (optional)</param>
        /// <param name="clockTolerance"> (optional)</param>
        /// <param name="digestMethod"> (optional)</param>
        /// <param name="signatureMethod"> (optional)</param>
        /// <param name="userIntermediatePath"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <returns>ApiResponse of SamlConfigurationInfo</returns>
        ApiResponse<SamlConfigurationInfo> PostSamlConfigurationWithHttpInfo (bool? post = default(bool?), bool? apply = default(bool?), bool? delete = default(bool?), string action = default(string), string location = default(string), List<string> path = default(List<string>), int? serviceRanking = default(int?), string idpUrl = default(string), string idpCertAlias = default(string), bool? idpHttpRedirect = default(bool?), string serviceProviderEntityId = default(string), string assertionConsumerServiceURL = default(string), string spPrivateKeyAlias = default(string), string keyStorePassword = default(string), string defaultRedirectUrl = default(string), string userIDAttribute = default(string), bool? useEncryption = default(bool?), bool? createUser = default(bool?), bool? addGroupMemberships = default(bool?), string groupMembershipAttribute = default(string), List<string> defaultGroups = default(List<string>), string nameIdFormat = default(string), List<string> synchronizeAttributes = default(List<string>), bool? handleLogout = default(bool?), string logoutUrl = default(string), int? clockTolerance = default(int?), string digestMethod = default(string), string signatureMethod = default(string), string userIntermediatePath = default(string), List<string> propertylist = default(List<string>));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetAemProductInfoAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetAemProductInfoWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BundleInfo</returns>
        System.Threading.Tasks.Task<BundleInfo> GetBundleInfoAsync (string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BundleInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<BundleInfo>> GetBundleInfoWithHttpInfoAsync (string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetConfigMgrAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetConfigMgrWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="action"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostBundleAsync (string name, string action, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="action"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostBundleWithHttpInfoAsync (string name, string action, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostJmxRepositoryAsync (string action, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostJmxRepositoryWithHttpInfoAsync (string action, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="idpUrl"> (optional)</param>
        /// <param name="idpCertAlias"> (optional)</param>
        /// <param name="idpHttpRedirect"> (optional)</param>
        /// <param name="serviceProviderEntityId"> (optional)</param>
        /// <param name="assertionConsumerServiceURL"> (optional)</param>
        /// <param name="spPrivateKeyAlias"> (optional)</param>
        /// <param name="keyStorePassword"> (optional)</param>
        /// <param name="defaultRedirectUrl"> (optional)</param>
        /// <param name="userIDAttribute"> (optional)</param>
        /// <param name="useEncryption"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="addGroupMemberships"> (optional)</param>
        /// <param name="groupMembershipAttribute"> (optional)</param>
        /// <param name="defaultGroups"> (optional)</param>
        /// <param name="nameIdFormat"> (optional)</param>
        /// <param name="synchronizeAttributes"> (optional)</param>
        /// <param name="handleLogout"> (optional)</param>
        /// <param name="logoutUrl"> (optional)</param>
        /// <param name="clockTolerance"> (optional)</param>
        /// <param name="digestMethod"> (optional)</param>
        /// <param name="signatureMethod"> (optional)</param>
        /// <param name="userIntermediatePath"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SamlConfigurationInfo</returns>
        System.Threading.Tasks.Task<SamlConfigurationInfo> PostSamlConfigurationAsync (bool? post = default(bool?), bool? apply = default(bool?), bool? delete = default(bool?), string action = default(string), string location = default(string), List<string> path = default(List<string>), int? serviceRanking = default(int?), string idpUrl = default(string), string idpCertAlias = default(string), bool? idpHttpRedirect = default(bool?), string serviceProviderEntityId = default(string), string assertionConsumerServiceURL = default(string), string spPrivateKeyAlias = default(string), string keyStorePassword = default(string), string defaultRedirectUrl = default(string), string userIDAttribute = default(string), bool? useEncryption = default(bool?), bool? createUser = default(bool?), bool? addGroupMemberships = default(bool?), string groupMembershipAttribute = default(string), List<string> defaultGroups = default(List<string>), string nameIdFormat = default(string), List<string> synchronizeAttributes = default(List<string>), bool? handleLogout = default(bool?), string logoutUrl = default(string), int? clockTolerance = default(int?), string digestMethod = default(string), string signatureMethod = default(string), string userIntermediatePath = default(string), List<string> propertylist = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="idpUrl"> (optional)</param>
        /// <param name="idpCertAlias"> (optional)</param>
        /// <param name="idpHttpRedirect"> (optional)</param>
        /// <param name="serviceProviderEntityId"> (optional)</param>
        /// <param name="assertionConsumerServiceURL"> (optional)</param>
        /// <param name="spPrivateKeyAlias"> (optional)</param>
        /// <param name="keyStorePassword"> (optional)</param>
        /// <param name="defaultRedirectUrl"> (optional)</param>
        /// <param name="userIDAttribute"> (optional)</param>
        /// <param name="useEncryption"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="addGroupMemberships"> (optional)</param>
        /// <param name="groupMembershipAttribute"> (optional)</param>
        /// <param name="defaultGroups"> (optional)</param>
        /// <param name="nameIdFormat"> (optional)</param>
        /// <param name="synchronizeAttributes"> (optional)</param>
        /// <param name="handleLogout"> (optional)</param>
        /// <param name="logoutUrl"> (optional)</param>
        /// <param name="clockTolerance"> (optional)</param>
        /// <param name="digestMethod"> (optional)</param>
        /// <param name="signatureMethod"> (optional)</param>
        /// <param name="userIntermediatePath"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SamlConfigurationInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<SamlConfigurationInfo>> PostSamlConfigurationWithHttpInfoAsync (bool? post = default(bool?), bool? apply = default(bool?), bool? delete = default(bool?), string action = default(string), string location = default(string), List<string> path = default(List<string>), int? serviceRanking = default(int?), string idpUrl = default(string), string idpCertAlias = default(string), bool? idpHttpRedirect = default(bool?), string serviceProviderEntityId = default(string), string assertionConsumerServiceURL = default(string), string spPrivateKeyAlias = default(string), string keyStorePassword = default(string), string defaultRedirectUrl = default(string), string userIDAttribute = default(string), bool? useEncryption = default(bool?), bool? createUser = default(bool?), bool? addGroupMemberships = default(bool?), string groupMembershipAttribute = default(string), List<string> defaultGroups = default(List<string>), string nameIdFormat = default(string), List<string> synchronizeAttributes = default(List<string>), bool? handleLogout = default(bool?), string logoutUrl = default(string), int? clockTolerance = default(int?), string digestMethod = default(string), string signatureMethod = default(string), string userIntermediatePath = default(string), List<string> propertylist = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConsoleApi : IConsoleApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConsoleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConsoleApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConsoleApi"/> class
        /// </summary>
        /// <returns></returns>
        public ConsoleApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConsoleApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConsoleApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetAemProductInfo ()
        {
             ApiResponse<List<string>> localVarResponse = GetAemProductInfoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse<List<string>> GetAemProductInfoWithHttpInfo ()
        {

            var localVarPath = "/system/console/status-productinfo.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAemProductInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetAemProductInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<string>> localVarResponse = await GetAemProductInfoWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetAemProductInfoWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/system/console/status-productinfo.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAemProductInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>BundleInfo</returns>
        public BundleInfo GetBundleInfo (string name)
        {
             ApiResponse<BundleInfo> localVarResponse = GetBundleInfoWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of BundleInfo</returns>
        public ApiResponse<BundleInfo> GetBundleInfoWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ConsoleApi->GetBundleInfo");

            var localVarPath = "/system/console/bundles/{name}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBundleInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BundleInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BundleInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BundleInfo)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BundleInfo</returns>
        public async System.Threading.Tasks.Task<BundleInfo> GetBundleInfoAsync (string name, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BundleInfo> localVarResponse = await GetBundleInfoWithHttpInfoAsync(name, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BundleInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BundleInfo>> GetBundleInfoWithHttpInfoAsync (string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ConsoleApi->GetBundleInfo");

            var localVarPath = "/system/console/bundles/{name}.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBundleInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BundleInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BundleInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BundleInfo)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string GetConfigMgr ()
        {
             ApiResponse<string> localVarResponse = GetConfigMgrWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> GetConfigMgrWithHttpInfo ()
        {

            var localVarPath = "/system/console/configMgr";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfigMgr", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetConfigMgrAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<string> localVarResponse = await GetConfigMgrWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetConfigMgrWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/system/console/configMgr";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfigMgr", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="action"></param>
        /// <returns></returns>
        public void PostBundle (string name, string action)
        {
             PostBundleWithHttpInfo(name, action);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="action"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostBundleWithHttpInfo (string name, string action)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ConsoleApi->PostBundle");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling ConsoleApi->PostBundle");

            var localVarPath = "/system/console/bundles/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (action != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "action", action)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostBundle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="action"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostBundleAsync (string name, string action, CancellationToken cancellationToken = default(CancellationToken))
        {
             await PostBundleWithHttpInfoAsync(name, action, cancellationToken);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="action"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostBundleWithHttpInfoAsync (string name, string action, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ConsoleApi->PostBundle");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling ConsoleApi->PostBundle");

            var localVarPath = "/system/console/bundles/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (action != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "action", action)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostBundle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"></param>
        /// <returns></returns>
        public void PostJmxRepository (string action)
        {
             PostJmxRepositoryWithHttpInfo(action);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostJmxRepositoryWithHttpInfo (string action)
        {
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling ConsoleApi->PostJmxRepository");

            var localVarPath = "/system/console/jmx/com.adobe.granite:type=Repository/op/{action}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostJmxRepository", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostJmxRepositoryAsync (string action, CancellationToken cancellationToken = default(CancellationToken))
        {
             await PostJmxRepositoryWithHttpInfoAsync(action, cancellationToken);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostJmxRepositoryWithHttpInfoAsync (string action, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling ConsoleApi->PostJmxRepository");

            var localVarPath = "/system/console/jmx/com.adobe.granite:type=Repository/op/{action}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostJmxRepository", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="idpUrl"> (optional)</param>
        /// <param name="idpCertAlias"> (optional)</param>
        /// <param name="idpHttpRedirect"> (optional)</param>
        /// <param name="serviceProviderEntityId"> (optional)</param>
        /// <param name="assertionConsumerServiceURL"> (optional)</param>
        /// <param name="spPrivateKeyAlias"> (optional)</param>
        /// <param name="keyStorePassword"> (optional)</param>
        /// <param name="defaultRedirectUrl"> (optional)</param>
        /// <param name="userIDAttribute"> (optional)</param>
        /// <param name="useEncryption"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="addGroupMemberships"> (optional)</param>
        /// <param name="groupMembershipAttribute"> (optional)</param>
        /// <param name="defaultGroups"> (optional)</param>
        /// <param name="nameIdFormat"> (optional)</param>
        /// <param name="synchronizeAttributes"> (optional)</param>
        /// <param name="handleLogout"> (optional)</param>
        /// <param name="logoutUrl"> (optional)</param>
        /// <param name="clockTolerance"> (optional)</param>
        /// <param name="digestMethod"> (optional)</param>
        /// <param name="signatureMethod"> (optional)</param>
        /// <param name="userIntermediatePath"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <returns>SamlConfigurationInfo</returns>
        public SamlConfigurationInfo PostSamlConfiguration (bool? post = default(bool?), bool? apply = default(bool?), bool? delete = default(bool?), string action = default(string), string location = default(string), List<string> path = default(List<string>), int? serviceRanking = default(int?), string idpUrl = default(string), string idpCertAlias = default(string), bool? idpHttpRedirect = default(bool?), string serviceProviderEntityId = default(string), string assertionConsumerServiceURL = default(string), string spPrivateKeyAlias = default(string), string keyStorePassword = default(string), string defaultRedirectUrl = default(string), string userIDAttribute = default(string), bool? useEncryption = default(bool?), bool? createUser = default(bool?), bool? addGroupMemberships = default(bool?), string groupMembershipAttribute = default(string), List<string> defaultGroups = default(List<string>), string nameIdFormat = default(string), List<string> synchronizeAttributes = default(List<string>), bool? handleLogout = default(bool?), string logoutUrl = default(string), int? clockTolerance = default(int?), string digestMethod = default(string), string signatureMethod = default(string), string userIntermediatePath = default(string), List<string> propertylist = default(List<string>))
        {
             ApiResponse<SamlConfigurationInfo> localVarResponse = PostSamlConfigurationWithHttpInfo(post, apply, delete, action, location, path, serviceRanking, idpUrl, idpCertAlias, idpHttpRedirect, serviceProviderEntityId, assertionConsumerServiceURL, spPrivateKeyAlias, keyStorePassword, defaultRedirectUrl, userIDAttribute, useEncryption, createUser, addGroupMemberships, groupMembershipAttribute, defaultGroups, nameIdFormat, synchronizeAttributes, handleLogout, logoutUrl, clockTolerance, digestMethod, signatureMethod, userIntermediatePath, propertylist);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="idpUrl"> (optional)</param>
        /// <param name="idpCertAlias"> (optional)</param>
        /// <param name="idpHttpRedirect"> (optional)</param>
        /// <param name="serviceProviderEntityId"> (optional)</param>
        /// <param name="assertionConsumerServiceURL"> (optional)</param>
        /// <param name="spPrivateKeyAlias"> (optional)</param>
        /// <param name="keyStorePassword"> (optional)</param>
        /// <param name="defaultRedirectUrl"> (optional)</param>
        /// <param name="userIDAttribute"> (optional)</param>
        /// <param name="useEncryption"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="addGroupMemberships"> (optional)</param>
        /// <param name="groupMembershipAttribute"> (optional)</param>
        /// <param name="defaultGroups"> (optional)</param>
        /// <param name="nameIdFormat"> (optional)</param>
        /// <param name="synchronizeAttributes"> (optional)</param>
        /// <param name="handleLogout"> (optional)</param>
        /// <param name="logoutUrl"> (optional)</param>
        /// <param name="clockTolerance"> (optional)</param>
        /// <param name="digestMethod"> (optional)</param>
        /// <param name="signatureMethod"> (optional)</param>
        /// <param name="userIntermediatePath"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <returns>ApiResponse of SamlConfigurationInfo</returns>
        public ApiResponse<SamlConfigurationInfo> PostSamlConfigurationWithHttpInfo (bool? post = default(bool?), bool? apply = default(bool?), bool? delete = default(bool?), string action = default(string), string location = default(string), List<string> path = default(List<string>), int? serviceRanking = default(int?), string idpUrl = default(string), string idpCertAlias = default(string), bool? idpHttpRedirect = default(bool?), string serviceProviderEntityId = default(string), string assertionConsumerServiceURL = default(string), string spPrivateKeyAlias = default(string), string keyStorePassword = default(string), string defaultRedirectUrl = default(string), string userIDAttribute = default(string), bool? useEncryption = default(bool?), bool? createUser = default(bool?), bool? addGroupMemberships = default(bool?), string groupMembershipAttribute = default(string), List<string> defaultGroups = default(List<string>), string nameIdFormat = default(string), List<string> synchronizeAttributes = default(List<string>), bool? handleLogout = default(bool?), string logoutUrl = default(string), int? clockTolerance = default(int?), string digestMethod = default(string), string signatureMethod = default(string), string userIntermediatePath = default(string), List<string> propertylist = default(List<string>))
        {

            var localVarPath = "/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (post != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "post", post)); // query parameter
            if (apply != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apply", apply)); // query parameter
            if (delete != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "delete", delete)); // query parameter
            if (action != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "action", action)); // query parameter
            if (location != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$location", location)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "path", path)); // query parameter
            if (serviceRanking != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "service.ranking", serviceRanking)); // query parameter
            if (idpUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idpUrl", idpUrl)); // query parameter
            if (idpCertAlias != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idpCertAlias", idpCertAlias)); // query parameter
            if (idpHttpRedirect != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idpHttpRedirect", idpHttpRedirect)); // query parameter
            if (serviceProviderEntityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serviceProviderEntityId", serviceProviderEntityId)); // query parameter
            if (assertionConsumerServiceURL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assertionConsumerServiceURL", assertionConsumerServiceURL)); // query parameter
            if (spPrivateKeyAlias != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "spPrivateKeyAlias", spPrivateKeyAlias)); // query parameter
            if (keyStorePassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyStorePassword", keyStorePassword)); // query parameter
            if (defaultRedirectUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "defaultRedirectUrl", defaultRedirectUrl)); // query parameter
            if (userIDAttribute != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userIDAttribute", userIDAttribute)); // query parameter
            if (useEncryption != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "useEncryption", useEncryption)); // query parameter
            if (createUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createUser", createUser)); // query parameter
            if (addGroupMemberships != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addGroupMemberships", addGroupMemberships)); // query parameter
            if (groupMembershipAttribute != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupMembershipAttribute", groupMembershipAttribute)); // query parameter
            if (defaultGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "defaultGroups", defaultGroups)); // query parameter
            if (nameIdFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nameIdFormat", nameIdFormat)); // query parameter
            if (synchronizeAttributes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "synchronizeAttributes", synchronizeAttributes)); // query parameter
            if (handleLogout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "handleLogout", handleLogout)); // query parameter
            if (logoutUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logoutUrl", logoutUrl)); // query parameter
            if (clockTolerance != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clockTolerance", clockTolerance)); // query parameter
            if (digestMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "digestMethod", digestMethod)); // query parameter
            if (signatureMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signatureMethod", signatureMethod)); // query parameter
            if (userIntermediatePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userIntermediatePath", userIntermediatePath)); // query parameter
            if (propertylist != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "propertylist", propertylist)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSamlConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SamlConfigurationInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SamlConfigurationInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SamlConfigurationInfo)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="idpUrl"> (optional)</param>
        /// <param name="idpCertAlias"> (optional)</param>
        /// <param name="idpHttpRedirect"> (optional)</param>
        /// <param name="serviceProviderEntityId"> (optional)</param>
        /// <param name="assertionConsumerServiceURL"> (optional)</param>
        /// <param name="spPrivateKeyAlias"> (optional)</param>
        /// <param name="keyStorePassword"> (optional)</param>
        /// <param name="defaultRedirectUrl"> (optional)</param>
        /// <param name="userIDAttribute"> (optional)</param>
        /// <param name="useEncryption"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="addGroupMemberships"> (optional)</param>
        /// <param name="groupMembershipAttribute"> (optional)</param>
        /// <param name="defaultGroups"> (optional)</param>
        /// <param name="nameIdFormat"> (optional)</param>
        /// <param name="synchronizeAttributes"> (optional)</param>
        /// <param name="handleLogout"> (optional)</param>
        /// <param name="logoutUrl"> (optional)</param>
        /// <param name="clockTolerance"> (optional)</param>
        /// <param name="digestMethod"> (optional)</param>
        /// <param name="signatureMethod"> (optional)</param>
        /// <param name="userIntermediatePath"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SamlConfigurationInfo</returns>
        public async System.Threading.Tasks.Task<SamlConfigurationInfo> PostSamlConfigurationAsync (bool? post = default(bool?), bool? apply = default(bool?), bool? delete = default(bool?), string action = default(string), string location = default(string), List<string> path = default(List<string>), int? serviceRanking = default(int?), string idpUrl = default(string), string idpCertAlias = default(string), bool? idpHttpRedirect = default(bool?), string serviceProviderEntityId = default(string), string assertionConsumerServiceURL = default(string), string spPrivateKeyAlias = default(string), string keyStorePassword = default(string), string defaultRedirectUrl = default(string), string userIDAttribute = default(string), bool? useEncryption = default(bool?), bool? createUser = default(bool?), bool? addGroupMemberships = default(bool?), string groupMembershipAttribute = default(string), List<string> defaultGroups = default(List<string>), string nameIdFormat = default(string), List<string> synchronizeAttributes = default(List<string>), bool? handleLogout = default(bool?), string logoutUrl = default(string), int? clockTolerance = default(int?), string digestMethod = default(string), string signatureMethod = default(string), string userIntermediatePath = default(string), List<string> propertylist = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SamlConfigurationInfo> localVarResponse = await PostSamlConfigurationWithHttpInfoAsync(post, apply, delete, action, location, path, serviceRanking, idpUrl, idpCertAlias, idpHttpRedirect, serviceProviderEntityId, assertionConsumerServiceURL, spPrivateKeyAlias, keyStorePassword, defaultRedirectUrl, userIDAttribute, useEncryption, createUser, addGroupMemberships, groupMembershipAttribute, defaultGroups, nameIdFormat, synchronizeAttributes, handleLogout, logoutUrl, clockTolerance, digestMethod, signatureMethod, userIntermediatePath, propertylist, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="idpUrl"> (optional)</param>
        /// <param name="idpCertAlias"> (optional)</param>
        /// <param name="idpHttpRedirect"> (optional)</param>
        /// <param name="serviceProviderEntityId"> (optional)</param>
        /// <param name="assertionConsumerServiceURL"> (optional)</param>
        /// <param name="spPrivateKeyAlias"> (optional)</param>
        /// <param name="keyStorePassword"> (optional)</param>
        /// <param name="defaultRedirectUrl"> (optional)</param>
        /// <param name="userIDAttribute"> (optional)</param>
        /// <param name="useEncryption"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="addGroupMemberships"> (optional)</param>
        /// <param name="groupMembershipAttribute"> (optional)</param>
        /// <param name="defaultGroups"> (optional)</param>
        /// <param name="nameIdFormat"> (optional)</param>
        /// <param name="synchronizeAttributes"> (optional)</param>
        /// <param name="handleLogout"> (optional)</param>
        /// <param name="logoutUrl"> (optional)</param>
        /// <param name="clockTolerance"> (optional)</param>
        /// <param name="digestMethod"> (optional)</param>
        /// <param name="signatureMethod"> (optional)</param>
        /// <param name="userIntermediatePath"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SamlConfigurationInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SamlConfigurationInfo>> PostSamlConfigurationWithHttpInfoAsync (bool? post = default(bool?), bool? apply = default(bool?), bool? delete = default(bool?), string action = default(string), string location = default(string), List<string> path = default(List<string>), int? serviceRanking = default(int?), string idpUrl = default(string), string idpCertAlias = default(string), bool? idpHttpRedirect = default(bool?), string serviceProviderEntityId = default(string), string assertionConsumerServiceURL = default(string), string spPrivateKeyAlias = default(string), string keyStorePassword = default(string), string defaultRedirectUrl = default(string), string userIDAttribute = default(string), bool? useEncryption = default(bool?), bool? createUser = default(bool?), bool? addGroupMemberships = default(bool?), string groupMembershipAttribute = default(string), List<string> defaultGroups = default(List<string>), string nameIdFormat = default(string), List<string> synchronizeAttributes = default(List<string>), bool? handleLogout = default(bool?), string logoutUrl = default(string), int? clockTolerance = default(int?), string digestMethod = default(string), string signatureMethod = default(string), string userIntermediatePath = default(string), List<string> propertylist = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (post != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "post", post)); // query parameter
            if (apply != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apply", apply)); // query parameter
            if (delete != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "delete", delete)); // query parameter
            if (action != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "action", action)); // query parameter
            if (location != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$location", location)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "path", path)); // query parameter
            if (serviceRanking != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "service.ranking", serviceRanking)); // query parameter
            if (idpUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idpUrl", idpUrl)); // query parameter
            if (idpCertAlias != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idpCertAlias", idpCertAlias)); // query parameter
            if (idpHttpRedirect != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idpHttpRedirect", idpHttpRedirect)); // query parameter
            if (serviceProviderEntityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serviceProviderEntityId", serviceProviderEntityId)); // query parameter
            if (assertionConsumerServiceURL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assertionConsumerServiceURL", assertionConsumerServiceURL)); // query parameter
            if (spPrivateKeyAlias != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "spPrivateKeyAlias", spPrivateKeyAlias)); // query parameter
            if (keyStorePassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyStorePassword", keyStorePassword)); // query parameter
            if (defaultRedirectUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "defaultRedirectUrl", defaultRedirectUrl)); // query parameter
            if (userIDAttribute != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userIDAttribute", userIDAttribute)); // query parameter
            if (useEncryption != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "useEncryption", useEncryption)); // query parameter
            if (createUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createUser", createUser)); // query parameter
            if (addGroupMemberships != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addGroupMemberships", addGroupMemberships)); // query parameter
            if (groupMembershipAttribute != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupMembershipAttribute", groupMembershipAttribute)); // query parameter
            if (defaultGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "defaultGroups", defaultGroups)); // query parameter
            if (nameIdFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nameIdFormat", nameIdFormat)); // query parameter
            if (synchronizeAttributes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "synchronizeAttributes", synchronizeAttributes)); // query parameter
            if (handleLogout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "handleLogout", handleLogout)); // query parameter
            if (logoutUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logoutUrl", logoutUrl)); // query parameter
            if (clockTolerance != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clockTolerance", clockTolerance)); // query parameter
            if (digestMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "digestMethod", digestMethod)); // query parameter
            if (signatureMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signatureMethod", signatureMethod)); // query parameter
            if (userIntermediatePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userIntermediatePath", userIntermediatePath)); // query parameter
            if (propertylist != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "propertylist", propertylist)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSamlConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SamlConfigurationInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SamlConfigurationInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SamlConfigurationInfo)));
        }

    }
}
