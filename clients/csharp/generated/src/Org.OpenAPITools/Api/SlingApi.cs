/*
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISlingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        void DeleteAgent (string runmode, string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAgentWithHttpInfo (string runmode, string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        void DeleteNode (string path, string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteNodeWithHttpInfo (string path, string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        void GetAgent (string runmode, string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAgentWithHttpInfo (string runmode, string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <returns>string</returns>
        string GetAgents (string runmode);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetAgentsWithHttpInfo (string runmode);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <returns>KeystoreInfo</returns>
        KeystoreInfo GetAuthorizableKeystore (string intermediatePath, string authorizableId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <returns>ApiResponse of KeystoreInfo</returns>
        ApiResponse<KeystoreInfo> GetAuthorizableKeystoreWithHttpInfo (string intermediatePath, string authorizableId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetKeystore (string intermediatePath, string authorizableId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetKeystoreWithHttpInfo (string intermediatePath, string authorizableId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        void GetNode (string path, string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetNodeWithHttpInfo (string path, string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group"></param>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPackage (string group, string name, string version);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group"></param>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPackageWithHttpInfo (string group, string name, string version);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group"></param>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <returns>string</returns>
        string GetPackageFilter (string group, string name, string version);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group"></param>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetPackageFilterWithHttpInfo (string group, string name, string version);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="pLimit"></param>
        /// <param name="_1property"></param>
        /// <param name="_1propertyValue"></param>
        /// <returns>string</returns>
        string GetQuery (string path, decimal pLimit, string _1property, string _1propertyValue);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="pLimit"></param>
        /// <param name="_1property"></param>
        /// <param name="_1propertyValue"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetQueryWithHttpInfo (string path, decimal pLimit, string _1property, string _1propertyValue);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetTruststore ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetTruststoreWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TruststoreInfo</returns>
        TruststoreInfo GetTruststoreInfo ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TruststoreInfo</returns>
        ApiResponse<TruststoreInfo> GetTruststoreInfoWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <param name="jcrcontentCqdistribute"> (optional)</param>
        /// <param name="jcrcontentCqdistributeTypeHint"> (optional)</param>
        /// <param name="jcrcontentCqname"> (optional)</param>
        /// <param name="jcrcontentCqtemplate"> (optional)</param>
        /// <param name="jcrcontentEnabled"> (optional)</param>
        /// <param name="jcrcontentJcrdescription"> (optional)</param>
        /// <param name="jcrcontentJcrlastModified"> (optional)</param>
        /// <param name="jcrcontentJcrlastModifiedBy"> (optional)</param>
        /// <param name="jcrcontentJcrmixinTypes"> (optional)</param>
        /// <param name="jcrcontentJcrtitle"> (optional)</param>
        /// <param name="jcrcontentLogLevel"> (optional)</param>
        /// <param name="jcrcontentNoStatusUpdate"> (optional)</param>
        /// <param name="jcrcontentNoVersioning"> (optional)</param>
        /// <param name="jcrcontentProtocolConnectTimeout"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPConnectionClosed"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPExpired"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPHeaders"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPHeadersTypeHint"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPMethod"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPSRelaxed"> (optional)</param>
        /// <param name="jcrcontentProtocolInterface"> (optional)</param>
        /// <param name="jcrcontentProtocolSocketTimeout"> (optional)</param>
        /// <param name="jcrcontentProtocolVersion"> (optional)</param>
        /// <param name="jcrcontentProxyNTLMDomain"> (optional)</param>
        /// <param name="jcrcontentProxyNTLMHost"> (optional)</param>
        /// <param name="jcrcontentProxyHost"> (optional)</param>
        /// <param name="jcrcontentProxyPassword"> (optional)</param>
        /// <param name="jcrcontentProxyPort"> (optional)</param>
        /// <param name="jcrcontentProxyUser"> (optional)</param>
        /// <param name="jcrcontentQueueBatchMaxSize"> (optional)</param>
        /// <param name="jcrcontentQueueBatchMode"> (optional)</param>
        /// <param name="jcrcontentQueueBatchWaitTime"> (optional)</param>
        /// <param name="jcrcontentRetryDelay"> (optional)</param>
        /// <param name="jcrcontentReverseReplication"> (optional)</param>
        /// <param name="jcrcontentSerializationType"> (optional)</param>
        /// <param name="jcrcontentSlingresourceType"> (optional)</param>
        /// <param name="jcrcontentSsl"> (optional)</param>
        /// <param name="jcrcontentTransportNTLMDomain"> (optional)</param>
        /// <param name="jcrcontentTransportNTLMHost"> (optional)</param>
        /// <param name="jcrcontentTransportPassword"> (optional)</param>
        /// <param name="jcrcontentTransportUri"> (optional)</param>
        /// <param name="jcrcontentTransportUser"> (optional)</param>
        /// <param name="jcrcontentTriggerDistribute"> (optional)</param>
        /// <param name="jcrcontentTriggerModified"> (optional)</param>
        /// <param name="jcrcontentTriggerOnOffTime"> (optional)</param>
        /// <param name="jcrcontentTriggerReceive"> (optional)</param>
        /// <param name="jcrcontentTriggerSpecific"> (optional)</param>
        /// <param name="jcrcontentUserId"> (optional)</param>
        /// <param name="jcrprimaryType"> (optional)</param>
        /// <param name="operation"> (optional)</param>
        /// <returns></returns>
        void PostAgent (string runmode, string name, bool? jcrcontentCqdistribute = default(bool?), string jcrcontentCqdistributeTypeHint = default(string), string jcrcontentCqname = default(string), string jcrcontentCqtemplate = default(string), bool? jcrcontentEnabled = default(bool?), string jcrcontentJcrdescription = default(string), string jcrcontentJcrlastModified = default(string), string jcrcontentJcrlastModifiedBy = default(string), string jcrcontentJcrmixinTypes = default(string), string jcrcontentJcrtitle = default(string), string jcrcontentLogLevel = default(string), bool? jcrcontentNoStatusUpdate = default(bool?), bool? jcrcontentNoVersioning = default(bool?), decimal? jcrcontentProtocolConnectTimeout = default(decimal?), bool? jcrcontentProtocolHTTPConnectionClosed = default(bool?), string jcrcontentProtocolHTTPExpired = default(string), List<string> jcrcontentProtocolHTTPHeaders = default(List<string>), string jcrcontentProtocolHTTPHeadersTypeHint = default(string), string jcrcontentProtocolHTTPMethod = default(string), bool? jcrcontentProtocolHTTPSRelaxed = default(bool?), string jcrcontentProtocolInterface = default(string), decimal? jcrcontentProtocolSocketTimeout = default(decimal?), string jcrcontentProtocolVersion = default(string), string jcrcontentProxyNTLMDomain = default(string), string jcrcontentProxyNTLMHost = default(string), string jcrcontentProxyHost = default(string), string jcrcontentProxyPassword = default(string), decimal? jcrcontentProxyPort = default(decimal?), string jcrcontentProxyUser = default(string), decimal? jcrcontentQueueBatchMaxSize = default(decimal?), string jcrcontentQueueBatchMode = default(string), decimal? jcrcontentQueueBatchWaitTime = default(decimal?), string jcrcontentRetryDelay = default(string), bool? jcrcontentReverseReplication = default(bool?), string jcrcontentSerializationType = default(string), string jcrcontentSlingresourceType = default(string), string jcrcontentSsl = default(string), string jcrcontentTransportNTLMDomain = default(string), string jcrcontentTransportNTLMHost = default(string), string jcrcontentTransportPassword = default(string), string jcrcontentTransportUri = default(string), string jcrcontentTransportUser = default(string), bool? jcrcontentTriggerDistribute = default(bool?), bool? jcrcontentTriggerModified = default(bool?), bool? jcrcontentTriggerOnOffTime = default(bool?), bool? jcrcontentTriggerReceive = default(bool?), bool? jcrcontentTriggerSpecific = default(bool?), string jcrcontentUserId = default(string), string jcrprimaryType = default(string), string operation = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <param name="jcrcontentCqdistribute"> (optional)</param>
        /// <param name="jcrcontentCqdistributeTypeHint"> (optional)</param>
        /// <param name="jcrcontentCqname"> (optional)</param>
        /// <param name="jcrcontentCqtemplate"> (optional)</param>
        /// <param name="jcrcontentEnabled"> (optional)</param>
        /// <param name="jcrcontentJcrdescription"> (optional)</param>
        /// <param name="jcrcontentJcrlastModified"> (optional)</param>
        /// <param name="jcrcontentJcrlastModifiedBy"> (optional)</param>
        /// <param name="jcrcontentJcrmixinTypes"> (optional)</param>
        /// <param name="jcrcontentJcrtitle"> (optional)</param>
        /// <param name="jcrcontentLogLevel"> (optional)</param>
        /// <param name="jcrcontentNoStatusUpdate"> (optional)</param>
        /// <param name="jcrcontentNoVersioning"> (optional)</param>
        /// <param name="jcrcontentProtocolConnectTimeout"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPConnectionClosed"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPExpired"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPHeaders"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPHeadersTypeHint"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPMethod"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPSRelaxed"> (optional)</param>
        /// <param name="jcrcontentProtocolInterface"> (optional)</param>
        /// <param name="jcrcontentProtocolSocketTimeout"> (optional)</param>
        /// <param name="jcrcontentProtocolVersion"> (optional)</param>
        /// <param name="jcrcontentProxyNTLMDomain"> (optional)</param>
        /// <param name="jcrcontentProxyNTLMHost"> (optional)</param>
        /// <param name="jcrcontentProxyHost"> (optional)</param>
        /// <param name="jcrcontentProxyPassword"> (optional)</param>
        /// <param name="jcrcontentProxyPort"> (optional)</param>
        /// <param name="jcrcontentProxyUser"> (optional)</param>
        /// <param name="jcrcontentQueueBatchMaxSize"> (optional)</param>
        /// <param name="jcrcontentQueueBatchMode"> (optional)</param>
        /// <param name="jcrcontentQueueBatchWaitTime"> (optional)</param>
        /// <param name="jcrcontentRetryDelay"> (optional)</param>
        /// <param name="jcrcontentReverseReplication"> (optional)</param>
        /// <param name="jcrcontentSerializationType"> (optional)</param>
        /// <param name="jcrcontentSlingresourceType"> (optional)</param>
        /// <param name="jcrcontentSsl"> (optional)</param>
        /// <param name="jcrcontentTransportNTLMDomain"> (optional)</param>
        /// <param name="jcrcontentTransportNTLMHost"> (optional)</param>
        /// <param name="jcrcontentTransportPassword"> (optional)</param>
        /// <param name="jcrcontentTransportUri"> (optional)</param>
        /// <param name="jcrcontentTransportUser"> (optional)</param>
        /// <param name="jcrcontentTriggerDistribute"> (optional)</param>
        /// <param name="jcrcontentTriggerModified"> (optional)</param>
        /// <param name="jcrcontentTriggerOnOffTime"> (optional)</param>
        /// <param name="jcrcontentTriggerReceive"> (optional)</param>
        /// <param name="jcrcontentTriggerSpecific"> (optional)</param>
        /// <param name="jcrcontentUserId"> (optional)</param>
        /// <param name="jcrprimaryType"> (optional)</param>
        /// <param name="operation"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAgentWithHttpInfo (string runmode, string name, bool? jcrcontentCqdistribute = default(bool?), string jcrcontentCqdistributeTypeHint = default(string), string jcrcontentCqname = default(string), string jcrcontentCqtemplate = default(string), bool? jcrcontentEnabled = default(bool?), string jcrcontentJcrdescription = default(string), string jcrcontentJcrlastModified = default(string), string jcrcontentJcrlastModifiedBy = default(string), string jcrcontentJcrmixinTypes = default(string), string jcrcontentJcrtitle = default(string), string jcrcontentLogLevel = default(string), bool? jcrcontentNoStatusUpdate = default(bool?), bool? jcrcontentNoVersioning = default(bool?), decimal? jcrcontentProtocolConnectTimeout = default(decimal?), bool? jcrcontentProtocolHTTPConnectionClosed = default(bool?), string jcrcontentProtocolHTTPExpired = default(string), List<string> jcrcontentProtocolHTTPHeaders = default(List<string>), string jcrcontentProtocolHTTPHeadersTypeHint = default(string), string jcrcontentProtocolHTTPMethod = default(string), bool? jcrcontentProtocolHTTPSRelaxed = default(bool?), string jcrcontentProtocolInterface = default(string), decimal? jcrcontentProtocolSocketTimeout = default(decimal?), string jcrcontentProtocolVersion = default(string), string jcrcontentProxyNTLMDomain = default(string), string jcrcontentProxyNTLMHost = default(string), string jcrcontentProxyHost = default(string), string jcrcontentProxyPassword = default(string), decimal? jcrcontentProxyPort = default(decimal?), string jcrcontentProxyUser = default(string), decimal? jcrcontentQueueBatchMaxSize = default(decimal?), string jcrcontentQueueBatchMode = default(string), decimal? jcrcontentQueueBatchWaitTime = default(decimal?), string jcrcontentRetryDelay = default(string), bool? jcrcontentReverseReplication = default(bool?), string jcrcontentSerializationType = default(string), string jcrcontentSlingresourceType = default(string), string jcrcontentSsl = default(string), string jcrcontentTransportNTLMDomain = default(string), string jcrcontentTransportNTLMHost = default(string), string jcrcontentTransportPassword = default(string), string jcrcontentTransportUri = default(string), string jcrcontentTransportUser = default(string), bool? jcrcontentTriggerDistribute = default(bool?), bool? jcrcontentTriggerModified = default(bool?), bool? jcrcontentTriggerOnOffTime = default(bool?), bool? jcrcontentTriggerReceive = default(bool?), bool? jcrcontentTriggerSpecific = default(bool?), string jcrcontentUserId = default(string), string jcrprimaryType = default(string), string operation = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <param name="operation"> (optional)</param>
        /// <param name="currentPassword"> (optional)</param>
        /// <param name="newPassword"> (optional)</param>
        /// <param name="rePassword"> (optional)</param>
        /// <param name="keyPassword"> (optional)</param>
        /// <param name="keyStorePass"> (optional)</param>
        /// <param name="alias"> (optional)</param>
        /// <param name="newAlias"> (optional)</param>
        /// <param name="removeAlias"> (optional)</param>
        /// <param name="certChain"> (optional)</param>
        /// <param name="pk"> (optional)</param>
        /// <param name="keyStore"> (optional)</param>
        /// <returns>KeystoreInfo</returns>
        KeystoreInfo PostAuthorizableKeystore (string intermediatePath, string authorizableId, string operation = default(string), string currentPassword = default(string), string newPassword = default(string), string rePassword = default(string), string keyPassword = default(string), string keyStorePass = default(string), string alias = default(string), string newAlias = default(string), string removeAlias = default(string), System.IO.Stream certChain = default(System.IO.Stream), System.IO.Stream pk = default(System.IO.Stream), System.IO.Stream keyStore = default(System.IO.Stream));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <param name="operation"> (optional)</param>
        /// <param name="currentPassword"> (optional)</param>
        /// <param name="newPassword"> (optional)</param>
        /// <param name="rePassword"> (optional)</param>
        /// <param name="keyPassword"> (optional)</param>
        /// <param name="keyStorePass"> (optional)</param>
        /// <param name="alias"> (optional)</param>
        /// <param name="newAlias"> (optional)</param>
        /// <param name="removeAlias"> (optional)</param>
        /// <param name="certChain"> (optional)</param>
        /// <param name="pk"> (optional)</param>
        /// <param name="keyStore"> (optional)</param>
        /// <returns>ApiResponse of KeystoreInfo</returns>
        ApiResponse<KeystoreInfo> PostAuthorizableKeystoreWithHttpInfo (string intermediatePath, string authorizableId, string operation = default(string), string currentPassword = default(string), string newPassword = default(string), string rePassword = default(string), string keyPassword = default(string), string keyStorePass = default(string), string alias = default(string), string newAlias = default(string), string removeAlias = default(string), System.IO.Stream certChain = default(System.IO.Stream), System.IO.Stream pk = default(System.IO.Stream), System.IO.Stream keyStore = default(System.IO.Stream));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizableId"></param>
        /// <param name="intermediatePath"></param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="createGroup"> (optional)</param>
        /// <param name="reppassword"> (optional)</param>
        /// <param name="profileGivenName"> (optional)</param>
        /// <returns>string</returns>
        string PostAuthorizables (string authorizableId, string intermediatePath, string createUser = default(string), string createGroup = default(string), string reppassword = default(string), string profileGivenName = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizableId"></param>
        /// <param name="intermediatePath"></param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="createGroup"> (optional)</param>
        /// <param name="reppassword"> (optional)</param>
        /// <param name="profileGivenName"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostAuthorizablesWithHttpInfo (string authorizableId, string intermediatePath, string createUser = default(string), string createGroup = default(string), string reppassword = default(string), string profileGivenName = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyStorePassword"> (optional)</param>
        /// <param name="keyStorePasswordTypeHint"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="serviceRankingTypeHint"> (optional)</param>
        /// <param name="idpHttpRedirect"> (optional)</param>
        /// <param name="idpHttpRedirectTypeHint"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="createUserTypeHint"> (optional)</param>
        /// <param name="defaultRedirectUrl"> (optional)</param>
        /// <param name="defaultRedirectUrlTypeHint"> (optional)</param>
        /// <param name="userIDAttribute"> (optional)</param>
        /// <param name="userIDAttributeTypeHint"> (optional)</param>
        /// <param name="defaultGroups"> (optional)</param>
        /// <param name="defaultGroupsTypeHint"> (optional)</param>
        /// <param name="idpCertAlias"> (optional)</param>
        /// <param name="idpCertAliasTypeHint"> (optional)</param>
        /// <param name="addGroupMemberships"> (optional)</param>
        /// <param name="addGroupMembershipsTypeHint"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="pathTypeHint"> (optional)</param>
        /// <param name="synchronizeAttributes"> (optional)</param>
        /// <param name="synchronizeAttributesTypeHint"> (optional)</param>
        /// <param name="clockTolerance"> (optional)</param>
        /// <param name="clockToleranceTypeHint"> (optional)</param>
        /// <param name="groupMembershipAttribute"> (optional)</param>
        /// <param name="groupMembershipAttributeTypeHint"> (optional)</param>
        /// <param name="idpUrl"> (optional)</param>
        /// <param name="idpUrlTypeHint"> (optional)</param>
        /// <param name="logoutUrl"> (optional)</param>
        /// <param name="logoutUrlTypeHint"> (optional)</param>
        /// <param name="serviceProviderEntityId"> (optional)</param>
        /// <param name="serviceProviderEntityIdTypeHint"> (optional)</param>
        /// <param name="assertionConsumerServiceURL"> (optional)</param>
        /// <param name="assertionConsumerServiceURLTypeHint"> (optional)</param>
        /// <param name="handleLogout"> (optional)</param>
        /// <param name="handleLogoutTypeHint"> (optional)</param>
        /// <param name="spPrivateKeyAlias"> (optional)</param>
        /// <param name="spPrivateKeyAliasTypeHint"> (optional)</param>
        /// <param name="useEncryption"> (optional)</param>
        /// <param name="useEncryptionTypeHint"> (optional)</param>
        /// <param name="nameIdFormat"> (optional)</param>
        /// <param name="nameIdFormatTypeHint"> (optional)</param>
        /// <param name="digestMethod"> (optional)</param>
        /// <param name="digestMethodTypeHint"> (optional)</param>
        /// <param name="signatureMethod"> (optional)</param>
        /// <param name="signatureMethodTypeHint"> (optional)</param>
        /// <param name="userIntermediatePath"> (optional)</param>
        /// <param name="userIntermediatePathTypeHint"> (optional)</param>
        /// <returns></returns>
        void PostConfigAdobeGraniteSamlAuthenticationHandler (string keyStorePassword = default(string), string keyStorePasswordTypeHint = default(string), int? serviceRanking = default(int?), string serviceRankingTypeHint = default(string), bool? idpHttpRedirect = default(bool?), string idpHttpRedirectTypeHint = default(string), bool? createUser = default(bool?), string createUserTypeHint = default(string), string defaultRedirectUrl = default(string), string defaultRedirectUrlTypeHint = default(string), string userIDAttribute = default(string), string userIDAttributeTypeHint = default(string), List<string> defaultGroups = default(List<string>), string defaultGroupsTypeHint = default(string), string idpCertAlias = default(string), string idpCertAliasTypeHint = default(string), bool? addGroupMemberships = default(bool?), string addGroupMembershipsTypeHint = default(string), List<string> path = default(List<string>), string pathTypeHint = default(string), List<string> synchronizeAttributes = default(List<string>), string synchronizeAttributesTypeHint = default(string), int? clockTolerance = default(int?), string clockToleranceTypeHint = default(string), string groupMembershipAttribute = default(string), string groupMembershipAttributeTypeHint = default(string), string idpUrl = default(string), string idpUrlTypeHint = default(string), string logoutUrl = default(string), string logoutUrlTypeHint = default(string), string serviceProviderEntityId = default(string), string serviceProviderEntityIdTypeHint = default(string), string assertionConsumerServiceURL = default(string), string assertionConsumerServiceURLTypeHint = default(string), bool? handleLogout = default(bool?), string handleLogoutTypeHint = default(string), string spPrivateKeyAlias = default(string), string spPrivateKeyAliasTypeHint = default(string), bool? useEncryption = default(bool?), string useEncryptionTypeHint = default(string), string nameIdFormat = default(string), string nameIdFormatTypeHint = default(string), string digestMethod = default(string), string digestMethodTypeHint = default(string), string signatureMethod = default(string), string signatureMethodTypeHint = default(string), string userIntermediatePath = default(string), string userIntermediatePathTypeHint = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyStorePassword"> (optional)</param>
        /// <param name="keyStorePasswordTypeHint"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="serviceRankingTypeHint"> (optional)</param>
        /// <param name="idpHttpRedirect"> (optional)</param>
        /// <param name="idpHttpRedirectTypeHint"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="createUserTypeHint"> (optional)</param>
        /// <param name="defaultRedirectUrl"> (optional)</param>
        /// <param name="defaultRedirectUrlTypeHint"> (optional)</param>
        /// <param name="userIDAttribute"> (optional)</param>
        /// <param name="userIDAttributeTypeHint"> (optional)</param>
        /// <param name="defaultGroups"> (optional)</param>
        /// <param name="defaultGroupsTypeHint"> (optional)</param>
        /// <param name="idpCertAlias"> (optional)</param>
        /// <param name="idpCertAliasTypeHint"> (optional)</param>
        /// <param name="addGroupMemberships"> (optional)</param>
        /// <param name="addGroupMembershipsTypeHint"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="pathTypeHint"> (optional)</param>
        /// <param name="synchronizeAttributes"> (optional)</param>
        /// <param name="synchronizeAttributesTypeHint"> (optional)</param>
        /// <param name="clockTolerance"> (optional)</param>
        /// <param name="clockToleranceTypeHint"> (optional)</param>
        /// <param name="groupMembershipAttribute"> (optional)</param>
        /// <param name="groupMembershipAttributeTypeHint"> (optional)</param>
        /// <param name="idpUrl"> (optional)</param>
        /// <param name="idpUrlTypeHint"> (optional)</param>
        /// <param name="logoutUrl"> (optional)</param>
        /// <param name="logoutUrlTypeHint"> (optional)</param>
        /// <param name="serviceProviderEntityId"> (optional)</param>
        /// <param name="serviceProviderEntityIdTypeHint"> (optional)</param>
        /// <param name="assertionConsumerServiceURL"> (optional)</param>
        /// <param name="assertionConsumerServiceURLTypeHint"> (optional)</param>
        /// <param name="handleLogout"> (optional)</param>
        /// <param name="handleLogoutTypeHint"> (optional)</param>
        /// <param name="spPrivateKeyAlias"> (optional)</param>
        /// <param name="spPrivateKeyAliasTypeHint"> (optional)</param>
        /// <param name="useEncryption"> (optional)</param>
        /// <param name="useEncryptionTypeHint"> (optional)</param>
        /// <param name="nameIdFormat"> (optional)</param>
        /// <param name="nameIdFormatTypeHint"> (optional)</param>
        /// <param name="digestMethod"> (optional)</param>
        /// <param name="digestMethodTypeHint"> (optional)</param>
        /// <param name="signatureMethod"> (optional)</param>
        /// <param name="signatureMethodTypeHint"> (optional)</param>
        /// <param name="userIntermediatePath"> (optional)</param>
        /// <param name="userIntermediatePathTypeHint"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostConfigAdobeGraniteSamlAuthenticationHandlerWithHttpInfo (string keyStorePassword = default(string), string keyStorePasswordTypeHint = default(string), int? serviceRanking = default(int?), string serviceRankingTypeHint = default(string), bool? idpHttpRedirect = default(bool?), string idpHttpRedirectTypeHint = default(string), bool? createUser = default(bool?), string createUserTypeHint = default(string), string defaultRedirectUrl = default(string), string defaultRedirectUrlTypeHint = default(string), string userIDAttribute = default(string), string userIDAttributeTypeHint = default(string), List<string> defaultGroups = default(List<string>), string defaultGroupsTypeHint = default(string), string idpCertAlias = default(string), string idpCertAliasTypeHint = default(string), bool? addGroupMemberships = default(bool?), string addGroupMembershipsTypeHint = default(string), List<string> path = default(List<string>), string pathTypeHint = default(string), List<string> synchronizeAttributes = default(List<string>), string synchronizeAttributesTypeHint = default(string), int? clockTolerance = default(int?), string clockToleranceTypeHint = default(string), string groupMembershipAttribute = default(string), string groupMembershipAttributeTypeHint = default(string), string idpUrl = default(string), string idpUrlTypeHint = default(string), string logoutUrl = default(string), string logoutUrlTypeHint = default(string), string serviceProviderEntityId = default(string), string serviceProviderEntityIdTypeHint = default(string), string assertionConsumerServiceURL = default(string), string assertionConsumerServiceURLTypeHint = default(string), bool? handleLogout = default(bool?), string handleLogoutTypeHint = default(string), string spPrivateKeyAlias = default(string), string spPrivateKeyAliasTypeHint = default(string), bool? useEncryption = default(bool?), string useEncryptionTypeHint = default(string), string nameIdFormat = default(string), string nameIdFormatTypeHint = default(string), string digestMethod = default(string), string digestMethodTypeHint = default(string), string signatureMethod = default(string), string signatureMethodTypeHint = default(string), string userIntermediatePath = default(string), string userIntermediatePathTypeHint = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgApacheFelixHttpsNio"> (optional)</param>
        /// <param name="orgApacheFelixHttpsNioTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystore"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystorePassword"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystorePasswordTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKey"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyPassword"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyPasswordTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststore"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststoreTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststorePassword"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststorePasswordTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsClientcertificate"> (optional)</param>
        /// <param name="orgApacheFelixHttpsClientcertificateTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsEnable"> (optional)</param>
        /// <param name="orgApacheFelixHttpsEnableTypeHint"> (optional)</param>
        /// <param name="orgOsgiServiceHttpPortSecure"> (optional)</param>
        /// <param name="orgOsgiServiceHttpPortSecureTypeHint"> (optional)</param>
        /// <returns></returns>
        void PostConfigApacheFelixJettyBasedHttpService (bool? orgApacheFelixHttpsNio = default(bool?), string orgApacheFelixHttpsNioTypeHint = default(string), string orgApacheFelixHttpsKeystore = default(string), string orgApacheFelixHttpsKeystoreTypeHint = default(string), string orgApacheFelixHttpsKeystorePassword = default(string), string orgApacheFelixHttpsKeystorePasswordTypeHint = default(string), string orgApacheFelixHttpsKeystoreKey = default(string), string orgApacheFelixHttpsKeystoreKeyTypeHint = default(string), string orgApacheFelixHttpsKeystoreKeyPassword = default(string), string orgApacheFelixHttpsKeystoreKeyPasswordTypeHint = default(string), string orgApacheFelixHttpsTruststore = default(string), string orgApacheFelixHttpsTruststoreTypeHint = default(string), string orgApacheFelixHttpsTruststorePassword = default(string), string orgApacheFelixHttpsTruststorePasswordTypeHint = default(string), string orgApacheFelixHttpsClientcertificate = default(string), string orgApacheFelixHttpsClientcertificateTypeHint = default(string), bool? orgApacheFelixHttpsEnable = default(bool?), string orgApacheFelixHttpsEnableTypeHint = default(string), string orgOsgiServiceHttpPortSecure = default(string), string orgOsgiServiceHttpPortSecureTypeHint = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgApacheFelixHttpsNio"> (optional)</param>
        /// <param name="orgApacheFelixHttpsNioTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystore"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystorePassword"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystorePasswordTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKey"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyPassword"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyPasswordTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststore"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststoreTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststorePassword"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststorePasswordTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsClientcertificate"> (optional)</param>
        /// <param name="orgApacheFelixHttpsClientcertificateTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsEnable"> (optional)</param>
        /// <param name="orgApacheFelixHttpsEnableTypeHint"> (optional)</param>
        /// <param name="orgOsgiServiceHttpPortSecure"> (optional)</param>
        /// <param name="orgOsgiServiceHttpPortSecureTypeHint"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostConfigApacheFelixJettyBasedHttpServiceWithHttpInfo (bool? orgApacheFelixHttpsNio = default(bool?), string orgApacheFelixHttpsNioTypeHint = default(string), string orgApacheFelixHttpsKeystore = default(string), string orgApacheFelixHttpsKeystoreTypeHint = default(string), string orgApacheFelixHttpsKeystorePassword = default(string), string orgApacheFelixHttpsKeystorePasswordTypeHint = default(string), string orgApacheFelixHttpsKeystoreKey = default(string), string orgApacheFelixHttpsKeystoreKeyTypeHint = default(string), string orgApacheFelixHttpsKeystoreKeyPassword = default(string), string orgApacheFelixHttpsKeystoreKeyPasswordTypeHint = default(string), string orgApacheFelixHttpsTruststore = default(string), string orgApacheFelixHttpsTruststoreTypeHint = default(string), string orgApacheFelixHttpsTruststorePassword = default(string), string orgApacheFelixHttpsTruststorePasswordTypeHint = default(string), string orgApacheFelixHttpsClientcertificate = default(string), string orgApacheFelixHttpsClientcertificateTypeHint = default(string), bool? orgApacheFelixHttpsEnable = default(bool?), string orgApacheFelixHttpsEnableTypeHint = default(string), string orgOsgiServiceHttpPortSecure = default(string), string orgOsgiServiceHttpPortSecureTypeHint = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxyHost"> (optional)</param>
        /// <param name="proxyHostTypeHint"> (optional)</param>
        /// <param name="proxyPort"> (optional)</param>
        /// <param name="proxyPortTypeHint"> (optional)</param>
        /// <param name="proxyExceptions"> (optional)</param>
        /// <param name="proxyExceptionsTypeHint"> (optional)</param>
        /// <param name="proxyEnabled"> (optional)</param>
        /// <param name="proxyEnabledTypeHint"> (optional)</param>
        /// <param name="proxyUser"> (optional)</param>
        /// <param name="proxyUserTypeHint"> (optional)</param>
        /// <param name="proxyPassword"> (optional)</param>
        /// <param name="proxyPasswordTypeHint"> (optional)</param>
        /// <returns></returns>
        void PostConfigApacheHttpComponentsProxyConfiguration (string proxyHost = default(string), string proxyHostTypeHint = default(string), int? proxyPort = default(int?), string proxyPortTypeHint = default(string), List<string> proxyExceptions = default(List<string>), string proxyExceptionsTypeHint = default(string), bool? proxyEnabled = default(bool?), string proxyEnabledTypeHint = default(string), string proxyUser = default(string), string proxyUserTypeHint = default(string), string proxyPassword = default(string), string proxyPasswordTypeHint = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxyHost"> (optional)</param>
        /// <param name="proxyHostTypeHint"> (optional)</param>
        /// <param name="proxyPort"> (optional)</param>
        /// <param name="proxyPortTypeHint"> (optional)</param>
        /// <param name="proxyExceptions"> (optional)</param>
        /// <param name="proxyExceptionsTypeHint"> (optional)</param>
        /// <param name="proxyEnabled"> (optional)</param>
        /// <param name="proxyEnabledTypeHint"> (optional)</param>
        /// <param name="proxyUser"> (optional)</param>
        /// <param name="proxyUserTypeHint"> (optional)</param>
        /// <param name="proxyPassword"> (optional)</param>
        /// <param name="proxyPasswordTypeHint"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostConfigApacheHttpComponentsProxyConfigurationWithHttpInfo (string proxyHost = default(string), string proxyHostTypeHint = default(string), int? proxyPort = default(int?), string proxyPortTypeHint = default(string), List<string> proxyExceptions = default(List<string>), string proxyExceptionsTypeHint = default(string), bool? proxyEnabled = default(bool?), string proxyEnabledTypeHint = default(string), string proxyUser = default(string), string proxyUserTypeHint = default(string), string proxyPassword = default(string), string proxyPasswordTypeHint = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"> (optional)</param>
        /// <param name="aliasTypeHint"> (optional)</param>
        /// <param name="davCreateAbsoluteUri"> (optional)</param>
        /// <param name="davCreateAbsoluteUriTypeHint"> (optional)</param>
        /// <returns></returns>
        void PostConfigApacheSlingDavExServlet (string alias = default(string), string aliasTypeHint = default(string), bool? davCreateAbsoluteUri = default(bool?), string davCreateAbsoluteUriTypeHint = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"> (optional)</param>
        /// <param name="aliasTypeHint"> (optional)</param>
        /// <param name="davCreateAbsoluteUri"> (optional)</param>
        /// <param name="davCreateAbsoluteUriTypeHint"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostConfigApacheSlingDavExServletWithHttpInfo (string alias = default(string), string aliasTypeHint = default(string), bool? davCreateAbsoluteUri = default(bool?), string davCreateAbsoluteUriTypeHint = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonMaximumresults"> (optional)</param>
        /// <param name="jsonMaximumresultsTypeHint"> (optional)</param>
        /// <param name="enableHtml"> (optional)</param>
        /// <param name="enableHtmlTypeHint"> (optional)</param>
        /// <param name="enableTxt"> (optional)</param>
        /// <param name="enableTxtTypeHint"> (optional)</param>
        /// <param name="enableXml"> (optional)</param>
        /// <param name="enableXmlTypeHint"> (optional)</param>
        /// <returns></returns>
        void PostConfigApacheSlingGetServlet (string jsonMaximumresults = default(string), string jsonMaximumresultsTypeHint = default(string), bool? enableHtml = default(bool?), string enableHtmlTypeHint = default(string), bool? enableTxt = default(bool?), string enableTxtTypeHint = default(string), bool? enableXml = default(bool?), string enableXmlTypeHint = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonMaximumresults"> (optional)</param>
        /// <param name="jsonMaximumresultsTypeHint"> (optional)</param>
        /// <param name="enableHtml"> (optional)</param>
        /// <param name="enableHtmlTypeHint"> (optional)</param>
        /// <param name="enableTxt"> (optional)</param>
        /// <param name="enableTxtTypeHint"> (optional)</param>
        /// <param name="enableXml"> (optional)</param>
        /// <param name="enableXmlTypeHint"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostConfigApacheSlingGetServletWithHttpInfo (string jsonMaximumresults = default(string), string jsonMaximumresultsTypeHint = default(string), bool? enableHtml = default(bool?), string enableHtmlTypeHint = default(string), bool? enableTxt = default(bool?), string enableTxtTypeHint = default(string), bool? enableXml = default(bool?), string enableXmlTypeHint = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowEmpty"> (optional)</param>
        /// <param name="allowEmptyTypeHint"> (optional)</param>
        /// <param name="allowHosts"> (optional)</param>
        /// <param name="allowHostsTypeHint"> (optional)</param>
        /// <param name="allowHostsRegexp"> (optional)</param>
        /// <param name="allowHostsRegexpTypeHint"> (optional)</param>
        /// <param name="filterMethods"> (optional)</param>
        /// <param name="filterMethodsTypeHint"> (optional)</param>
        /// <returns></returns>
        void PostConfigApacheSlingReferrerFilter (bool? allowEmpty = default(bool?), string allowEmptyTypeHint = default(string), string allowHosts = default(string), string allowHostsTypeHint = default(string), string allowHostsRegexp = default(string), string allowHostsRegexpTypeHint = default(string), string filterMethods = default(string), string filterMethodsTypeHint = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowEmpty"> (optional)</param>
        /// <param name="allowEmptyTypeHint"> (optional)</param>
        /// <param name="allowHosts"> (optional)</param>
        /// <param name="allowHostsTypeHint"> (optional)</param>
        /// <param name="allowHostsRegexp"> (optional)</param>
        /// <param name="allowHostsRegexpTypeHint"> (optional)</param>
        /// <param name="filterMethods"> (optional)</param>
        /// <param name="filterMethodsTypeHint"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostConfigApacheSlingReferrerFilterWithHttpInfo (bool? allowEmpty = default(bool?), string allowEmptyTypeHint = default(string), string allowHosts = default(string), string allowHostsTypeHint = default(string), string allowHostsRegexp = default(string), string allowHostsRegexpTypeHint = default(string), string filterMethods = default(string), string filterMethodsTypeHint = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configNodeName"></param>
        /// <returns></returns>
        void PostConfigProperty (string configNodeName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configNodeName"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostConfigPropertyWithHttpInfo (string configNodeName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <param name="operation"> (optional)</param>
        /// <param name="deleteAuthorizable"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns></returns>
        void PostNode (string path, string name, string operation = default(string), string deleteAuthorizable = default(string), System.IO.Stream file = default(System.IO.Stream));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <param name="operation"> (optional)</param>
        /// <param name="deleteAuthorizable"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostNodeWithHttpInfo (string path, string name, string operation = default(string), string deleteAuthorizable = default(string), System.IO.Stream file = default(System.IO.Stream));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <param name="addMembers"> (optional)</param>
        /// <returns></returns>
        void PostNodeRw (string path, string name, string addMembers = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <param name="addMembers"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostNodeRwWithHttpInfo (string path, string name, string addMembers = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="jcrprimaryType"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        void PostPath (string path, string jcrprimaryType, string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="jcrprimaryType"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPathWithHttpInfo (string path, string jcrprimaryType, string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="pLimit"></param>
        /// <param name="_1property"></param>
        /// <param name="_1propertyValue"></param>
        /// <returns>string</returns>
        string PostQuery (string path, decimal pLimit, string _1property, string _1propertyValue);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="pLimit"></param>
        /// <param name="_1property"></param>
        /// <param name="_1propertyValue"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostQueryWithHttpInfo (string path, decimal pLimit, string _1property, string _1propertyValue);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ignoredeactivated"></param>
        /// <param name="onlymodified"></param>
        /// <param name="path"></param>
        /// <returns></returns>
        void PostTreeActivation (bool ignoredeactivated, bool onlymodified, string path);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ignoredeactivated"></param>
        /// <param name="onlymodified"></param>
        /// <param name="path"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTreeActivationWithHttpInfo (bool ignoredeactivated, bool onlymodified, string path);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operation"> (optional)</param>
        /// <param name="newPassword"> (optional)</param>
        /// <param name="rePassword"> (optional)</param>
        /// <param name="keyStoreType"> (optional)</param>
        /// <param name="removeAlias"> (optional)</param>
        /// <param name="certificate"> (optional)</param>
        /// <returns>string</returns>
        string PostTruststore (string operation = default(string), string newPassword = default(string), string rePassword = default(string), string keyStoreType = default(string), string removeAlias = default(string), System.IO.Stream certificate = default(System.IO.Stream));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operation"> (optional)</param>
        /// <param name="newPassword"> (optional)</param>
        /// <param name="rePassword"> (optional)</param>
        /// <param name="keyStoreType"> (optional)</param>
        /// <param name="removeAlias"> (optional)</param>
        /// <param name="certificate"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostTruststoreWithHttpInfo (string operation = default(string), string newPassword = default(string), string rePassword = default(string), string keyStoreType = default(string), string removeAlias = default(string), System.IO.Stream certificate = default(System.IO.Stream));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="truststoreP12"> (optional)</param>
        /// <returns>string</returns>
        string PostTruststorePKCS12 (System.IO.Stream truststoreP12 = default(System.IO.Stream));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="truststoreP12"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostTruststorePKCS12WithHttpInfo (System.IO.Stream truststoreP12 = default(System.IO.Stream));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAgentAsync (string runmode, string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAgentWithHttpInfoAsync (string runmode, string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteNodeAsync (string path, string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNodeWithHttpInfoAsync (string path, string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAgentAsync (string runmode, string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAgentWithHttpInfoAsync (string runmode, string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetAgentsAsync (string runmode, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetAgentsWithHttpInfoAsync (string runmode, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of KeystoreInfo</returns>
        System.Threading.Tasks.Task<KeystoreInfo> GetAuthorizableKeystoreAsync (string intermediatePath, string authorizableId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (KeystoreInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeystoreInfo>> GetAuthorizableKeystoreWithHttpInfoAsync (string intermediatePath, string authorizableId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetKeystoreAsync (string intermediatePath, string authorizableId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetKeystoreWithHttpInfoAsync (string intermediatePath, string authorizableId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetNodeAsync (string path, string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetNodeWithHttpInfoAsync (string path, string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group"></param>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPackageAsync (string group, string name, string version, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group"></param>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPackageWithHttpInfoAsync (string group, string name, string version, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group"></param>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetPackageFilterAsync (string group, string name, string version, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group"></param>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetPackageFilterWithHttpInfoAsync (string group, string name, string version, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="pLimit"></param>
        /// <param name="_1property"></param>
        /// <param name="_1propertyValue"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetQueryAsync (string path, decimal pLimit, string _1property, string _1propertyValue, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="pLimit"></param>
        /// <param name="_1property"></param>
        /// <param name="_1propertyValue"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetQueryWithHttpInfoAsync (string path, decimal pLimit, string _1property, string _1propertyValue, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetTruststoreAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetTruststoreWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TruststoreInfo</returns>
        System.Threading.Tasks.Task<TruststoreInfo> GetTruststoreInfoAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TruststoreInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TruststoreInfo>> GetTruststoreInfoWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <param name="jcrcontentCqdistribute"> (optional)</param>
        /// <param name="jcrcontentCqdistributeTypeHint"> (optional)</param>
        /// <param name="jcrcontentCqname"> (optional)</param>
        /// <param name="jcrcontentCqtemplate"> (optional)</param>
        /// <param name="jcrcontentEnabled"> (optional)</param>
        /// <param name="jcrcontentJcrdescription"> (optional)</param>
        /// <param name="jcrcontentJcrlastModified"> (optional)</param>
        /// <param name="jcrcontentJcrlastModifiedBy"> (optional)</param>
        /// <param name="jcrcontentJcrmixinTypes"> (optional)</param>
        /// <param name="jcrcontentJcrtitle"> (optional)</param>
        /// <param name="jcrcontentLogLevel"> (optional)</param>
        /// <param name="jcrcontentNoStatusUpdate"> (optional)</param>
        /// <param name="jcrcontentNoVersioning"> (optional)</param>
        /// <param name="jcrcontentProtocolConnectTimeout"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPConnectionClosed"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPExpired"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPHeaders"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPHeadersTypeHint"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPMethod"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPSRelaxed"> (optional)</param>
        /// <param name="jcrcontentProtocolInterface"> (optional)</param>
        /// <param name="jcrcontentProtocolSocketTimeout"> (optional)</param>
        /// <param name="jcrcontentProtocolVersion"> (optional)</param>
        /// <param name="jcrcontentProxyNTLMDomain"> (optional)</param>
        /// <param name="jcrcontentProxyNTLMHost"> (optional)</param>
        /// <param name="jcrcontentProxyHost"> (optional)</param>
        /// <param name="jcrcontentProxyPassword"> (optional)</param>
        /// <param name="jcrcontentProxyPort"> (optional)</param>
        /// <param name="jcrcontentProxyUser"> (optional)</param>
        /// <param name="jcrcontentQueueBatchMaxSize"> (optional)</param>
        /// <param name="jcrcontentQueueBatchMode"> (optional)</param>
        /// <param name="jcrcontentQueueBatchWaitTime"> (optional)</param>
        /// <param name="jcrcontentRetryDelay"> (optional)</param>
        /// <param name="jcrcontentReverseReplication"> (optional)</param>
        /// <param name="jcrcontentSerializationType"> (optional)</param>
        /// <param name="jcrcontentSlingresourceType"> (optional)</param>
        /// <param name="jcrcontentSsl"> (optional)</param>
        /// <param name="jcrcontentTransportNTLMDomain"> (optional)</param>
        /// <param name="jcrcontentTransportNTLMHost"> (optional)</param>
        /// <param name="jcrcontentTransportPassword"> (optional)</param>
        /// <param name="jcrcontentTransportUri"> (optional)</param>
        /// <param name="jcrcontentTransportUser"> (optional)</param>
        /// <param name="jcrcontentTriggerDistribute"> (optional)</param>
        /// <param name="jcrcontentTriggerModified"> (optional)</param>
        /// <param name="jcrcontentTriggerOnOffTime"> (optional)</param>
        /// <param name="jcrcontentTriggerReceive"> (optional)</param>
        /// <param name="jcrcontentTriggerSpecific"> (optional)</param>
        /// <param name="jcrcontentUserId"> (optional)</param>
        /// <param name="jcrprimaryType"> (optional)</param>
        /// <param name="operation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAgentAsync (string runmode, string name, bool? jcrcontentCqdistribute = default(bool?), string jcrcontentCqdistributeTypeHint = default(string), string jcrcontentCqname = default(string), string jcrcontentCqtemplate = default(string), bool? jcrcontentEnabled = default(bool?), string jcrcontentJcrdescription = default(string), string jcrcontentJcrlastModified = default(string), string jcrcontentJcrlastModifiedBy = default(string), string jcrcontentJcrmixinTypes = default(string), string jcrcontentJcrtitle = default(string), string jcrcontentLogLevel = default(string), bool? jcrcontentNoStatusUpdate = default(bool?), bool? jcrcontentNoVersioning = default(bool?), decimal? jcrcontentProtocolConnectTimeout = default(decimal?), bool? jcrcontentProtocolHTTPConnectionClosed = default(bool?), string jcrcontentProtocolHTTPExpired = default(string), List<string> jcrcontentProtocolHTTPHeaders = default(List<string>), string jcrcontentProtocolHTTPHeadersTypeHint = default(string), string jcrcontentProtocolHTTPMethod = default(string), bool? jcrcontentProtocolHTTPSRelaxed = default(bool?), string jcrcontentProtocolInterface = default(string), decimal? jcrcontentProtocolSocketTimeout = default(decimal?), string jcrcontentProtocolVersion = default(string), string jcrcontentProxyNTLMDomain = default(string), string jcrcontentProxyNTLMHost = default(string), string jcrcontentProxyHost = default(string), string jcrcontentProxyPassword = default(string), decimal? jcrcontentProxyPort = default(decimal?), string jcrcontentProxyUser = default(string), decimal? jcrcontentQueueBatchMaxSize = default(decimal?), string jcrcontentQueueBatchMode = default(string), decimal? jcrcontentQueueBatchWaitTime = default(decimal?), string jcrcontentRetryDelay = default(string), bool? jcrcontentReverseReplication = default(bool?), string jcrcontentSerializationType = default(string), string jcrcontentSlingresourceType = default(string), string jcrcontentSsl = default(string), string jcrcontentTransportNTLMDomain = default(string), string jcrcontentTransportNTLMHost = default(string), string jcrcontentTransportPassword = default(string), string jcrcontentTransportUri = default(string), string jcrcontentTransportUser = default(string), bool? jcrcontentTriggerDistribute = default(bool?), bool? jcrcontentTriggerModified = default(bool?), bool? jcrcontentTriggerOnOffTime = default(bool?), bool? jcrcontentTriggerReceive = default(bool?), bool? jcrcontentTriggerSpecific = default(bool?), string jcrcontentUserId = default(string), string jcrprimaryType = default(string), string operation = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <param name="jcrcontentCqdistribute"> (optional)</param>
        /// <param name="jcrcontentCqdistributeTypeHint"> (optional)</param>
        /// <param name="jcrcontentCqname"> (optional)</param>
        /// <param name="jcrcontentCqtemplate"> (optional)</param>
        /// <param name="jcrcontentEnabled"> (optional)</param>
        /// <param name="jcrcontentJcrdescription"> (optional)</param>
        /// <param name="jcrcontentJcrlastModified"> (optional)</param>
        /// <param name="jcrcontentJcrlastModifiedBy"> (optional)</param>
        /// <param name="jcrcontentJcrmixinTypes"> (optional)</param>
        /// <param name="jcrcontentJcrtitle"> (optional)</param>
        /// <param name="jcrcontentLogLevel"> (optional)</param>
        /// <param name="jcrcontentNoStatusUpdate"> (optional)</param>
        /// <param name="jcrcontentNoVersioning"> (optional)</param>
        /// <param name="jcrcontentProtocolConnectTimeout"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPConnectionClosed"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPExpired"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPHeaders"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPHeadersTypeHint"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPMethod"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPSRelaxed"> (optional)</param>
        /// <param name="jcrcontentProtocolInterface"> (optional)</param>
        /// <param name="jcrcontentProtocolSocketTimeout"> (optional)</param>
        /// <param name="jcrcontentProtocolVersion"> (optional)</param>
        /// <param name="jcrcontentProxyNTLMDomain"> (optional)</param>
        /// <param name="jcrcontentProxyNTLMHost"> (optional)</param>
        /// <param name="jcrcontentProxyHost"> (optional)</param>
        /// <param name="jcrcontentProxyPassword"> (optional)</param>
        /// <param name="jcrcontentProxyPort"> (optional)</param>
        /// <param name="jcrcontentProxyUser"> (optional)</param>
        /// <param name="jcrcontentQueueBatchMaxSize"> (optional)</param>
        /// <param name="jcrcontentQueueBatchMode"> (optional)</param>
        /// <param name="jcrcontentQueueBatchWaitTime"> (optional)</param>
        /// <param name="jcrcontentRetryDelay"> (optional)</param>
        /// <param name="jcrcontentReverseReplication"> (optional)</param>
        /// <param name="jcrcontentSerializationType"> (optional)</param>
        /// <param name="jcrcontentSlingresourceType"> (optional)</param>
        /// <param name="jcrcontentSsl"> (optional)</param>
        /// <param name="jcrcontentTransportNTLMDomain"> (optional)</param>
        /// <param name="jcrcontentTransportNTLMHost"> (optional)</param>
        /// <param name="jcrcontentTransportPassword"> (optional)</param>
        /// <param name="jcrcontentTransportUri"> (optional)</param>
        /// <param name="jcrcontentTransportUser"> (optional)</param>
        /// <param name="jcrcontentTriggerDistribute"> (optional)</param>
        /// <param name="jcrcontentTriggerModified"> (optional)</param>
        /// <param name="jcrcontentTriggerOnOffTime"> (optional)</param>
        /// <param name="jcrcontentTriggerReceive"> (optional)</param>
        /// <param name="jcrcontentTriggerSpecific"> (optional)</param>
        /// <param name="jcrcontentUserId"> (optional)</param>
        /// <param name="jcrprimaryType"> (optional)</param>
        /// <param name="operation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAgentWithHttpInfoAsync (string runmode, string name, bool? jcrcontentCqdistribute = default(bool?), string jcrcontentCqdistributeTypeHint = default(string), string jcrcontentCqname = default(string), string jcrcontentCqtemplate = default(string), bool? jcrcontentEnabled = default(bool?), string jcrcontentJcrdescription = default(string), string jcrcontentJcrlastModified = default(string), string jcrcontentJcrlastModifiedBy = default(string), string jcrcontentJcrmixinTypes = default(string), string jcrcontentJcrtitle = default(string), string jcrcontentLogLevel = default(string), bool? jcrcontentNoStatusUpdate = default(bool?), bool? jcrcontentNoVersioning = default(bool?), decimal? jcrcontentProtocolConnectTimeout = default(decimal?), bool? jcrcontentProtocolHTTPConnectionClosed = default(bool?), string jcrcontentProtocolHTTPExpired = default(string), List<string> jcrcontentProtocolHTTPHeaders = default(List<string>), string jcrcontentProtocolHTTPHeadersTypeHint = default(string), string jcrcontentProtocolHTTPMethod = default(string), bool? jcrcontentProtocolHTTPSRelaxed = default(bool?), string jcrcontentProtocolInterface = default(string), decimal? jcrcontentProtocolSocketTimeout = default(decimal?), string jcrcontentProtocolVersion = default(string), string jcrcontentProxyNTLMDomain = default(string), string jcrcontentProxyNTLMHost = default(string), string jcrcontentProxyHost = default(string), string jcrcontentProxyPassword = default(string), decimal? jcrcontentProxyPort = default(decimal?), string jcrcontentProxyUser = default(string), decimal? jcrcontentQueueBatchMaxSize = default(decimal?), string jcrcontentQueueBatchMode = default(string), decimal? jcrcontentQueueBatchWaitTime = default(decimal?), string jcrcontentRetryDelay = default(string), bool? jcrcontentReverseReplication = default(bool?), string jcrcontentSerializationType = default(string), string jcrcontentSlingresourceType = default(string), string jcrcontentSsl = default(string), string jcrcontentTransportNTLMDomain = default(string), string jcrcontentTransportNTLMHost = default(string), string jcrcontentTransportPassword = default(string), string jcrcontentTransportUri = default(string), string jcrcontentTransportUser = default(string), bool? jcrcontentTriggerDistribute = default(bool?), bool? jcrcontentTriggerModified = default(bool?), bool? jcrcontentTriggerOnOffTime = default(bool?), bool? jcrcontentTriggerReceive = default(bool?), bool? jcrcontentTriggerSpecific = default(bool?), string jcrcontentUserId = default(string), string jcrprimaryType = default(string), string operation = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <param name="operation"> (optional)</param>
        /// <param name="currentPassword"> (optional)</param>
        /// <param name="newPassword"> (optional)</param>
        /// <param name="rePassword"> (optional)</param>
        /// <param name="keyPassword"> (optional)</param>
        /// <param name="keyStorePass"> (optional)</param>
        /// <param name="alias"> (optional)</param>
        /// <param name="newAlias"> (optional)</param>
        /// <param name="removeAlias"> (optional)</param>
        /// <param name="certChain"> (optional)</param>
        /// <param name="pk"> (optional)</param>
        /// <param name="keyStore"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of KeystoreInfo</returns>
        System.Threading.Tasks.Task<KeystoreInfo> PostAuthorizableKeystoreAsync (string intermediatePath, string authorizableId, string operation = default(string), string currentPassword = default(string), string newPassword = default(string), string rePassword = default(string), string keyPassword = default(string), string keyStorePass = default(string), string alias = default(string), string newAlias = default(string), string removeAlias = default(string), System.IO.Stream certChain = default(System.IO.Stream), System.IO.Stream pk = default(System.IO.Stream), System.IO.Stream keyStore = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <param name="operation"> (optional)</param>
        /// <param name="currentPassword"> (optional)</param>
        /// <param name="newPassword"> (optional)</param>
        /// <param name="rePassword"> (optional)</param>
        /// <param name="keyPassword"> (optional)</param>
        /// <param name="keyStorePass"> (optional)</param>
        /// <param name="alias"> (optional)</param>
        /// <param name="newAlias"> (optional)</param>
        /// <param name="removeAlias"> (optional)</param>
        /// <param name="certChain"> (optional)</param>
        /// <param name="pk"> (optional)</param>
        /// <param name="keyStore"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (KeystoreInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeystoreInfo>> PostAuthorizableKeystoreWithHttpInfoAsync (string intermediatePath, string authorizableId, string operation = default(string), string currentPassword = default(string), string newPassword = default(string), string rePassword = default(string), string keyPassword = default(string), string keyStorePass = default(string), string alias = default(string), string newAlias = default(string), string removeAlias = default(string), System.IO.Stream certChain = default(System.IO.Stream), System.IO.Stream pk = default(System.IO.Stream), System.IO.Stream keyStore = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizableId"></param>
        /// <param name="intermediatePath"></param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="createGroup"> (optional)</param>
        /// <param name="reppassword"> (optional)</param>
        /// <param name="profileGivenName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostAuthorizablesAsync (string authorizableId, string intermediatePath, string createUser = default(string), string createGroup = default(string), string reppassword = default(string), string profileGivenName = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizableId"></param>
        /// <param name="intermediatePath"></param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="createGroup"> (optional)</param>
        /// <param name="reppassword"> (optional)</param>
        /// <param name="profileGivenName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostAuthorizablesWithHttpInfoAsync (string authorizableId, string intermediatePath, string createUser = default(string), string createGroup = default(string), string reppassword = default(string), string profileGivenName = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyStorePassword"> (optional)</param>
        /// <param name="keyStorePasswordTypeHint"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="serviceRankingTypeHint"> (optional)</param>
        /// <param name="idpHttpRedirect"> (optional)</param>
        /// <param name="idpHttpRedirectTypeHint"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="createUserTypeHint"> (optional)</param>
        /// <param name="defaultRedirectUrl"> (optional)</param>
        /// <param name="defaultRedirectUrlTypeHint"> (optional)</param>
        /// <param name="userIDAttribute"> (optional)</param>
        /// <param name="userIDAttributeTypeHint"> (optional)</param>
        /// <param name="defaultGroups"> (optional)</param>
        /// <param name="defaultGroupsTypeHint"> (optional)</param>
        /// <param name="idpCertAlias"> (optional)</param>
        /// <param name="idpCertAliasTypeHint"> (optional)</param>
        /// <param name="addGroupMemberships"> (optional)</param>
        /// <param name="addGroupMembershipsTypeHint"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="pathTypeHint"> (optional)</param>
        /// <param name="synchronizeAttributes"> (optional)</param>
        /// <param name="synchronizeAttributesTypeHint"> (optional)</param>
        /// <param name="clockTolerance"> (optional)</param>
        /// <param name="clockToleranceTypeHint"> (optional)</param>
        /// <param name="groupMembershipAttribute"> (optional)</param>
        /// <param name="groupMembershipAttributeTypeHint"> (optional)</param>
        /// <param name="idpUrl"> (optional)</param>
        /// <param name="idpUrlTypeHint"> (optional)</param>
        /// <param name="logoutUrl"> (optional)</param>
        /// <param name="logoutUrlTypeHint"> (optional)</param>
        /// <param name="serviceProviderEntityId"> (optional)</param>
        /// <param name="serviceProviderEntityIdTypeHint"> (optional)</param>
        /// <param name="assertionConsumerServiceURL"> (optional)</param>
        /// <param name="assertionConsumerServiceURLTypeHint"> (optional)</param>
        /// <param name="handleLogout"> (optional)</param>
        /// <param name="handleLogoutTypeHint"> (optional)</param>
        /// <param name="spPrivateKeyAlias"> (optional)</param>
        /// <param name="spPrivateKeyAliasTypeHint"> (optional)</param>
        /// <param name="useEncryption"> (optional)</param>
        /// <param name="useEncryptionTypeHint"> (optional)</param>
        /// <param name="nameIdFormat"> (optional)</param>
        /// <param name="nameIdFormatTypeHint"> (optional)</param>
        /// <param name="digestMethod"> (optional)</param>
        /// <param name="digestMethodTypeHint"> (optional)</param>
        /// <param name="signatureMethod"> (optional)</param>
        /// <param name="signatureMethodTypeHint"> (optional)</param>
        /// <param name="userIntermediatePath"> (optional)</param>
        /// <param name="userIntermediatePathTypeHint"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostConfigAdobeGraniteSamlAuthenticationHandlerAsync (string keyStorePassword = default(string), string keyStorePasswordTypeHint = default(string), int? serviceRanking = default(int?), string serviceRankingTypeHint = default(string), bool? idpHttpRedirect = default(bool?), string idpHttpRedirectTypeHint = default(string), bool? createUser = default(bool?), string createUserTypeHint = default(string), string defaultRedirectUrl = default(string), string defaultRedirectUrlTypeHint = default(string), string userIDAttribute = default(string), string userIDAttributeTypeHint = default(string), List<string> defaultGroups = default(List<string>), string defaultGroupsTypeHint = default(string), string idpCertAlias = default(string), string idpCertAliasTypeHint = default(string), bool? addGroupMemberships = default(bool?), string addGroupMembershipsTypeHint = default(string), List<string> path = default(List<string>), string pathTypeHint = default(string), List<string> synchronizeAttributes = default(List<string>), string synchronizeAttributesTypeHint = default(string), int? clockTolerance = default(int?), string clockToleranceTypeHint = default(string), string groupMembershipAttribute = default(string), string groupMembershipAttributeTypeHint = default(string), string idpUrl = default(string), string idpUrlTypeHint = default(string), string logoutUrl = default(string), string logoutUrlTypeHint = default(string), string serviceProviderEntityId = default(string), string serviceProviderEntityIdTypeHint = default(string), string assertionConsumerServiceURL = default(string), string assertionConsumerServiceURLTypeHint = default(string), bool? handleLogout = default(bool?), string handleLogoutTypeHint = default(string), string spPrivateKeyAlias = default(string), string spPrivateKeyAliasTypeHint = default(string), bool? useEncryption = default(bool?), string useEncryptionTypeHint = default(string), string nameIdFormat = default(string), string nameIdFormatTypeHint = default(string), string digestMethod = default(string), string digestMethodTypeHint = default(string), string signatureMethod = default(string), string signatureMethodTypeHint = default(string), string userIntermediatePath = default(string), string userIntermediatePathTypeHint = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyStorePassword"> (optional)</param>
        /// <param name="keyStorePasswordTypeHint"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="serviceRankingTypeHint"> (optional)</param>
        /// <param name="idpHttpRedirect"> (optional)</param>
        /// <param name="idpHttpRedirectTypeHint"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="createUserTypeHint"> (optional)</param>
        /// <param name="defaultRedirectUrl"> (optional)</param>
        /// <param name="defaultRedirectUrlTypeHint"> (optional)</param>
        /// <param name="userIDAttribute"> (optional)</param>
        /// <param name="userIDAttributeTypeHint"> (optional)</param>
        /// <param name="defaultGroups"> (optional)</param>
        /// <param name="defaultGroupsTypeHint"> (optional)</param>
        /// <param name="idpCertAlias"> (optional)</param>
        /// <param name="idpCertAliasTypeHint"> (optional)</param>
        /// <param name="addGroupMemberships"> (optional)</param>
        /// <param name="addGroupMembershipsTypeHint"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="pathTypeHint"> (optional)</param>
        /// <param name="synchronizeAttributes"> (optional)</param>
        /// <param name="synchronizeAttributesTypeHint"> (optional)</param>
        /// <param name="clockTolerance"> (optional)</param>
        /// <param name="clockToleranceTypeHint"> (optional)</param>
        /// <param name="groupMembershipAttribute"> (optional)</param>
        /// <param name="groupMembershipAttributeTypeHint"> (optional)</param>
        /// <param name="idpUrl"> (optional)</param>
        /// <param name="idpUrlTypeHint"> (optional)</param>
        /// <param name="logoutUrl"> (optional)</param>
        /// <param name="logoutUrlTypeHint"> (optional)</param>
        /// <param name="serviceProviderEntityId"> (optional)</param>
        /// <param name="serviceProviderEntityIdTypeHint"> (optional)</param>
        /// <param name="assertionConsumerServiceURL"> (optional)</param>
        /// <param name="assertionConsumerServiceURLTypeHint"> (optional)</param>
        /// <param name="handleLogout"> (optional)</param>
        /// <param name="handleLogoutTypeHint"> (optional)</param>
        /// <param name="spPrivateKeyAlias"> (optional)</param>
        /// <param name="spPrivateKeyAliasTypeHint"> (optional)</param>
        /// <param name="useEncryption"> (optional)</param>
        /// <param name="useEncryptionTypeHint"> (optional)</param>
        /// <param name="nameIdFormat"> (optional)</param>
        /// <param name="nameIdFormatTypeHint"> (optional)</param>
        /// <param name="digestMethod"> (optional)</param>
        /// <param name="digestMethodTypeHint"> (optional)</param>
        /// <param name="signatureMethod"> (optional)</param>
        /// <param name="signatureMethodTypeHint"> (optional)</param>
        /// <param name="userIntermediatePath"> (optional)</param>
        /// <param name="userIntermediatePathTypeHint"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostConfigAdobeGraniteSamlAuthenticationHandlerWithHttpInfoAsync (string keyStorePassword = default(string), string keyStorePasswordTypeHint = default(string), int? serviceRanking = default(int?), string serviceRankingTypeHint = default(string), bool? idpHttpRedirect = default(bool?), string idpHttpRedirectTypeHint = default(string), bool? createUser = default(bool?), string createUserTypeHint = default(string), string defaultRedirectUrl = default(string), string defaultRedirectUrlTypeHint = default(string), string userIDAttribute = default(string), string userIDAttributeTypeHint = default(string), List<string> defaultGroups = default(List<string>), string defaultGroupsTypeHint = default(string), string idpCertAlias = default(string), string idpCertAliasTypeHint = default(string), bool? addGroupMemberships = default(bool?), string addGroupMembershipsTypeHint = default(string), List<string> path = default(List<string>), string pathTypeHint = default(string), List<string> synchronizeAttributes = default(List<string>), string synchronizeAttributesTypeHint = default(string), int? clockTolerance = default(int?), string clockToleranceTypeHint = default(string), string groupMembershipAttribute = default(string), string groupMembershipAttributeTypeHint = default(string), string idpUrl = default(string), string idpUrlTypeHint = default(string), string logoutUrl = default(string), string logoutUrlTypeHint = default(string), string serviceProviderEntityId = default(string), string serviceProviderEntityIdTypeHint = default(string), string assertionConsumerServiceURL = default(string), string assertionConsumerServiceURLTypeHint = default(string), bool? handleLogout = default(bool?), string handleLogoutTypeHint = default(string), string spPrivateKeyAlias = default(string), string spPrivateKeyAliasTypeHint = default(string), bool? useEncryption = default(bool?), string useEncryptionTypeHint = default(string), string nameIdFormat = default(string), string nameIdFormatTypeHint = default(string), string digestMethod = default(string), string digestMethodTypeHint = default(string), string signatureMethod = default(string), string signatureMethodTypeHint = default(string), string userIntermediatePath = default(string), string userIntermediatePathTypeHint = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgApacheFelixHttpsNio"> (optional)</param>
        /// <param name="orgApacheFelixHttpsNioTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystore"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystorePassword"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystorePasswordTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKey"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyPassword"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyPasswordTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststore"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststoreTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststorePassword"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststorePasswordTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsClientcertificate"> (optional)</param>
        /// <param name="orgApacheFelixHttpsClientcertificateTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsEnable"> (optional)</param>
        /// <param name="orgApacheFelixHttpsEnableTypeHint"> (optional)</param>
        /// <param name="orgOsgiServiceHttpPortSecure"> (optional)</param>
        /// <param name="orgOsgiServiceHttpPortSecureTypeHint"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostConfigApacheFelixJettyBasedHttpServiceAsync (bool? orgApacheFelixHttpsNio = default(bool?), string orgApacheFelixHttpsNioTypeHint = default(string), string orgApacheFelixHttpsKeystore = default(string), string orgApacheFelixHttpsKeystoreTypeHint = default(string), string orgApacheFelixHttpsKeystorePassword = default(string), string orgApacheFelixHttpsKeystorePasswordTypeHint = default(string), string orgApacheFelixHttpsKeystoreKey = default(string), string orgApacheFelixHttpsKeystoreKeyTypeHint = default(string), string orgApacheFelixHttpsKeystoreKeyPassword = default(string), string orgApacheFelixHttpsKeystoreKeyPasswordTypeHint = default(string), string orgApacheFelixHttpsTruststore = default(string), string orgApacheFelixHttpsTruststoreTypeHint = default(string), string orgApacheFelixHttpsTruststorePassword = default(string), string orgApacheFelixHttpsTruststorePasswordTypeHint = default(string), string orgApacheFelixHttpsClientcertificate = default(string), string orgApacheFelixHttpsClientcertificateTypeHint = default(string), bool? orgApacheFelixHttpsEnable = default(bool?), string orgApacheFelixHttpsEnableTypeHint = default(string), string orgOsgiServiceHttpPortSecure = default(string), string orgOsgiServiceHttpPortSecureTypeHint = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgApacheFelixHttpsNio"> (optional)</param>
        /// <param name="orgApacheFelixHttpsNioTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystore"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystorePassword"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystorePasswordTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKey"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyPassword"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyPasswordTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststore"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststoreTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststorePassword"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststorePasswordTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsClientcertificate"> (optional)</param>
        /// <param name="orgApacheFelixHttpsClientcertificateTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsEnable"> (optional)</param>
        /// <param name="orgApacheFelixHttpsEnableTypeHint"> (optional)</param>
        /// <param name="orgOsgiServiceHttpPortSecure"> (optional)</param>
        /// <param name="orgOsgiServiceHttpPortSecureTypeHint"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostConfigApacheFelixJettyBasedHttpServiceWithHttpInfoAsync (bool? orgApacheFelixHttpsNio = default(bool?), string orgApacheFelixHttpsNioTypeHint = default(string), string orgApacheFelixHttpsKeystore = default(string), string orgApacheFelixHttpsKeystoreTypeHint = default(string), string orgApacheFelixHttpsKeystorePassword = default(string), string orgApacheFelixHttpsKeystorePasswordTypeHint = default(string), string orgApacheFelixHttpsKeystoreKey = default(string), string orgApacheFelixHttpsKeystoreKeyTypeHint = default(string), string orgApacheFelixHttpsKeystoreKeyPassword = default(string), string orgApacheFelixHttpsKeystoreKeyPasswordTypeHint = default(string), string orgApacheFelixHttpsTruststore = default(string), string orgApacheFelixHttpsTruststoreTypeHint = default(string), string orgApacheFelixHttpsTruststorePassword = default(string), string orgApacheFelixHttpsTruststorePasswordTypeHint = default(string), string orgApacheFelixHttpsClientcertificate = default(string), string orgApacheFelixHttpsClientcertificateTypeHint = default(string), bool? orgApacheFelixHttpsEnable = default(bool?), string orgApacheFelixHttpsEnableTypeHint = default(string), string orgOsgiServiceHttpPortSecure = default(string), string orgOsgiServiceHttpPortSecureTypeHint = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxyHost"> (optional)</param>
        /// <param name="proxyHostTypeHint"> (optional)</param>
        /// <param name="proxyPort"> (optional)</param>
        /// <param name="proxyPortTypeHint"> (optional)</param>
        /// <param name="proxyExceptions"> (optional)</param>
        /// <param name="proxyExceptionsTypeHint"> (optional)</param>
        /// <param name="proxyEnabled"> (optional)</param>
        /// <param name="proxyEnabledTypeHint"> (optional)</param>
        /// <param name="proxyUser"> (optional)</param>
        /// <param name="proxyUserTypeHint"> (optional)</param>
        /// <param name="proxyPassword"> (optional)</param>
        /// <param name="proxyPasswordTypeHint"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostConfigApacheHttpComponentsProxyConfigurationAsync (string proxyHost = default(string), string proxyHostTypeHint = default(string), int? proxyPort = default(int?), string proxyPortTypeHint = default(string), List<string> proxyExceptions = default(List<string>), string proxyExceptionsTypeHint = default(string), bool? proxyEnabled = default(bool?), string proxyEnabledTypeHint = default(string), string proxyUser = default(string), string proxyUserTypeHint = default(string), string proxyPassword = default(string), string proxyPasswordTypeHint = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxyHost"> (optional)</param>
        /// <param name="proxyHostTypeHint"> (optional)</param>
        /// <param name="proxyPort"> (optional)</param>
        /// <param name="proxyPortTypeHint"> (optional)</param>
        /// <param name="proxyExceptions"> (optional)</param>
        /// <param name="proxyExceptionsTypeHint"> (optional)</param>
        /// <param name="proxyEnabled"> (optional)</param>
        /// <param name="proxyEnabledTypeHint"> (optional)</param>
        /// <param name="proxyUser"> (optional)</param>
        /// <param name="proxyUserTypeHint"> (optional)</param>
        /// <param name="proxyPassword"> (optional)</param>
        /// <param name="proxyPasswordTypeHint"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostConfigApacheHttpComponentsProxyConfigurationWithHttpInfoAsync (string proxyHost = default(string), string proxyHostTypeHint = default(string), int? proxyPort = default(int?), string proxyPortTypeHint = default(string), List<string> proxyExceptions = default(List<string>), string proxyExceptionsTypeHint = default(string), bool? proxyEnabled = default(bool?), string proxyEnabledTypeHint = default(string), string proxyUser = default(string), string proxyUserTypeHint = default(string), string proxyPassword = default(string), string proxyPasswordTypeHint = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"> (optional)</param>
        /// <param name="aliasTypeHint"> (optional)</param>
        /// <param name="davCreateAbsoluteUri"> (optional)</param>
        /// <param name="davCreateAbsoluteUriTypeHint"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostConfigApacheSlingDavExServletAsync (string alias = default(string), string aliasTypeHint = default(string), bool? davCreateAbsoluteUri = default(bool?), string davCreateAbsoluteUriTypeHint = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"> (optional)</param>
        /// <param name="aliasTypeHint"> (optional)</param>
        /// <param name="davCreateAbsoluteUri"> (optional)</param>
        /// <param name="davCreateAbsoluteUriTypeHint"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostConfigApacheSlingDavExServletWithHttpInfoAsync (string alias = default(string), string aliasTypeHint = default(string), bool? davCreateAbsoluteUri = default(bool?), string davCreateAbsoluteUriTypeHint = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonMaximumresults"> (optional)</param>
        /// <param name="jsonMaximumresultsTypeHint"> (optional)</param>
        /// <param name="enableHtml"> (optional)</param>
        /// <param name="enableHtmlTypeHint"> (optional)</param>
        /// <param name="enableTxt"> (optional)</param>
        /// <param name="enableTxtTypeHint"> (optional)</param>
        /// <param name="enableXml"> (optional)</param>
        /// <param name="enableXmlTypeHint"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostConfigApacheSlingGetServletAsync (string jsonMaximumresults = default(string), string jsonMaximumresultsTypeHint = default(string), bool? enableHtml = default(bool?), string enableHtmlTypeHint = default(string), bool? enableTxt = default(bool?), string enableTxtTypeHint = default(string), bool? enableXml = default(bool?), string enableXmlTypeHint = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonMaximumresults"> (optional)</param>
        /// <param name="jsonMaximumresultsTypeHint"> (optional)</param>
        /// <param name="enableHtml"> (optional)</param>
        /// <param name="enableHtmlTypeHint"> (optional)</param>
        /// <param name="enableTxt"> (optional)</param>
        /// <param name="enableTxtTypeHint"> (optional)</param>
        /// <param name="enableXml"> (optional)</param>
        /// <param name="enableXmlTypeHint"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostConfigApacheSlingGetServletWithHttpInfoAsync (string jsonMaximumresults = default(string), string jsonMaximumresultsTypeHint = default(string), bool? enableHtml = default(bool?), string enableHtmlTypeHint = default(string), bool? enableTxt = default(bool?), string enableTxtTypeHint = default(string), bool? enableXml = default(bool?), string enableXmlTypeHint = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowEmpty"> (optional)</param>
        /// <param name="allowEmptyTypeHint"> (optional)</param>
        /// <param name="allowHosts"> (optional)</param>
        /// <param name="allowHostsTypeHint"> (optional)</param>
        /// <param name="allowHostsRegexp"> (optional)</param>
        /// <param name="allowHostsRegexpTypeHint"> (optional)</param>
        /// <param name="filterMethods"> (optional)</param>
        /// <param name="filterMethodsTypeHint"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostConfigApacheSlingReferrerFilterAsync (bool? allowEmpty = default(bool?), string allowEmptyTypeHint = default(string), string allowHosts = default(string), string allowHostsTypeHint = default(string), string allowHostsRegexp = default(string), string allowHostsRegexpTypeHint = default(string), string filterMethods = default(string), string filterMethodsTypeHint = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowEmpty"> (optional)</param>
        /// <param name="allowEmptyTypeHint"> (optional)</param>
        /// <param name="allowHosts"> (optional)</param>
        /// <param name="allowHostsTypeHint"> (optional)</param>
        /// <param name="allowHostsRegexp"> (optional)</param>
        /// <param name="allowHostsRegexpTypeHint"> (optional)</param>
        /// <param name="filterMethods"> (optional)</param>
        /// <param name="filterMethodsTypeHint"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostConfigApacheSlingReferrerFilterWithHttpInfoAsync (bool? allowEmpty = default(bool?), string allowEmptyTypeHint = default(string), string allowHosts = default(string), string allowHostsTypeHint = default(string), string allowHostsRegexp = default(string), string allowHostsRegexpTypeHint = default(string), string filterMethods = default(string), string filterMethodsTypeHint = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configNodeName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostConfigPropertyAsync (string configNodeName, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configNodeName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostConfigPropertyWithHttpInfoAsync (string configNodeName, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <param name="operation"> (optional)</param>
        /// <param name="deleteAuthorizable"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostNodeAsync (string path, string name, string operation = default(string), string deleteAuthorizable = default(string), System.IO.Stream file = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <param name="operation"> (optional)</param>
        /// <param name="deleteAuthorizable"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostNodeWithHttpInfoAsync (string path, string name, string operation = default(string), string deleteAuthorizable = default(string), System.IO.Stream file = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <param name="addMembers"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostNodeRwAsync (string path, string name, string addMembers = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <param name="addMembers"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostNodeRwWithHttpInfoAsync (string path, string name, string addMembers = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="jcrprimaryType"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostPathAsync (string path, string jcrprimaryType, string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="jcrprimaryType"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostPathWithHttpInfoAsync (string path, string jcrprimaryType, string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="pLimit"></param>
        /// <param name="_1property"></param>
        /// <param name="_1propertyValue"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostQueryAsync (string path, decimal pLimit, string _1property, string _1propertyValue, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="pLimit"></param>
        /// <param name="_1property"></param>
        /// <param name="_1propertyValue"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostQueryWithHttpInfoAsync (string path, decimal pLimit, string _1property, string _1propertyValue, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ignoredeactivated"></param>
        /// <param name="onlymodified"></param>
        /// <param name="path"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostTreeActivationAsync (bool ignoredeactivated, bool onlymodified, string path, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ignoredeactivated"></param>
        /// <param name="onlymodified"></param>
        /// <param name="path"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostTreeActivationWithHttpInfoAsync (bool ignoredeactivated, bool onlymodified, string path, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operation"> (optional)</param>
        /// <param name="newPassword"> (optional)</param>
        /// <param name="rePassword"> (optional)</param>
        /// <param name="keyStoreType"> (optional)</param>
        /// <param name="removeAlias"> (optional)</param>
        /// <param name="certificate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostTruststoreAsync (string operation = default(string), string newPassword = default(string), string rePassword = default(string), string keyStoreType = default(string), string removeAlias = default(string), System.IO.Stream certificate = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operation"> (optional)</param>
        /// <param name="newPassword"> (optional)</param>
        /// <param name="rePassword"> (optional)</param>
        /// <param name="keyStoreType"> (optional)</param>
        /// <param name="removeAlias"> (optional)</param>
        /// <param name="certificate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostTruststoreWithHttpInfoAsync (string operation = default(string), string newPassword = default(string), string rePassword = default(string), string keyStoreType = default(string), string removeAlias = default(string), System.IO.Stream certificate = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="truststoreP12"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostTruststorePKCS12Async (System.IO.Stream truststoreP12 = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="truststoreP12"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostTruststorePKCS12WithHttpInfoAsync (System.IO.Stream truststoreP12 = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SlingApi : ISlingApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SlingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SlingApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SlingApi"/> class
        /// </summary>
        /// <returns></returns>
        public SlingApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SlingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SlingApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        public void DeleteAgent (string runmode, string name)
        {
             DeleteAgentWithHttpInfo(runmode, name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAgentWithHttpInfo (string runmode, string name)
        {
            // verify the required parameter 'runmode' is set
            if (runmode == null)
                throw new ApiException(400, "Missing required parameter 'runmode' when calling SlingApi->DeleteAgent");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SlingApi->DeleteAgent");

            var localVarPath = "/etc/replication/agents.{runmode}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (runmode != null) localVarPathParams.Add("runmode", this.Configuration.ApiClient.ParameterToString(runmode)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAgent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAgentAsync (string runmode, string name, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteAgentWithHttpInfoAsync(runmode, name, cancellationToken);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAgentWithHttpInfoAsync (string runmode, string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'runmode' is set
            if (runmode == null)
                throw new ApiException(400, "Missing required parameter 'runmode' when calling SlingApi->DeleteAgent");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SlingApi->DeleteAgent");

            var localVarPath = "/etc/replication/agents.{runmode}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (runmode != null) localVarPathParams.Add("runmode", this.Configuration.ApiClient.ParameterToString(runmode)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAgent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        public void DeleteNode (string path, string name)
        {
             DeleteNodeWithHttpInfo(path, name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteNodeWithHttpInfo (string path, string name)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling SlingApi->DeleteNode");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SlingApi->DeleteNode");

            var localVarPath = "/{path}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteNodeAsync (string path, string name, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteNodeWithHttpInfoAsync(path, name, cancellationToken);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNodeWithHttpInfoAsync (string path, string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling SlingApi->DeleteNode");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SlingApi->DeleteNode");

            var localVarPath = "/{path}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        public void GetAgent (string runmode, string name)
        {
             GetAgentWithHttpInfo(runmode, name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetAgentWithHttpInfo (string runmode, string name)
        {
            // verify the required parameter 'runmode' is set
            if (runmode == null)
                throw new ApiException(400, "Missing required parameter 'runmode' when calling SlingApi->GetAgent");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SlingApi->GetAgent");

            var localVarPath = "/etc/replication/agents.{runmode}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (runmode != null) localVarPathParams.Add("runmode", this.Configuration.ApiClient.ParameterToString(runmode)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAgent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAgentAsync (string runmode, string name, CancellationToken cancellationToken = default(CancellationToken))
        {
             await GetAgentWithHttpInfoAsync(runmode, name, cancellationToken);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetAgentWithHttpInfoAsync (string runmode, string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'runmode' is set
            if (runmode == null)
                throw new ApiException(400, "Missing required parameter 'runmode' when calling SlingApi->GetAgent");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SlingApi->GetAgent");

            var localVarPath = "/etc/replication/agents.{runmode}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (runmode != null) localVarPathParams.Add("runmode", this.Configuration.ApiClient.ParameterToString(runmode)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAgent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <returns>string</returns>
        public string GetAgents (string runmode)
        {
             ApiResponse<string> localVarResponse = GetAgentsWithHttpInfo(runmode);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> GetAgentsWithHttpInfo (string runmode)
        {
            // verify the required parameter 'runmode' is set
            if (runmode == null)
                throw new ApiException(400, "Missing required parameter 'runmode' when calling SlingApi->GetAgents");

            var localVarPath = "/etc/replication/agents.{runmode}.-1.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (runmode != null) localVarPathParams.Add("runmode", this.Configuration.ApiClient.ParameterToString(runmode)); // path parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAgents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetAgentsAsync (string runmode, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<string> localVarResponse = await GetAgentsWithHttpInfoAsync(runmode, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetAgentsWithHttpInfoAsync (string runmode, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'runmode' is set
            if (runmode == null)
                throw new ApiException(400, "Missing required parameter 'runmode' when calling SlingApi->GetAgents");

            var localVarPath = "/etc/replication/agents.{runmode}.-1.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (runmode != null) localVarPathParams.Add("runmode", this.Configuration.ApiClient.ParameterToString(runmode)); // path parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAgents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <returns>KeystoreInfo</returns>
        public KeystoreInfo GetAuthorizableKeystore (string intermediatePath, string authorizableId)
        {
             ApiResponse<KeystoreInfo> localVarResponse = GetAuthorizableKeystoreWithHttpInfo(intermediatePath, authorizableId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <returns>ApiResponse of KeystoreInfo</returns>
        public ApiResponse<KeystoreInfo> GetAuthorizableKeystoreWithHttpInfo (string intermediatePath, string authorizableId)
        {
            // verify the required parameter 'intermediatePath' is set
            if (intermediatePath == null)
                throw new ApiException(400, "Missing required parameter 'intermediatePath' when calling SlingApi->GetAuthorizableKeystore");
            // verify the required parameter 'authorizableId' is set
            if (authorizableId == null)
                throw new ApiException(400, "Missing required parameter 'authorizableId' when calling SlingApi->GetAuthorizableKeystore");

            var localVarPath = "/{intermediatePath}/{authorizableId}.ks.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (intermediatePath != null) localVarPathParams.Add("intermediatePath", this.Configuration.ApiClient.ParameterToString(intermediatePath)); // path parameter
            if (authorizableId != null) localVarPathParams.Add("authorizableId", this.Configuration.ApiClient.ParameterToString(authorizableId)); // path parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuthorizableKeystore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeystoreInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (KeystoreInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeystoreInfo)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of KeystoreInfo</returns>
        public async System.Threading.Tasks.Task<KeystoreInfo> GetAuthorizableKeystoreAsync (string intermediatePath, string authorizableId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<KeystoreInfo> localVarResponse = await GetAuthorizableKeystoreWithHttpInfoAsync(intermediatePath, authorizableId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (KeystoreInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeystoreInfo>> GetAuthorizableKeystoreWithHttpInfoAsync (string intermediatePath, string authorizableId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'intermediatePath' is set
            if (intermediatePath == null)
                throw new ApiException(400, "Missing required parameter 'intermediatePath' when calling SlingApi->GetAuthorizableKeystore");
            // verify the required parameter 'authorizableId' is set
            if (authorizableId == null)
                throw new ApiException(400, "Missing required parameter 'authorizableId' when calling SlingApi->GetAuthorizableKeystore");

            var localVarPath = "/{intermediatePath}/{authorizableId}.ks.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (intermediatePath != null) localVarPathParams.Add("intermediatePath", this.Configuration.ApiClient.ParameterToString(intermediatePath)); // path parameter
            if (authorizableId != null) localVarPathParams.Add("authorizableId", this.Configuration.ApiClient.ParameterToString(authorizableId)); // path parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuthorizableKeystore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeystoreInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (KeystoreInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeystoreInfo)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetKeystore (string intermediatePath, string authorizableId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetKeystoreWithHttpInfo(intermediatePath, authorizableId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetKeystoreWithHttpInfo (string intermediatePath, string authorizableId)
        {
            // verify the required parameter 'intermediatePath' is set
            if (intermediatePath == null)
                throw new ApiException(400, "Missing required parameter 'intermediatePath' when calling SlingApi->GetKeystore");
            // verify the required parameter 'authorizableId' is set
            if (authorizableId == null)
                throw new ApiException(400, "Missing required parameter 'authorizableId' when calling SlingApi->GetKeystore");

            var localVarPath = "/{intermediatePath}/{authorizableId}/keystore/store.p12";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (intermediatePath != null) localVarPathParams.Add("intermediatePath", this.Configuration.ApiClient.ParameterToString(intermediatePath)); // path parameter
            if (authorizableId != null) localVarPathParams.Add("authorizableId", this.Configuration.ApiClient.ParameterToString(authorizableId)); // path parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKeystore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetKeystoreAsync (string intermediatePath, string authorizableId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetKeystoreWithHttpInfoAsync(intermediatePath, authorizableId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetKeystoreWithHttpInfoAsync (string intermediatePath, string authorizableId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'intermediatePath' is set
            if (intermediatePath == null)
                throw new ApiException(400, "Missing required parameter 'intermediatePath' when calling SlingApi->GetKeystore");
            // verify the required parameter 'authorizableId' is set
            if (authorizableId == null)
                throw new ApiException(400, "Missing required parameter 'authorizableId' when calling SlingApi->GetKeystore");

            var localVarPath = "/{intermediatePath}/{authorizableId}/keystore/store.p12";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (intermediatePath != null) localVarPathParams.Add("intermediatePath", this.Configuration.ApiClient.ParameterToString(intermediatePath)); // path parameter
            if (authorizableId != null) localVarPathParams.Add("authorizableId", this.Configuration.ApiClient.ParameterToString(authorizableId)); // path parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKeystore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        public void GetNode (string path, string name)
        {
             GetNodeWithHttpInfo(path, name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetNodeWithHttpInfo (string path, string name)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling SlingApi->GetNode");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SlingApi->GetNode");

            var localVarPath = "/{path}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetNodeAsync (string path, string name, CancellationToken cancellationToken = default(CancellationToken))
        {
             await GetNodeWithHttpInfoAsync(path, name, cancellationToken);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetNodeWithHttpInfoAsync (string path, string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling SlingApi->GetNode");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SlingApi->GetNode");

            var localVarPath = "/{path}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group"></param>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPackage (string group, string name, string version)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPackageWithHttpInfo(group, name, version);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group"></param>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetPackageWithHttpInfo (string group, string name, string version)
        {
            // verify the required parameter 'group' is set
            if (group == null)
                throw new ApiException(400, "Missing required parameter 'group' when calling SlingApi->GetPackage");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SlingApi->GetPackage");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SlingApi->GetPackage");

            var localVarPath = "/etc/packages/{group}/{name}-{version}.zip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (group != null) localVarPathParams.Add("group", this.Configuration.ApiClient.ParameterToString(group)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group"></param>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPackageAsync (string group, string name, string version, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPackageWithHttpInfoAsync(group, name, version, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group"></param>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPackageWithHttpInfoAsync (string group, string name, string version, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'group' is set
            if (group == null)
                throw new ApiException(400, "Missing required parameter 'group' when calling SlingApi->GetPackage");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SlingApi->GetPackage");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SlingApi->GetPackage");

            var localVarPath = "/etc/packages/{group}/{name}-{version}.zip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (group != null) localVarPathParams.Add("group", this.Configuration.ApiClient.ParameterToString(group)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group"></param>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <returns>string</returns>
        public string GetPackageFilter (string group, string name, string version)
        {
             ApiResponse<string> localVarResponse = GetPackageFilterWithHttpInfo(group, name, version);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group"></param>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> GetPackageFilterWithHttpInfo (string group, string name, string version)
        {
            // verify the required parameter 'group' is set
            if (group == null)
                throw new ApiException(400, "Missing required parameter 'group' when calling SlingApi->GetPackageFilter");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SlingApi->GetPackageFilter");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SlingApi->GetPackageFilter");

            var localVarPath = "/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (group != null) localVarPathParams.Add("group", this.Configuration.ApiClient.ParameterToString(group)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackageFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group"></param>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetPackageFilterAsync (string group, string name, string version, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<string> localVarResponse = await GetPackageFilterWithHttpInfoAsync(group, name, version, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group"></param>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetPackageFilterWithHttpInfoAsync (string group, string name, string version, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'group' is set
            if (group == null)
                throw new ApiException(400, "Missing required parameter 'group' when calling SlingApi->GetPackageFilter");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SlingApi->GetPackageFilter");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SlingApi->GetPackageFilter");

            var localVarPath = "/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (group != null) localVarPathParams.Add("group", this.Configuration.ApiClient.ParameterToString(group)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackageFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="pLimit"></param>
        /// <param name="_1property"></param>
        /// <param name="_1propertyValue"></param>
        /// <returns>string</returns>
        public string GetQuery (string path, decimal pLimit, string _1property, string _1propertyValue)
        {
             ApiResponse<string> localVarResponse = GetQueryWithHttpInfo(path, pLimit, _1property, _1propertyValue);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="pLimit"></param>
        /// <param name="_1property"></param>
        /// <param name="_1propertyValue"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> GetQueryWithHttpInfo (string path, decimal pLimit, string _1property, string _1propertyValue)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling SlingApi->GetQuery");
            // verify the required parameter 'pLimit' is set
            if (pLimit == null)
                throw new ApiException(400, "Missing required parameter 'pLimit' when calling SlingApi->GetQuery");
            // verify the required parameter '_1property' is set
            if (_1property == null)
                throw new ApiException(400, "Missing required parameter '_1property' when calling SlingApi->GetQuery");
            // verify the required parameter '_1propertyValue' is set
            if (_1propertyValue == null)
                throw new ApiException(400, "Missing required parameter '_1propertyValue' when calling SlingApi->GetQuery");

            var localVarPath = "/bin/querybuilder.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            if (pLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "p.limit", pLimit)); // query parameter
            if (_1property != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "1_property", _1property)); // query parameter
            if (_1propertyValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "1_property.value", _1propertyValue)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="pLimit"></param>
        /// <param name="_1property"></param>
        /// <param name="_1propertyValue"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetQueryAsync (string path, decimal pLimit, string _1property, string _1propertyValue, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<string> localVarResponse = await GetQueryWithHttpInfoAsync(path, pLimit, _1property, _1propertyValue, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="pLimit"></param>
        /// <param name="_1property"></param>
        /// <param name="_1propertyValue"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetQueryWithHttpInfoAsync (string path, decimal pLimit, string _1property, string _1propertyValue, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling SlingApi->GetQuery");
            // verify the required parameter 'pLimit' is set
            if (pLimit == null)
                throw new ApiException(400, "Missing required parameter 'pLimit' when calling SlingApi->GetQuery");
            // verify the required parameter '_1property' is set
            if (_1property == null)
                throw new ApiException(400, "Missing required parameter '_1property' when calling SlingApi->GetQuery");
            // verify the required parameter '_1propertyValue' is set
            if (_1propertyValue == null)
                throw new ApiException(400, "Missing required parameter '_1propertyValue' when calling SlingApi->GetQuery");

            var localVarPath = "/bin/querybuilder.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            if (pLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "p.limit", pLimit)); // query parameter
            if (_1property != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "1_property", _1property)); // query parameter
            if (_1propertyValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "1_property.value", _1propertyValue)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetTruststore ()
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetTruststoreWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetTruststoreWithHttpInfo ()
        {

            var localVarPath = "/etc/truststore/truststore.p12";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTruststore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetTruststoreAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetTruststoreWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetTruststoreWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/etc/truststore/truststore.p12";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTruststore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TruststoreInfo</returns>
        public TruststoreInfo GetTruststoreInfo ()
        {
             ApiResponse<TruststoreInfo> localVarResponse = GetTruststoreInfoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TruststoreInfo</returns>
        public ApiResponse<TruststoreInfo> GetTruststoreInfoWithHttpInfo ()
        {

            var localVarPath = "/libs/granite/security/truststore.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTruststoreInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TruststoreInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TruststoreInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TruststoreInfo)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TruststoreInfo</returns>
        public async System.Threading.Tasks.Task<TruststoreInfo> GetTruststoreInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TruststoreInfo> localVarResponse = await GetTruststoreInfoWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TruststoreInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TruststoreInfo>> GetTruststoreInfoWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/libs/granite/security/truststore.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTruststoreInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TruststoreInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TruststoreInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TruststoreInfo)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <param name="jcrcontentCqdistribute"> (optional)</param>
        /// <param name="jcrcontentCqdistributeTypeHint"> (optional)</param>
        /// <param name="jcrcontentCqname"> (optional)</param>
        /// <param name="jcrcontentCqtemplate"> (optional)</param>
        /// <param name="jcrcontentEnabled"> (optional)</param>
        /// <param name="jcrcontentJcrdescription"> (optional)</param>
        /// <param name="jcrcontentJcrlastModified"> (optional)</param>
        /// <param name="jcrcontentJcrlastModifiedBy"> (optional)</param>
        /// <param name="jcrcontentJcrmixinTypes"> (optional)</param>
        /// <param name="jcrcontentJcrtitle"> (optional)</param>
        /// <param name="jcrcontentLogLevel"> (optional)</param>
        /// <param name="jcrcontentNoStatusUpdate"> (optional)</param>
        /// <param name="jcrcontentNoVersioning"> (optional)</param>
        /// <param name="jcrcontentProtocolConnectTimeout"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPConnectionClosed"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPExpired"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPHeaders"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPHeadersTypeHint"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPMethod"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPSRelaxed"> (optional)</param>
        /// <param name="jcrcontentProtocolInterface"> (optional)</param>
        /// <param name="jcrcontentProtocolSocketTimeout"> (optional)</param>
        /// <param name="jcrcontentProtocolVersion"> (optional)</param>
        /// <param name="jcrcontentProxyNTLMDomain"> (optional)</param>
        /// <param name="jcrcontentProxyNTLMHost"> (optional)</param>
        /// <param name="jcrcontentProxyHost"> (optional)</param>
        /// <param name="jcrcontentProxyPassword"> (optional)</param>
        /// <param name="jcrcontentProxyPort"> (optional)</param>
        /// <param name="jcrcontentProxyUser"> (optional)</param>
        /// <param name="jcrcontentQueueBatchMaxSize"> (optional)</param>
        /// <param name="jcrcontentQueueBatchMode"> (optional)</param>
        /// <param name="jcrcontentQueueBatchWaitTime"> (optional)</param>
        /// <param name="jcrcontentRetryDelay"> (optional)</param>
        /// <param name="jcrcontentReverseReplication"> (optional)</param>
        /// <param name="jcrcontentSerializationType"> (optional)</param>
        /// <param name="jcrcontentSlingresourceType"> (optional)</param>
        /// <param name="jcrcontentSsl"> (optional)</param>
        /// <param name="jcrcontentTransportNTLMDomain"> (optional)</param>
        /// <param name="jcrcontentTransportNTLMHost"> (optional)</param>
        /// <param name="jcrcontentTransportPassword"> (optional)</param>
        /// <param name="jcrcontentTransportUri"> (optional)</param>
        /// <param name="jcrcontentTransportUser"> (optional)</param>
        /// <param name="jcrcontentTriggerDistribute"> (optional)</param>
        /// <param name="jcrcontentTriggerModified"> (optional)</param>
        /// <param name="jcrcontentTriggerOnOffTime"> (optional)</param>
        /// <param name="jcrcontentTriggerReceive"> (optional)</param>
        /// <param name="jcrcontentTriggerSpecific"> (optional)</param>
        /// <param name="jcrcontentUserId"> (optional)</param>
        /// <param name="jcrprimaryType"> (optional)</param>
        /// <param name="operation"> (optional)</param>
        /// <returns></returns>
        public void PostAgent (string runmode, string name, bool? jcrcontentCqdistribute = default(bool?), string jcrcontentCqdistributeTypeHint = default(string), string jcrcontentCqname = default(string), string jcrcontentCqtemplate = default(string), bool? jcrcontentEnabled = default(bool?), string jcrcontentJcrdescription = default(string), string jcrcontentJcrlastModified = default(string), string jcrcontentJcrlastModifiedBy = default(string), string jcrcontentJcrmixinTypes = default(string), string jcrcontentJcrtitle = default(string), string jcrcontentLogLevel = default(string), bool? jcrcontentNoStatusUpdate = default(bool?), bool? jcrcontentNoVersioning = default(bool?), decimal? jcrcontentProtocolConnectTimeout = default(decimal?), bool? jcrcontentProtocolHTTPConnectionClosed = default(bool?), string jcrcontentProtocolHTTPExpired = default(string), List<string> jcrcontentProtocolHTTPHeaders = default(List<string>), string jcrcontentProtocolHTTPHeadersTypeHint = default(string), string jcrcontentProtocolHTTPMethod = default(string), bool? jcrcontentProtocolHTTPSRelaxed = default(bool?), string jcrcontentProtocolInterface = default(string), decimal? jcrcontentProtocolSocketTimeout = default(decimal?), string jcrcontentProtocolVersion = default(string), string jcrcontentProxyNTLMDomain = default(string), string jcrcontentProxyNTLMHost = default(string), string jcrcontentProxyHost = default(string), string jcrcontentProxyPassword = default(string), decimal? jcrcontentProxyPort = default(decimal?), string jcrcontentProxyUser = default(string), decimal? jcrcontentQueueBatchMaxSize = default(decimal?), string jcrcontentQueueBatchMode = default(string), decimal? jcrcontentQueueBatchWaitTime = default(decimal?), string jcrcontentRetryDelay = default(string), bool? jcrcontentReverseReplication = default(bool?), string jcrcontentSerializationType = default(string), string jcrcontentSlingresourceType = default(string), string jcrcontentSsl = default(string), string jcrcontentTransportNTLMDomain = default(string), string jcrcontentTransportNTLMHost = default(string), string jcrcontentTransportPassword = default(string), string jcrcontentTransportUri = default(string), string jcrcontentTransportUser = default(string), bool? jcrcontentTriggerDistribute = default(bool?), bool? jcrcontentTriggerModified = default(bool?), bool? jcrcontentTriggerOnOffTime = default(bool?), bool? jcrcontentTriggerReceive = default(bool?), bool? jcrcontentTriggerSpecific = default(bool?), string jcrcontentUserId = default(string), string jcrprimaryType = default(string), string operation = default(string))
        {
             PostAgentWithHttpInfo(runmode, name, jcrcontentCqdistribute, jcrcontentCqdistributeTypeHint, jcrcontentCqname, jcrcontentCqtemplate, jcrcontentEnabled, jcrcontentJcrdescription, jcrcontentJcrlastModified, jcrcontentJcrlastModifiedBy, jcrcontentJcrmixinTypes, jcrcontentJcrtitle, jcrcontentLogLevel, jcrcontentNoStatusUpdate, jcrcontentNoVersioning, jcrcontentProtocolConnectTimeout, jcrcontentProtocolHTTPConnectionClosed, jcrcontentProtocolHTTPExpired, jcrcontentProtocolHTTPHeaders, jcrcontentProtocolHTTPHeadersTypeHint, jcrcontentProtocolHTTPMethod, jcrcontentProtocolHTTPSRelaxed, jcrcontentProtocolInterface, jcrcontentProtocolSocketTimeout, jcrcontentProtocolVersion, jcrcontentProxyNTLMDomain, jcrcontentProxyNTLMHost, jcrcontentProxyHost, jcrcontentProxyPassword, jcrcontentProxyPort, jcrcontentProxyUser, jcrcontentQueueBatchMaxSize, jcrcontentQueueBatchMode, jcrcontentQueueBatchWaitTime, jcrcontentRetryDelay, jcrcontentReverseReplication, jcrcontentSerializationType, jcrcontentSlingresourceType, jcrcontentSsl, jcrcontentTransportNTLMDomain, jcrcontentTransportNTLMHost, jcrcontentTransportPassword, jcrcontentTransportUri, jcrcontentTransportUser, jcrcontentTriggerDistribute, jcrcontentTriggerModified, jcrcontentTriggerOnOffTime, jcrcontentTriggerReceive, jcrcontentTriggerSpecific, jcrcontentUserId, jcrprimaryType, operation);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <param name="jcrcontentCqdistribute"> (optional)</param>
        /// <param name="jcrcontentCqdistributeTypeHint"> (optional)</param>
        /// <param name="jcrcontentCqname"> (optional)</param>
        /// <param name="jcrcontentCqtemplate"> (optional)</param>
        /// <param name="jcrcontentEnabled"> (optional)</param>
        /// <param name="jcrcontentJcrdescription"> (optional)</param>
        /// <param name="jcrcontentJcrlastModified"> (optional)</param>
        /// <param name="jcrcontentJcrlastModifiedBy"> (optional)</param>
        /// <param name="jcrcontentJcrmixinTypes"> (optional)</param>
        /// <param name="jcrcontentJcrtitle"> (optional)</param>
        /// <param name="jcrcontentLogLevel"> (optional)</param>
        /// <param name="jcrcontentNoStatusUpdate"> (optional)</param>
        /// <param name="jcrcontentNoVersioning"> (optional)</param>
        /// <param name="jcrcontentProtocolConnectTimeout"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPConnectionClosed"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPExpired"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPHeaders"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPHeadersTypeHint"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPMethod"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPSRelaxed"> (optional)</param>
        /// <param name="jcrcontentProtocolInterface"> (optional)</param>
        /// <param name="jcrcontentProtocolSocketTimeout"> (optional)</param>
        /// <param name="jcrcontentProtocolVersion"> (optional)</param>
        /// <param name="jcrcontentProxyNTLMDomain"> (optional)</param>
        /// <param name="jcrcontentProxyNTLMHost"> (optional)</param>
        /// <param name="jcrcontentProxyHost"> (optional)</param>
        /// <param name="jcrcontentProxyPassword"> (optional)</param>
        /// <param name="jcrcontentProxyPort"> (optional)</param>
        /// <param name="jcrcontentProxyUser"> (optional)</param>
        /// <param name="jcrcontentQueueBatchMaxSize"> (optional)</param>
        /// <param name="jcrcontentQueueBatchMode"> (optional)</param>
        /// <param name="jcrcontentQueueBatchWaitTime"> (optional)</param>
        /// <param name="jcrcontentRetryDelay"> (optional)</param>
        /// <param name="jcrcontentReverseReplication"> (optional)</param>
        /// <param name="jcrcontentSerializationType"> (optional)</param>
        /// <param name="jcrcontentSlingresourceType"> (optional)</param>
        /// <param name="jcrcontentSsl"> (optional)</param>
        /// <param name="jcrcontentTransportNTLMDomain"> (optional)</param>
        /// <param name="jcrcontentTransportNTLMHost"> (optional)</param>
        /// <param name="jcrcontentTransportPassword"> (optional)</param>
        /// <param name="jcrcontentTransportUri"> (optional)</param>
        /// <param name="jcrcontentTransportUser"> (optional)</param>
        /// <param name="jcrcontentTriggerDistribute"> (optional)</param>
        /// <param name="jcrcontentTriggerModified"> (optional)</param>
        /// <param name="jcrcontentTriggerOnOffTime"> (optional)</param>
        /// <param name="jcrcontentTriggerReceive"> (optional)</param>
        /// <param name="jcrcontentTriggerSpecific"> (optional)</param>
        /// <param name="jcrcontentUserId"> (optional)</param>
        /// <param name="jcrprimaryType"> (optional)</param>
        /// <param name="operation"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostAgentWithHttpInfo (string runmode, string name, bool? jcrcontentCqdistribute = default(bool?), string jcrcontentCqdistributeTypeHint = default(string), string jcrcontentCqname = default(string), string jcrcontentCqtemplate = default(string), bool? jcrcontentEnabled = default(bool?), string jcrcontentJcrdescription = default(string), string jcrcontentJcrlastModified = default(string), string jcrcontentJcrlastModifiedBy = default(string), string jcrcontentJcrmixinTypes = default(string), string jcrcontentJcrtitle = default(string), string jcrcontentLogLevel = default(string), bool? jcrcontentNoStatusUpdate = default(bool?), bool? jcrcontentNoVersioning = default(bool?), decimal? jcrcontentProtocolConnectTimeout = default(decimal?), bool? jcrcontentProtocolHTTPConnectionClosed = default(bool?), string jcrcontentProtocolHTTPExpired = default(string), List<string> jcrcontentProtocolHTTPHeaders = default(List<string>), string jcrcontentProtocolHTTPHeadersTypeHint = default(string), string jcrcontentProtocolHTTPMethod = default(string), bool? jcrcontentProtocolHTTPSRelaxed = default(bool?), string jcrcontentProtocolInterface = default(string), decimal? jcrcontentProtocolSocketTimeout = default(decimal?), string jcrcontentProtocolVersion = default(string), string jcrcontentProxyNTLMDomain = default(string), string jcrcontentProxyNTLMHost = default(string), string jcrcontentProxyHost = default(string), string jcrcontentProxyPassword = default(string), decimal? jcrcontentProxyPort = default(decimal?), string jcrcontentProxyUser = default(string), decimal? jcrcontentQueueBatchMaxSize = default(decimal?), string jcrcontentQueueBatchMode = default(string), decimal? jcrcontentQueueBatchWaitTime = default(decimal?), string jcrcontentRetryDelay = default(string), bool? jcrcontentReverseReplication = default(bool?), string jcrcontentSerializationType = default(string), string jcrcontentSlingresourceType = default(string), string jcrcontentSsl = default(string), string jcrcontentTransportNTLMDomain = default(string), string jcrcontentTransportNTLMHost = default(string), string jcrcontentTransportPassword = default(string), string jcrcontentTransportUri = default(string), string jcrcontentTransportUser = default(string), bool? jcrcontentTriggerDistribute = default(bool?), bool? jcrcontentTriggerModified = default(bool?), bool? jcrcontentTriggerOnOffTime = default(bool?), bool? jcrcontentTriggerReceive = default(bool?), bool? jcrcontentTriggerSpecific = default(bool?), string jcrcontentUserId = default(string), string jcrprimaryType = default(string), string operation = default(string))
        {
            // verify the required parameter 'runmode' is set
            if (runmode == null)
                throw new ApiException(400, "Missing required parameter 'runmode' when calling SlingApi->PostAgent");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SlingApi->PostAgent");

            var localVarPath = "/etc/replication/agents.{runmode}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (runmode != null) localVarPathParams.Add("runmode", this.Configuration.ApiClient.ParameterToString(runmode)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (jcrcontentCqdistribute != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/cq:distribute", jcrcontentCqdistribute)); // query parameter
            if (jcrcontentCqdistributeTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/cq:distribute@TypeHint", jcrcontentCqdistributeTypeHint)); // query parameter
            if (jcrcontentCqname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/cq:name", jcrcontentCqname)); // query parameter
            if (jcrcontentCqtemplate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/cq:template", jcrcontentCqtemplate)); // query parameter
            if (jcrcontentEnabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/enabled", jcrcontentEnabled)); // query parameter
            if (jcrcontentJcrdescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/jcr:description", jcrcontentJcrdescription)); // query parameter
            if (jcrcontentJcrlastModified != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/jcr:lastModified", jcrcontentJcrlastModified)); // query parameter
            if (jcrcontentJcrlastModifiedBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/jcr:lastModifiedBy", jcrcontentJcrlastModifiedBy)); // query parameter
            if (jcrcontentJcrmixinTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/jcr:mixinTypes", jcrcontentJcrmixinTypes)); // query parameter
            if (jcrcontentJcrtitle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/jcr:title", jcrcontentJcrtitle)); // query parameter
            if (jcrcontentLogLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/logLevel", jcrcontentLogLevel)); // query parameter
            if (jcrcontentNoStatusUpdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/noStatusUpdate", jcrcontentNoStatusUpdate)); // query parameter
            if (jcrcontentNoVersioning != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/noVersioning", jcrcontentNoVersioning)); // query parameter
            if (jcrcontentProtocolConnectTimeout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/protocolConnectTimeout", jcrcontentProtocolConnectTimeout)); // query parameter
            if (jcrcontentProtocolHTTPConnectionClosed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/protocolHTTPConnectionClosed", jcrcontentProtocolHTTPConnectionClosed)); // query parameter
            if (jcrcontentProtocolHTTPExpired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/protocolHTTPExpired", jcrcontentProtocolHTTPExpired)); // query parameter
            if (jcrcontentProtocolHTTPHeaders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "jcr:content/protocolHTTPHeaders", jcrcontentProtocolHTTPHeaders)); // query parameter
            if (jcrcontentProtocolHTTPHeadersTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/protocolHTTPHeaders@TypeHint", jcrcontentProtocolHTTPHeadersTypeHint)); // query parameter
            if (jcrcontentProtocolHTTPMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/protocolHTTPMethod", jcrcontentProtocolHTTPMethod)); // query parameter
            if (jcrcontentProtocolHTTPSRelaxed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/protocolHTTPSRelaxed", jcrcontentProtocolHTTPSRelaxed)); // query parameter
            if (jcrcontentProtocolInterface != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/protocolInterface", jcrcontentProtocolInterface)); // query parameter
            if (jcrcontentProtocolSocketTimeout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/protocolSocketTimeout", jcrcontentProtocolSocketTimeout)); // query parameter
            if (jcrcontentProtocolVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/protocolVersion", jcrcontentProtocolVersion)); // query parameter
            if (jcrcontentProxyNTLMDomain != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/proxyNTLMDomain", jcrcontentProxyNTLMDomain)); // query parameter
            if (jcrcontentProxyNTLMHost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/proxyNTLMHost", jcrcontentProxyNTLMHost)); // query parameter
            if (jcrcontentProxyHost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/proxyHost", jcrcontentProxyHost)); // query parameter
            if (jcrcontentProxyPassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/proxyPassword", jcrcontentProxyPassword)); // query parameter
            if (jcrcontentProxyPort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/proxyPort", jcrcontentProxyPort)); // query parameter
            if (jcrcontentProxyUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/proxyUser", jcrcontentProxyUser)); // query parameter
            if (jcrcontentQueueBatchMaxSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/queueBatchMaxSize", jcrcontentQueueBatchMaxSize)); // query parameter
            if (jcrcontentQueueBatchMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/queueBatchMode", jcrcontentQueueBatchMode)); // query parameter
            if (jcrcontentQueueBatchWaitTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/queueBatchWaitTime", jcrcontentQueueBatchWaitTime)); // query parameter
            if (jcrcontentRetryDelay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/retryDelay", jcrcontentRetryDelay)); // query parameter
            if (jcrcontentReverseReplication != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/reverseReplication", jcrcontentReverseReplication)); // query parameter
            if (jcrcontentSerializationType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/serializationType", jcrcontentSerializationType)); // query parameter
            if (jcrcontentSlingresourceType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/sling:resourceType", jcrcontentSlingresourceType)); // query parameter
            if (jcrcontentSsl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/ssl", jcrcontentSsl)); // query parameter
            if (jcrcontentTransportNTLMDomain != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/transportNTLMDomain", jcrcontentTransportNTLMDomain)); // query parameter
            if (jcrcontentTransportNTLMHost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/transportNTLMHost", jcrcontentTransportNTLMHost)); // query parameter
            if (jcrcontentTransportPassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/transportPassword", jcrcontentTransportPassword)); // query parameter
            if (jcrcontentTransportUri != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/transportUri", jcrcontentTransportUri)); // query parameter
            if (jcrcontentTransportUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/transportUser", jcrcontentTransportUser)); // query parameter
            if (jcrcontentTriggerDistribute != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/triggerDistribute", jcrcontentTriggerDistribute)); // query parameter
            if (jcrcontentTriggerModified != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/triggerModified", jcrcontentTriggerModified)); // query parameter
            if (jcrcontentTriggerOnOffTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/triggerOnOffTime", jcrcontentTriggerOnOffTime)); // query parameter
            if (jcrcontentTriggerReceive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/triggerReceive", jcrcontentTriggerReceive)); // query parameter
            if (jcrcontentTriggerSpecific != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/triggerSpecific", jcrcontentTriggerSpecific)); // query parameter
            if (jcrcontentUserId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/userId", jcrcontentUserId)); // query parameter
            if (jcrprimaryType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:primaryType", jcrprimaryType)); // query parameter
            if (operation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", ":operation", operation)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAgent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <param name="jcrcontentCqdistribute"> (optional)</param>
        /// <param name="jcrcontentCqdistributeTypeHint"> (optional)</param>
        /// <param name="jcrcontentCqname"> (optional)</param>
        /// <param name="jcrcontentCqtemplate"> (optional)</param>
        /// <param name="jcrcontentEnabled"> (optional)</param>
        /// <param name="jcrcontentJcrdescription"> (optional)</param>
        /// <param name="jcrcontentJcrlastModified"> (optional)</param>
        /// <param name="jcrcontentJcrlastModifiedBy"> (optional)</param>
        /// <param name="jcrcontentJcrmixinTypes"> (optional)</param>
        /// <param name="jcrcontentJcrtitle"> (optional)</param>
        /// <param name="jcrcontentLogLevel"> (optional)</param>
        /// <param name="jcrcontentNoStatusUpdate"> (optional)</param>
        /// <param name="jcrcontentNoVersioning"> (optional)</param>
        /// <param name="jcrcontentProtocolConnectTimeout"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPConnectionClosed"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPExpired"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPHeaders"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPHeadersTypeHint"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPMethod"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPSRelaxed"> (optional)</param>
        /// <param name="jcrcontentProtocolInterface"> (optional)</param>
        /// <param name="jcrcontentProtocolSocketTimeout"> (optional)</param>
        /// <param name="jcrcontentProtocolVersion"> (optional)</param>
        /// <param name="jcrcontentProxyNTLMDomain"> (optional)</param>
        /// <param name="jcrcontentProxyNTLMHost"> (optional)</param>
        /// <param name="jcrcontentProxyHost"> (optional)</param>
        /// <param name="jcrcontentProxyPassword"> (optional)</param>
        /// <param name="jcrcontentProxyPort"> (optional)</param>
        /// <param name="jcrcontentProxyUser"> (optional)</param>
        /// <param name="jcrcontentQueueBatchMaxSize"> (optional)</param>
        /// <param name="jcrcontentQueueBatchMode"> (optional)</param>
        /// <param name="jcrcontentQueueBatchWaitTime"> (optional)</param>
        /// <param name="jcrcontentRetryDelay"> (optional)</param>
        /// <param name="jcrcontentReverseReplication"> (optional)</param>
        /// <param name="jcrcontentSerializationType"> (optional)</param>
        /// <param name="jcrcontentSlingresourceType"> (optional)</param>
        /// <param name="jcrcontentSsl"> (optional)</param>
        /// <param name="jcrcontentTransportNTLMDomain"> (optional)</param>
        /// <param name="jcrcontentTransportNTLMHost"> (optional)</param>
        /// <param name="jcrcontentTransportPassword"> (optional)</param>
        /// <param name="jcrcontentTransportUri"> (optional)</param>
        /// <param name="jcrcontentTransportUser"> (optional)</param>
        /// <param name="jcrcontentTriggerDistribute"> (optional)</param>
        /// <param name="jcrcontentTriggerModified"> (optional)</param>
        /// <param name="jcrcontentTriggerOnOffTime"> (optional)</param>
        /// <param name="jcrcontentTriggerReceive"> (optional)</param>
        /// <param name="jcrcontentTriggerSpecific"> (optional)</param>
        /// <param name="jcrcontentUserId"> (optional)</param>
        /// <param name="jcrprimaryType"> (optional)</param>
        /// <param name="operation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAgentAsync (string runmode, string name, bool? jcrcontentCqdistribute = default(bool?), string jcrcontentCqdistributeTypeHint = default(string), string jcrcontentCqname = default(string), string jcrcontentCqtemplate = default(string), bool? jcrcontentEnabled = default(bool?), string jcrcontentJcrdescription = default(string), string jcrcontentJcrlastModified = default(string), string jcrcontentJcrlastModifiedBy = default(string), string jcrcontentJcrmixinTypes = default(string), string jcrcontentJcrtitle = default(string), string jcrcontentLogLevel = default(string), bool? jcrcontentNoStatusUpdate = default(bool?), bool? jcrcontentNoVersioning = default(bool?), decimal? jcrcontentProtocolConnectTimeout = default(decimal?), bool? jcrcontentProtocolHTTPConnectionClosed = default(bool?), string jcrcontentProtocolHTTPExpired = default(string), List<string> jcrcontentProtocolHTTPHeaders = default(List<string>), string jcrcontentProtocolHTTPHeadersTypeHint = default(string), string jcrcontentProtocolHTTPMethod = default(string), bool? jcrcontentProtocolHTTPSRelaxed = default(bool?), string jcrcontentProtocolInterface = default(string), decimal? jcrcontentProtocolSocketTimeout = default(decimal?), string jcrcontentProtocolVersion = default(string), string jcrcontentProxyNTLMDomain = default(string), string jcrcontentProxyNTLMHost = default(string), string jcrcontentProxyHost = default(string), string jcrcontentProxyPassword = default(string), decimal? jcrcontentProxyPort = default(decimal?), string jcrcontentProxyUser = default(string), decimal? jcrcontentQueueBatchMaxSize = default(decimal?), string jcrcontentQueueBatchMode = default(string), decimal? jcrcontentQueueBatchWaitTime = default(decimal?), string jcrcontentRetryDelay = default(string), bool? jcrcontentReverseReplication = default(bool?), string jcrcontentSerializationType = default(string), string jcrcontentSlingresourceType = default(string), string jcrcontentSsl = default(string), string jcrcontentTransportNTLMDomain = default(string), string jcrcontentTransportNTLMHost = default(string), string jcrcontentTransportPassword = default(string), string jcrcontentTransportUri = default(string), string jcrcontentTransportUser = default(string), bool? jcrcontentTriggerDistribute = default(bool?), bool? jcrcontentTriggerModified = default(bool?), bool? jcrcontentTriggerOnOffTime = default(bool?), bool? jcrcontentTriggerReceive = default(bool?), bool? jcrcontentTriggerSpecific = default(bool?), string jcrcontentUserId = default(string), string jcrprimaryType = default(string), string operation = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await PostAgentWithHttpInfoAsync(runmode, name, jcrcontentCqdistribute, jcrcontentCqdistributeTypeHint, jcrcontentCqname, jcrcontentCqtemplate, jcrcontentEnabled, jcrcontentJcrdescription, jcrcontentJcrlastModified, jcrcontentJcrlastModifiedBy, jcrcontentJcrmixinTypes, jcrcontentJcrtitle, jcrcontentLogLevel, jcrcontentNoStatusUpdate, jcrcontentNoVersioning, jcrcontentProtocolConnectTimeout, jcrcontentProtocolHTTPConnectionClosed, jcrcontentProtocolHTTPExpired, jcrcontentProtocolHTTPHeaders, jcrcontentProtocolHTTPHeadersTypeHint, jcrcontentProtocolHTTPMethod, jcrcontentProtocolHTTPSRelaxed, jcrcontentProtocolInterface, jcrcontentProtocolSocketTimeout, jcrcontentProtocolVersion, jcrcontentProxyNTLMDomain, jcrcontentProxyNTLMHost, jcrcontentProxyHost, jcrcontentProxyPassword, jcrcontentProxyPort, jcrcontentProxyUser, jcrcontentQueueBatchMaxSize, jcrcontentQueueBatchMode, jcrcontentQueueBatchWaitTime, jcrcontentRetryDelay, jcrcontentReverseReplication, jcrcontentSerializationType, jcrcontentSlingresourceType, jcrcontentSsl, jcrcontentTransportNTLMDomain, jcrcontentTransportNTLMHost, jcrcontentTransportPassword, jcrcontentTransportUri, jcrcontentTransportUser, jcrcontentTriggerDistribute, jcrcontentTriggerModified, jcrcontentTriggerOnOffTime, jcrcontentTriggerReceive, jcrcontentTriggerSpecific, jcrcontentUserId, jcrprimaryType, operation, cancellationToken);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <param name="jcrcontentCqdistribute"> (optional)</param>
        /// <param name="jcrcontentCqdistributeTypeHint"> (optional)</param>
        /// <param name="jcrcontentCqname"> (optional)</param>
        /// <param name="jcrcontentCqtemplate"> (optional)</param>
        /// <param name="jcrcontentEnabled"> (optional)</param>
        /// <param name="jcrcontentJcrdescription"> (optional)</param>
        /// <param name="jcrcontentJcrlastModified"> (optional)</param>
        /// <param name="jcrcontentJcrlastModifiedBy"> (optional)</param>
        /// <param name="jcrcontentJcrmixinTypes"> (optional)</param>
        /// <param name="jcrcontentJcrtitle"> (optional)</param>
        /// <param name="jcrcontentLogLevel"> (optional)</param>
        /// <param name="jcrcontentNoStatusUpdate"> (optional)</param>
        /// <param name="jcrcontentNoVersioning"> (optional)</param>
        /// <param name="jcrcontentProtocolConnectTimeout"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPConnectionClosed"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPExpired"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPHeaders"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPHeadersTypeHint"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPMethod"> (optional)</param>
        /// <param name="jcrcontentProtocolHTTPSRelaxed"> (optional)</param>
        /// <param name="jcrcontentProtocolInterface"> (optional)</param>
        /// <param name="jcrcontentProtocolSocketTimeout"> (optional)</param>
        /// <param name="jcrcontentProtocolVersion"> (optional)</param>
        /// <param name="jcrcontentProxyNTLMDomain"> (optional)</param>
        /// <param name="jcrcontentProxyNTLMHost"> (optional)</param>
        /// <param name="jcrcontentProxyHost"> (optional)</param>
        /// <param name="jcrcontentProxyPassword"> (optional)</param>
        /// <param name="jcrcontentProxyPort"> (optional)</param>
        /// <param name="jcrcontentProxyUser"> (optional)</param>
        /// <param name="jcrcontentQueueBatchMaxSize"> (optional)</param>
        /// <param name="jcrcontentQueueBatchMode"> (optional)</param>
        /// <param name="jcrcontentQueueBatchWaitTime"> (optional)</param>
        /// <param name="jcrcontentRetryDelay"> (optional)</param>
        /// <param name="jcrcontentReverseReplication"> (optional)</param>
        /// <param name="jcrcontentSerializationType"> (optional)</param>
        /// <param name="jcrcontentSlingresourceType"> (optional)</param>
        /// <param name="jcrcontentSsl"> (optional)</param>
        /// <param name="jcrcontentTransportNTLMDomain"> (optional)</param>
        /// <param name="jcrcontentTransportNTLMHost"> (optional)</param>
        /// <param name="jcrcontentTransportPassword"> (optional)</param>
        /// <param name="jcrcontentTransportUri"> (optional)</param>
        /// <param name="jcrcontentTransportUser"> (optional)</param>
        /// <param name="jcrcontentTriggerDistribute"> (optional)</param>
        /// <param name="jcrcontentTriggerModified"> (optional)</param>
        /// <param name="jcrcontentTriggerOnOffTime"> (optional)</param>
        /// <param name="jcrcontentTriggerReceive"> (optional)</param>
        /// <param name="jcrcontentTriggerSpecific"> (optional)</param>
        /// <param name="jcrcontentUserId"> (optional)</param>
        /// <param name="jcrprimaryType"> (optional)</param>
        /// <param name="operation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostAgentWithHttpInfoAsync (string runmode, string name, bool? jcrcontentCqdistribute = default(bool?), string jcrcontentCqdistributeTypeHint = default(string), string jcrcontentCqname = default(string), string jcrcontentCqtemplate = default(string), bool? jcrcontentEnabled = default(bool?), string jcrcontentJcrdescription = default(string), string jcrcontentJcrlastModified = default(string), string jcrcontentJcrlastModifiedBy = default(string), string jcrcontentJcrmixinTypes = default(string), string jcrcontentJcrtitle = default(string), string jcrcontentLogLevel = default(string), bool? jcrcontentNoStatusUpdate = default(bool?), bool? jcrcontentNoVersioning = default(bool?), decimal? jcrcontentProtocolConnectTimeout = default(decimal?), bool? jcrcontentProtocolHTTPConnectionClosed = default(bool?), string jcrcontentProtocolHTTPExpired = default(string), List<string> jcrcontentProtocolHTTPHeaders = default(List<string>), string jcrcontentProtocolHTTPHeadersTypeHint = default(string), string jcrcontentProtocolHTTPMethod = default(string), bool? jcrcontentProtocolHTTPSRelaxed = default(bool?), string jcrcontentProtocolInterface = default(string), decimal? jcrcontentProtocolSocketTimeout = default(decimal?), string jcrcontentProtocolVersion = default(string), string jcrcontentProxyNTLMDomain = default(string), string jcrcontentProxyNTLMHost = default(string), string jcrcontentProxyHost = default(string), string jcrcontentProxyPassword = default(string), decimal? jcrcontentProxyPort = default(decimal?), string jcrcontentProxyUser = default(string), decimal? jcrcontentQueueBatchMaxSize = default(decimal?), string jcrcontentQueueBatchMode = default(string), decimal? jcrcontentQueueBatchWaitTime = default(decimal?), string jcrcontentRetryDelay = default(string), bool? jcrcontentReverseReplication = default(bool?), string jcrcontentSerializationType = default(string), string jcrcontentSlingresourceType = default(string), string jcrcontentSsl = default(string), string jcrcontentTransportNTLMDomain = default(string), string jcrcontentTransportNTLMHost = default(string), string jcrcontentTransportPassword = default(string), string jcrcontentTransportUri = default(string), string jcrcontentTransportUser = default(string), bool? jcrcontentTriggerDistribute = default(bool?), bool? jcrcontentTriggerModified = default(bool?), bool? jcrcontentTriggerOnOffTime = default(bool?), bool? jcrcontentTriggerReceive = default(bool?), bool? jcrcontentTriggerSpecific = default(bool?), string jcrcontentUserId = default(string), string jcrprimaryType = default(string), string operation = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'runmode' is set
            if (runmode == null)
                throw new ApiException(400, "Missing required parameter 'runmode' when calling SlingApi->PostAgent");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SlingApi->PostAgent");

            var localVarPath = "/etc/replication/agents.{runmode}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (runmode != null) localVarPathParams.Add("runmode", this.Configuration.ApiClient.ParameterToString(runmode)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (jcrcontentCqdistribute != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/cq:distribute", jcrcontentCqdistribute)); // query parameter
            if (jcrcontentCqdistributeTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/cq:distribute@TypeHint", jcrcontentCqdistributeTypeHint)); // query parameter
            if (jcrcontentCqname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/cq:name", jcrcontentCqname)); // query parameter
            if (jcrcontentCqtemplate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/cq:template", jcrcontentCqtemplate)); // query parameter
            if (jcrcontentEnabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/enabled", jcrcontentEnabled)); // query parameter
            if (jcrcontentJcrdescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/jcr:description", jcrcontentJcrdescription)); // query parameter
            if (jcrcontentJcrlastModified != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/jcr:lastModified", jcrcontentJcrlastModified)); // query parameter
            if (jcrcontentJcrlastModifiedBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/jcr:lastModifiedBy", jcrcontentJcrlastModifiedBy)); // query parameter
            if (jcrcontentJcrmixinTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/jcr:mixinTypes", jcrcontentJcrmixinTypes)); // query parameter
            if (jcrcontentJcrtitle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/jcr:title", jcrcontentJcrtitle)); // query parameter
            if (jcrcontentLogLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/logLevel", jcrcontentLogLevel)); // query parameter
            if (jcrcontentNoStatusUpdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/noStatusUpdate", jcrcontentNoStatusUpdate)); // query parameter
            if (jcrcontentNoVersioning != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/noVersioning", jcrcontentNoVersioning)); // query parameter
            if (jcrcontentProtocolConnectTimeout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/protocolConnectTimeout", jcrcontentProtocolConnectTimeout)); // query parameter
            if (jcrcontentProtocolHTTPConnectionClosed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/protocolHTTPConnectionClosed", jcrcontentProtocolHTTPConnectionClosed)); // query parameter
            if (jcrcontentProtocolHTTPExpired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/protocolHTTPExpired", jcrcontentProtocolHTTPExpired)); // query parameter
            if (jcrcontentProtocolHTTPHeaders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "jcr:content/protocolHTTPHeaders", jcrcontentProtocolHTTPHeaders)); // query parameter
            if (jcrcontentProtocolHTTPHeadersTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/protocolHTTPHeaders@TypeHint", jcrcontentProtocolHTTPHeadersTypeHint)); // query parameter
            if (jcrcontentProtocolHTTPMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/protocolHTTPMethod", jcrcontentProtocolHTTPMethod)); // query parameter
            if (jcrcontentProtocolHTTPSRelaxed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/protocolHTTPSRelaxed", jcrcontentProtocolHTTPSRelaxed)); // query parameter
            if (jcrcontentProtocolInterface != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/protocolInterface", jcrcontentProtocolInterface)); // query parameter
            if (jcrcontentProtocolSocketTimeout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/protocolSocketTimeout", jcrcontentProtocolSocketTimeout)); // query parameter
            if (jcrcontentProtocolVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/protocolVersion", jcrcontentProtocolVersion)); // query parameter
            if (jcrcontentProxyNTLMDomain != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/proxyNTLMDomain", jcrcontentProxyNTLMDomain)); // query parameter
            if (jcrcontentProxyNTLMHost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/proxyNTLMHost", jcrcontentProxyNTLMHost)); // query parameter
            if (jcrcontentProxyHost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/proxyHost", jcrcontentProxyHost)); // query parameter
            if (jcrcontentProxyPassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/proxyPassword", jcrcontentProxyPassword)); // query parameter
            if (jcrcontentProxyPort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/proxyPort", jcrcontentProxyPort)); // query parameter
            if (jcrcontentProxyUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/proxyUser", jcrcontentProxyUser)); // query parameter
            if (jcrcontentQueueBatchMaxSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/queueBatchMaxSize", jcrcontentQueueBatchMaxSize)); // query parameter
            if (jcrcontentQueueBatchMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/queueBatchMode", jcrcontentQueueBatchMode)); // query parameter
            if (jcrcontentQueueBatchWaitTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/queueBatchWaitTime", jcrcontentQueueBatchWaitTime)); // query parameter
            if (jcrcontentRetryDelay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/retryDelay", jcrcontentRetryDelay)); // query parameter
            if (jcrcontentReverseReplication != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/reverseReplication", jcrcontentReverseReplication)); // query parameter
            if (jcrcontentSerializationType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/serializationType", jcrcontentSerializationType)); // query parameter
            if (jcrcontentSlingresourceType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/sling:resourceType", jcrcontentSlingresourceType)); // query parameter
            if (jcrcontentSsl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/ssl", jcrcontentSsl)); // query parameter
            if (jcrcontentTransportNTLMDomain != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/transportNTLMDomain", jcrcontentTransportNTLMDomain)); // query parameter
            if (jcrcontentTransportNTLMHost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/transportNTLMHost", jcrcontentTransportNTLMHost)); // query parameter
            if (jcrcontentTransportPassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/transportPassword", jcrcontentTransportPassword)); // query parameter
            if (jcrcontentTransportUri != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/transportUri", jcrcontentTransportUri)); // query parameter
            if (jcrcontentTransportUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/transportUser", jcrcontentTransportUser)); // query parameter
            if (jcrcontentTriggerDistribute != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/triggerDistribute", jcrcontentTriggerDistribute)); // query parameter
            if (jcrcontentTriggerModified != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/triggerModified", jcrcontentTriggerModified)); // query parameter
            if (jcrcontentTriggerOnOffTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/triggerOnOffTime", jcrcontentTriggerOnOffTime)); // query parameter
            if (jcrcontentTriggerReceive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/triggerReceive", jcrcontentTriggerReceive)); // query parameter
            if (jcrcontentTriggerSpecific != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/triggerSpecific", jcrcontentTriggerSpecific)); // query parameter
            if (jcrcontentUserId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:content/userId", jcrcontentUserId)); // query parameter
            if (jcrprimaryType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:primaryType", jcrprimaryType)); // query parameter
            if (operation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", ":operation", operation)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAgent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <param name="operation"> (optional)</param>
        /// <param name="currentPassword"> (optional)</param>
        /// <param name="newPassword"> (optional)</param>
        /// <param name="rePassword"> (optional)</param>
        /// <param name="keyPassword"> (optional)</param>
        /// <param name="keyStorePass"> (optional)</param>
        /// <param name="alias"> (optional)</param>
        /// <param name="newAlias"> (optional)</param>
        /// <param name="removeAlias"> (optional)</param>
        /// <param name="certChain"> (optional)</param>
        /// <param name="pk"> (optional)</param>
        /// <param name="keyStore"> (optional)</param>
        /// <returns>KeystoreInfo</returns>
        public KeystoreInfo PostAuthorizableKeystore (string intermediatePath, string authorizableId, string operation = default(string), string currentPassword = default(string), string newPassword = default(string), string rePassword = default(string), string keyPassword = default(string), string keyStorePass = default(string), string alias = default(string), string newAlias = default(string), string removeAlias = default(string), System.IO.Stream certChain = default(System.IO.Stream), System.IO.Stream pk = default(System.IO.Stream), System.IO.Stream keyStore = default(System.IO.Stream))
        {
             ApiResponse<KeystoreInfo> localVarResponse = PostAuthorizableKeystoreWithHttpInfo(intermediatePath, authorizableId, operation, currentPassword, newPassword, rePassword, keyPassword, keyStorePass, alias, newAlias, removeAlias, certChain, pk, keyStore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <param name="operation"> (optional)</param>
        /// <param name="currentPassword"> (optional)</param>
        /// <param name="newPassword"> (optional)</param>
        /// <param name="rePassword"> (optional)</param>
        /// <param name="keyPassword"> (optional)</param>
        /// <param name="keyStorePass"> (optional)</param>
        /// <param name="alias"> (optional)</param>
        /// <param name="newAlias"> (optional)</param>
        /// <param name="removeAlias"> (optional)</param>
        /// <param name="certChain"> (optional)</param>
        /// <param name="pk"> (optional)</param>
        /// <param name="keyStore"> (optional)</param>
        /// <returns>ApiResponse of KeystoreInfo</returns>
        public ApiResponse<KeystoreInfo> PostAuthorizableKeystoreWithHttpInfo (string intermediatePath, string authorizableId, string operation = default(string), string currentPassword = default(string), string newPassword = default(string), string rePassword = default(string), string keyPassword = default(string), string keyStorePass = default(string), string alias = default(string), string newAlias = default(string), string removeAlias = default(string), System.IO.Stream certChain = default(System.IO.Stream), System.IO.Stream pk = default(System.IO.Stream), System.IO.Stream keyStore = default(System.IO.Stream))
        {
            // verify the required parameter 'intermediatePath' is set
            if (intermediatePath == null)
                throw new ApiException(400, "Missing required parameter 'intermediatePath' when calling SlingApi->PostAuthorizableKeystore");
            // verify the required parameter 'authorizableId' is set
            if (authorizableId == null)
                throw new ApiException(400, "Missing required parameter 'authorizableId' when calling SlingApi->PostAuthorizableKeystore");

            var localVarPath = "/{intermediatePath}/{authorizableId}.ks.html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (intermediatePath != null) localVarPathParams.Add("intermediatePath", this.Configuration.ApiClient.ParameterToString(intermediatePath)); // path parameter
            if (authorizableId != null) localVarPathParams.Add("authorizableId", this.Configuration.ApiClient.ParameterToString(authorizableId)); // path parameter
            if (operation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", ":operation", operation)); // query parameter
            if (currentPassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currentPassword", currentPassword)); // query parameter
            if (newPassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newPassword", newPassword)); // query parameter
            if (rePassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rePassword", rePassword)); // query parameter
            if (keyPassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyPassword", keyPassword)); // query parameter
            if (keyStorePass != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyStorePass", keyStorePass)); // query parameter
            if (alias != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "alias", alias)); // query parameter
            if (newAlias != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newAlias", newAlias)); // query parameter
            if (removeAlias != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "removeAlias", removeAlias)); // query parameter
            if (certChain != null) localVarFileParams.Add("cert-chain", this.Configuration.ApiClient.ParameterToFile("cert-chain", certChain));
            if (pk != null) localVarFileParams.Add("pk", this.Configuration.ApiClient.ParameterToFile("pk", pk));
            if (keyStore != null) localVarFileParams.Add("keyStore", this.Configuration.ApiClient.ParameterToFile("keyStore", keyStore));

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAuthorizableKeystore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeystoreInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (KeystoreInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeystoreInfo)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <param name="operation"> (optional)</param>
        /// <param name="currentPassword"> (optional)</param>
        /// <param name="newPassword"> (optional)</param>
        /// <param name="rePassword"> (optional)</param>
        /// <param name="keyPassword"> (optional)</param>
        /// <param name="keyStorePass"> (optional)</param>
        /// <param name="alias"> (optional)</param>
        /// <param name="newAlias"> (optional)</param>
        /// <param name="removeAlias"> (optional)</param>
        /// <param name="certChain"> (optional)</param>
        /// <param name="pk"> (optional)</param>
        /// <param name="keyStore"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of KeystoreInfo</returns>
        public async System.Threading.Tasks.Task<KeystoreInfo> PostAuthorizableKeystoreAsync (string intermediatePath, string authorizableId, string operation = default(string), string currentPassword = default(string), string newPassword = default(string), string rePassword = default(string), string keyPassword = default(string), string keyStorePass = default(string), string alias = default(string), string newAlias = default(string), string removeAlias = default(string), System.IO.Stream certChain = default(System.IO.Stream), System.IO.Stream pk = default(System.IO.Stream), System.IO.Stream keyStore = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<KeystoreInfo> localVarResponse = await PostAuthorizableKeystoreWithHttpInfoAsync(intermediatePath, authorizableId, operation, currentPassword, newPassword, rePassword, keyPassword, keyStorePass, alias, newAlias, removeAlias, certChain, pk, keyStore, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <param name="operation"> (optional)</param>
        /// <param name="currentPassword"> (optional)</param>
        /// <param name="newPassword"> (optional)</param>
        /// <param name="rePassword"> (optional)</param>
        /// <param name="keyPassword"> (optional)</param>
        /// <param name="keyStorePass"> (optional)</param>
        /// <param name="alias"> (optional)</param>
        /// <param name="newAlias"> (optional)</param>
        /// <param name="removeAlias"> (optional)</param>
        /// <param name="certChain"> (optional)</param>
        /// <param name="pk"> (optional)</param>
        /// <param name="keyStore"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (KeystoreInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeystoreInfo>> PostAuthorizableKeystoreWithHttpInfoAsync (string intermediatePath, string authorizableId, string operation = default(string), string currentPassword = default(string), string newPassword = default(string), string rePassword = default(string), string keyPassword = default(string), string keyStorePass = default(string), string alias = default(string), string newAlias = default(string), string removeAlias = default(string), System.IO.Stream certChain = default(System.IO.Stream), System.IO.Stream pk = default(System.IO.Stream), System.IO.Stream keyStore = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'intermediatePath' is set
            if (intermediatePath == null)
                throw new ApiException(400, "Missing required parameter 'intermediatePath' when calling SlingApi->PostAuthorizableKeystore");
            // verify the required parameter 'authorizableId' is set
            if (authorizableId == null)
                throw new ApiException(400, "Missing required parameter 'authorizableId' when calling SlingApi->PostAuthorizableKeystore");

            var localVarPath = "/{intermediatePath}/{authorizableId}.ks.html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (intermediatePath != null) localVarPathParams.Add("intermediatePath", this.Configuration.ApiClient.ParameterToString(intermediatePath)); // path parameter
            if (authorizableId != null) localVarPathParams.Add("authorizableId", this.Configuration.ApiClient.ParameterToString(authorizableId)); // path parameter
            if (operation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", ":operation", operation)); // query parameter
            if (currentPassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currentPassword", currentPassword)); // query parameter
            if (newPassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newPassword", newPassword)); // query parameter
            if (rePassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rePassword", rePassword)); // query parameter
            if (keyPassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyPassword", keyPassword)); // query parameter
            if (keyStorePass != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyStorePass", keyStorePass)); // query parameter
            if (alias != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "alias", alias)); // query parameter
            if (newAlias != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newAlias", newAlias)); // query parameter
            if (removeAlias != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "removeAlias", removeAlias)); // query parameter
            if (certChain != null) localVarFileParams.Add("cert-chain", this.Configuration.ApiClient.ParameterToFile("cert-chain", certChain));
            if (pk != null) localVarFileParams.Add("pk", this.Configuration.ApiClient.ParameterToFile("pk", pk));
            if (keyStore != null) localVarFileParams.Add("keyStore", this.Configuration.ApiClient.ParameterToFile("keyStore", keyStore));

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAuthorizableKeystore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeystoreInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (KeystoreInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeystoreInfo)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizableId"></param>
        /// <param name="intermediatePath"></param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="createGroup"> (optional)</param>
        /// <param name="reppassword"> (optional)</param>
        /// <param name="profileGivenName"> (optional)</param>
        /// <returns>string</returns>
        public string PostAuthorizables (string authorizableId, string intermediatePath, string createUser = default(string), string createGroup = default(string), string reppassword = default(string), string profileGivenName = default(string))
        {
             ApiResponse<string> localVarResponse = PostAuthorizablesWithHttpInfo(authorizableId, intermediatePath, createUser, createGroup, reppassword, profileGivenName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizableId"></param>
        /// <param name="intermediatePath"></param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="createGroup"> (optional)</param>
        /// <param name="reppassword"> (optional)</param>
        /// <param name="profileGivenName"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> PostAuthorizablesWithHttpInfo (string authorizableId, string intermediatePath, string createUser = default(string), string createGroup = default(string), string reppassword = default(string), string profileGivenName = default(string))
        {
            // verify the required parameter 'authorizableId' is set
            if (authorizableId == null)
                throw new ApiException(400, "Missing required parameter 'authorizableId' when calling SlingApi->PostAuthorizables");
            // verify the required parameter 'intermediatePath' is set
            if (intermediatePath == null)
                throw new ApiException(400, "Missing required parameter 'intermediatePath' when calling SlingApi->PostAuthorizables");

            var localVarPath = "/libs/granite/security/post/authorizables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorizableId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authorizableId", authorizableId)); // query parameter
            if (intermediatePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "intermediatePath", intermediatePath)); // query parameter
            if (createUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createUser", createUser)); // query parameter
            if (createGroup != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createGroup", createGroup)); // query parameter
            if (reppassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rep:password", reppassword)); // query parameter
            if (profileGivenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "profile/givenName", profileGivenName)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAuthorizables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizableId"></param>
        /// <param name="intermediatePath"></param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="createGroup"> (optional)</param>
        /// <param name="reppassword"> (optional)</param>
        /// <param name="profileGivenName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostAuthorizablesAsync (string authorizableId, string intermediatePath, string createUser = default(string), string createGroup = default(string), string reppassword = default(string), string profileGivenName = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<string> localVarResponse = await PostAuthorizablesWithHttpInfoAsync(authorizableId, intermediatePath, createUser, createGroup, reppassword, profileGivenName, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizableId"></param>
        /// <param name="intermediatePath"></param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="createGroup"> (optional)</param>
        /// <param name="reppassword"> (optional)</param>
        /// <param name="profileGivenName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostAuthorizablesWithHttpInfoAsync (string authorizableId, string intermediatePath, string createUser = default(string), string createGroup = default(string), string reppassword = default(string), string profileGivenName = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'authorizableId' is set
            if (authorizableId == null)
                throw new ApiException(400, "Missing required parameter 'authorizableId' when calling SlingApi->PostAuthorizables");
            // verify the required parameter 'intermediatePath' is set
            if (intermediatePath == null)
                throw new ApiException(400, "Missing required parameter 'intermediatePath' when calling SlingApi->PostAuthorizables");

            var localVarPath = "/libs/granite/security/post/authorizables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorizableId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authorizableId", authorizableId)); // query parameter
            if (intermediatePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "intermediatePath", intermediatePath)); // query parameter
            if (createUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createUser", createUser)); // query parameter
            if (createGroup != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createGroup", createGroup)); // query parameter
            if (reppassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rep:password", reppassword)); // query parameter
            if (profileGivenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "profile/givenName", profileGivenName)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAuthorizables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyStorePassword"> (optional)</param>
        /// <param name="keyStorePasswordTypeHint"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="serviceRankingTypeHint"> (optional)</param>
        /// <param name="idpHttpRedirect"> (optional)</param>
        /// <param name="idpHttpRedirectTypeHint"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="createUserTypeHint"> (optional)</param>
        /// <param name="defaultRedirectUrl"> (optional)</param>
        /// <param name="defaultRedirectUrlTypeHint"> (optional)</param>
        /// <param name="userIDAttribute"> (optional)</param>
        /// <param name="userIDAttributeTypeHint"> (optional)</param>
        /// <param name="defaultGroups"> (optional)</param>
        /// <param name="defaultGroupsTypeHint"> (optional)</param>
        /// <param name="idpCertAlias"> (optional)</param>
        /// <param name="idpCertAliasTypeHint"> (optional)</param>
        /// <param name="addGroupMemberships"> (optional)</param>
        /// <param name="addGroupMembershipsTypeHint"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="pathTypeHint"> (optional)</param>
        /// <param name="synchronizeAttributes"> (optional)</param>
        /// <param name="synchronizeAttributesTypeHint"> (optional)</param>
        /// <param name="clockTolerance"> (optional)</param>
        /// <param name="clockToleranceTypeHint"> (optional)</param>
        /// <param name="groupMembershipAttribute"> (optional)</param>
        /// <param name="groupMembershipAttributeTypeHint"> (optional)</param>
        /// <param name="idpUrl"> (optional)</param>
        /// <param name="idpUrlTypeHint"> (optional)</param>
        /// <param name="logoutUrl"> (optional)</param>
        /// <param name="logoutUrlTypeHint"> (optional)</param>
        /// <param name="serviceProviderEntityId"> (optional)</param>
        /// <param name="serviceProviderEntityIdTypeHint"> (optional)</param>
        /// <param name="assertionConsumerServiceURL"> (optional)</param>
        /// <param name="assertionConsumerServiceURLTypeHint"> (optional)</param>
        /// <param name="handleLogout"> (optional)</param>
        /// <param name="handleLogoutTypeHint"> (optional)</param>
        /// <param name="spPrivateKeyAlias"> (optional)</param>
        /// <param name="spPrivateKeyAliasTypeHint"> (optional)</param>
        /// <param name="useEncryption"> (optional)</param>
        /// <param name="useEncryptionTypeHint"> (optional)</param>
        /// <param name="nameIdFormat"> (optional)</param>
        /// <param name="nameIdFormatTypeHint"> (optional)</param>
        /// <param name="digestMethod"> (optional)</param>
        /// <param name="digestMethodTypeHint"> (optional)</param>
        /// <param name="signatureMethod"> (optional)</param>
        /// <param name="signatureMethodTypeHint"> (optional)</param>
        /// <param name="userIntermediatePath"> (optional)</param>
        /// <param name="userIntermediatePathTypeHint"> (optional)</param>
        /// <returns></returns>
        public void PostConfigAdobeGraniteSamlAuthenticationHandler (string keyStorePassword = default(string), string keyStorePasswordTypeHint = default(string), int? serviceRanking = default(int?), string serviceRankingTypeHint = default(string), bool? idpHttpRedirect = default(bool?), string idpHttpRedirectTypeHint = default(string), bool? createUser = default(bool?), string createUserTypeHint = default(string), string defaultRedirectUrl = default(string), string defaultRedirectUrlTypeHint = default(string), string userIDAttribute = default(string), string userIDAttributeTypeHint = default(string), List<string> defaultGroups = default(List<string>), string defaultGroupsTypeHint = default(string), string idpCertAlias = default(string), string idpCertAliasTypeHint = default(string), bool? addGroupMemberships = default(bool?), string addGroupMembershipsTypeHint = default(string), List<string> path = default(List<string>), string pathTypeHint = default(string), List<string> synchronizeAttributes = default(List<string>), string synchronizeAttributesTypeHint = default(string), int? clockTolerance = default(int?), string clockToleranceTypeHint = default(string), string groupMembershipAttribute = default(string), string groupMembershipAttributeTypeHint = default(string), string idpUrl = default(string), string idpUrlTypeHint = default(string), string logoutUrl = default(string), string logoutUrlTypeHint = default(string), string serviceProviderEntityId = default(string), string serviceProviderEntityIdTypeHint = default(string), string assertionConsumerServiceURL = default(string), string assertionConsumerServiceURLTypeHint = default(string), bool? handleLogout = default(bool?), string handleLogoutTypeHint = default(string), string spPrivateKeyAlias = default(string), string spPrivateKeyAliasTypeHint = default(string), bool? useEncryption = default(bool?), string useEncryptionTypeHint = default(string), string nameIdFormat = default(string), string nameIdFormatTypeHint = default(string), string digestMethod = default(string), string digestMethodTypeHint = default(string), string signatureMethod = default(string), string signatureMethodTypeHint = default(string), string userIntermediatePath = default(string), string userIntermediatePathTypeHint = default(string))
        {
             PostConfigAdobeGraniteSamlAuthenticationHandlerWithHttpInfo(keyStorePassword, keyStorePasswordTypeHint, serviceRanking, serviceRankingTypeHint, idpHttpRedirect, idpHttpRedirectTypeHint, createUser, createUserTypeHint, defaultRedirectUrl, defaultRedirectUrlTypeHint, userIDAttribute, userIDAttributeTypeHint, defaultGroups, defaultGroupsTypeHint, idpCertAlias, idpCertAliasTypeHint, addGroupMemberships, addGroupMembershipsTypeHint, path, pathTypeHint, synchronizeAttributes, synchronizeAttributesTypeHint, clockTolerance, clockToleranceTypeHint, groupMembershipAttribute, groupMembershipAttributeTypeHint, idpUrl, idpUrlTypeHint, logoutUrl, logoutUrlTypeHint, serviceProviderEntityId, serviceProviderEntityIdTypeHint, assertionConsumerServiceURL, assertionConsumerServiceURLTypeHint, handleLogout, handleLogoutTypeHint, spPrivateKeyAlias, spPrivateKeyAliasTypeHint, useEncryption, useEncryptionTypeHint, nameIdFormat, nameIdFormatTypeHint, digestMethod, digestMethodTypeHint, signatureMethod, signatureMethodTypeHint, userIntermediatePath, userIntermediatePathTypeHint);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyStorePassword"> (optional)</param>
        /// <param name="keyStorePasswordTypeHint"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="serviceRankingTypeHint"> (optional)</param>
        /// <param name="idpHttpRedirect"> (optional)</param>
        /// <param name="idpHttpRedirectTypeHint"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="createUserTypeHint"> (optional)</param>
        /// <param name="defaultRedirectUrl"> (optional)</param>
        /// <param name="defaultRedirectUrlTypeHint"> (optional)</param>
        /// <param name="userIDAttribute"> (optional)</param>
        /// <param name="userIDAttributeTypeHint"> (optional)</param>
        /// <param name="defaultGroups"> (optional)</param>
        /// <param name="defaultGroupsTypeHint"> (optional)</param>
        /// <param name="idpCertAlias"> (optional)</param>
        /// <param name="idpCertAliasTypeHint"> (optional)</param>
        /// <param name="addGroupMemberships"> (optional)</param>
        /// <param name="addGroupMembershipsTypeHint"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="pathTypeHint"> (optional)</param>
        /// <param name="synchronizeAttributes"> (optional)</param>
        /// <param name="synchronizeAttributesTypeHint"> (optional)</param>
        /// <param name="clockTolerance"> (optional)</param>
        /// <param name="clockToleranceTypeHint"> (optional)</param>
        /// <param name="groupMembershipAttribute"> (optional)</param>
        /// <param name="groupMembershipAttributeTypeHint"> (optional)</param>
        /// <param name="idpUrl"> (optional)</param>
        /// <param name="idpUrlTypeHint"> (optional)</param>
        /// <param name="logoutUrl"> (optional)</param>
        /// <param name="logoutUrlTypeHint"> (optional)</param>
        /// <param name="serviceProviderEntityId"> (optional)</param>
        /// <param name="serviceProviderEntityIdTypeHint"> (optional)</param>
        /// <param name="assertionConsumerServiceURL"> (optional)</param>
        /// <param name="assertionConsumerServiceURLTypeHint"> (optional)</param>
        /// <param name="handleLogout"> (optional)</param>
        /// <param name="handleLogoutTypeHint"> (optional)</param>
        /// <param name="spPrivateKeyAlias"> (optional)</param>
        /// <param name="spPrivateKeyAliasTypeHint"> (optional)</param>
        /// <param name="useEncryption"> (optional)</param>
        /// <param name="useEncryptionTypeHint"> (optional)</param>
        /// <param name="nameIdFormat"> (optional)</param>
        /// <param name="nameIdFormatTypeHint"> (optional)</param>
        /// <param name="digestMethod"> (optional)</param>
        /// <param name="digestMethodTypeHint"> (optional)</param>
        /// <param name="signatureMethod"> (optional)</param>
        /// <param name="signatureMethodTypeHint"> (optional)</param>
        /// <param name="userIntermediatePath"> (optional)</param>
        /// <param name="userIntermediatePathTypeHint"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostConfigAdobeGraniteSamlAuthenticationHandlerWithHttpInfo (string keyStorePassword = default(string), string keyStorePasswordTypeHint = default(string), int? serviceRanking = default(int?), string serviceRankingTypeHint = default(string), bool? idpHttpRedirect = default(bool?), string idpHttpRedirectTypeHint = default(string), bool? createUser = default(bool?), string createUserTypeHint = default(string), string defaultRedirectUrl = default(string), string defaultRedirectUrlTypeHint = default(string), string userIDAttribute = default(string), string userIDAttributeTypeHint = default(string), List<string> defaultGroups = default(List<string>), string defaultGroupsTypeHint = default(string), string idpCertAlias = default(string), string idpCertAliasTypeHint = default(string), bool? addGroupMemberships = default(bool?), string addGroupMembershipsTypeHint = default(string), List<string> path = default(List<string>), string pathTypeHint = default(string), List<string> synchronizeAttributes = default(List<string>), string synchronizeAttributesTypeHint = default(string), int? clockTolerance = default(int?), string clockToleranceTypeHint = default(string), string groupMembershipAttribute = default(string), string groupMembershipAttributeTypeHint = default(string), string idpUrl = default(string), string idpUrlTypeHint = default(string), string logoutUrl = default(string), string logoutUrlTypeHint = default(string), string serviceProviderEntityId = default(string), string serviceProviderEntityIdTypeHint = default(string), string assertionConsumerServiceURL = default(string), string assertionConsumerServiceURLTypeHint = default(string), bool? handleLogout = default(bool?), string handleLogoutTypeHint = default(string), string spPrivateKeyAlias = default(string), string spPrivateKeyAliasTypeHint = default(string), bool? useEncryption = default(bool?), string useEncryptionTypeHint = default(string), string nameIdFormat = default(string), string nameIdFormatTypeHint = default(string), string digestMethod = default(string), string digestMethodTypeHint = default(string), string signatureMethod = default(string), string signatureMethodTypeHint = default(string), string userIntermediatePath = default(string), string userIntermediatePathTypeHint = default(string))
        {

            var localVarPath = "/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyStorePassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyStorePassword", keyStorePassword)); // query parameter
            if (keyStorePasswordTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyStorePassword@TypeHint", keyStorePasswordTypeHint)); // query parameter
            if (serviceRanking != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "service.ranking", serviceRanking)); // query parameter
            if (serviceRankingTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "service.ranking@TypeHint", serviceRankingTypeHint)); // query parameter
            if (idpHttpRedirect != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idpHttpRedirect", idpHttpRedirect)); // query parameter
            if (idpHttpRedirectTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idpHttpRedirect@TypeHint", idpHttpRedirectTypeHint)); // query parameter
            if (createUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createUser", createUser)); // query parameter
            if (createUserTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createUser@TypeHint", createUserTypeHint)); // query parameter
            if (defaultRedirectUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "defaultRedirectUrl", defaultRedirectUrl)); // query parameter
            if (defaultRedirectUrlTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "defaultRedirectUrl@TypeHint", defaultRedirectUrlTypeHint)); // query parameter
            if (userIDAttribute != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userIDAttribute", userIDAttribute)); // query parameter
            if (userIDAttributeTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userIDAttribute@TypeHint", userIDAttributeTypeHint)); // query parameter
            if (defaultGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "defaultGroups", defaultGroups)); // query parameter
            if (defaultGroupsTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "defaultGroups@TypeHint", defaultGroupsTypeHint)); // query parameter
            if (idpCertAlias != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idpCertAlias", idpCertAlias)); // query parameter
            if (idpCertAliasTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idpCertAlias@TypeHint", idpCertAliasTypeHint)); // query parameter
            if (addGroupMemberships != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addGroupMemberships", addGroupMemberships)); // query parameter
            if (addGroupMembershipsTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addGroupMemberships@TypeHint", addGroupMembershipsTypeHint)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "path", path)); // query parameter
            if (pathTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path@TypeHint", pathTypeHint)); // query parameter
            if (synchronizeAttributes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "synchronizeAttributes", synchronizeAttributes)); // query parameter
            if (synchronizeAttributesTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "synchronizeAttributes@TypeHint", synchronizeAttributesTypeHint)); // query parameter
            if (clockTolerance != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clockTolerance", clockTolerance)); // query parameter
            if (clockToleranceTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clockTolerance@TypeHint", clockToleranceTypeHint)); // query parameter
            if (groupMembershipAttribute != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupMembershipAttribute", groupMembershipAttribute)); // query parameter
            if (groupMembershipAttributeTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupMembershipAttribute@TypeHint", groupMembershipAttributeTypeHint)); // query parameter
            if (idpUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idpUrl", idpUrl)); // query parameter
            if (idpUrlTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idpUrl@TypeHint", idpUrlTypeHint)); // query parameter
            if (logoutUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logoutUrl", logoutUrl)); // query parameter
            if (logoutUrlTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logoutUrl@TypeHint", logoutUrlTypeHint)); // query parameter
            if (serviceProviderEntityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serviceProviderEntityId", serviceProviderEntityId)); // query parameter
            if (serviceProviderEntityIdTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serviceProviderEntityId@TypeHint", serviceProviderEntityIdTypeHint)); // query parameter
            if (assertionConsumerServiceURL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assertionConsumerServiceURL", assertionConsumerServiceURL)); // query parameter
            if (assertionConsumerServiceURLTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assertionConsumerServiceURL@TypeHint", assertionConsumerServiceURLTypeHint)); // query parameter
            if (handleLogout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "handleLogout", handleLogout)); // query parameter
            if (handleLogoutTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "handleLogout@TypeHint", handleLogoutTypeHint)); // query parameter
            if (spPrivateKeyAlias != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "spPrivateKeyAlias", spPrivateKeyAlias)); // query parameter
            if (spPrivateKeyAliasTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "spPrivateKeyAlias@TypeHint", spPrivateKeyAliasTypeHint)); // query parameter
            if (useEncryption != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "useEncryption", useEncryption)); // query parameter
            if (useEncryptionTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "useEncryption@TypeHint", useEncryptionTypeHint)); // query parameter
            if (nameIdFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nameIdFormat", nameIdFormat)); // query parameter
            if (nameIdFormatTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nameIdFormat@TypeHint", nameIdFormatTypeHint)); // query parameter
            if (digestMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "digestMethod", digestMethod)); // query parameter
            if (digestMethodTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "digestMethod@TypeHint", digestMethodTypeHint)); // query parameter
            if (signatureMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signatureMethod", signatureMethod)); // query parameter
            if (signatureMethodTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signatureMethod@TypeHint", signatureMethodTypeHint)); // query parameter
            if (userIntermediatePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userIntermediatePath", userIntermediatePath)); // query parameter
            if (userIntermediatePathTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userIntermediatePath@TypeHint", userIntermediatePathTypeHint)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConfigAdobeGraniteSamlAuthenticationHandler", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyStorePassword"> (optional)</param>
        /// <param name="keyStorePasswordTypeHint"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="serviceRankingTypeHint"> (optional)</param>
        /// <param name="idpHttpRedirect"> (optional)</param>
        /// <param name="idpHttpRedirectTypeHint"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="createUserTypeHint"> (optional)</param>
        /// <param name="defaultRedirectUrl"> (optional)</param>
        /// <param name="defaultRedirectUrlTypeHint"> (optional)</param>
        /// <param name="userIDAttribute"> (optional)</param>
        /// <param name="userIDAttributeTypeHint"> (optional)</param>
        /// <param name="defaultGroups"> (optional)</param>
        /// <param name="defaultGroupsTypeHint"> (optional)</param>
        /// <param name="idpCertAlias"> (optional)</param>
        /// <param name="idpCertAliasTypeHint"> (optional)</param>
        /// <param name="addGroupMemberships"> (optional)</param>
        /// <param name="addGroupMembershipsTypeHint"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="pathTypeHint"> (optional)</param>
        /// <param name="synchronizeAttributes"> (optional)</param>
        /// <param name="synchronizeAttributesTypeHint"> (optional)</param>
        /// <param name="clockTolerance"> (optional)</param>
        /// <param name="clockToleranceTypeHint"> (optional)</param>
        /// <param name="groupMembershipAttribute"> (optional)</param>
        /// <param name="groupMembershipAttributeTypeHint"> (optional)</param>
        /// <param name="idpUrl"> (optional)</param>
        /// <param name="idpUrlTypeHint"> (optional)</param>
        /// <param name="logoutUrl"> (optional)</param>
        /// <param name="logoutUrlTypeHint"> (optional)</param>
        /// <param name="serviceProviderEntityId"> (optional)</param>
        /// <param name="serviceProviderEntityIdTypeHint"> (optional)</param>
        /// <param name="assertionConsumerServiceURL"> (optional)</param>
        /// <param name="assertionConsumerServiceURLTypeHint"> (optional)</param>
        /// <param name="handleLogout"> (optional)</param>
        /// <param name="handleLogoutTypeHint"> (optional)</param>
        /// <param name="spPrivateKeyAlias"> (optional)</param>
        /// <param name="spPrivateKeyAliasTypeHint"> (optional)</param>
        /// <param name="useEncryption"> (optional)</param>
        /// <param name="useEncryptionTypeHint"> (optional)</param>
        /// <param name="nameIdFormat"> (optional)</param>
        /// <param name="nameIdFormatTypeHint"> (optional)</param>
        /// <param name="digestMethod"> (optional)</param>
        /// <param name="digestMethodTypeHint"> (optional)</param>
        /// <param name="signatureMethod"> (optional)</param>
        /// <param name="signatureMethodTypeHint"> (optional)</param>
        /// <param name="userIntermediatePath"> (optional)</param>
        /// <param name="userIntermediatePathTypeHint"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostConfigAdobeGraniteSamlAuthenticationHandlerAsync (string keyStorePassword = default(string), string keyStorePasswordTypeHint = default(string), int? serviceRanking = default(int?), string serviceRankingTypeHint = default(string), bool? idpHttpRedirect = default(bool?), string idpHttpRedirectTypeHint = default(string), bool? createUser = default(bool?), string createUserTypeHint = default(string), string defaultRedirectUrl = default(string), string defaultRedirectUrlTypeHint = default(string), string userIDAttribute = default(string), string userIDAttributeTypeHint = default(string), List<string> defaultGroups = default(List<string>), string defaultGroupsTypeHint = default(string), string idpCertAlias = default(string), string idpCertAliasTypeHint = default(string), bool? addGroupMemberships = default(bool?), string addGroupMembershipsTypeHint = default(string), List<string> path = default(List<string>), string pathTypeHint = default(string), List<string> synchronizeAttributes = default(List<string>), string synchronizeAttributesTypeHint = default(string), int? clockTolerance = default(int?), string clockToleranceTypeHint = default(string), string groupMembershipAttribute = default(string), string groupMembershipAttributeTypeHint = default(string), string idpUrl = default(string), string idpUrlTypeHint = default(string), string logoutUrl = default(string), string logoutUrlTypeHint = default(string), string serviceProviderEntityId = default(string), string serviceProviderEntityIdTypeHint = default(string), string assertionConsumerServiceURL = default(string), string assertionConsumerServiceURLTypeHint = default(string), bool? handleLogout = default(bool?), string handleLogoutTypeHint = default(string), string spPrivateKeyAlias = default(string), string spPrivateKeyAliasTypeHint = default(string), bool? useEncryption = default(bool?), string useEncryptionTypeHint = default(string), string nameIdFormat = default(string), string nameIdFormatTypeHint = default(string), string digestMethod = default(string), string digestMethodTypeHint = default(string), string signatureMethod = default(string), string signatureMethodTypeHint = default(string), string userIntermediatePath = default(string), string userIntermediatePathTypeHint = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await PostConfigAdobeGraniteSamlAuthenticationHandlerWithHttpInfoAsync(keyStorePassword, keyStorePasswordTypeHint, serviceRanking, serviceRankingTypeHint, idpHttpRedirect, idpHttpRedirectTypeHint, createUser, createUserTypeHint, defaultRedirectUrl, defaultRedirectUrlTypeHint, userIDAttribute, userIDAttributeTypeHint, defaultGroups, defaultGroupsTypeHint, idpCertAlias, idpCertAliasTypeHint, addGroupMemberships, addGroupMembershipsTypeHint, path, pathTypeHint, synchronizeAttributes, synchronizeAttributesTypeHint, clockTolerance, clockToleranceTypeHint, groupMembershipAttribute, groupMembershipAttributeTypeHint, idpUrl, idpUrlTypeHint, logoutUrl, logoutUrlTypeHint, serviceProviderEntityId, serviceProviderEntityIdTypeHint, assertionConsumerServiceURL, assertionConsumerServiceURLTypeHint, handleLogout, handleLogoutTypeHint, spPrivateKeyAlias, spPrivateKeyAliasTypeHint, useEncryption, useEncryptionTypeHint, nameIdFormat, nameIdFormatTypeHint, digestMethod, digestMethodTypeHint, signatureMethod, signatureMethodTypeHint, userIntermediatePath, userIntermediatePathTypeHint, cancellationToken);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyStorePassword"> (optional)</param>
        /// <param name="keyStorePasswordTypeHint"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="serviceRankingTypeHint"> (optional)</param>
        /// <param name="idpHttpRedirect"> (optional)</param>
        /// <param name="idpHttpRedirectTypeHint"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="createUserTypeHint"> (optional)</param>
        /// <param name="defaultRedirectUrl"> (optional)</param>
        /// <param name="defaultRedirectUrlTypeHint"> (optional)</param>
        /// <param name="userIDAttribute"> (optional)</param>
        /// <param name="userIDAttributeTypeHint"> (optional)</param>
        /// <param name="defaultGroups"> (optional)</param>
        /// <param name="defaultGroupsTypeHint"> (optional)</param>
        /// <param name="idpCertAlias"> (optional)</param>
        /// <param name="idpCertAliasTypeHint"> (optional)</param>
        /// <param name="addGroupMemberships"> (optional)</param>
        /// <param name="addGroupMembershipsTypeHint"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="pathTypeHint"> (optional)</param>
        /// <param name="synchronizeAttributes"> (optional)</param>
        /// <param name="synchronizeAttributesTypeHint"> (optional)</param>
        /// <param name="clockTolerance"> (optional)</param>
        /// <param name="clockToleranceTypeHint"> (optional)</param>
        /// <param name="groupMembershipAttribute"> (optional)</param>
        /// <param name="groupMembershipAttributeTypeHint"> (optional)</param>
        /// <param name="idpUrl"> (optional)</param>
        /// <param name="idpUrlTypeHint"> (optional)</param>
        /// <param name="logoutUrl"> (optional)</param>
        /// <param name="logoutUrlTypeHint"> (optional)</param>
        /// <param name="serviceProviderEntityId"> (optional)</param>
        /// <param name="serviceProviderEntityIdTypeHint"> (optional)</param>
        /// <param name="assertionConsumerServiceURL"> (optional)</param>
        /// <param name="assertionConsumerServiceURLTypeHint"> (optional)</param>
        /// <param name="handleLogout"> (optional)</param>
        /// <param name="handleLogoutTypeHint"> (optional)</param>
        /// <param name="spPrivateKeyAlias"> (optional)</param>
        /// <param name="spPrivateKeyAliasTypeHint"> (optional)</param>
        /// <param name="useEncryption"> (optional)</param>
        /// <param name="useEncryptionTypeHint"> (optional)</param>
        /// <param name="nameIdFormat"> (optional)</param>
        /// <param name="nameIdFormatTypeHint"> (optional)</param>
        /// <param name="digestMethod"> (optional)</param>
        /// <param name="digestMethodTypeHint"> (optional)</param>
        /// <param name="signatureMethod"> (optional)</param>
        /// <param name="signatureMethodTypeHint"> (optional)</param>
        /// <param name="userIntermediatePath"> (optional)</param>
        /// <param name="userIntermediatePathTypeHint"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostConfigAdobeGraniteSamlAuthenticationHandlerWithHttpInfoAsync (string keyStorePassword = default(string), string keyStorePasswordTypeHint = default(string), int? serviceRanking = default(int?), string serviceRankingTypeHint = default(string), bool? idpHttpRedirect = default(bool?), string idpHttpRedirectTypeHint = default(string), bool? createUser = default(bool?), string createUserTypeHint = default(string), string defaultRedirectUrl = default(string), string defaultRedirectUrlTypeHint = default(string), string userIDAttribute = default(string), string userIDAttributeTypeHint = default(string), List<string> defaultGroups = default(List<string>), string defaultGroupsTypeHint = default(string), string idpCertAlias = default(string), string idpCertAliasTypeHint = default(string), bool? addGroupMemberships = default(bool?), string addGroupMembershipsTypeHint = default(string), List<string> path = default(List<string>), string pathTypeHint = default(string), List<string> synchronizeAttributes = default(List<string>), string synchronizeAttributesTypeHint = default(string), int? clockTolerance = default(int?), string clockToleranceTypeHint = default(string), string groupMembershipAttribute = default(string), string groupMembershipAttributeTypeHint = default(string), string idpUrl = default(string), string idpUrlTypeHint = default(string), string logoutUrl = default(string), string logoutUrlTypeHint = default(string), string serviceProviderEntityId = default(string), string serviceProviderEntityIdTypeHint = default(string), string assertionConsumerServiceURL = default(string), string assertionConsumerServiceURLTypeHint = default(string), bool? handleLogout = default(bool?), string handleLogoutTypeHint = default(string), string spPrivateKeyAlias = default(string), string spPrivateKeyAliasTypeHint = default(string), bool? useEncryption = default(bool?), string useEncryptionTypeHint = default(string), string nameIdFormat = default(string), string nameIdFormatTypeHint = default(string), string digestMethod = default(string), string digestMethodTypeHint = default(string), string signatureMethod = default(string), string signatureMethodTypeHint = default(string), string userIntermediatePath = default(string), string userIntermediatePathTypeHint = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyStorePassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyStorePassword", keyStorePassword)); // query parameter
            if (keyStorePasswordTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyStorePassword@TypeHint", keyStorePasswordTypeHint)); // query parameter
            if (serviceRanking != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "service.ranking", serviceRanking)); // query parameter
            if (serviceRankingTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "service.ranking@TypeHint", serviceRankingTypeHint)); // query parameter
            if (idpHttpRedirect != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idpHttpRedirect", idpHttpRedirect)); // query parameter
            if (idpHttpRedirectTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idpHttpRedirect@TypeHint", idpHttpRedirectTypeHint)); // query parameter
            if (createUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createUser", createUser)); // query parameter
            if (createUserTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createUser@TypeHint", createUserTypeHint)); // query parameter
            if (defaultRedirectUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "defaultRedirectUrl", defaultRedirectUrl)); // query parameter
            if (defaultRedirectUrlTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "defaultRedirectUrl@TypeHint", defaultRedirectUrlTypeHint)); // query parameter
            if (userIDAttribute != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userIDAttribute", userIDAttribute)); // query parameter
            if (userIDAttributeTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userIDAttribute@TypeHint", userIDAttributeTypeHint)); // query parameter
            if (defaultGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "defaultGroups", defaultGroups)); // query parameter
            if (defaultGroupsTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "defaultGroups@TypeHint", defaultGroupsTypeHint)); // query parameter
            if (idpCertAlias != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idpCertAlias", idpCertAlias)); // query parameter
            if (idpCertAliasTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idpCertAlias@TypeHint", idpCertAliasTypeHint)); // query parameter
            if (addGroupMemberships != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addGroupMemberships", addGroupMemberships)); // query parameter
            if (addGroupMembershipsTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addGroupMemberships@TypeHint", addGroupMembershipsTypeHint)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "path", path)); // query parameter
            if (pathTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path@TypeHint", pathTypeHint)); // query parameter
            if (synchronizeAttributes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "synchronizeAttributes", synchronizeAttributes)); // query parameter
            if (synchronizeAttributesTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "synchronizeAttributes@TypeHint", synchronizeAttributesTypeHint)); // query parameter
            if (clockTolerance != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clockTolerance", clockTolerance)); // query parameter
            if (clockToleranceTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clockTolerance@TypeHint", clockToleranceTypeHint)); // query parameter
            if (groupMembershipAttribute != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupMembershipAttribute", groupMembershipAttribute)); // query parameter
            if (groupMembershipAttributeTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupMembershipAttribute@TypeHint", groupMembershipAttributeTypeHint)); // query parameter
            if (idpUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idpUrl", idpUrl)); // query parameter
            if (idpUrlTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idpUrl@TypeHint", idpUrlTypeHint)); // query parameter
            if (logoutUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logoutUrl", logoutUrl)); // query parameter
            if (logoutUrlTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logoutUrl@TypeHint", logoutUrlTypeHint)); // query parameter
            if (serviceProviderEntityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serviceProviderEntityId", serviceProviderEntityId)); // query parameter
            if (serviceProviderEntityIdTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serviceProviderEntityId@TypeHint", serviceProviderEntityIdTypeHint)); // query parameter
            if (assertionConsumerServiceURL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assertionConsumerServiceURL", assertionConsumerServiceURL)); // query parameter
            if (assertionConsumerServiceURLTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assertionConsumerServiceURL@TypeHint", assertionConsumerServiceURLTypeHint)); // query parameter
            if (handleLogout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "handleLogout", handleLogout)); // query parameter
            if (handleLogoutTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "handleLogout@TypeHint", handleLogoutTypeHint)); // query parameter
            if (spPrivateKeyAlias != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "spPrivateKeyAlias", spPrivateKeyAlias)); // query parameter
            if (spPrivateKeyAliasTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "spPrivateKeyAlias@TypeHint", spPrivateKeyAliasTypeHint)); // query parameter
            if (useEncryption != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "useEncryption", useEncryption)); // query parameter
            if (useEncryptionTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "useEncryption@TypeHint", useEncryptionTypeHint)); // query parameter
            if (nameIdFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nameIdFormat", nameIdFormat)); // query parameter
            if (nameIdFormatTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nameIdFormat@TypeHint", nameIdFormatTypeHint)); // query parameter
            if (digestMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "digestMethod", digestMethod)); // query parameter
            if (digestMethodTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "digestMethod@TypeHint", digestMethodTypeHint)); // query parameter
            if (signatureMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signatureMethod", signatureMethod)); // query parameter
            if (signatureMethodTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signatureMethod@TypeHint", signatureMethodTypeHint)); // query parameter
            if (userIntermediatePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userIntermediatePath", userIntermediatePath)); // query parameter
            if (userIntermediatePathTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userIntermediatePath@TypeHint", userIntermediatePathTypeHint)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConfigAdobeGraniteSamlAuthenticationHandler", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgApacheFelixHttpsNio"> (optional)</param>
        /// <param name="orgApacheFelixHttpsNioTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystore"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystorePassword"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystorePasswordTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKey"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyPassword"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyPasswordTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststore"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststoreTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststorePassword"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststorePasswordTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsClientcertificate"> (optional)</param>
        /// <param name="orgApacheFelixHttpsClientcertificateTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsEnable"> (optional)</param>
        /// <param name="orgApacheFelixHttpsEnableTypeHint"> (optional)</param>
        /// <param name="orgOsgiServiceHttpPortSecure"> (optional)</param>
        /// <param name="orgOsgiServiceHttpPortSecureTypeHint"> (optional)</param>
        /// <returns></returns>
        public void PostConfigApacheFelixJettyBasedHttpService (bool? orgApacheFelixHttpsNio = default(bool?), string orgApacheFelixHttpsNioTypeHint = default(string), string orgApacheFelixHttpsKeystore = default(string), string orgApacheFelixHttpsKeystoreTypeHint = default(string), string orgApacheFelixHttpsKeystorePassword = default(string), string orgApacheFelixHttpsKeystorePasswordTypeHint = default(string), string orgApacheFelixHttpsKeystoreKey = default(string), string orgApacheFelixHttpsKeystoreKeyTypeHint = default(string), string orgApacheFelixHttpsKeystoreKeyPassword = default(string), string orgApacheFelixHttpsKeystoreKeyPasswordTypeHint = default(string), string orgApacheFelixHttpsTruststore = default(string), string orgApacheFelixHttpsTruststoreTypeHint = default(string), string orgApacheFelixHttpsTruststorePassword = default(string), string orgApacheFelixHttpsTruststorePasswordTypeHint = default(string), string orgApacheFelixHttpsClientcertificate = default(string), string orgApacheFelixHttpsClientcertificateTypeHint = default(string), bool? orgApacheFelixHttpsEnable = default(bool?), string orgApacheFelixHttpsEnableTypeHint = default(string), string orgOsgiServiceHttpPortSecure = default(string), string orgOsgiServiceHttpPortSecureTypeHint = default(string))
        {
             PostConfigApacheFelixJettyBasedHttpServiceWithHttpInfo(orgApacheFelixHttpsNio, orgApacheFelixHttpsNioTypeHint, orgApacheFelixHttpsKeystore, orgApacheFelixHttpsKeystoreTypeHint, orgApacheFelixHttpsKeystorePassword, orgApacheFelixHttpsKeystorePasswordTypeHint, orgApacheFelixHttpsKeystoreKey, orgApacheFelixHttpsKeystoreKeyTypeHint, orgApacheFelixHttpsKeystoreKeyPassword, orgApacheFelixHttpsKeystoreKeyPasswordTypeHint, orgApacheFelixHttpsTruststore, orgApacheFelixHttpsTruststoreTypeHint, orgApacheFelixHttpsTruststorePassword, orgApacheFelixHttpsTruststorePasswordTypeHint, orgApacheFelixHttpsClientcertificate, orgApacheFelixHttpsClientcertificateTypeHint, orgApacheFelixHttpsEnable, orgApacheFelixHttpsEnableTypeHint, orgOsgiServiceHttpPortSecure, orgOsgiServiceHttpPortSecureTypeHint);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgApacheFelixHttpsNio"> (optional)</param>
        /// <param name="orgApacheFelixHttpsNioTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystore"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystorePassword"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystorePasswordTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKey"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyPassword"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyPasswordTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststore"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststoreTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststorePassword"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststorePasswordTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsClientcertificate"> (optional)</param>
        /// <param name="orgApacheFelixHttpsClientcertificateTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsEnable"> (optional)</param>
        /// <param name="orgApacheFelixHttpsEnableTypeHint"> (optional)</param>
        /// <param name="orgOsgiServiceHttpPortSecure"> (optional)</param>
        /// <param name="orgOsgiServiceHttpPortSecureTypeHint"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostConfigApacheFelixJettyBasedHttpServiceWithHttpInfo (bool? orgApacheFelixHttpsNio = default(bool?), string orgApacheFelixHttpsNioTypeHint = default(string), string orgApacheFelixHttpsKeystore = default(string), string orgApacheFelixHttpsKeystoreTypeHint = default(string), string orgApacheFelixHttpsKeystorePassword = default(string), string orgApacheFelixHttpsKeystorePasswordTypeHint = default(string), string orgApacheFelixHttpsKeystoreKey = default(string), string orgApacheFelixHttpsKeystoreKeyTypeHint = default(string), string orgApacheFelixHttpsKeystoreKeyPassword = default(string), string orgApacheFelixHttpsKeystoreKeyPasswordTypeHint = default(string), string orgApacheFelixHttpsTruststore = default(string), string orgApacheFelixHttpsTruststoreTypeHint = default(string), string orgApacheFelixHttpsTruststorePassword = default(string), string orgApacheFelixHttpsTruststorePasswordTypeHint = default(string), string orgApacheFelixHttpsClientcertificate = default(string), string orgApacheFelixHttpsClientcertificateTypeHint = default(string), bool? orgApacheFelixHttpsEnable = default(bool?), string orgApacheFelixHttpsEnableTypeHint = default(string), string orgOsgiServiceHttpPortSecure = default(string), string orgOsgiServiceHttpPortSecureTypeHint = default(string))
        {

            var localVarPath = "/apps/system/config/org.apache.felix.http";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgApacheFelixHttpsNio != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.nio", orgApacheFelixHttpsNio)); // query parameter
            if (orgApacheFelixHttpsNioTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.nio@TypeHint", orgApacheFelixHttpsNioTypeHint)); // query parameter
            if (orgApacheFelixHttpsKeystore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.keystore", orgApacheFelixHttpsKeystore)); // query parameter
            if (orgApacheFelixHttpsKeystoreTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.keystore@TypeHint", orgApacheFelixHttpsKeystoreTypeHint)); // query parameter
            if (orgApacheFelixHttpsKeystorePassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.keystore.password", orgApacheFelixHttpsKeystorePassword)); // query parameter
            if (orgApacheFelixHttpsKeystorePasswordTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.keystore.password@TypeHint", orgApacheFelixHttpsKeystorePasswordTypeHint)); // query parameter
            if (orgApacheFelixHttpsKeystoreKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.keystore.key", orgApacheFelixHttpsKeystoreKey)); // query parameter
            if (orgApacheFelixHttpsKeystoreKeyTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.keystore.key@TypeHint", orgApacheFelixHttpsKeystoreKeyTypeHint)); // query parameter
            if (orgApacheFelixHttpsKeystoreKeyPassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.keystore.key.password", orgApacheFelixHttpsKeystoreKeyPassword)); // query parameter
            if (orgApacheFelixHttpsKeystoreKeyPasswordTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.keystore.key.password@TypeHint", orgApacheFelixHttpsKeystoreKeyPasswordTypeHint)); // query parameter
            if (orgApacheFelixHttpsTruststore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.truststore", orgApacheFelixHttpsTruststore)); // query parameter
            if (orgApacheFelixHttpsTruststoreTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.truststore@TypeHint", orgApacheFelixHttpsTruststoreTypeHint)); // query parameter
            if (orgApacheFelixHttpsTruststorePassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.truststore.password", orgApacheFelixHttpsTruststorePassword)); // query parameter
            if (orgApacheFelixHttpsTruststorePasswordTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.truststore.password@TypeHint", orgApacheFelixHttpsTruststorePasswordTypeHint)); // query parameter
            if (orgApacheFelixHttpsClientcertificate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.clientcertificate", orgApacheFelixHttpsClientcertificate)); // query parameter
            if (orgApacheFelixHttpsClientcertificateTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.clientcertificate@TypeHint", orgApacheFelixHttpsClientcertificateTypeHint)); // query parameter
            if (orgApacheFelixHttpsEnable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.enable", orgApacheFelixHttpsEnable)); // query parameter
            if (orgApacheFelixHttpsEnableTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.enable@TypeHint", orgApacheFelixHttpsEnableTypeHint)); // query parameter
            if (orgOsgiServiceHttpPortSecure != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.osgi.service.http.port.secure", orgOsgiServiceHttpPortSecure)); // query parameter
            if (orgOsgiServiceHttpPortSecureTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.osgi.service.http.port.secure@TypeHint", orgOsgiServiceHttpPortSecureTypeHint)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConfigApacheFelixJettyBasedHttpService", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgApacheFelixHttpsNio"> (optional)</param>
        /// <param name="orgApacheFelixHttpsNioTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystore"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystorePassword"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystorePasswordTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKey"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyPassword"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyPasswordTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststore"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststoreTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststorePassword"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststorePasswordTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsClientcertificate"> (optional)</param>
        /// <param name="orgApacheFelixHttpsClientcertificateTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsEnable"> (optional)</param>
        /// <param name="orgApacheFelixHttpsEnableTypeHint"> (optional)</param>
        /// <param name="orgOsgiServiceHttpPortSecure"> (optional)</param>
        /// <param name="orgOsgiServiceHttpPortSecureTypeHint"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostConfigApacheFelixJettyBasedHttpServiceAsync (bool? orgApacheFelixHttpsNio = default(bool?), string orgApacheFelixHttpsNioTypeHint = default(string), string orgApacheFelixHttpsKeystore = default(string), string orgApacheFelixHttpsKeystoreTypeHint = default(string), string orgApacheFelixHttpsKeystorePassword = default(string), string orgApacheFelixHttpsKeystorePasswordTypeHint = default(string), string orgApacheFelixHttpsKeystoreKey = default(string), string orgApacheFelixHttpsKeystoreKeyTypeHint = default(string), string orgApacheFelixHttpsKeystoreKeyPassword = default(string), string orgApacheFelixHttpsKeystoreKeyPasswordTypeHint = default(string), string orgApacheFelixHttpsTruststore = default(string), string orgApacheFelixHttpsTruststoreTypeHint = default(string), string orgApacheFelixHttpsTruststorePassword = default(string), string orgApacheFelixHttpsTruststorePasswordTypeHint = default(string), string orgApacheFelixHttpsClientcertificate = default(string), string orgApacheFelixHttpsClientcertificateTypeHint = default(string), bool? orgApacheFelixHttpsEnable = default(bool?), string orgApacheFelixHttpsEnableTypeHint = default(string), string orgOsgiServiceHttpPortSecure = default(string), string orgOsgiServiceHttpPortSecureTypeHint = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await PostConfigApacheFelixJettyBasedHttpServiceWithHttpInfoAsync(orgApacheFelixHttpsNio, orgApacheFelixHttpsNioTypeHint, orgApacheFelixHttpsKeystore, orgApacheFelixHttpsKeystoreTypeHint, orgApacheFelixHttpsKeystorePassword, orgApacheFelixHttpsKeystorePasswordTypeHint, orgApacheFelixHttpsKeystoreKey, orgApacheFelixHttpsKeystoreKeyTypeHint, orgApacheFelixHttpsKeystoreKeyPassword, orgApacheFelixHttpsKeystoreKeyPasswordTypeHint, orgApacheFelixHttpsTruststore, orgApacheFelixHttpsTruststoreTypeHint, orgApacheFelixHttpsTruststorePassword, orgApacheFelixHttpsTruststorePasswordTypeHint, orgApacheFelixHttpsClientcertificate, orgApacheFelixHttpsClientcertificateTypeHint, orgApacheFelixHttpsEnable, orgApacheFelixHttpsEnableTypeHint, orgOsgiServiceHttpPortSecure, orgOsgiServiceHttpPortSecureTypeHint, cancellationToken);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgApacheFelixHttpsNio"> (optional)</param>
        /// <param name="orgApacheFelixHttpsNioTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystore"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystorePassword"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystorePasswordTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKey"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyPassword"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyPasswordTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststore"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststoreTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststorePassword"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststorePasswordTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsClientcertificate"> (optional)</param>
        /// <param name="orgApacheFelixHttpsClientcertificateTypeHint"> (optional)</param>
        /// <param name="orgApacheFelixHttpsEnable"> (optional)</param>
        /// <param name="orgApacheFelixHttpsEnableTypeHint"> (optional)</param>
        /// <param name="orgOsgiServiceHttpPortSecure"> (optional)</param>
        /// <param name="orgOsgiServiceHttpPortSecureTypeHint"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostConfigApacheFelixJettyBasedHttpServiceWithHttpInfoAsync (bool? orgApacheFelixHttpsNio = default(bool?), string orgApacheFelixHttpsNioTypeHint = default(string), string orgApacheFelixHttpsKeystore = default(string), string orgApacheFelixHttpsKeystoreTypeHint = default(string), string orgApacheFelixHttpsKeystorePassword = default(string), string orgApacheFelixHttpsKeystorePasswordTypeHint = default(string), string orgApacheFelixHttpsKeystoreKey = default(string), string orgApacheFelixHttpsKeystoreKeyTypeHint = default(string), string orgApacheFelixHttpsKeystoreKeyPassword = default(string), string orgApacheFelixHttpsKeystoreKeyPasswordTypeHint = default(string), string orgApacheFelixHttpsTruststore = default(string), string orgApacheFelixHttpsTruststoreTypeHint = default(string), string orgApacheFelixHttpsTruststorePassword = default(string), string orgApacheFelixHttpsTruststorePasswordTypeHint = default(string), string orgApacheFelixHttpsClientcertificate = default(string), string orgApacheFelixHttpsClientcertificateTypeHint = default(string), bool? orgApacheFelixHttpsEnable = default(bool?), string orgApacheFelixHttpsEnableTypeHint = default(string), string orgOsgiServiceHttpPortSecure = default(string), string orgOsgiServiceHttpPortSecureTypeHint = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/apps/system/config/org.apache.felix.http";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgApacheFelixHttpsNio != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.nio", orgApacheFelixHttpsNio)); // query parameter
            if (orgApacheFelixHttpsNioTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.nio@TypeHint", orgApacheFelixHttpsNioTypeHint)); // query parameter
            if (orgApacheFelixHttpsKeystore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.keystore", orgApacheFelixHttpsKeystore)); // query parameter
            if (orgApacheFelixHttpsKeystoreTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.keystore@TypeHint", orgApacheFelixHttpsKeystoreTypeHint)); // query parameter
            if (orgApacheFelixHttpsKeystorePassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.keystore.password", orgApacheFelixHttpsKeystorePassword)); // query parameter
            if (orgApacheFelixHttpsKeystorePasswordTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.keystore.password@TypeHint", orgApacheFelixHttpsKeystorePasswordTypeHint)); // query parameter
            if (orgApacheFelixHttpsKeystoreKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.keystore.key", orgApacheFelixHttpsKeystoreKey)); // query parameter
            if (orgApacheFelixHttpsKeystoreKeyTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.keystore.key@TypeHint", orgApacheFelixHttpsKeystoreKeyTypeHint)); // query parameter
            if (orgApacheFelixHttpsKeystoreKeyPassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.keystore.key.password", orgApacheFelixHttpsKeystoreKeyPassword)); // query parameter
            if (orgApacheFelixHttpsKeystoreKeyPasswordTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.keystore.key.password@TypeHint", orgApacheFelixHttpsKeystoreKeyPasswordTypeHint)); // query parameter
            if (orgApacheFelixHttpsTruststore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.truststore", orgApacheFelixHttpsTruststore)); // query parameter
            if (orgApacheFelixHttpsTruststoreTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.truststore@TypeHint", orgApacheFelixHttpsTruststoreTypeHint)); // query parameter
            if (orgApacheFelixHttpsTruststorePassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.truststore.password", orgApacheFelixHttpsTruststorePassword)); // query parameter
            if (orgApacheFelixHttpsTruststorePasswordTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.truststore.password@TypeHint", orgApacheFelixHttpsTruststorePasswordTypeHint)); // query parameter
            if (orgApacheFelixHttpsClientcertificate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.clientcertificate", orgApacheFelixHttpsClientcertificate)); // query parameter
            if (orgApacheFelixHttpsClientcertificateTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.clientcertificate@TypeHint", orgApacheFelixHttpsClientcertificateTypeHint)); // query parameter
            if (orgApacheFelixHttpsEnable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.enable", orgApacheFelixHttpsEnable)); // query parameter
            if (orgApacheFelixHttpsEnableTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.apache.felix.https.enable@TypeHint", orgApacheFelixHttpsEnableTypeHint)); // query parameter
            if (orgOsgiServiceHttpPortSecure != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.osgi.service.http.port.secure", orgOsgiServiceHttpPortSecure)); // query parameter
            if (orgOsgiServiceHttpPortSecureTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org.osgi.service.http.port.secure@TypeHint", orgOsgiServiceHttpPortSecureTypeHint)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConfigApacheFelixJettyBasedHttpService", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxyHost"> (optional)</param>
        /// <param name="proxyHostTypeHint"> (optional)</param>
        /// <param name="proxyPort"> (optional)</param>
        /// <param name="proxyPortTypeHint"> (optional)</param>
        /// <param name="proxyExceptions"> (optional)</param>
        /// <param name="proxyExceptionsTypeHint"> (optional)</param>
        /// <param name="proxyEnabled"> (optional)</param>
        /// <param name="proxyEnabledTypeHint"> (optional)</param>
        /// <param name="proxyUser"> (optional)</param>
        /// <param name="proxyUserTypeHint"> (optional)</param>
        /// <param name="proxyPassword"> (optional)</param>
        /// <param name="proxyPasswordTypeHint"> (optional)</param>
        /// <returns></returns>
        public void PostConfigApacheHttpComponentsProxyConfiguration (string proxyHost = default(string), string proxyHostTypeHint = default(string), int? proxyPort = default(int?), string proxyPortTypeHint = default(string), List<string> proxyExceptions = default(List<string>), string proxyExceptionsTypeHint = default(string), bool? proxyEnabled = default(bool?), string proxyEnabledTypeHint = default(string), string proxyUser = default(string), string proxyUserTypeHint = default(string), string proxyPassword = default(string), string proxyPasswordTypeHint = default(string))
        {
             PostConfigApacheHttpComponentsProxyConfigurationWithHttpInfo(proxyHost, proxyHostTypeHint, proxyPort, proxyPortTypeHint, proxyExceptions, proxyExceptionsTypeHint, proxyEnabled, proxyEnabledTypeHint, proxyUser, proxyUserTypeHint, proxyPassword, proxyPasswordTypeHint);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxyHost"> (optional)</param>
        /// <param name="proxyHostTypeHint"> (optional)</param>
        /// <param name="proxyPort"> (optional)</param>
        /// <param name="proxyPortTypeHint"> (optional)</param>
        /// <param name="proxyExceptions"> (optional)</param>
        /// <param name="proxyExceptionsTypeHint"> (optional)</param>
        /// <param name="proxyEnabled"> (optional)</param>
        /// <param name="proxyEnabledTypeHint"> (optional)</param>
        /// <param name="proxyUser"> (optional)</param>
        /// <param name="proxyUserTypeHint"> (optional)</param>
        /// <param name="proxyPassword"> (optional)</param>
        /// <param name="proxyPasswordTypeHint"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostConfigApacheHttpComponentsProxyConfigurationWithHttpInfo (string proxyHost = default(string), string proxyHostTypeHint = default(string), int? proxyPort = default(int?), string proxyPortTypeHint = default(string), List<string> proxyExceptions = default(List<string>), string proxyExceptionsTypeHint = default(string), bool? proxyEnabled = default(bool?), string proxyEnabledTypeHint = default(string), string proxyUser = default(string), string proxyUserTypeHint = default(string), string proxyPassword = default(string), string proxyPasswordTypeHint = default(string))
        {

            var localVarPath = "/apps/system/config/org.apache.http.proxyconfigurator.config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (proxyHost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "proxy.host", proxyHost)); // query parameter
            if (proxyHostTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "proxy.host@TypeHint", proxyHostTypeHint)); // query parameter
            if (proxyPort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "proxy.port", proxyPort)); // query parameter
            if (proxyPortTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "proxy.port@TypeHint", proxyPortTypeHint)); // query parameter
            if (proxyExceptions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "proxy.exceptions", proxyExceptions)); // query parameter
            if (proxyExceptionsTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "proxy.exceptions@TypeHint", proxyExceptionsTypeHint)); // query parameter
            if (proxyEnabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "proxy.enabled", proxyEnabled)); // query parameter
            if (proxyEnabledTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "proxy.enabled@TypeHint", proxyEnabledTypeHint)); // query parameter
            if (proxyUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "proxy.user", proxyUser)); // query parameter
            if (proxyUserTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "proxy.user@TypeHint", proxyUserTypeHint)); // query parameter
            if (proxyPassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "proxy.password", proxyPassword)); // query parameter
            if (proxyPasswordTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "proxy.password@TypeHint", proxyPasswordTypeHint)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConfigApacheHttpComponentsProxyConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxyHost"> (optional)</param>
        /// <param name="proxyHostTypeHint"> (optional)</param>
        /// <param name="proxyPort"> (optional)</param>
        /// <param name="proxyPortTypeHint"> (optional)</param>
        /// <param name="proxyExceptions"> (optional)</param>
        /// <param name="proxyExceptionsTypeHint"> (optional)</param>
        /// <param name="proxyEnabled"> (optional)</param>
        /// <param name="proxyEnabledTypeHint"> (optional)</param>
        /// <param name="proxyUser"> (optional)</param>
        /// <param name="proxyUserTypeHint"> (optional)</param>
        /// <param name="proxyPassword"> (optional)</param>
        /// <param name="proxyPasswordTypeHint"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostConfigApacheHttpComponentsProxyConfigurationAsync (string proxyHost = default(string), string proxyHostTypeHint = default(string), int? proxyPort = default(int?), string proxyPortTypeHint = default(string), List<string> proxyExceptions = default(List<string>), string proxyExceptionsTypeHint = default(string), bool? proxyEnabled = default(bool?), string proxyEnabledTypeHint = default(string), string proxyUser = default(string), string proxyUserTypeHint = default(string), string proxyPassword = default(string), string proxyPasswordTypeHint = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await PostConfigApacheHttpComponentsProxyConfigurationWithHttpInfoAsync(proxyHost, proxyHostTypeHint, proxyPort, proxyPortTypeHint, proxyExceptions, proxyExceptionsTypeHint, proxyEnabled, proxyEnabledTypeHint, proxyUser, proxyUserTypeHint, proxyPassword, proxyPasswordTypeHint, cancellationToken);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="proxyHost"> (optional)</param>
        /// <param name="proxyHostTypeHint"> (optional)</param>
        /// <param name="proxyPort"> (optional)</param>
        /// <param name="proxyPortTypeHint"> (optional)</param>
        /// <param name="proxyExceptions"> (optional)</param>
        /// <param name="proxyExceptionsTypeHint"> (optional)</param>
        /// <param name="proxyEnabled"> (optional)</param>
        /// <param name="proxyEnabledTypeHint"> (optional)</param>
        /// <param name="proxyUser"> (optional)</param>
        /// <param name="proxyUserTypeHint"> (optional)</param>
        /// <param name="proxyPassword"> (optional)</param>
        /// <param name="proxyPasswordTypeHint"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostConfigApacheHttpComponentsProxyConfigurationWithHttpInfoAsync (string proxyHost = default(string), string proxyHostTypeHint = default(string), int? proxyPort = default(int?), string proxyPortTypeHint = default(string), List<string> proxyExceptions = default(List<string>), string proxyExceptionsTypeHint = default(string), bool? proxyEnabled = default(bool?), string proxyEnabledTypeHint = default(string), string proxyUser = default(string), string proxyUserTypeHint = default(string), string proxyPassword = default(string), string proxyPasswordTypeHint = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/apps/system/config/org.apache.http.proxyconfigurator.config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (proxyHost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "proxy.host", proxyHost)); // query parameter
            if (proxyHostTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "proxy.host@TypeHint", proxyHostTypeHint)); // query parameter
            if (proxyPort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "proxy.port", proxyPort)); // query parameter
            if (proxyPortTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "proxy.port@TypeHint", proxyPortTypeHint)); // query parameter
            if (proxyExceptions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "proxy.exceptions", proxyExceptions)); // query parameter
            if (proxyExceptionsTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "proxy.exceptions@TypeHint", proxyExceptionsTypeHint)); // query parameter
            if (proxyEnabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "proxy.enabled", proxyEnabled)); // query parameter
            if (proxyEnabledTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "proxy.enabled@TypeHint", proxyEnabledTypeHint)); // query parameter
            if (proxyUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "proxy.user", proxyUser)); // query parameter
            if (proxyUserTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "proxy.user@TypeHint", proxyUserTypeHint)); // query parameter
            if (proxyPassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "proxy.password", proxyPassword)); // query parameter
            if (proxyPasswordTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "proxy.password@TypeHint", proxyPasswordTypeHint)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConfigApacheHttpComponentsProxyConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"> (optional)</param>
        /// <param name="aliasTypeHint"> (optional)</param>
        /// <param name="davCreateAbsoluteUri"> (optional)</param>
        /// <param name="davCreateAbsoluteUriTypeHint"> (optional)</param>
        /// <returns></returns>
        public void PostConfigApacheSlingDavExServlet (string alias = default(string), string aliasTypeHint = default(string), bool? davCreateAbsoluteUri = default(bool?), string davCreateAbsoluteUriTypeHint = default(string))
        {
             PostConfigApacheSlingDavExServletWithHttpInfo(alias, aliasTypeHint, davCreateAbsoluteUri, davCreateAbsoluteUriTypeHint);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"> (optional)</param>
        /// <param name="aliasTypeHint"> (optional)</param>
        /// <param name="davCreateAbsoluteUri"> (optional)</param>
        /// <param name="davCreateAbsoluteUriTypeHint"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostConfigApacheSlingDavExServletWithHttpInfo (string alias = default(string), string aliasTypeHint = default(string), bool? davCreateAbsoluteUri = default(bool?), string davCreateAbsoluteUriTypeHint = default(string))
        {

            var localVarPath = "/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (alias != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "alias", alias)); // query parameter
            if (aliasTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "alias@TypeHint", aliasTypeHint)); // query parameter
            if (davCreateAbsoluteUri != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dav.create-absolute-uri", davCreateAbsoluteUri)); // query parameter
            if (davCreateAbsoluteUriTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dav.create-absolute-uri@TypeHint", davCreateAbsoluteUriTypeHint)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConfigApacheSlingDavExServlet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"> (optional)</param>
        /// <param name="aliasTypeHint"> (optional)</param>
        /// <param name="davCreateAbsoluteUri"> (optional)</param>
        /// <param name="davCreateAbsoluteUriTypeHint"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostConfigApacheSlingDavExServletAsync (string alias = default(string), string aliasTypeHint = default(string), bool? davCreateAbsoluteUri = default(bool?), string davCreateAbsoluteUriTypeHint = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await PostConfigApacheSlingDavExServletWithHttpInfoAsync(alias, aliasTypeHint, davCreateAbsoluteUri, davCreateAbsoluteUriTypeHint, cancellationToken);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"> (optional)</param>
        /// <param name="aliasTypeHint"> (optional)</param>
        /// <param name="davCreateAbsoluteUri"> (optional)</param>
        /// <param name="davCreateAbsoluteUriTypeHint"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostConfigApacheSlingDavExServletWithHttpInfoAsync (string alias = default(string), string aliasTypeHint = default(string), bool? davCreateAbsoluteUri = default(bool?), string davCreateAbsoluteUriTypeHint = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (alias != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "alias", alias)); // query parameter
            if (aliasTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "alias@TypeHint", aliasTypeHint)); // query parameter
            if (davCreateAbsoluteUri != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dav.create-absolute-uri", davCreateAbsoluteUri)); // query parameter
            if (davCreateAbsoluteUriTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dav.create-absolute-uri@TypeHint", davCreateAbsoluteUriTypeHint)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConfigApacheSlingDavExServlet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonMaximumresults"> (optional)</param>
        /// <param name="jsonMaximumresultsTypeHint"> (optional)</param>
        /// <param name="enableHtml"> (optional)</param>
        /// <param name="enableHtmlTypeHint"> (optional)</param>
        /// <param name="enableTxt"> (optional)</param>
        /// <param name="enableTxtTypeHint"> (optional)</param>
        /// <param name="enableXml"> (optional)</param>
        /// <param name="enableXmlTypeHint"> (optional)</param>
        /// <returns></returns>
        public void PostConfigApacheSlingGetServlet (string jsonMaximumresults = default(string), string jsonMaximumresultsTypeHint = default(string), bool? enableHtml = default(bool?), string enableHtmlTypeHint = default(string), bool? enableTxt = default(bool?), string enableTxtTypeHint = default(string), bool? enableXml = default(bool?), string enableXmlTypeHint = default(string))
        {
             PostConfigApacheSlingGetServletWithHttpInfo(jsonMaximumresults, jsonMaximumresultsTypeHint, enableHtml, enableHtmlTypeHint, enableTxt, enableTxtTypeHint, enableXml, enableXmlTypeHint);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonMaximumresults"> (optional)</param>
        /// <param name="jsonMaximumresultsTypeHint"> (optional)</param>
        /// <param name="enableHtml"> (optional)</param>
        /// <param name="enableHtmlTypeHint"> (optional)</param>
        /// <param name="enableTxt"> (optional)</param>
        /// <param name="enableTxtTypeHint"> (optional)</param>
        /// <param name="enableXml"> (optional)</param>
        /// <param name="enableXmlTypeHint"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostConfigApacheSlingGetServletWithHttpInfo (string jsonMaximumresults = default(string), string jsonMaximumresultsTypeHint = default(string), bool? enableHtml = default(bool?), string enableHtmlTypeHint = default(string), bool? enableTxt = default(bool?), string enableTxtTypeHint = default(string), bool? enableXml = default(bool?), string enableXmlTypeHint = default(string))
        {

            var localVarPath = "/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jsonMaximumresults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "json.maximumresults", jsonMaximumresults)); // query parameter
            if (jsonMaximumresultsTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "json.maximumresults@TypeHint", jsonMaximumresultsTypeHint)); // query parameter
            if (enableHtml != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enable.html", enableHtml)); // query parameter
            if (enableHtmlTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enable.html@TypeHint", enableHtmlTypeHint)); // query parameter
            if (enableTxt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enable.txt", enableTxt)); // query parameter
            if (enableTxtTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enable.txt@TypeHint", enableTxtTypeHint)); // query parameter
            if (enableXml != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enable.xml", enableXml)); // query parameter
            if (enableXmlTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enable.xml@TypeHint", enableXmlTypeHint)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConfigApacheSlingGetServlet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonMaximumresults"> (optional)</param>
        /// <param name="jsonMaximumresultsTypeHint"> (optional)</param>
        /// <param name="enableHtml"> (optional)</param>
        /// <param name="enableHtmlTypeHint"> (optional)</param>
        /// <param name="enableTxt"> (optional)</param>
        /// <param name="enableTxtTypeHint"> (optional)</param>
        /// <param name="enableXml"> (optional)</param>
        /// <param name="enableXmlTypeHint"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostConfigApacheSlingGetServletAsync (string jsonMaximumresults = default(string), string jsonMaximumresultsTypeHint = default(string), bool? enableHtml = default(bool?), string enableHtmlTypeHint = default(string), bool? enableTxt = default(bool?), string enableTxtTypeHint = default(string), bool? enableXml = default(bool?), string enableXmlTypeHint = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await PostConfigApacheSlingGetServletWithHttpInfoAsync(jsonMaximumresults, jsonMaximumresultsTypeHint, enableHtml, enableHtmlTypeHint, enableTxt, enableTxtTypeHint, enableXml, enableXmlTypeHint, cancellationToken);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonMaximumresults"> (optional)</param>
        /// <param name="jsonMaximumresultsTypeHint"> (optional)</param>
        /// <param name="enableHtml"> (optional)</param>
        /// <param name="enableHtmlTypeHint"> (optional)</param>
        /// <param name="enableTxt"> (optional)</param>
        /// <param name="enableTxtTypeHint"> (optional)</param>
        /// <param name="enableXml"> (optional)</param>
        /// <param name="enableXmlTypeHint"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostConfigApacheSlingGetServletWithHttpInfoAsync (string jsonMaximumresults = default(string), string jsonMaximumresultsTypeHint = default(string), bool? enableHtml = default(bool?), string enableHtmlTypeHint = default(string), bool? enableTxt = default(bool?), string enableTxtTypeHint = default(string), bool? enableXml = default(bool?), string enableXmlTypeHint = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jsonMaximumresults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "json.maximumresults", jsonMaximumresults)); // query parameter
            if (jsonMaximumresultsTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "json.maximumresults@TypeHint", jsonMaximumresultsTypeHint)); // query parameter
            if (enableHtml != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enable.html", enableHtml)); // query parameter
            if (enableHtmlTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enable.html@TypeHint", enableHtmlTypeHint)); // query parameter
            if (enableTxt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enable.txt", enableTxt)); // query parameter
            if (enableTxtTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enable.txt@TypeHint", enableTxtTypeHint)); // query parameter
            if (enableXml != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enable.xml", enableXml)); // query parameter
            if (enableXmlTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enable.xml@TypeHint", enableXmlTypeHint)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConfigApacheSlingGetServlet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowEmpty"> (optional)</param>
        /// <param name="allowEmptyTypeHint"> (optional)</param>
        /// <param name="allowHosts"> (optional)</param>
        /// <param name="allowHostsTypeHint"> (optional)</param>
        /// <param name="allowHostsRegexp"> (optional)</param>
        /// <param name="allowHostsRegexpTypeHint"> (optional)</param>
        /// <param name="filterMethods"> (optional)</param>
        /// <param name="filterMethodsTypeHint"> (optional)</param>
        /// <returns></returns>
        public void PostConfigApacheSlingReferrerFilter (bool? allowEmpty = default(bool?), string allowEmptyTypeHint = default(string), string allowHosts = default(string), string allowHostsTypeHint = default(string), string allowHostsRegexp = default(string), string allowHostsRegexpTypeHint = default(string), string filterMethods = default(string), string filterMethodsTypeHint = default(string))
        {
             PostConfigApacheSlingReferrerFilterWithHttpInfo(allowEmpty, allowEmptyTypeHint, allowHosts, allowHostsTypeHint, allowHostsRegexp, allowHostsRegexpTypeHint, filterMethods, filterMethodsTypeHint);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowEmpty"> (optional)</param>
        /// <param name="allowEmptyTypeHint"> (optional)</param>
        /// <param name="allowHosts"> (optional)</param>
        /// <param name="allowHostsTypeHint"> (optional)</param>
        /// <param name="allowHostsRegexp"> (optional)</param>
        /// <param name="allowHostsRegexpTypeHint"> (optional)</param>
        /// <param name="filterMethods"> (optional)</param>
        /// <param name="filterMethodsTypeHint"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostConfigApacheSlingReferrerFilterWithHttpInfo (bool? allowEmpty = default(bool?), string allowEmptyTypeHint = default(string), string allowHosts = default(string), string allowHostsTypeHint = default(string), string allowHostsRegexp = default(string), string allowHostsRegexpTypeHint = default(string), string filterMethods = default(string), string filterMethodsTypeHint = default(string))
        {

            var localVarPath = "/apps/system/config/org.apache.sling.security.impl.ReferrerFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allowEmpty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allow.empty", allowEmpty)); // query parameter
            if (allowEmptyTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allow.empty@TypeHint", allowEmptyTypeHint)); // query parameter
            if (allowHosts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allow.hosts", allowHosts)); // query parameter
            if (allowHostsTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allow.hosts@TypeHint", allowHostsTypeHint)); // query parameter
            if (allowHostsRegexp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allow.hosts.regexp", allowHostsRegexp)); // query parameter
            if (allowHostsRegexpTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allow.hosts.regexp@TypeHint", allowHostsRegexpTypeHint)); // query parameter
            if (filterMethods != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter.methods", filterMethods)); // query parameter
            if (filterMethodsTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter.methods@TypeHint", filterMethodsTypeHint)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConfigApacheSlingReferrerFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowEmpty"> (optional)</param>
        /// <param name="allowEmptyTypeHint"> (optional)</param>
        /// <param name="allowHosts"> (optional)</param>
        /// <param name="allowHostsTypeHint"> (optional)</param>
        /// <param name="allowHostsRegexp"> (optional)</param>
        /// <param name="allowHostsRegexpTypeHint"> (optional)</param>
        /// <param name="filterMethods"> (optional)</param>
        /// <param name="filterMethodsTypeHint"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostConfigApacheSlingReferrerFilterAsync (bool? allowEmpty = default(bool?), string allowEmptyTypeHint = default(string), string allowHosts = default(string), string allowHostsTypeHint = default(string), string allowHostsRegexp = default(string), string allowHostsRegexpTypeHint = default(string), string filterMethods = default(string), string filterMethodsTypeHint = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await PostConfigApacheSlingReferrerFilterWithHttpInfoAsync(allowEmpty, allowEmptyTypeHint, allowHosts, allowHostsTypeHint, allowHostsRegexp, allowHostsRegexpTypeHint, filterMethods, filterMethodsTypeHint, cancellationToken);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowEmpty"> (optional)</param>
        /// <param name="allowEmptyTypeHint"> (optional)</param>
        /// <param name="allowHosts"> (optional)</param>
        /// <param name="allowHostsTypeHint"> (optional)</param>
        /// <param name="allowHostsRegexp"> (optional)</param>
        /// <param name="allowHostsRegexpTypeHint"> (optional)</param>
        /// <param name="filterMethods"> (optional)</param>
        /// <param name="filterMethodsTypeHint"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostConfigApacheSlingReferrerFilterWithHttpInfoAsync (bool? allowEmpty = default(bool?), string allowEmptyTypeHint = default(string), string allowHosts = default(string), string allowHostsTypeHint = default(string), string allowHostsRegexp = default(string), string allowHostsRegexpTypeHint = default(string), string filterMethods = default(string), string filterMethodsTypeHint = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/apps/system/config/org.apache.sling.security.impl.ReferrerFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allowEmpty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allow.empty", allowEmpty)); // query parameter
            if (allowEmptyTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allow.empty@TypeHint", allowEmptyTypeHint)); // query parameter
            if (allowHosts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allow.hosts", allowHosts)); // query parameter
            if (allowHostsTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allow.hosts@TypeHint", allowHostsTypeHint)); // query parameter
            if (allowHostsRegexp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allow.hosts.regexp", allowHostsRegexp)); // query parameter
            if (allowHostsRegexpTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allow.hosts.regexp@TypeHint", allowHostsRegexpTypeHint)); // query parameter
            if (filterMethods != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter.methods", filterMethods)); // query parameter
            if (filterMethodsTypeHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter.methods@TypeHint", filterMethodsTypeHint)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConfigApacheSlingReferrerFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configNodeName"></param>
        /// <returns></returns>
        public void PostConfigProperty (string configNodeName)
        {
             PostConfigPropertyWithHttpInfo(configNodeName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configNodeName"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostConfigPropertyWithHttpInfo (string configNodeName)
        {
            // verify the required parameter 'configNodeName' is set
            if (configNodeName == null)
                throw new ApiException(400, "Missing required parameter 'configNodeName' when calling SlingApi->PostConfigProperty");

            var localVarPath = "/apps/system/config/{configNodeName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (configNodeName != null) localVarPathParams.Add("configNodeName", this.Configuration.ApiClient.ParameterToString(configNodeName)); // path parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConfigProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configNodeName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostConfigPropertyAsync (string configNodeName, CancellationToken cancellationToken = default(CancellationToken))
        {
             await PostConfigPropertyWithHttpInfoAsync(configNodeName, cancellationToken);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configNodeName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostConfigPropertyWithHttpInfoAsync (string configNodeName, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'configNodeName' is set
            if (configNodeName == null)
                throw new ApiException(400, "Missing required parameter 'configNodeName' when calling SlingApi->PostConfigProperty");

            var localVarPath = "/apps/system/config/{configNodeName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (configNodeName != null) localVarPathParams.Add("configNodeName", this.Configuration.ApiClient.ParameterToString(configNodeName)); // path parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConfigProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <param name="operation"> (optional)</param>
        /// <param name="deleteAuthorizable"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns></returns>
        public void PostNode (string path, string name, string operation = default(string), string deleteAuthorizable = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
             PostNodeWithHttpInfo(path, name, operation, deleteAuthorizable, file);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <param name="operation"> (optional)</param>
        /// <param name="deleteAuthorizable"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostNodeWithHttpInfo (string path, string name, string operation = default(string), string deleteAuthorizable = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling SlingApi->PostNode");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SlingApi->PostNode");

            var localVarPath = "/{path}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (operation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", ":operation", operation)); // query parameter
            if (deleteAuthorizable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deleteAuthorizable", deleteAuthorizable)); // query parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <param name="operation"> (optional)</param>
        /// <param name="deleteAuthorizable"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostNodeAsync (string path, string name, string operation = default(string), string deleteAuthorizable = default(string), System.IO.Stream file = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
        {
             await PostNodeWithHttpInfoAsync(path, name, operation, deleteAuthorizable, file, cancellationToken);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <param name="operation"> (optional)</param>
        /// <param name="deleteAuthorizable"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostNodeWithHttpInfoAsync (string path, string name, string operation = default(string), string deleteAuthorizable = default(string), System.IO.Stream file = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling SlingApi->PostNode");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SlingApi->PostNode");

            var localVarPath = "/{path}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (operation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", ":operation", operation)); // query parameter
            if (deleteAuthorizable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deleteAuthorizable", deleteAuthorizable)); // query parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <param name="addMembers"> (optional)</param>
        /// <returns></returns>
        public void PostNodeRw (string path, string name, string addMembers = default(string))
        {
             PostNodeRwWithHttpInfo(path, name, addMembers);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <param name="addMembers"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostNodeRwWithHttpInfo (string path, string name, string addMembers = default(string))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling SlingApi->PostNodeRw");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SlingApi->PostNodeRw");

            var localVarPath = "/{path}/{name}.rw.html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (addMembers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addMembers", addMembers)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostNodeRw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <param name="addMembers"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostNodeRwAsync (string path, string name, string addMembers = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await PostNodeRwWithHttpInfoAsync(path, name, addMembers, cancellationToken);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <param name="addMembers"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostNodeRwWithHttpInfoAsync (string path, string name, string addMembers = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling SlingApi->PostNodeRw");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SlingApi->PostNodeRw");

            var localVarPath = "/{path}/{name}.rw.html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (addMembers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addMembers", addMembers)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostNodeRw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="jcrprimaryType"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        public void PostPath (string path, string jcrprimaryType, string name)
        {
             PostPathWithHttpInfo(path, jcrprimaryType, name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="jcrprimaryType"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostPathWithHttpInfo (string path, string jcrprimaryType, string name)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling SlingApi->PostPath");
            // verify the required parameter 'jcrprimaryType' is set
            if (jcrprimaryType == null)
                throw new ApiException(400, "Missing required parameter 'jcrprimaryType' when calling SlingApi->PostPath");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SlingApi->PostPath");

            var localVarPath = "/{path}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (jcrprimaryType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:primaryType", jcrprimaryType)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", ":name", name)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="jcrprimaryType"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostPathAsync (string path, string jcrprimaryType, string name, CancellationToken cancellationToken = default(CancellationToken))
        {
             await PostPathWithHttpInfoAsync(path, jcrprimaryType, name, cancellationToken);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="jcrprimaryType"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostPathWithHttpInfoAsync (string path, string jcrprimaryType, string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling SlingApi->PostPath");
            // verify the required parameter 'jcrprimaryType' is set
            if (jcrprimaryType == null)
                throw new ApiException(400, "Missing required parameter 'jcrprimaryType' when calling SlingApi->PostPath");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SlingApi->PostPath");

            var localVarPath = "/{path}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (jcrprimaryType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jcr:primaryType", jcrprimaryType)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", ":name", name)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="pLimit"></param>
        /// <param name="_1property"></param>
        /// <param name="_1propertyValue"></param>
        /// <returns>string</returns>
        public string PostQuery (string path, decimal pLimit, string _1property, string _1propertyValue)
        {
             ApiResponse<string> localVarResponse = PostQueryWithHttpInfo(path, pLimit, _1property, _1propertyValue);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="pLimit"></param>
        /// <param name="_1property"></param>
        /// <param name="_1propertyValue"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> PostQueryWithHttpInfo (string path, decimal pLimit, string _1property, string _1propertyValue)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling SlingApi->PostQuery");
            // verify the required parameter 'pLimit' is set
            if (pLimit == null)
                throw new ApiException(400, "Missing required parameter 'pLimit' when calling SlingApi->PostQuery");
            // verify the required parameter '_1property' is set
            if (_1property == null)
                throw new ApiException(400, "Missing required parameter '_1property' when calling SlingApi->PostQuery");
            // verify the required parameter '_1propertyValue' is set
            if (_1propertyValue == null)
                throw new ApiException(400, "Missing required parameter '_1propertyValue' when calling SlingApi->PostQuery");

            var localVarPath = "/bin/querybuilder.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            if (pLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "p.limit", pLimit)); // query parameter
            if (_1property != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "1_property", _1property)); // query parameter
            if (_1propertyValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "1_property.value", _1propertyValue)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="pLimit"></param>
        /// <param name="_1property"></param>
        /// <param name="_1propertyValue"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostQueryAsync (string path, decimal pLimit, string _1property, string _1propertyValue, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<string> localVarResponse = await PostQueryWithHttpInfoAsync(path, pLimit, _1property, _1propertyValue, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="pLimit"></param>
        /// <param name="_1property"></param>
        /// <param name="_1propertyValue"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostQueryWithHttpInfoAsync (string path, decimal pLimit, string _1property, string _1propertyValue, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling SlingApi->PostQuery");
            // verify the required parameter 'pLimit' is set
            if (pLimit == null)
                throw new ApiException(400, "Missing required parameter 'pLimit' when calling SlingApi->PostQuery");
            // verify the required parameter '_1property' is set
            if (_1property == null)
                throw new ApiException(400, "Missing required parameter '_1property' when calling SlingApi->PostQuery");
            // verify the required parameter '_1propertyValue' is set
            if (_1propertyValue == null)
                throw new ApiException(400, "Missing required parameter '_1propertyValue' when calling SlingApi->PostQuery");

            var localVarPath = "/bin/querybuilder.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            if (pLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "p.limit", pLimit)); // query parameter
            if (_1property != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "1_property", _1property)); // query parameter
            if (_1propertyValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "1_property.value", _1propertyValue)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ignoredeactivated"></param>
        /// <param name="onlymodified"></param>
        /// <param name="path"></param>
        /// <returns></returns>
        public void PostTreeActivation (bool ignoredeactivated, bool onlymodified, string path)
        {
             PostTreeActivationWithHttpInfo(ignoredeactivated, onlymodified, path);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ignoredeactivated"></param>
        /// <param name="onlymodified"></param>
        /// <param name="path"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostTreeActivationWithHttpInfo (bool ignoredeactivated, bool onlymodified, string path)
        {
            // verify the required parameter 'ignoredeactivated' is set
            if (ignoredeactivated == null)
                throw new ApiException(400, "Missing required parameter 'ignoredeactivated' when calling SlingApi->PostTreeActivation");
            // verify the required parameter 'onlymodified' is set
            if (onlymodified == null)
                throw new ApiException(400, "Missing required parameter 'onlymodified' when calling SlingApi->PostTreeActivation");
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling SlingApi->PostTreeActivation");

            var localVarPath = "/etc/replication/treeactivation.html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ignoredeactivated != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoredeactivated", ignoredeactivated)); // query parameter
            if (onlymodified != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlymodified", onlymodified)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTreeActivation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ignoredeactivated"></param>
        /// <param name="onlymodified"></param>
        /// <param name="path"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostTreeActivationAsync (bool ignoredeactivated, bool onlymodified, string path, CancellationToken cancellationToken = default(CancellationToken))
        {
             await PostTreeActivationWithHttpInfoAsync(ignoredeactivated, onlymodified, path, cancellationToken);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ignoredeactivated"></param>
        /// <param name="onlymodified"></param>
        /// <param name="path"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostTreeActivationWithHttpInfoAsync (bool ignoredeactivated, bool onlymodified, string path, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ignoredeactivated' is set
            if (ignoredeactivated == null)
                throw new ApiException(400, "Missing required parameter 'ignoredeactivated' when calling SlingApi->PostTreeActivation");
            // verify the required parameter 'onlymodified' is set
            if (onlymodified == null)
                throw new ApiException(400, "Missing required parameter 'onlymodified' when calling SlingApi->PostTreeActivation");
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling SlingApi->PostTreeActivation");

            var localVarPath = "/etc/replication/treeactivation.html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ignoredeactivated != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoredeactivated", ignoredeactivated)); // query parameter
            if (onlymodified != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlymodified", onlymodified)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTreeActivation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operation"> (optional)</param>
        /// <param name="newPassword"> (optional)</param>
        /// <param name="rePassword"> (optional)</param>
        /// <param name="keyStoreType"> (optional)</param>
        /// <param name="removeAlias"> (optional)</param>
        /// <param name="certificate"> (optional)</param>
        /// <returns>string</returns>
        public string PostTruststore (string operation = default(string), string newPassword = default(string), string rePassword = default(string), string keyStoreType = default(string), string removeAlias = default(string), System.IO.Stream certificate = default(System.IO.Stream))
        {
             ApiResponse<string> localVarResponse = PostTruststoreWithHttpInfo(operation, newPassword, rePassword, keyStoreType, removeAlias, certificate);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operation"> (optional)</param>
        /// <param name="newPassword"> (optional)</param>
        /// <param name="rePassword"> (optional)</param>
        /// <param name="keyStoreType"> (optional)</param>
        /// <param name="removeAlias"> (optional)</param>
        /// <param name="certificate"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> PostTruststoreWithHttpInfo (string operation = default(string), string newPassword = default(string), string rePassword = default(string), string keyStoreType = default(string), string removeAlias = default(string), System.IO.Stream certificate = default(System.IO.Stream))
        {

            var localVarPath = "/libs/granite/security/post/truststore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (operation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", ":operation", operation)); // query parameter
            if (newPassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newPassword", newPassword)); // query parameter
            if (rePassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rePassword", rePassword)); // query parameter
            if (keyStoreType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyStoreType", keyStoreType)); // query parameter
            if (removeAlias != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "removeAlias", removeAlias)); // query parameter
            if (certificate != null) localVarFileParams.Add("certificate", this.Configuration.ApiClient.ParameterToFile("certificate", certificate));

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTruststore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operation"> (optional)</param>
        /// <param name="newPassword"> (optional)</param>
        /// <param name="rePassword"> (optional)</param>
        /// <param name="keyStoreType"> (optional)</param>
        /// <param name="removeAlias"> (optional)</param>
        /// <param name="certificate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostTruststoreAsync (string operation = default(string), string newPassword = default(string), string rePassword = default(string), string keyStoreType = default(string), string removeAlias = default(string), System.IO.Stream certificate = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<string> localVarResponse = await PostTruststoreWithHttpInfoAsync(operation, newPassword, rePassword, keyStoreType, removeAlias, certificate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operation"> (optional)</param>
        /// <param name="newPassword"> (optional)</param>
        /// <param name="rePassword"> (optional)</param>
        /// <param name="keyStoreType"> (optional)</param>
        /// <param name="removeAlias"> (optional)</param>
        /// <param name="certificate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostTruststoreWithHttpInfoAsync (string operation = default(string), string newPassword = default(string), string rePassword = default(string), string keyStoreType = default(string), string removeAlias = default(string), System.IO.Stream certificate = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/libs/granite/security/post/truststore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (operation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", ":operation", operation)); // query parameter
            if (newPassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newPassword", newPassword)); // query parameter
            if (rePassword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rePassword", rePassword)); // query parameter
            if (keyStoreType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyStoreType", keyStoreType)); // query parameter
            if (removeAlias != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "removeAlias", removeAlias)); // query parameter
            if (certificate != null) localVarFileParams.Add("certificate", this.Configuration.ApiClient.ParameterToFile("certificate", certificate));

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTruststore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="truststoreP12"> (optional)</param>
        /// <returns>string</returns>
        public string PostTruststorePKCS12 (System.IO.Stream truststoreP12 = default(System.IO.Stream))
        {
             ApiResponse<string> localVarResponse = PostTruststorePKCS12WithHttpInfo(truststoreP12);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="truststoreP12"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> PostTruststorePKCS12WithHttpInfo (System.IO.Stream truststoreP12 = default(System.IO.Stream))
        {

            var localVarPath = "/etc/truststore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (truststoreP12 != null) localVarFileParams.Add("truststore.p12", this.Configuration.ApiClient.ParameterToFile("truststore.p12", truststoreP12));

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTruststorePKCS12", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="truststoreP12"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostTruststorePKCS12Async (System.IO.Stream truststoreP12 = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<string> localVarResponse = await PostTruststorePKCS12WithHttpInfoAsync(truststoreP12, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="truststoreP12"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostTruststorePKCS12WithHttpInfoAsync (System.IO.Stream truststoreP12 = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/etc/truststore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (truststoreP12 != null) localVarFileParams.Add("truststore.p12", this.Configuration.ApiClient.ParameterToFile("truststore.p12", truststoreP12));

            // authentication (aemAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTruststorePKCS12", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
