# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET     /api                        controllers.ApiDocController.api


#Functions for Console API
GET     /system/console/status-productinfo.json                     controllers.ConsoleApiController.getAemProductInfo(request: Request)
GET     /system/console/bundles/:name.json                     controllers.ConsoleApiController.getBundleInfo(request: Request, name: String)
GET     /system/console/configMgr                     controllers.ConsoleApiController.getConfigMgr(request: Request)
POST     /system/console/bundles/:name                     controllers.ConsoleApiController.postBundle(request: Request, name: String)
POST     /system/console/jmx/com.adobe.granite:type=Repository/op/:action                     controllers.ConsoleApiController.postJmxRepository(request: Request, action: String)
POST     /system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler                     controllers.ConsoleApiController.postSamlConfiguration(request: Request)

#Functions for Cq API
GET     /libs/granite/core/content/login.html                     controllers.CqApiController.getLoginPage(request: Request)
POST     /.cqactions.html                     controllers.CqApiController.postCqActions(request: Request)

#Functions for Crx API
GET     /crx/server/crx.default/jcr:root/.1.json                     controllers.CrxApiController.getCrxdeStatus(request: Request)
GET     /crx/packmgr/installstatus.jsp                     controllers.CrxApiController.getInstallStatus(request: Request)
GET     /crx/packmgr/service/script.html                     controllers.CrxApiController.getPackageManagerServlet(request: Request)
POST     /crx/packmgr/service.jsp                     controllers.CrxApiController.postPackageService(request: Request)
POST     /crx/packmgr/service/.json/:path                     controllers.CrxApiController.postPackageServiceJson(request: Request, path: String)
POST     /crx/packmgr/update.jsp                     controllers.CrxApiController.postPackageUpdate(request: Request)
POST     /crx/explorer/ui/setpassword.jsp                     controllers.CrxApiController.postSetPassword(request: Request)

#Functions for Custom API
GET     /system/health                     controllers.CustomApiController.getAemHealthCheck(request: Request)
POST     /apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck                     controllers.CustomApiController.postConfigAemHealthCheckServlet(request: Request)
POST     /apps/system/config/com.shinesolutions.aem.passwordreset.Activator                     controllers.CustomApiController.postConfigAemPasswordReset(request: Request)

#Functions for Granite API
POST     /libs/granite/security/post/sslSetup.html                     controllers.GraniteApiController.sslSetup(request: Request)

#Functions for Sling API
DELETE     /etc/replication/agents.:runmode/:name                     controllers.SlingApiController.deleteAgent(request: Request, runmode: String, name: String)
DELETE     /:path/:name                     controllers.SlingApiController.deleteNode(request: Request, path: String, name: String)
GET     /etc/replication/agents.:runmode/:name                     controllers.SlingApiController.getAgent(request: Request, runmode: String, name: String)
GET     /etc/replication/agents.:runmode.-1.json                     controllers.SlingApiController.getAgents(request: Request, runmode: String)
GET     /:intermediatePath/:authorizableId.ks.json                     controllers.SlingApiController.getAuthorizableKeystore(request: Request, intermediatePath: String, authorizableId: String)
GET     /:intermediatePath/:authorizableId/keystore/store.p12                     controllers.SlingApiController.getKeystore(request: Request, intermediatePath: String, authorizableId: String)
GET     /:path/:name                     controllers.SlingApiController.getNode(request: Request, path: String, name: String)
GET     /etc/packages/:group/:name-:version.zip                     controllers.SlingApiController.getPackage(request: Request, group: String, name: String, version: String)
GET     /etc/packages/:group/:name-:version.zip/jcr:content/vlt:definition/filter.tidy.2.json                     controllers.SlingApiController.getPackageFilter(request: Request, group: String, name: String, version: String)
GET     /bin/querybuilder.json                     controllers.SlingApiController.getQuery(request: Request)
GET     /etc/truststore/truststore.p12                     controllers.SlingApiController.getTruststore(request: Request)
GET     /libs/granite/security/truststore.json                     controllers.SlingApiController.getTruststoreInfo(request: Request)
POST     /etc/replication/agents.:runmode/:name                     controllers.SlingApiController.postAgent(request: Request, runmode: String, name: String)
POST     /:intermediatePath/:authorizableId.ks.html                     controllers.SlingApiController.postAuthorizableKeystore(request: Request, intermediatePath: String, authorizableId: String)
POST     /libs/granite/security/post/authorizables                     controllers.SlingApiController.postAuthorizables(request: Request)
POST     /apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config                     controllers.SlingApiController.postConfigAdobeGraniteSamlAuthenticationHandler(request: Request)
POST     /apps/system/config/org.apache.felix.http                     controllers.SlingApiController.postConfigApacheFelixJettyBasedHttpService(request: Request)
POST     /apps/system/config/org.apache.http.proxyconfigurator.config                     controllers.SlingApiController.postConfigApacheHttpComponentsProxyConfiguration(request: Request)
POST     /apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet                     controllers.SlingApiController.postConfigApacheSlingDavExServlet(request: Request)
POST     /apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet                     controllers.SlingApiController.postConfigApacheSlingGetServlet(request: Request)
POST     /apps/system/config/org.apache.sling.security.impl.ReferrerFilter                     controllers.SlingApiController.postConfigApacheSlingReferrerFilter(request: Request)
POST     /apps/system/config/:configNodeName                     controllers.SlingApiController.postConfigProperty(request: Request, configNodeName: String)
POST     /:path/:name                     controllers.SlingApiController.postNode(request: Request, path: String, name: String)
POST     /:path/:name.rw.html                     controllers.SlingApiController.postNodeRw(request: Request, path: String, name: String)
POST     /:path/                     controllers.SlingApiController.postPath(request: Request, path: String)
POST     /bin/querybuilder.json                     controllers.SlingApiController.postQuery(request: Request)
POST     /etc/replication/treeactivation.html                     controllers.SlingApiController.postTreeActivation(request: Request)
POST     /libs/granite/security/post/truststore                     controllers.SlingApiController.postTruststore(request: Request)
POST     /etc/truststore                     controllers.SlingApiController.postTruststorePKCS12(request: Request)

# Map static resources from the /public folder to the /assets URL path
GET /assets/*file           controllers.Assets.at(file)
GET /versionedAssets/*file  controllers.Assets.versioned(file)