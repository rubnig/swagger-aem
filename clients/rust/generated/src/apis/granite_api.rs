/*
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method `ssl_setup`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SslSetupError {
    DefaultResponse(String),
    UnknownValue(serde_json::Value),
}


pub async fn ssl_setup(configuration: &configuration::Configuration, keystore_password: &str, keystore_password_confirm: &str, truststore_password: &str, truststore_password_confirm: &str, https_hostname: &str, https_port: &str, privatekey_file: Option<std::path::PathBuf>, certificate_file: Option<std::path::PathBuf>) -> Result<String, Error<SslSetupError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/libs/granite/security/post/sslSetup.html", configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("keystorePassword", &keystore_password.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("keystorePasswordConfirm", &keystore_password_confirm.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("truststorePassword", &truststore_password.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("truststorePasswordConfirm", &truststore_password_confirm.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("httpsHostname", &https_hostname.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("httpsPort", &https_port.to_string())]);
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    let mut local_var_form = reqwest::multipart::Form::new();
    // TODO: support file upload for 'privatekeyFile' parameter
    // TODO: support file upload for 'certificateFile' parameter
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SslSetupError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

