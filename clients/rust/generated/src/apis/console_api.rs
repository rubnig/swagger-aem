/*
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method `get_aem_product_info`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAemProductInfoError {
    DefaultResponse(Vec<String>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_bundle_info`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBundleInfoError {
    DefaultResponse(String),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_config_mgr`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetConfigMgrError {
    Status5XX(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `post_bundle`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostBundleError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `post_jmx_repository`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostJmxRepositoryError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `post_saml_configuration`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostSamlConfigurationError {
    DefaultResponse(String),
    UnknownValue(serde_json::Value),
}


pub async fn get_aem_product_info(configuration: &configuration::Configuration, ) -> Result<Vec<String>, Error<GetAemProductInfoError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/system/console/status-productinfo.json", configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAemProductInfoError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_bundle_info(configuration: &configuration::Configuration, name: &str) -> Result<crate::models::BundleInfo, Error<GetBundleInfoError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/system/console/bundles/{name}.json", configuration.base_path, name=crate::apis::urlencode(name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBundleInfoError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_config_mgr(configuration: &configuration::Configuration, ) -> Result<String, Error<GetConfigMgrError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/system/console/configMgr", configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetConfigMgrError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn post_bundle(configuration: &configuration::Configuration, name: &str, action: &str) -> Result<(), Error<PostBundleError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/system/console/bundles/{name}", configuration.base_path, name=crate::apis::urlencode(name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("action", &action.to_string())]);
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<PostBundleError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn post_jmx_repository(configuration: &configuration::Configuration, action: &str) -> Result<(), Error<PostJmxRepositoryError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/system/console/jmx/com.adobe.granite:type=Repository/op/{action}", configuration.base_path, action=crate::apis::urlencode(action));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<PostJmxRepositoryError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn post_saml_configuration(configuration: &configuration::Configuration, post: Option<bool>, apply: Option<bool>, delete: Option<bool>, action: Option<&str>, location: Option<&str>, path: Option<Vec<String>>, service_ranking: Option<i32>, idp_url: Option<&str>, idp_cert_alias: Option<&str>, idp_http_redirect: Option<bool>, service_provider_entity_id: Option<&str>, assertion_consumer_service_url: Option<&str>, sp_private_key_alias: Option<&str>, key_store_password: Option<&str>, default_redirect_url: Option<&str>, user_id_attribute: Option<&str>, use_encryption: Option<bool>, create_user: Option<bool>, add_group_memberships: Option<bool>, group_membership_attribute: Option<&str>, default_groups: Option<Vec<String>>, name_id_format: Option<&str>, synchronize_attributes: Option<Vec<String>>, handle_logout: Option<bool>, logout_url: Option<&str>, clock_tolerance: Option<i32>, digest_method: Option<&str>, signature_method: Option<&str>, user_intermediate_path: Option<&str>, propertylist: Option<Vec<String>>) -> Result<crate::models::SamlConfigurationInfo, Error<PostSamlConfigurationError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler", configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = post {
        local_var_req_builder = local_var_req_builder.query(&[("post", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = apply {
        local_var_req_builder = local_var_req_builder.query(&[("apply", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = delete {
        local_var_req_builder = local_var_req_builder.query(&[("delete", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = action {
        local_var_req_builder = local_var_req_builder.query(&[("action", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location {
        local_var_req_builder = local_var_req_builder.query(&[("$location", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = path {
        local_var_req_builder = local_var_req_builder.query(&[("path", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    }
    if let Some(ref local_var_str) = service_ranking {
        local_var_req_builder = local_var_req_builder.query(&[("service.ranking", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = idp_url {
        local_var_req_builder = local_var_req_builder.query(&[("idpUrl", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = idp_cert_alias {
        local_var_req_builder = local_var_req_builder.query(&[("idpCertAlias", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = idp_http_redirect {
        local_var_req_builder = local_var_req_builder.query(&[("idpHttpRedirect", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = service_provider_entity_id {
        local_var_req_builder = local_var_req_builder.query(&[("serviceProviderEntityId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = assertion_consumer_service_url {
        local_var_req_builder = local_var_req_builder.query(&[("assertionConsumerServiceURL", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sp_private_key_alias {
        local_var_req_builder = local_var_req_builder.query(&[("spPrivateKeyAlias", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = key_store_password {
        local_var_req_builder = local_var_req_builder.query(&[("keyStorePassword", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = default_redirect_url {
        local_var_req_builder = local_var_req_builder.query(&[("defaultRedirectUrl", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_id_attribute {
        local_var_req_builder = local_var_req_builder.query(&[("userIDAttribute", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = use_encryption {
        local_var_req_builder = local_var_req_builder.query(&[("useEncryption", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = create_user {
        local_var_req_builder = local_var_req_builder.query(&[("createUser", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_group_memberships {
        local_var_req_builder = local_var_req_builder.query(&[("addGroupMemberships", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_membership_attribute {
        local_var_req_builder = local_var_req_builder.query(&[("groupMembershipAttribute", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = default_groups {
        local_var_req_builder = local_var_req_builder.query(&[("defaultGroups", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    }
    if let Some(ref local_var_str) = name_id_format {
        local_var_req_builder = local_var_req_builder.query(&[("nameIdFormat", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = synchronize_attributes {
        local_var_req_builder = local_var_req_builder.query(&[("synchronizeAttributes", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    }
    if let Some(ref local_var_str) = handle_logout {
        local_var_req_builder = local_var_req_builder.query(&[("handleLogout", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = logout_url {
        local_var_req_builder = local_var_req_builder.query(&[("logoutUrl", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = clock_tolerance {
        local_var_req_builder = local_var_req_builder.query(&[("clockTolerance", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = digest_method {
        local_var_req_builder = local_var_req_builder.query(&[("digestMethod", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = signature_method {
        local_var_req_builder = local_var_req_builder.query(&[("signatureMethod", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_intermediate_path {
        local_var_req_builder = local_var_req_builder.query(&[("userIntermediatePath", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = propertylist {
        local_var_req_builder = local_var_req_builder.query(&[("propertylist", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PostSamlConfigurationError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

