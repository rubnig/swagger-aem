=begin
#Adobe Experience Manager (AEM) API

#Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API

The version of the OpenAPI document: 3.7.1-pre.0
Contact: opensource@shinesolutions.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module SwaggerAemClient
  class SlingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param runmode [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_agent(runmode, name, opts = {})
      delete_agent_with_http_info(runmode, name, opts)
      nil
    end

    # @param runmode [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_agent_with_http_info(runmode, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlingApi.delete_agent ...'
      end
      # verify the required parameter 'runmode' is set
      if @api_client.config.client_side_validation && runmode.nil?
        fail ArgumentError, "Missing the required parameter 'runmode' when calling SlingApi.delete_agent"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling SlingApi.delete_agent"
      end
      # resource path
      local_var_path = '/etc/replication/agents.{runmode}/{name}'.sub('{' + 'runmode' + '}', CGI.escape(runmode.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['aemAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#delete_agent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param path [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_node(path, name, opts = {})
      delete_node_with_http_info(path, name, opts)
      nil
    end

    # @param path [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_node_with_http_info(path, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlingApi.delete_node ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling SlingApi.delete_node"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling SlingApi.delete_node"
      end
      # resource path
      local_var_path = '/{path}/{name}'.sub('{' + 'path' + '}', CGI.escape(path.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['aemAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#delete_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param runmode [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_agent(runmode, name, opts = {})
      get_agent_with_http_info(runmode, name, opts)
      nil
    end

    # @param runmode [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_agent_with_http_info(runmode, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlingApi.get_agent ...'
      end
      # verify the required parameter 'runmode' is set
      if @api_client.config.client_side_validation && runmode.nil?
        fail ArgumentError, "Missing the required parameter 'runmode' when calling SlingApi.get_agent"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling SlingApi.get_agent"
      end
      # resource path
      local_var_path = '/etc/replication/agents.{runmode}/{name}'.sub('{' + 'runmode' + '}', CGI.escape(runmode.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['aemAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#get_agent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param runmode [String] 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_agents(runmode, opts = {})
      data, _status_code, _headers = get_agents_with_http_info(runmode, opts)
      data
    end

    # @param runmode [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_agents_with_http_info(runmode, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlingApi.get_agents ...'
      end
      # verify the required parameter 'runmode' is set
      if @api_client.config.client_side_validation && runmode.nil?
        fail ArgumentError, "Missing the required parameter 'runmode' when calling SlingApi.get_agents"
      end
      # resource path
      local_var_path = '/etc/replication/agents.{runmode}.-1.json'.sub('{' + 'runmode' + '}', CGI.escape(runmode.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || ['aemAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#get_agents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param intermediate_path [String] 
    # @param authorizable_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [KeystoreInfo]
    def get_authorizable_keystore(intermediate_path, authorizable_id, opts = {})
      data, _status_code, _headers = get_authorizable_keystore_with_http_info(intermediate_path, authorizable_id, opts)
      data
    end

    # @param intermediate_path [String] 
    # @param authorizable_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(KeystoreInfo, Integer, Hash)>] KeystoreInfo data, response status code and response headers
    def get_authorizable_keystore_with_http_info(intermediate_path, authorizable_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlingApi.get_authorizable_keystore ...'
      end
      # verify the required parameter 'intermediate_path' is set
      if @api_client.config.client_side_validation && intermediate_path.nil?
        fail ArgumentError, "Missing the required parameter 'intermediate_path' when calling SlingApi.get_authorizable_keystore"
      end
      # verify the required parameter 'authorizable_id' is set
      if @api_client.config.client_side_validation && authorizable_id.nil?
        fail ArgumentError, "Missing the required parameter 'authorizable_id' when calling SlingApi.get_authorizable_keystore"
      end
      # resource path
      local_var_path = '/{intermediatePath}/{authorizableId}.ks.json'.sub('{' + 'intermediatePath' + '}', CGI.escape(intermediate_path.to_s)).sub('{' + 'authorizableId' + '}', CGI.escape(authorizable_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'KeystoreInfo' 

      # auth_names
      auth_names = opts[:auth_names] || ['aemAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#get_authorizable_keystore\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param intermediate_path [String] 
    # @param authorizable_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def get_keystore(intermediate_path, authorizable_id, opts = {})
      data, _status_code, _headers = get_keystore_with_http_info(intermediate_path, authorizable_id, opts)
      data
    end

    # @param intermediate_path [String] 
    # @param authorizable_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_keystore_with_http_info(intermediate_path, authorizable_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlingApi.get_keystore ...'
      end
      # verify the required parameter 'intermediate_path' is set
      if @api_client.config.client_side_validation && intermediate_path.nil?
        fail ArgumentError, "Missing the required parameter 'intermediate_path' when calling SlingApi.get_keystore"
      end
      # verify the required parameter 'authorizable_id' is set
      if @api_client.config.client_side_validation && authorizable_id.nil?
        fail ArgumentError, "Missing the required parameter 'authorizable_id' when calling SlingApi.get_keystore"
      end
      # resource path
      local_var_path = '/{intermediatePath}/{authorizableId}/keystore/store.p12'.sub('{' + 'intermediatePath' + '}', CGI.escape(intermediate_path.to_s)).sub('{' + 'authorizableId' + '}', CGI.escape(authorizable_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || ['aemAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#get_keystore\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param path [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_node(path, name, opts = {})
      get_node_with_http_info(path, name, opts)
      nil
    end

    # @param path [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_node_with_http_info(path, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlingApi.get_node ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling SlingApi.get_node"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling SlingApi.get_node"
      end
      # resource path
      local_var_path = '/{path}/{name}'.sub('{' + 'path' + '}', CGI.escape(path.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['aemAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#get_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param group [String] 
    # @param name [String] 
    # @param version [String] 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def get_package(group, name, version, opts = {})
      data, _status_code, _headers = get_package_with_http_info(group, name, version, opts)
      data
    end

    # @param group [String] 
    # @param name [String] 
    # @param version [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_package_with_http_info(group, name, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlingApi.get_package ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling SlingApi.get_package"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling SlingApi.get_package"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling SlingApi.get_package"
      end
      # resource path
      local_var_path = '/etc/packages/{group}/{name}-{version}.zip'.sub('{' + 'group' + '}', CGI.escape(group.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s)).sub('{' + 'version' + '}', CGI.escape(version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || ['aemAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#get_package\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param group [String] 
    # @param name [String] 
    # @param version [String] 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_package_filter(group, name, version, opts = {})
      data, _status_code, _headers = get_package_filter_with_http_info(group, name, version, opts)
      data
    end

    # @param group [String] 
    # @param name [String] 
    # @param version [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_package_filter_with_http_info(group, name, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlingApi.get_package_filter ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling SlingApi.get_package_filter"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling SlingApi.get_package_filter"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling SlingApi.get_package_filter"
      end
      # resource path
      local_var_path = '/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json'.sub('{' + 'group' + '}', CGI.escape(group.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s)).sub('{' + 'version' + '}', CGI.escape(version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || ['aemAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#get_package_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param path [String] 
    # @param p_limit [Float] 
    # @param _1_property [String] 
    # @param _1_property_value [String] 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_query(path, p_limit, _1_property, _1_property_value, opts = {})
      data, _status_code, _headers = get_query_with_http_info(path, p_limit, _1_property, _1_property_value, opts)
      data
    end

    # @param path [String] 
    # @param p_limit [Float] 
    # @param _1_property [String] 
    # @param _1_property_value [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_query_with_http_info(path, p_limit, _1_property, _1_property_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlingApi.get_query ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling SlingApi.get_query"
      end
      # verify the required parameter 'p_limit' is set
      if @api_client.config.client_side_validation && p_limit.nil?
        fail ArgumentError, "Missing the required parameter 'p_limit' when calling SlingApi.get_query"
      end
      # verify the required parameter '_1_property' is set
      if @api_client.config.client_side_validation && _1_property.nil?
        fail ArgumentError, "Missing the required parameter '_1_property' when calling SlingApi.get_query"
      end
      # verify the required parameter '_1_property_value' is set
      if @api_client.config.client_side_validation && _1_property_value.nil?
        fail ArgumentError, "Missing the required parameter '_1_property_value' when calling SlingApi.get_query"
      end
      # resource path
      local_var_path = '/bin/querybuilder.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'path'] = path
      query_params[:'p.limit'] = p_limit
      query_params[:'1_property'] = _1_property
      query_params[:'1_property.value'] = _1_property_value

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || ['aemAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#get_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @return [File]
    def get_truststore(opts = {})
      data, _status_code, _headers = get_truststore_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_truststore_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlingApi.get_truststore ...'
      end
      # resource path
      local_var_path = '/etc/truststore/truststore.p12'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || ['aemAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#get_truststore\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @return [TruststoreInfo]
    def get_truststore_info(opts = {})
      data, _status_code, _headers = get_truststore_info_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(TruststoreInfo, Integer, Hash)>] TruststoreInfo data, response status code and response headers
    def get_truststore_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlingApi.get_truststore_info ...'
      end
      # resource path
      local_var_path = '/libs/granite/security/truststore.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'TruststoreInfo' 

      # auth_names
      auth_names = opts[:auth_names] || ['aemAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#get_truststore_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param runmode [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :jcrcontent_cqdistribute 
    # @option opts [String] :jcrcontent_cqdistribute_type_hint 
    # @option opts [String] :jcrcontent_cqname 
    # @option opts [String] :jcrcontent_cqtemplate 
    # @option opts [Boolean] :jcrcontent_enabled 
    # @option opts [String] :jcrcontent_jcrdescription 
    # @option opts [String] :jcrcontent_jcrlast_modified 
    # @option opts [String] :jcrcontent_jcrlast_modified_by 
    # @option opts [String] :jcrcontent_jcrmixin_types 
    # @option opts [String] :jcrcontent_jcrtitle 
    # @option opts [String] :jcrcontent_log_level 
    # @option opts [Boolean] :jcrcontent_no_status_update 
    # @option opts [Boolean] :jcrcontent_no_versioning 
    # @option opts [Float] :jcrcontent_protocol_connect_timeout 
    # @option opts [Boolean] :jcrcontent_protocol_http_connection_closed 
    # @option opts [String] :jcrcontent_protocol_http_expired 
    # @option opts [Array<String>] :jcrcontent_protocol_http_headers 
    # @option opts [String] :jcrcontent_protocol_http_headers_type_hint 
    # @option opts [String] :jcrcontent_protocol_http_method 
    # @option opts [Boolean] :jcrcontent_protocol_https_relaxed 
    # @option opts [String] :jcrcontent_protocol_interface 
    # @option opts [Float] :jcrcontent_protocol_socket_timeout 
    # @option opts [String] :jcrcontent_protocol_version 
    # @option opts [String] :jcrcontent_proxy_ntlm_domain 
    # @option opts [String] :jcrcontent_proxy_ntlm_host 
    # @option opts [String] :jcrcontent_proxy_host 
    # @option opts [String] :jcrcontent_proxy_password 
    # @option opts [Float] :jcrcontent_proxy_port 
    # @option opts [String] :jcrcontent_proxy_user 
    # @option opts [Float] :jcrcontent_queue_batch_max_size 
    # @option opts [String] :jcrcontent_queue_batch_mode 
    # @option opts [Float] :jcrcontent_queue_batch_wait_time 
    # @option opts [String] :jcrcontent_retry_delay 
    # @option opts [Boolean] :jcrcontent_reverse_replication 
    # @option opts [String] :jcrcontent_serialization_type 
    # @option opts [String] :jcrcontent_slingresource_type 
    # @option opts [String] :jcrcontent_ssl 
    # @option opts [String] :jcrcontent_transport_ntlm_domain 
    # @option opts [String] :jcrcontent_transport_ntlm_host 
    # @option opts [String] :jcrcontent_transport_password 
    # @option opts [String] :jcrcontent_transport_uri 
    # @option opts [String] :jcrcontent_transport_user 
    # @option opts [Boolean] :jcrcontent_trigger_distribute 
    # @option opts [Boolean] :jcrcontent_trigger_modified 
    # @option opts [Boolean] :jcrcontent_trigger_on_off_time 
    # @option opts [Boolean] :jcrcontent_trigger_receive 
    # @option opts [Boolean] :jcrcontent_trigger_specific 
    # @option opts [String] :jcrcontent_user_id 
    # @option opts [String] :jcrprimary_type 
    # @option opts [String] :operation 
    # @return [nil]
    def post_agent(runmode, name, opts = {})
      post_agent_with_http_info(runmode, name, opts)
      nil
    end

    # @param runmode [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :jcrcontent_cqdistribute 
    # @option opts [String] :jcrcontent_cqdistribute_type_hint 
    # @option opts [String] :jcrcontent_cqname 
    # @option opts [String] :jcrcontent_cqtemplate 
    # @option opts [Boolean] :jcrcontent_enabled 
    # @option opts [String] :jcrcontent_jcrdescription 
    # @option opts [String] :jcrcontent_jcrlast_modified 
    # @option opts [String] :jcrcontent_jcrlast_modified_by 
    # @option opts [String] :jcrcontent_jcrmixin_types 
    # @option opts [String] :jcrcontent_jcrtitle 
    # @option opts [String] :jcrcontent_log_level 
    # @option opts [Boolean] :jcrcontent_no_status_update 
    # @option opts [Boolean] :jcrcontent_no_versioning 
    # @option opts [Float] :jcrcontent_protocol_connect_timeout 
    # @option opts [Boolean] :jcrcontent_protocol_http_connection_closed 
    # @option opts [String] :jcrcontent_protocol_http_expired 
    # @option opts [Array<String>] :jcrcontent_protocol_http_headers 
    # @option opts [String] :jcrcontent_protocol_http_headers_type_hint 
    # @option opts [String] :jcrcontent_protocol_http_method 
    # @option opts [Boolean] :jcrcontent_protocol_https_relaxed 
    # @option opts [String] :jcrcontent_protocol_interface 
    # @option opts [Float] :jcrcontent_protocol_socket_timeout 
    # @option opts [String] :jcrcontent_protocol_version 
    # @option opts [String] :jcrcontent_proxy_ntlm_domain 
    # @option opts [String] :jcrcontent_proxy_ntlm_host 
    # @option opts [String] :jcrcontent_proxy_host 
    # @option opts [String] :jcrcontent_proxy_password 
    # @option opts [Float] :jcrcontent_proxy_port 
    # @option opts [String] :jcrcontent_proxy_user 
    # @option opts [Float] :jcrcontent_queue_batch_max_size 
    # @option opts [String] :jcrcontent_queue_batch_mode 
    # @option opts [Float] :jcrcontent_queue_batch_wait_time 
    # @option opts [String] :jcrcontent_retry_delay 
    # @option opts [Boolean] :jcrcontent_reverse_replication 
    # @option opts [String] :jcrcontent_serialization_type 
    # @option opts [String] :jcrcontent_slingresource_type 
    # @option opts [String] :jcrcontent_ssl 
    # @option opts [String] :jcrcontent_transport_ntlm_domain 
    # @option opts [String] :jcrcontent_transport_ntlm_host 
    # @option opts [String] :jcrcontent_transport_password 
    # @option opts [String] :jcrcontent_transport_uri 
    # @option opts [String] :jcrcontent_transport_user 
    # @option opts [Boolean] :jcrcontent_trigger_distribute 
    # @option opts [Boolean] :jcrcontent_trigger_modified 
    # @option opts [Boolean] :jcrcontent_trigger_on_off_time 
    # @option opts [Boolean] :jcrcontent_trigger_receive 
    # @option opts [Boolean] :jcrcontent_trigger_specific 
    # @option opts [String] :jcrcontent_user_id 
    # @option opts [String] :jcrprimary_type 
    # @option opts [String] :operation 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_agent_with_http_info(runmode, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlingApi.post_agent ...'
      end
      # verify the required parameter 'runmode' is set
      if @api_client.config.client_side_validation && runmode.nil?
        fail ArgumentError, "Missing the required parameter 'runmode' when calling SlingApi.post_agent"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling SlingApi.post_agent"
      end
      # resource path
      local_var_path = '/etc/replication/agents.{runmode}/{name}'.sub('{' + 'runmode' + '}', CGI.escape(runmode.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'jcr:content/cq:distribute'] = opts[:'jcrcontent_cqdistribute'] if !opts[:'jcrcontent_cqdistribute'].nil?
      query_params[:'jcr:content/cq:distribute@TypeHint'] = opts[:'jcrcontent_cqdistribute_type_hint'] if !opts[:'jcrcontent_cqdistribute_type_hint'].nil?
      query_params[:'jcr:content/cq:name'] = opts[:'jcrcontent_cqname'] if !opts[:'jcrcontent_cqname'].nil?
      query_params[:'jcr:content/cq:template'] = opts[:'jcrcontent_cqtemplate'] if !opts[:'jcrcontent_cqtemplate'].nil?
      query_params[:'jcr:content/enabled'] = opts[:'jcrcontent_enabled'] if !opts[:'jcrcontent_enabled'].nil?
      query_params[:'jcr:content/jcr:description'] = opts[:'jcrcontent_jcrdescription'] if !opts[:'jcrcontent_jcrdescription'].nil?
      query_params[:'jcr:content/jcr:lastModified'] = opts[:'jcrcontent_jcrlast_modified'] if !opts[:'jcrcontent_jcrlast_modified'].nil?
      query_params[:'jcr:content/jcr:lastModifiedBy'] = opts[:'jcrcontent_jcrlast_modified_by'] if !opts[:'jcrcontent_jcrlast_modified_by'].nil?
      query_params[:'jcr:content/jcr:mixinTypes'] = opts[:'jcrcontent_jcrmixin_types'] if !opts[:'jcrcontent_jcrmixin_types'].nil?
      query_params[:'jcr:content/jcr:title'] = opts[:'jcrcontent_jcrtitle'] if !opts[:'jcrcontent_jcrtitle'].nil?
      query_params[:'jcr:content/logLevel'] = opts[:'jcrcontent_log_level'] if !opts[:'jcrcontent_log_level'].nil?
      query_params[:'jcr:content/noStatusUpdate'] = opts[:'jcrcontent_no_status_update'] if !opts[:'jcrcontent_no_status_update'].nil?
      query_params[:'jcr:content/noVersioning'] = opts[:'jcrcontent_no_versioning'] if !opts[:'jcrcontent_no_versioning'].nil?
      query_params[:'jcr:content/protocolConnectTimeout'] = opts[:'jcrcontent_protocol_connect_timeout'] if !opts[:'jcrcontent_protocol_connect_timeout'].nil?
      query_params[:'jcr:content/protocolHTTPConnectionClosed'] = opts[:'jcrcontent_protocol_http_connection_closed'] if !opts[:'jcrcontent_protocol_http_connection_closed'].nil?
      query_params[:'jcr:content/protocolHTTPExpired'] = opts[:'jcrcontent_protocol_http_expired'] if !opts[:'jcrcontent_protocol_http_expired'].nil?
      query_params[:'jcr:content/protocolHTTPHeaders'] = @api_client.build_collection_param(opts[:'jcrcontent_protocol_http_headers'], :multi) if !opts[:'jcrcontent_protocol_http_headers'].nil?
      query_params[:'jcr:content/protocolHTTPHeaders@TypeHint'] = opts[:'jcrcontent_protocol_http_headers_type_hint'] if !opts[:'jcrcontent_protocol_http_headers_type_hint'].nil?
      query_params[:'jcr:content/protocolHTTPMethod'] = opts[:'jcrcontent_protocol_http_method'] if !opts[:'jcrcontent_protocol_http_method'].nil?
      query_params[:'jcr:content/protocolHTTPSRelaxed'] = opts[:'jcrcontent_protocol_https_relaxed'] if !opts[:'jcrcontent_protocol_https_relaxed'].nil?
      query_params[:'jcr:content/protocolInterface'] = opts[:'jcrcontent_protocol_interface'] if !opts[:'jcrcontent_protocol_interface'].nil?
      query_params[:'jcr:content/protocolSocketTimeout'] = opts[:'jcrcontent_protocol_socket_timeout'] if !opts[:'jcrcontent_protocol_socket_timeout'].nil?
      query_params[:'jcr:content/protocolVersion'] = opts[:'jcrcontent_protocol_version'] if !opts[:'jcrcontent_protocol_version'].nil?
      query_params[:'jcr:content/proxyNTLMDomain'] = opts[:'jcrcontent_proxy_ntlm_domain'] if !opts[:'jcrcontent_proxy_ntlm_domain'].nil?
      query_params[:'jcr:content/proxyNTLMHost'] = opts[:'jcrcontent_proxy_ntlm_host'] if !opts[:'jcrcontent_proxy_ntlm_host'].nil?
      query_params[:'jcr:content/proxyHost'] = opts[:'jcrcontent_proxy_host'] if !opts[:'jcrcontent_proxy_host'].nil?
      query_params[:'jcr:content/proxyPassword'] = opts[:'jcrcontent_proxy_password'] if !opts[:'jcrcontent_proxy_password'].nil?
      query_params[:'jcr:content/proxyPort'] = opts[:'jcrcontent_proxy_port'] if !opts[:'jcrcontent_proxy_port'].nil?
      query_params[:'jcr:content/proxyUser'] = opts[:'jcrcontent_proxy_user'] if !opts[:'jcrcontent_proxy_user'].nil?
      query_params[:'jcr:content/queueBatchMaxSize'] = opts[:'jcrcontent_queue_batch_max_size'] if !opts[:'jcrcontent_queue_batch_max_size'].nil?
      query_params[:'jcr:content/queueBatchMode'] = opts[:'jcrcontent_queue_batch_mode'] if !opts[:'jcrcontent_queue_batch_mode'].nil?
      query_params[:'jcr:content/queueBatchWaitTime'] = opts[:'jcrcontent_queue_batch_wait_time'] if !opts[:'jcrcontent_queue_batch_wait_time'].nil?
      query_params[:'jcr:content/retryDelay'] = opts[:'jcrcontent_retry_delay'] if !opts[:'jcrcontent_retry_delay'].nil?
      query_params[:'jcr:content/reverseReplication'] = opts[:'jcrcontent_reverse_replication'] if !opts[:'jcrcontent_reverse_replication'].nil?
      query_params[:'jcr:content/serializationType'] = opts[:'jcrcontent_serialization_type'] if !opts[:'jcrcontent_serialization_type'].nil?
      query_params[:'jcr:content/sling:resourceType'] = opts[:'jcrcontent_slingresource_type'] if !opts[:'jcrcontent_slingresource_type'].nil?
      query_params[:'jcr:content/ssl'] = opts[:'jcrcontent_ssl'] if !opts[:'jcrcontent_ssl'].nil?
      query_params[:'jcr:content/transportNTLMDomain'] = opts[:'jcrcontent_transport_ntlm_domain'] if !opts[:'jcrcontent_transport_ntlm_domain'].nil?
      query_params[:'jcr:content/transportNTLMHost'] = opts[:'jcrcontent_transport_ntlm_host'] if !opts[:'jcrcontent_transport_ntlm_host'].nil?
      query_params[:'jcr:content/transportPassword'] = opts[:'jcrcontent_transport_password'] if !opts[:'jcrcontent_transport_password'].nil?
      query_params[:'jcr:content/transportUri'] = opts[:'jcrcontent_transport_uri'] if !opts[:'jcrcontent_transport_uri'].nil?
      query_params[:'jcr:content/transportUser'] = opts[:'jcrcontent_transport_user'] if !opts[:'jcrcontent_transport_user'].nil?
      query_params[:'jcr:content/triggerDistribute'] = opts[:'jcrcontent_trigger_distribute'] if !opts[:'jcrcontent_trigger_distribute'].nil?
      query_params[:'jcr:content/triggerModified'] = opts[:'jcrcontent_trigger_modified'] if !opts[:'jcrcontent_trigger_modified'].nil?
      query_params[:'jcr:content/triggerOnOffTime'] = opts[:'jcrcontent_trigger_on_off_time'] if !opts[:'jcrcontent_trigger_on_off_time'].nil?
      query_params[:'jcr:content/triggerReceive'] = opts[:'jcrcontent_trigger_receive'] if !opts[:'jcrcontent_trigger_receive'].nil?
      query_params[:'jcr:content/triggerSpecific'] = opts[:'jcrcontent_trigger_specific'] if !opts[:'jcrcontent_trigger_specific'].nil?
      query_params[:'jcr:content/userId'] = opts[:'jcrcontent_user_id'] if !opts[:'jcrcontent_user_id'].nil?
      query_params[:'jcr:primaryType'] = opts[:'jcrprimary_type'] if !opts[:'jcrprimary_type'].nil?
      query_params[:':operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['aemAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#post_agent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param intermediate_path [String] 
    # @param authorizable_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :operation 
    # @option opts [String] :current_password 
    # @option opts [String] :new_password 
    # @option opts [String] :re_password 
    # @option opts [String] :key_password 
    # @option opts [String] :key_store_pass 
    # @option opts [String] :_alias 
    # @option opts [String] :new_alias 
    # @option opts [String] :remove_alias 
    # @option opts [File] :cert_chain 
    # @option opts [File] :pk 
    # @option opts [File] :key_store 
    # @return [KeystoreInfo]
    def post_authorizable_keystore(intermediate_path, authorizable_id, opts = {})
      data, _status_code, _headers = post_authorizable_keystore_with_http_info(intermediate_path, authorizable_id, opts)
      data
    end

    # @param intermediate_path [String] 
    # @param authorizable_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :operation 
    # @option opts [String] :current_password 
    # @option opts [String] :new_password 
    # @option opts [String] :re_password 
    # @option opts [String] :key_password 
    # @option opts [String] :key_store_pass 
    # @option opts [String] :_alias 
    # @option opts [String] :new_alias 
    # @option opts [String] :remove_alias 
    # @option opts [File] :cert_chain 
    # @option opts [File] :pk 
    # @option opts [File] :key_store 
    # @return [Array<(KeystoreInfo, Integer, Hash)>] KeystoreInfo data, response status code and response headers
    def post_authorizable_keystore_with_http_info(intermediate_path, authorizable_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlingApi.post_authorizable_keystore ...'
      end
      # verify the required parameter 'intermediate_path' is set
      if @api_client.config.client_side_validation && intermediate_path.nil?
        fail ArgumentError, "Missing the required parameter 'intermediate_path' when calling SlingApi.post_authorizable_keystore"
      end
      # verify the required parameter 'authorizable_id' is set
      if @api_client.config.client_side_validation && authorizable_id.nil?
        fail ArgumentError, "Missing the required parameter 'authorizable_id' when calling SlingApi.post_authorizable_keystore"
      end
      # resource path
      local_var_path = '/{intermediatePath}/{authorizableId}.ks.html'.sub('{' + 'intermediatePath' + '}', CGI.escape(intermediate_path.to_s)).sub('{' + 'authorizableId' + '}', CGI.escape(authorizable_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:':operation'] = opts[:'operation'] if !opts[:'operation'].nil?
      query_params[:'currentPassword'] = opts[:'current_password'] if !opts[:'current_password'].nil?
      query_params[:'newPassword'] = opts[:'new_password'] if !opts[:'new_password'].nil?
      query_params[:'rePassword'] = opts[:'re_password'] if !opts[:'re_password'].nil?
      query_params[:'keyPassword'] = opts[:'key_password'] if !opts[:'key_password'].nil?
      query_params[:'keyStorePass'] = opts[:'key_store_pass'] if !opts[:'key_store_pass'].nil?
      query_params[:'alias'] = opts[:'_alias'] if !opts[:'_alias'].nil?
      query_params[:'newAlias'] = opts[:'new_alias'] if !opts[:'new_alias'].nil?
      query_params[:'removeAlias'] = opts[:'remove_alias'] if !opts[:'remove_alias'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['cert-chain'] = opts[:'cert_chain'] if !opts[:'cert_chain'].nil?
      form_params['pk'] = opts[:'pk'] if !opts[:'pk'].nil?
      form_params['keyStore'] = opts[:'key_store'] if !opts[:'key_store'].nil?

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'KeystoreInfo' 

      # auth_names
      auth_names = opts[:auth_names] || ['aemAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#post_authorizable_keystore\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorizable_id [String] 
    # @param intermediate_path [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :create_user 
    # @option opts [String] :create_group 
    # @option opts [String] :reppassword 
    # @option opts [String] :profile_given_name 
    # @return [String]
    def post_authorizables(authorizable_id, intermediate_path, opts = {})
      data, _status_code, _headers = post_authorizables_with_http_info(authorizable_id, intermediate_path, opts)
      data
    end

    # @param authorizable_id [String] 
    # @param intermediate_path [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :create_user 
    # @option opts [String] :create_group 
    # @option opts [String] :reppassword 
    # @option opts [String] :profile_given_name 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def post_authorizables_with_http_info(authorizable_id, intermediate_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlingApi.post_authorizables ...'
      end
      # verify the required parameter 'authorizable_id' is set
      if @api_client.config.client_side_validation && authorizable_id.nil?
        fail ArgumentError, "Missing the required parameter 'authorizable_id' when calling SlingApi.post_authorizables"
      end
      # verify the required parameter 'intermediate_path' is set
      if @api_client.config.client_side_validation && intermediate_path.nil?
        fail ArgumentError, "Missing the required parameter 'intermediate_path' when calling SlingApi.post_authorizables"
      end
      # resource path
      local_var_path = '/libs/granite/security/post/authorizables'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'authorizableId'] = authorizable_id
      query_params[:'intermediatePath'] = intermediate_path
      query_params[:'createUser'] = opts[:'create_user'] if !opts[:'create_user'].nil?
      query_params[:'createGroup'] = opts[:'create_group'] if !opts[:'create_group'].nil?
      query_params[:'rep:password'] = opts[:'reppassword'] if !opts[:'reppassword'].nil?
      query_params[:'profile/givenName'] = opts[:'profile_given_name'] if !opts[:'profile_given_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || ['aemAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#post_authorizables\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :key_store_password 
    # @option opts [String] :key_store_password_type_hint 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :service_ranking_type_hint 
    # @option opts [Boolean] :idp_http_redirect 
    # @option opts [String] :idp_http_redirect_type_hint 
    # @option opts [Boolean] :create_user 
    # @option opts [String] :create_user_type_hint 
    # @option opts [String] :default_redirect_url 
    # @option opts [String] :default_redirect_url_type_hint 
    # @option opts [String] :user_id_attribute 
    # @option opts [String] :user_id_attribute_type_hint 
    # @option opts [Array<String>] :default_groups 
    # @option opts [String] :default_groups_type_hint 
    # @option opts [String] :idp_cert_alias 
    # @option opts [String] :idp_cert_alias_type_hint 
    # @option opts [Boolean] :add_group_memberships 
    # @option opts [String] :add_group_memberships_type_hint 
    # @option opts [Array<String>] :path 
    # @option opts [String] :path_type_hint 
    # @option opts [Array<String>] :synchronize_attributes 
    # @option opts [String] :synchronize_attributes_type_hint 
    # @option opts [Integer] :clock_tolerance 
    # @option opts [String] :clock_tolerance_type_hint 
    # @option opts [String] :group_membership_attribute 
    # @option opts [String] :group_membership_attribute_type_hint 
    # @option opts [String] :idp_url 
    # @option opts [String] :idp_url_type_hint 
    # @option opts [String] :logout_url 
    # @option opts [String] :logout_url_type_hint 
    # @option opts [String] :service_provider_entity_id 
    # @option opts [String] :service_provider_entity_id_type_hint 
    # @option opts [String] :assertion_consumer_service_url 
    # @option opts [String] :assertion_consumer_service_url_type_hint 
    # @option opts [Boolean] :handle_logout 
    # @option opts [String] :handle_logout_type_hint 
    # @option opts [String] :sp_private_key_alias 
    # @option opts [String] :sp_private_key_alias_type_hint 
    # @option opts [Boolean] :use_encryption 
    # @option opts [String] :use_encryption_type_hint 
    # @option opts [String] :name_id_format 
    # @option opts [String] :name_id_format_type_hint 
    # @option opts [String] :digest_method 
    # @option opts [String] :digest_method_type_hint 
    # @option opts [String] :signature_method 
    # @option opts [String] :signature_method_type_hint 
    # @option opts [String] :user_intermediate_path 
    # @option opts [String] :user_intermediate_path_type_hint 
    # @return [nil]
    def post_config_adobe_granite_saml_authentication_handler(opts = {})
      post_config_adobe_granite_saml_authentication_handler_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :key_store_password 
    # @option opts [String] :key_store_password_type_hint 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :service_ranking_type_hint 
    # @option opts [Boolean] :idp_http_redirect 
    # @option opts [String] :idp_http_redirect_type_hint 
    # @option opts [Boolean] :create_user 
    # @option opts [String] :create_user_type_hint 
    # @option opts [String] :default_redirect_url 
    # @option opts [String] :default_redirect_url_type_hint 
    # @option opts [String] :user_id_attribute 
    # @option opts [String] :user_id_attribute_type_hint 
    # @option opts [Array<String>] :default_groups 
    # @option opts [String] :default_groups_type_hint 
    # @option opts [String] :idp_cert_alias 
    # @option opts [String] :idp_cert_alias_type_hint 
    # @option opts [Boolean] :add_group_memberships 
    # @option opts [String] :add_group_memberships_type_hint 
    # @option opts [Array<String>] :path 
    # @option opts [String] :path_type_hint 
    # @option opts [Array<String>] :synchronize_attributes 
    # @option opts [String] :synchronize_attributes_type_hint 
    # @option opts [Integer] :clock_tolerance 
    # @option opts [String] :clock_tolerance_type_hint 
    # @option opts [String] :group_membership_attribute 
    # @option opts [String] :group_membership_attribute_type_hint 
    # @option opts [String] :idp_url 
    # @option opts [String] :idp_url_type_hint 
    # @option opts [String] :logout_url 
    # @option opts [String] :logout_url_type_hint 
    # @option opts [String] :service_provider_entity_id 
    # @option opts [String] :service_provider_entity_id_type_hint 
    # @option opts [String] :assertion_consumer_service_url 
    # @option opts [String] :assertion_consumer_service_url_type_hint 
    # @option opts [Boolean] :handle_logout 
    # @option opts [String] :handle_logout_type_hint 
    # @option opts [String] :sp_private_key_alias 
    # @option opts [String] :sp_private_key_alias_type_hint 
    # @option opts [Boolean] :use_encryption 
    # @option opts [String] :use_encryption_type_hint 
    # @option opts [String] :name_id_format 
    # @option opts [String] :name_id_format_type_hint 
    # @option opts [String] :digest_method 
    # @option opts [String] :digest_method_type_hint 
    # @option opts [String] :signature_method 
    # @option opts [String] :signature_method_type_hint 
    # @option opts [String] :user_intermediate_path 
    # @option opts [String] :user_intermediate_path_type_hint 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_config_adobe_granite_saml_authentication_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlingApi.post_config_adobe_granite_saml_authentication_handler ...'
      end
      # resource path
      local_var_path = '/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'keyStorePassword'] = opts[:'key_store_password'] if !opts[:'key_store_password'].nil?
      query_params[:'keyStorePassword@TypeHint'] = opts[:'key_store_password_type_hint'] if !opts[:'key_store_password_type_hint'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'service.ranking@TypeHint'] = opts[:'service_ranking_type_hint'] if !opts[:'service_ranking_type_hint'].nil?
      query_params[:'idpHttpRedirect'] = opts[:'idp_http_redirect'] if !opts[:'idp_http_redirect'].nil?
      query_params[:'idpHttpRedirect@TypeHint'] = opts[:'idp_http_redirect_type_hint'] if !opts[:'idp_http_redirect_type_hint'].nil?
      query_params[:'createUser'] = opts[:'create_user'] if !opts[:'create_user'].nil?
      query_params[:'createUser@TypeHint'] = opts[:'create_user_type_hint'] if !opts[:'create_user_type_hint'].nil?
      query_params[:'defaultRedirectUrl'] = opts[:'default_redirect_url'] if !opts[:'default_redirect_url'].nil?
      query_params[:'defaultRedirectUrl@TypeHint'] = opts[:'default_redirect_url_type_hint'] if !opts[:'default_redirect_url_type_hint'].nil?
      query_params[:'userIDAttribute'] = opts[:'user_id_attribute'] if !opts[:'user_id_attribute'].nil?
      query_params[:'userIDAttribute@TypeHint'] = opts[:'user_id_attribute_type_hint'] if !opts[:'user_id_attribute_type_hint'].nil?
      query_params[:'defaultGroups'] = @api_client.build_collection_param(opts[:'default_groups'], :multi) if !opts[:'default_groups'].nil?
      query_params[:'defaultGroups@TypeHint'] = opts[:'default_groups_type_hint'] if !opts[:'default_groups_type_hint'].nil?
      query_params[:'idpCertAlias'] = opts[:'idp_cert_alias'] if !opts[:'idp_cert_alias'].nil?
      query_params[:'idpCertAlias@TypeHint'] = opts[:'idp_cert_alias_type_hint'] if !opts[:'idp_cert_alias_type_hint'].nil?
      query_params[:'addGroupMemberships'] = opts[:'add_group_memberships'] if !opts[:'add_group_memberships'].nil?
      query_params[:'addGroupMemberships@TypeHint'] = opts[:'add_group_memberships_type_hint'] if !opts[:'add_group_memberships_type_hint'].nil?
      query_params[:'path'] = @api_client.build_collection_param(opts[:'path'], :multi) if !opts[:'path'].nil?
      query_params[:'path@TypeHint'] = opts[:'path_type_hint'] if !opts[:'path_type_hint'].nil?
      query_params[:'synchronizeAttributes'] = @api_client.build_collection_param(opts[:'synchronize_attributes'], :multi) if !opts[:'synchronize_attributes'].nil?
      query_params[:'synchronizeAttributes@TypeHint'] = opts[:'synchronize_attributes_type_hint'] if !opts[:'synchronize_attributes_type_hint'].nil?
      query_params[:'clockTolerance'] = opts[:'clock_tolerance'] if !opts[:'clock_tolerance'].nil?
      query_params[:'clockTolerance@TypeHint'] = opts[:'clock_tolerance_type_hint'] if !opts[:'clock_tolerance_type_hint'].nil?
      query_params[:'groupMembershipAttribute'] = opts[:'group_membership_attribute'] if !opts[:'group_membership_attribute'].nil?
      query_params[:'groupMembershipAttribute@TypeHint'] = opts[:'group_membership_attribute_type_hint'] if !opts[:'group_membership_attribute_type_hint'].nil?
      query_params[:'idpUrl'] = opts[:'idp_url'] if !opts[:'idp_url'].nil?
      query_params[:'idpUrl@TypeHint'] = opts[:'idp_url_type_hint'] if !opts[:'idp_url_type_hint'].nil?
      query_params[:'logoutUrl'] = opts[:'logout_url'] if !opts[:'logout_url'].nil?
      query_params[:'logoutUrl@TypeHint'] = opts[:'logout_url_type_hint'] if !opts[:'logout_url_type_hint'].nil?
      query_params[:'serviceProviderEntityId'] = opts[:'service_provider_entity_id'] if !opts[:'service_provider_entity_id'].nil?
      query_params[:'serviceProviderEntityId@TypeHint'] = opts[:'service_provider_entity_id_type_hint'] if !opts[:'service_provider_entity_id_type_hint'].nil?
      query_params[:'assertionConsumerServiceURL'] = opts[:'assertion_consumer_service_url'] if !opts[:'assertion_consumer_service_url'].nil?
      query_params[:'assertionConsumerServiceURL@TypeHint'] = opts[:'assertion_consumer_service_url_type_hint'] if !opts[:'assertion_consumer_service_url_type_hint'].nil?
      query_params[:'handleLogout'] = opts[:'handle_logout'] if !opts[:'handle_logout'].nil?
      query_params[:'handleLogout@TypeHint'] = opts[:'handle_logout_type_hint'] if !opts[:'handle_logout_type_hint'].nil?
      query_params[:'spPrivateKeyAlias'] = opts[:'sp_private_key_alias'] if !opts[:'sp_private_key_alias'].nil?
      query_params[:'spPrivateKeyAlias@TypeHint'] = opts[:'sp_private_key_alias_type_hint'] if !opts[:'sp_private_key_alias_type_hint'].nil?
      query_params[:'useEncryption'] = opts[:'use_encryption'] if !opts[:'use_encryption'].nil?
      query_params[:'useEncryption@TypeHint'] = opts[:'use_encryption_type_hint'] if !opts[:'use_encryption_type_hint'].nil?
      query_params[:'nameIdFormat'] = opts[:'name_id_format'] if !opts[:'name_id_format'].nil?
      query_params[:'nameIdFormat@TypeHint'] = opts[:'name_id_format_type_hint'] if !opts[:'name_id_format_type_hint'].nil?
      query_params[:'digestMethod'] = opts[:'digest_method'] if !opts[:'digest_method'].nil?
      query_params[:'digestMethod@TypeHint'] = opts[:'digest_method_type_hint'] if !opts[:'digest_method_type_hint'].nil?
      query_params[:'signatureMethod'] = opts[:'signature_method'] if !opts[:'signature_method'].nil?
      query_params[:'signatureMethod@TypeHint'] = opts[:'signature_method_type_hint'] if !opts[:'signature_method_type_hint'].nil?
      query_params[:'userIntermediatePath'] = opts[:'user_intermediate_path'] if !opts[:'user_intermediate_path'].nil?
      query_params[:'userIntermediatePath@TypeHint'] = opts[:'user_intermediate_path_type_hint'] if !opts[:'user_intermediate_path_type_hint'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['aemAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#post_config_adobe_granite_saml_authentication_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :org_apache_felix_https_nio 
    # @option opts [String] :org_apache_felix_https_nio_type_hint 
    # @option opts [String] :org_apache_felix_https_keystore 
    # @option opts [String] :org_apache_felix_https_keystore_type_hint 
    # @option opts [String] :org_apache_felix_https_keystore_password 
    # @option opts [String] :org_apache_felix_https_keystore_password_type_hint 
    # @option opts [String] :org_apache_felix_https_keystore_key 
    # @option opts [String] :org_apache_felix_https_keystore_key_type_hint 
    # @option opts [String] :org_apache_felix_https_keystore_key_password 
    # @option opts [String] :org_apache_felix_https_keystore_key_password_type_hint 
    # @option opts [String] :org_apache_felix_https_truststore 
    # @option opts [String] :org_apache_felix_https_truststore_type_hint 
    # @option opts [String] :org_apache_felix_https_truststore_password 
    # @option opts [String] :org_apache_felix_https_truststore_password_type_hint 
    # @option opts [String] :org_apache_felix_https_clientcertificate 
    # @option opts [String] :org_apache_felix_https_clientcertificate_type_hint 
    # @option opts [Boolean] :org_apache_felix_https_enable 
    # @option opts [String] :org_apache_felix_https_enable_type_hint 
    # @option opts [String] :org_osgi_service_http_port_secure 
    # @option opts [String] :org_osgi_service_http_port_secure_type_hint 
    # @return [nil]
    def post_config_apache_felix_jetty_based_http_service(opts = {})
      post_config_apache_felix_jetty_based_http_service_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :org_apache_felix_https_nio 
    # @option opts [String] :org_apache_felix_https_nio_type_hint 
    # @option opts [String] :org_apache_felix_https_keystore 
    # @option opts [String] :org_apache_felix_https_keystore_type_hint 
    # @option opts [String] :org_apache_felix_https_keystore_password 
    # @option opts [String] :org_apache_felix_https_keystore_password_type_hint 
    # @option opts [String] :org_apache_felix_https_keystore_key 
    # @option opts [String] :org_apache_felix_https_keystore_key_type_hint 
    # @option opts [String] :org_apache_felix_https_keystore_key_password 
    # @option opts [String] :org_apache_felix_https_keystore_key_password_type_hint 
    # @option opts [String] :org_apache_felix_https_truststore 
    # @option opts [String] :org_apache_felix_https_truststore_type_hint 
    # @option opts [String] :org_apache_felix_https_truststore_password 
    # @option opts [String] :org_apache_felix_https_truststore_password_type_hint 
    # @option opts [String] :org_apache_felix_https_clientcertificate 
    # @option opts [String] :org_apache_felix_https_clientcertificate_type_hint 
    # @option opts [Boolean] :org_apache_felix_https_enable 
    # @option opts [String] :org_apache_felix_https_enable_type_hint 
    # @option opts [String] :org_osgi_service_http_port_secure 
    # @option opts [String] :org_osgi_service_http_port_secure_type_hint 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_config_apache_felix_jetty_based_http_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlingApi.post_config_apache_felix_jetty_based_http_service ...'
      end
      # resource path
      local_var_path = '/apps/system/config/org.apache.felix.http'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'org.apache.felix.https.nio'] = opts[:'org_apache_felix_https_nio'] if !opts[:'org_apache_felix_https_nio'].nil?
      query_params[:'org.apache.felix.https.nio@TypeHint'] = opts[:'org_apache_felix_https_nio_type_hint'] if !opts[:'org_apache_felix_https_nio_type_hint'].nil?
      query_params[:'org.apache.felix.https.keystore'] = opts[:'org_apache_felix_https_keystore'] if !opts[:'org_apache_felix_https_keystore'].nil?
      query_params[:'org.apache.felix.https.keystore@TypeHint'] = opts[:'org_apache_felix_https_keystore_type_hint'] if !opts[:'org_apache_felix_https_keystore_type_hint'].nil?
      query_params[:'org.apache.felix.https.keystore.password'] = opts[:'org_apache_felix_https_keystore_password'] if !opts[:'org_apache_felix_https_keystore_password'].nil?
      query_params[:'org.apache.felix.https.keystore.password@TypeHint'] = opts[:'org_apache_felix_https_keystore_password_type_hint'] if !opts[:'org_apache_felix_https_keystore_password_type_hint'].nil?
      query_params[:'org.apache.felix.https.keystore.key'] = opts[:'org_apache_felix_https_keystore_key'] if !opts[:'org_apache_felix_https_keystore_key'].nil?
      query_params[:'org.apache.felix.https.keystore.key@TypeHint'] = opts[:'org_apache_felix_https_keystore_key_type_hint'] if !opts[:'org_apache_felix_https_keystore_key_type_hint'].nil?
      query_params[:'org.apache.felix.https.keystore.key.password'] = opts[:'org_apache_felix_https_keystore_key_password'] if !opts[:'org_apache_felix_https_keystore_key_password'].nil?
      query_params[:'org.apache.felix.https.keystore.key.password@TypeHint'] = opts[:'org_apache_felix_https_keystore_key_password_type_hint'] if !opts[:'org_apache_felix_https_keystore_key_password_type_hint'].nil?
      query_params[:'org.apache.felix.https.truststore'] = opts[:'org_apache_felix_https_truststore'] if !opts[:'org_apache_felix_https_truststore'].nil?
      query_params[:'org.apache.felix.https.truststore@TypeHint'] = opts[:'org_apache_felix_https_truststore_type_hint'] if !opts[:'org_apache_felix_https_truststore_type_hint'].nil?
      query_params[:'org.apache.felix.https.truststore.password'] = opts[:'org_apache_felix_https_truststore_password'] if !opts[:'org_apache_felix_https_truststore_password'].nil?
      query_params[:'org.apache.felix.https.truststore.password@TypeHint'] = opts[:'org_apache_felix_https_truststore_password_type_hint'] if !opts[:'org_apache_felix_https_truststore_password_type_hint'].nil?
      query_params[:'org.apache.felix.https.clientcertificate'] = opts[:'org_apache_felix_https_clientcertificate'] if !opts[:'org_apache_felix_https_clientcertificate'].nil?
      query_params[:'org.apache.felix.https.clientcertificate@TypeHint'] = opts[:'org_apache_felix_https_clientcertificate_type_hint'] if !opts[:'org_apache_felix_https_clientcertificate_type_hint'].nil?
      query_params[:'org.apache.felix.https.enable'] = opts[:'org_apache_felix_https_enable'] if !opts[:'org_apache_felix_https_enable'].nil?
      query_params[:'org.apache.felix.https.enable@TypeHint'] = opts[:'org_apache_felix_https_enable_type_hint'] if !opts[:'org_apache_felix_https_enable_type_hint'].nil?
      query_params[:'org.osgi.service.http.port.secure'] = opts[:'org_osgi_service_http_port_secure'] if !opts[:'org_osgi_service_http_port_secure'].nil?
      query_params[:'org.osgi.service.http.port.secure@TypeHint'] = opts[:'org_osgi_service_http_port_secure_type_hint'] if !opts[:'org_osgi_service_http_port_secure_type_hint'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['aemAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#post_config_apache_felix_jetty_based_http_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :proxy_host 
    # @option opts [String] :proxy_host_type_hint 
    # @option opts [Integer] :proxy_port 
    # @option opts [String] :proxy_port_type_hint 
    # @option opts [Array<String>] :proxy_exceptions 
    # @option opts [String] :proxy_exceptions_type_hint 
    # @option opts [Boolean] :proxy_enabled 
    # @option opts [String] :proxy_enabled_type_hint 
    # @option opts [String] :proxy_user 
    # @option opts [String] :proxy_user_type_hint 
    # @option opts [String] :proxy_password 
    # @option opts [String] :proxy_password_type_hint 
    # @return [nil]
    def post_config_apache_http_components_proxy_configuration(opts = {})
      post_config_apache_http_components_proxy_configuration_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :proxy_host 
    # @option opts [String] :proxy_host_type_hint 
    # @option opts [Integer] :proxy_port 
    # @option opts [String] :proxy_port_type_hint 
    # @option opts [Array<String>] :proxy_exceptions 
    # @option opts [String] :proxy_exceptions_type_hint 
    # @option opts [Boolean] :proxy_enabled 
    # @option opts [String] :proxy_enabled_type_hint 
    # @option opts [String] :proxy_user 
    # @option opts [String] :proxy_user_type_hint 
    # @option opts [String] :proxy_password 
    # @option opts [String] :proxy_password_type_hint 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_config_apache_http_components_proxy_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlingApi.post_config_apache_http_components_proxy_configuration ...'
      end
      # resource path
      local_var_path = '/apps/system/config/org.apache.http.proxyconfigurator.config'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'proxy.host'] = opts[:'proxy_host'] if !opts[:'proxy_host'].nil?
      query_params[:'proxy.host@TypeHint'] = opts[:'proxy_host_type_hint'] if !opts[:'proxy_host_type_hint'].nil?
      query_params[:'proxy.port'] = opts[:'proxy_port'] if !opts[:'proxy_port'].nil?
      query_params[:'proxy.port@TypeHint'] = opts[:'proxy_port_type_hint'] if !opts[:'proxy_port_type_hint'].nil?
      query_params[:'proxy.exceptions'] = @api_client.build_collection_param(opts[:'proxy_exceptions'], :multi) if !opts[:'proxy_exceptions'].nil?
      query_params[:'proxy.exceptions@TypeHint'] = opts[:'proxy_exceptions_type_hint'] if !opts[:'proxy_exceptions_type_hint'].nil?
      query_params[:'proxy.enabled'] = opts[:'proxy_enabled'] if !opts[:'proxy_enabled'].nil?
      query_params[:'proxy.enabled@TypeHint'] = opts[:'proxy_enabled_type_hint'] if !opts[:'proxy_enabled_type_hint'].nil?
      query_params[:'proxy.user'] = opts[:'proxy_user'] if !opts[:'proxy_user'].nil?
      query_params[:'proxy.user@TypeHint'] = opts[:'proxy_user_type_hint'] if !opts[:'proxy_user_type_hint'].nil?
      query_params[:'proxy.password'] = opts[:'proxy_password'] if !opts[:'proxy_password'].nil?
      query_params[:'proxy.password@TypeHint'] = opts[:'proxy_password_type_hint'] if !opts[:'proxy_password_type_hint'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['aemAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#post_config_apache_http_components_proxy_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :_alias 
    # @option opts [String] :alias_type_hint 
    # @option opts [Boolean] :dav_create_absolute_uri 
    # @option opts [String] :dav_create_absolute_uri_type_hint 
    # @return [nil]
    def post_config_apache_sling_dav_ex_servlet(opts = {})
      post_config_apache_sling_dav_ex_servlet_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :_alias 
    # @option opts [String] :alias_type_hint 
    # @option opts [Boolean] :dav_create_absolute_uri 
    # @option opts [String] :dav_create_absolute_uri_type_hint 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_config_apache_sling_dav_ex_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlingApi.post_config_apache_sling_dav_ex_servlet ...'
      end
      # resource path
      local_var_path = '/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'alias'] = opts[:'_alias'] if !opts[:'_alias'].nil?
      query_params[:'alias@TypeHint'] = opts[:'alias_type_hint'] if !opts[:'alias_type_hint'].nil?
      query_params[:'dav.create-absolute-uri'] = opts[:'dav_create_absolute_uri'] if !opts[:'dav_create_absolute_uri'].nil?
      query_params[:'dav.create-absolute-uri@TypeHint'] = opts[:'dav_create_absolute_uri_type_hint'] if !opts[:'dav_create_absolute_uri_type_hint'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['aemAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#post_config_apache_sling_dav_ex_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :json_maximumresults 
    # @option opts [String] :json_maximumresults_type_hint 
    # @option opts [Boolean] :enable_html 
    # @option opts [String] :enable_html_type_hint 
    # @option opts [Boolean] :enable_txt 
    # @option opts [String] :enable_txt_type_hint 
    # @option opts [Boolean] :enable_xml 
    # @option opts [String] :enable_xml_type_hint 
    # @return [nil]
    def post_config_apache_sling_get_servlet(opts = {})
      post_config_apache_sling_get_servlet_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :json_maximumresults 
    # @option opts [String] :json_maximumresults_type_hint 
    # @option opts [Boolean] :enable_html 
    # @option opts [String] :enable_html_type_hint 
    # @option opts [Boolean] :enable_txt 
    # @option opts [String] :enable_txt_type_hint 
    # @option opts [Boolean] :enable_xml 
    # @option opts [String] :enable_xml_type_hint 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_config_apache_sling_get_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlingApi.post_config_apache_sling_get_servlet ...'
      end
      # resource path
      local_var_path = '/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'json.maximumresults'] = opts[:'json_maximumresults'] if !opts[:'json_maximumresults'].nil?
      query_params[:'json.maximumresults@TypeHint'] = opts[:'json_maximumresults_type_hint'] if !opts[:'json_maximumresults_type_hint'].nil?
      query_params[:'enable.html'] = opts[:'enable_html'] if !opts[:'enable_html'].nil?
      query_params[:'enable.html@TypeHint'] = opts[:'enable_html_type_hint'] if !opts[:'enable_html_type_hint'].nil?
      query_params[:'enable.txt'] = opts[:'enable_txt'] if !opts[:'enable_txt'].nil?
      query_params[:'enable.txt@TypeHint'] = opts[:'enable_txt_type_hint'] if !opts[:'enable_txt_type_hint'].nil?
      query_params[:'enable.xml'] = opts[:'enable_xml'] if !opts[:'enable_xml'].nil?
      query_params[:'enable.xml@TypeHint'] = opts[:'enable_xml_type_hint'] if !opts[:'enable_xml_type_hint'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['aemAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#post_config_apache_sling_get_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :allow_empty 
    # @option opts [String] :allow_empty_type_hint 
    # @option opts [String] :allow_hosts 
    # @option opts [String] :allow_hosts_type_hint 
    # @option opts [String] :allow_hosts_regexp 
    # @option opts [String] :allow_hosts_regexp_type_hint 
    # @option opts [String] :filter_methods 
    # @option opts [String] :filter_methods_type_hint 
    # @return [nil]
    def post_config_apache_sling_referrer_filter(opts = {})
      post_config_apache_sling_referrer_filter_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :allow_empty 
    # @option opts [String] :allow_empty_type_hint 
    # @option opts [String] :allow_hosts 
    # @option opts [String] :allow_hosts_type_hint 
    # @option opts [String] :allow_hosts_regexp 
    # @option opts [String] :allow_hosts_regexp_type_hint 
    # @option opts [String] :filter_methods 
    # @option opts [String] :filter_methods_type_hint 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_config_apache_sling_referrer_filter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlingApi.post_config_apache_sling_referrer_filter ...'
      end
      # resource path
      local_var_path = '/apps/system/config/org.apache.sling.security.impl.ReferrerFilter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'allow.empty'] = opts[:'allow_empty'] if !opts[:'allow_empty'].nil?
      query_params[:'allow.empty@TypeHint'] = opts[:'allow_empty_type_hint'] if !opts[:'allow_empty_type_hint'].nil?
      query_params[:'allow.hosts'] = opts[:'allow_hosts'] if !opts[:'allow_hosts'].nil?
      query_params[:'allow.hosts@TypeHint'] = opts[:'allow_hosts_type_hint'] if !opts[:'allow_hosts_type_hint'].nil?
      query_params[:'allow.hosts.regexp'] = opts[:'allow_hosts_regexp'] if !opts[:'allow_hosts_regexp'].nil?
      query_params[:'allow.hosts.regexp@TypeHint'] = opts[:'allow_hosts_regexp_type_hint'] if !opts[:'allow_hosts_regexp_type_hint'].nil?
      query_params[:'filter.methods'] = opts[:'filter_methods'] if !opts[:'filter_methods'].nil?
      query_params[:'filter.methods@TypeHint'] = opts[:'filter_methods_type_hint'] if !opts[:'filter_methods_type_hint'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['aemAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#post_config_apache_sling_referrer_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param config_node_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_config_property(config_node_name, opts = {})
      post_config_property_with_http_info(config_node_name, opts)
      nil
    end

    # @param config_node_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_config_property_with_http_info(config_node_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlingApi.post_config_property ...'
      end
      # verify the required parameter 'config_node_name' is set
      if @api_client.config.client_side_validation && config_node_name.nil?
        fail ArgumentError, "Missing the required parameter 'config_node_name' when calling SlingApi.post_config_property"
      end
      # resource path
      local_var_path = '/apps/system/config/{configNodeName}'.sub('{' + 'configNodeName' + '}', CGI.escape(config_node_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['aemAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#post_config_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param path [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :operation 
    # @option opts [String] :delete_authorizable 
    # @option opts [File] :file 
    # @return [nil]
    def post_node(path, name, opts = {})
      post_node_with_http_info(path, name, opts)
      nil
    end

    # @param path [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :operation 
    # @option opts [String] :delete_authorizable 
    # @option opts [File] :file 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_node_with_http_info(path, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlingApi.post_node ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling SlingApi.post_node"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling SlingApi.post_node"
      end
      # resource path
      local_var_path = '/{path}/{name}'.sub('{' + 'path' + '}', CGI.escape(path.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:':operation'] = opts[:'operation'] if !opts[:'operation'].nil?
      query_params[:'deleteAuthorizable'] = opts[:'delete_authorizable'] if !opts[:'delete_authorizable'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['aemAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#post_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param path [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :add_members 
    # @return [nil]
    def post_node_rw(path, name, opts = {})
      post_node_rw_with_http_info(path, name, opts)
      nil
    end

    # @param path [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :add_members 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_node_rw_with_http_info(path, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlingApi.post_node_rw ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling SlingApi.post_node_rw"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling SlingApi.post_node_rw"
      end
      # resource path
      local_var_path = '/{path}/{name}.rw.html'.sub('{' + 'path' + '}', CGI.escape(path.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'addMembers'] = opts[:'add_members'] if !opts[:'add_members'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['aemAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#post_node_rw\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param path [String] 
    # @param jcrprimary_type [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_path(path, jcrprimary_type, name, opts = {})
      post_path_with_http_info(path, jcrprimary_type, name, opts)
      nil
    end

    # @param path [String] 
    # @param jcrprimary_type [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_path_with_http_info(path, jcrprimary_type, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlingApi.post_path ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling SlingApi.post_path"
      end
      # verify the required parameter 'jcrprimary_type' is set
      if @api_client.config.client_side_validation && jcrprimary_type.nil?
        fail ArgumentError, "Missing the required parameter 'jcrprimary_type' when calling SlingApi.post_path"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling SlingApi.post_path"
      end
      # resource path
      local_var_path = '/{path}/'.sub('{' + 'path' + '}', CGI.escape(path.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'jcr:primaryType'] = jcrprimary_type
      query_params[:':name'] = name

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['aemAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#post_path\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param path [String] 
    # @param p_limit [Float] 
    # @param _1_property [String] 
    # @param _1_property_value [String] 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def post_query(path, p_limit, _1_property, _1_property_value, opts = {})
      data, _status_code, _headers = post_query_with_http_info(path, p_limit, _1_property, _1_property_value, opts)
      data
    end

    # @param path [String] 
    # @param p_limit [Float] 
    # @param _1_property [String] 
    # @param _1_property_value [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def post_query_with_http_info(path, p_limit, _1_property, _1_property_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlingApi.post_query ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling SlingApi.post_query"
      end
      # verify the required parameter 'p_limit' is set
      if @api_client.config.client_side_validation && p_limit.nil?
        fail ArgumentError, "Missing the required parameter 'p_limit' when calling SlingApi.post_query"
      end
      # verify the required parameter '_1_property' is set
      if @api_client.config.client_side_validation && _1_property.nil?
        fail ArgumentError, "Missing the required parameter '_1_property' when calling SlingApi.post_query"
      end
      # verify the required parameter '_1_property_value' is set
      if @api_client.config.client_side_validation && _1_property_value.nil?
        fail ArgumentError, "Missing the required parameter '_1_property_value' when calling SlingApi.post_query"
      end
      # resource path
      local_var_path = '/bin/querybuilder.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'path'] = path
      query_params[:'p.limit'] = p_limit
      query_params[:'1_property'] = _1_property
      query_params[:'1_property.value'] = _1_property_value

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || ['aemAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#post_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param ignoredeactivated [Boolean] 
    # @param onlymodified [Boolean] 
    # @param path [String] 
    # @param cmd [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_tree_activation(ignoredeactivated, onlymodified, path, cmd, opts = {})
      post_tree_activation_with_http_info(ignoredeactivated, onlymodified, path, cmd, opts)
      nil
    end

    # @param ignoredeactivated [Boolean] 
    # @param onlymodified [Boolean] 
    # @param path [String] 
    # @param cmd [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_tree_activation_with_http_info(ignoredeactivated, onlymodified, path, cmd, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlingApi.post_tree_activation ...'
      end
      # verify the required parameter 'ignoredeactivated' is set
      if @api_client.config.client_side_validation && ignoredeactivated.nil?
        fail ArgumentError, "Missing the required parameter 'ignoredeactivated' when calling SlingApi.post_tree_activation"
      end
      # verify the required parameter 'onlymodified' is set
      if @api_client.config.client_side_validation && onlymodified.nil?
        fail ArgumentError, "Missing the required parameter 'onlymodified' when calling SlingApi.post_tree_activation"
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling SlingApi.post_tree_activation"
      end
      # verify the required parameter 'cmd' is set
      if @api_client.config.client_side_validation && cmd.nil?
        fail ArgumentError, "Missing the required parameter 'cmd' when calling SlingApi.post_tree_activation"
      end
      # resource path
      local_var_path = '/libs/replication/treeactivation.html'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ignoredeactivated'] = ignoredeactivated
      query_params[:'onlymodified'] = onlymodified
      query_params[:'path'] = path
      query_params[:'cmd'] = cmd

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['aemAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#post_tree_activation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :operation 
    # @option opts [String] :new_password 
    # @option opts [String] :re_password 
    # @option opts [String] :key_store_type 
    # @option opts [String] :remove_alias 
    # @option opts [File] :certificate 
    # @return [String]
    def post_truststore(opts = {})
      data, _status_code, _headers = post_truststore_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :operation 
    # @option opts [String] :new_password 
    # @option opts [String] :re_password 
    # @option opts [String] :key_store_type 
    # @option opts [String] :remove_alias 
    # @option opts [File] :certificate 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def post_truststore_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlingApi.post_truststore ...'
      end
      # resource path
      local_var_path = '/libs/granite/security/post/truststore'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:':operation'] = opts[:'operation'] if !opts[:'operation'].nil?
      query_params[:'newPassword'] = opts[:'new_password'] if !opts[:'new_password'].nil?
      query_params[:'rePassword'] = opts[:'re_password'] if !opts[:'re_password'].nil?
      query_params[:'keyStoreType'] = opts[:'key_store_type'] if !opts[:'key_store_type'].nil?
      query_params[:'removeAlias'] = opts[:'remove_alias'] if !opts[:'remove_alias'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['certificate'] = opts[:'certificate'] if !opts[:'certificate'].nil?

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || ['aemAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#post_truststore\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [File] :truststore_p12 
    # @return [String]
    def post_truststore_pkcs12(opts = {})
      data, _status_code, _headers = post_truststore_pkcs12_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [File] :truststore_p12 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def post_truststore_pkcs12_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlingApi.post_truststore_pkcs12 ...'
      end
      # resource path
      local_var_path = '/etc/truststore'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['truststore.p12'] = opts[:'truststore_p12'] if !opts[:'truststore_p12'].nil?

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || ['aemAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#post_truststore_pkcs12\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
