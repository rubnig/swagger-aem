/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';


import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class CustomService {
    private basePath: string = 'http://localhost';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * 
     * 
     * @param tags 
     * @param combineTagsOr 
     
     */
    public getAemHealthCheck(tags?: string, combineTagsOr?: boolean, observe?: 'body', headers?: Headers): Observable<string>;
    public getAemHealthCheck(tags?: string, combineTagsOr?: boolean, observe?: 'response', headers?: Headers): Observable<HttpResponse<string>>;
    public getAemHealthCheck(tags?: string, combineTagsOr?: boolean, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (tags !== undefined) {
            queryParameters.push('tags='+encodeURIComponent(String(tags)));
        }
        if (combineTagsOr !== undefined) {
            queryParameters.push('combineTagsOr='+encodeURIComponent(String(combineTagsOr)));
        }

        // authentication (aemAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<string>> = this.httpClient.get(`${this.basePath}/system/health?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <string>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param bundlesIgnored 
     * @param bundlesIgnoredTypeHint 
     
     */
    public postConfigAemHealthCheckServlet(bundlesIgnored?: Array<string>, bundlesIgnoredTypeHint?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public postConfigAemHealthCheckServlet(bundlesIgnored?: Array<string>, bundlesIgnoredTypeHint?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public postConfigAemHealthCheckServlet(bundlesIgnored?: Array<string>, bundlesIgnoredTypeHint?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (bundlesIgnored) {
            bundlesIgnored.forEach((element) => {
                queryParameters.push('bundlesIgnored='+encodeURIComponent(String(element)));
            })
        }
        if (bundlesIgnoredTypeHint !== undefined) {
            queryParameters.push('bundlesIgnoredTypeHint='+encodeURIComponent(String(bundlesIgnoredTypeHint)));
        }

        // authentication (aemAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param pwdresetAuthorizables 
     * @param pwdresetAuthorizablesTypeHint 
     
     */
    public postConfigAemPasswordReset(pwdresetAuthorizables?: Array<string>, pwdresetAuthorizablesTypeHint?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public postConfigAemPasswordReset(pwdresetAuthorizables?: Array<string>, pwdresetAuthorizablesTypeHint?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public postConfigAemPasswordReset(pwdresetAuthorizables?: Array<string>, pwdresetAuthorizablesTypeHint?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (pwdresetAuthorizables) {
            pwdresetAuthorizables.forEach((element) => {
                queryParameters.push('pwdresetAuthorizables='+encodeURIComponent(String(element)));
            })
        }
        if (pwdresetAuthorizablesTypeHint !== undefined) {
            queryParameters.push('pwdresetAuthorizablesTypeHint='+encodeURIComponent(String(pwdresetAuthorizablesTypeHint)));
        }

        // authentication (aemAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/apps/system/config/com.shinesolutions.aem.passwordreset.Activator?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }

}
