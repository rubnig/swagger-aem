/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';


import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class GraniteService {
    private basePath: string = 'http://localhost';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * 
     * 
     * @param keystorePassword 
     * @param keystorePasswordConfirm 
     * @param truststorePassword 
     * @param truststorePasswordConfirm 
     * @param httpsHostname 
     * @param httpsPort 
     * @param privatekeyFile 
     * @param certificateFile 
     
     */
    public sslSetup(keystorePassword: string, keystorePasswordConfirm: string, truststorePassword: string, truststorePasswordConfirm: string, httpsHostname: string, httpsPort: string, privatekeyFile?: Blob, certificateFile?: Blob, observe?: 'body', headers?: Headers): Observable<string>;
    public sslSetup(keystorePassword: string, keystorePasswordConfirm: string, truststorePassword: string, truststorePasswordConfirm: string, httpsHostname: string, httpsPort: string, privatekeyFile?: Blob, certificateFile?: Blob, observe?: 'response', headers?: Headers): Observable<HttpResponse<string>>;
    public sslSetup(keystorePassword: string, keystorePasswordConfirm: string, truststorePassword: string, truststorePasswordConfirm: string, httpsHostname: string, httpsPort: string, privatekeyFile?: Blob, certificateFile?: Blob, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (keystorePassword === null || keystorePassword === undefined){
            throw new Error('Required parameter keystorePassword was null or undefined when calling sslSetup.');
        }

        if (keystorePasswordConfirm === null || keystorePasswordConfirm === undefined){
            throw new Error('Required parameter keystorePasswordConfirm was null or undefined when calling sslSetup.');
        }

        if (truststorePassword === null || truststorePassword === undefined){
            throw new Error('Required parameter truststorePassword was null or undefined when calling sslSetup.');
        }

        if (truststorePasswordConfirm === null || truststorePasswordConfirm === undefined){
            throw new Error('Required parameter truststorePasswordConfirm was null or undefined when calling sslSetup.');
        }

        if (httpsHostname === null || httpsHostname === undefined){
            throw new Error('Required parameter httpsHostname was null or undefined when calling sslSetup.');
        }

        if (httpsPort === null || httpsPort === undefined){
            throw new Error('Required parameter httpsPort was null or undefined when calling sslSetup.');
        }

        let queryParameters: string[] = [];
        if (keystorePassword !== undefined) {
            queryParameters.push('keystorePassword='+encodeURIComponent(String(keystorePassword)));
        }
        if (keystorePasswordConfirm !== undefined) {
            queryParameters.push('keystorePasswordConfirm='+encodeURIComponent(String(keystorePasswordConfirm)));
        }
        if (truststorePassword !== undefined) {
            queryParameters.push('truststorePassword='+encodeURIComponent(String(truststorePassword)));
        }
        if (truststorePasswordConfirm !== undefined) {
            queryParameters.push('truststorePasswordConfirm='+encodeURIComponent(String(truststorePasswordConfirm)));
        }
        if (httpsHostname !== undefined) {
            queryParameters.push('httpsHostname='+encodeURIComponent(String(httpsHostname)));
        }
        if (httpsPort !== undefined) {
            queryParameters.push('httpsPort='+encodeURIComponent(String(httpsPort)));
        }

        // authentication (aemAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'text/plain';

        let formData: FormData = new FormData();
        headers['Content-Type'] = 'multipart/form-data';
        if (privatekeyFile !== undefined) {
            formData.append('privatekeyFile', <any>privatekeyFile);
        }
        if (certificateFile !== undefined) {
            formData.append('certificateFile', <any>certificateFile);
        }

        const response: Observable<HttpResponse<string>> = this.httpClient.post(`${this.basePath}/libs/granite/security/post/sslSetup.html?${queryParameters.join('&')}`, formData, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <string>(httpResponse.response))
               );
        }
        return response;
    }

}
