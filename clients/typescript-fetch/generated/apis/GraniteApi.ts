/* tslint:disable */
/* eslint-disable */
/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface SslSetupRequest {
    keystorePassword: string;
    keystorePasswordConfirm: string;
    truststorePassword: string;
    truststorePasswordConfirm: string;
    httpsHostname: string;
    httpsPort: string;
    privatekeyFile?: Blob;
    certificateFile?: Blob;
}

/**
 * 
 */
export class GraniteApi extends runtime.BaseAPI {

    /**
     */
    async sslSetupRaw(requestParameters: SslSetupRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.keystorePassword === null || requestParameters.keystorePassword === undefined) {
            throw new runtime.RequiredError('keystorePassword','Required parameter requestParameters.keystorePassword was null or undefined when calling sslSetup.');
        }

        if (requestParameters.keystorePasswordConfirm === null || requestParameters.keystorePasswordConfirm === undefined) {
            throw new runtime.RequiredError('keystorePasswordConfirm','Required parameter requestParameters.keystorePasswordConfirm was null or undefined when calling sslSetup.');
        }

        if (requestParameters.truststorePassword === null || requestParameters.truststorePassword === undefined) {
            throw new runtime.RequiredError('truststorePassword','Required parameter requestParameters.truststorePassword was null or undefined when calling sslSetup.');
        }

        if (requestParameters.truststorePasswordConfirm === null || requestParameters.truststorePasswordConfirm === undefined) {
            throw new runtime.RequiredError('truststorePasswordConfirm','Required parameter requestParameters.truststorePasswordConfirm was null or undefined when calling sslSetup.');
        }

        if (requestParameters.httpsHostname === null || requestParameters.httpsHostname === undefined) {
            throw new runtime.RequiredError('httpsHostname','Required parameter requestParameters.httpsHostname was null or undefined when calling sslSetup.');
        }

        if (requestParameters.httpsPort === null || requestParameters.httpsPort === undefined) {
            throw new runtime.RequiredError('httpsPort','Required parameter requestParameters.httpsPort was null or undefined when calling sslSetup.');
        }

        const queryParameters: any = {};

        if (requestParameters.keystorePassword !== undefined) {
            queryParameters['keystorePassword'] = requestParameters.keystorePassword;
        }

        if (requestParameters.keystorePasswordConfirm !== undefined) {
            queryParameters['keystorePasswordConfirm'] = requestParameters.keystorePasswordConfirm;
        }

        if (requestParameters.truststorePassword !== undefined) {
            queryParameters['truststorePassword'] = requestParameters.truststorePassword;
        }

        if (requestParameters.truststorePasswordConfirm !== undefined) {
            queryParameters['truststorePasswordConfirm'] = requestParameters.truststorePasswordConfirm;
        }

        if (requestParameters.httpsHostname !== undefined) {
            queryParameters['httpsHostname'] = requestParameters.httpsHostname;
        }

        if (requestParameters.httpsPort !== undefined) {
            queryParameters['httpsPort'] = requestParameters.httpsPort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.privatekeyFile !== undefined) {
            formParams.append('privatekeyFile', requestParameters.privatekeyFile as any);
        }

        if (requestParameters.certificateFile !== undefined) {
            formParams.append('certificateFile', requestParameters.certificateFile as any);
        }

        const response = await this.request({
            path: `/libs/granite/security/post/sslSetup.html`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async sslSetup(requestParameters: SslSetupRequest, initOverrides?: RequestInit): Promise<string> {
        const response = await this.sslSetupRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
