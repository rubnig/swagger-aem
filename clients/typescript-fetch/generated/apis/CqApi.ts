/* tslint:disable */
/* eslint-disable */
/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface PostCqActionsRequest {
    authorizableId: string;
    changelog: string;
}

/**
 * 
 */
export class CqApi extends runtime.BaseAPI {

    /**
     */
    async getLoginPageRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/libs/granite/core/content/login.html`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async getLoginPage(initOverrides?: RequestInit): Promise<string> {
        const response = await this.getLoginPageRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async postCqActionsRaw(requestParameters: PostCqActionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.authorizableId === null || requestParameters.authorizableId === undefined) {
            throw new runtime.RequiredError('authorizableId','Required parameter requestParameters.authorizableId was null or undefined when calling postCqActions.');
        }

        if (requestParameters.changelog === null || requestParameters.changelog === undefined) {
            throw new runtime.RequiredError('changelog','Required parameter requestParameters.changelog was null or undefined when calling postCqActions.');
        }

        const queryParameters: any = {};

        if (requestParameters.authorizableId !== undefined) {
            queryParameters['authorizableId'] = requestParameters.authorizableId;
        }

        if (requestParameters.changelog !== undefined) {
            queryParameters['changelog'] = requestParameters.changelog;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/.cqactions.html`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postCqActions(requestParameters: PostCqActionsRequest, initOverrides?: RequestInit): Promise<void> {
        await this.postCqActionsRaw(requestParameters, initOverrides);
    }

}
