/* tslint:disable */
/* eslint-disable */
/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface GetAemHealthCheckRequest {
    tags?: string;
    combineTagsOr?: boolean;
}

export interface PostConfigAemHealthCheckServletRequest {
    bundlesIgnored?: Array<string>;
    bundlesIgnoredTypeHint?: string;
}

export interface PostConfigAemPasswordResetRequest {
    pwdresetAuthorizables?: Array<string>;
    pwdresetAuthorizablesTypeHint?: string;
}

/**
 * 
 */
export class CustomApi extends runtime.BaseAPI {

    /**
     */
    async getAemHealthCheckRaw(requestParameters: GetAemHealthCheckRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        if (requestParameters.tags !== undefined) {
            queryParameters['tags'] = requestParameters.tags;
        }

        if (requestParameters.combineTagsOr !== undefined) {
            queryParameters['combineTagsOr'] = requestParameters.combineTagsOr;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/system/health`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async getAemHealthCheck(requestParameters: GetAemHealthCheckRequest, initOverrides?: RequestInit): Promise<string> {
        const response = await this.getAemHealthCheckRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postConfigAemHealthCheckServletRaw(requestParameters: PostConfigAemHealthCheckServletRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.bundlesIgnored) {
            queryParameters['bundles.ignored'] = requestParameters.bundlesIgnored;
        }

        if (requestParameters.bundlesIgnoredTypeHint !== undefined) {
            queryParameters['bundles.ignored@TypeHint'] = requestParameters.bundlesIgnoredTypeHint;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postConfigAemHealthCheckServlet(requestParameters: PostConfigAemHealthCheckServletRequest, initOverrides?: RequestInit): Promise<void> {
        await this.postConfigAemHealthCheckServletRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postConfigAemPasswordResetRaw(requestParameters: PostConfigAemPasswordResetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.pwdresetAuthorizables) {
            queryParameters['pwdreset.authorizables'] = requestParameters.pwdresetAuthorizables;
        }

        if (requestParameters.pwdresetAuthorizablesTypeHint !== undefined) {
            queryParameters['pwdreset.authorizables@TypeHint'] = requestParameters.pwdresetAuthorizablesTypeHint;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/apps/system/config/com.shinesolutions.aem.passwordreset.Activator`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postConfigAemPasswordReset(requestParameters: PostConfigAemPasswordResetRequest, initOverrides?: RequestInit): Promise<void> {
        await this.postConfigAemPasswordResetRaw(requestParameters, initOverrides);
    }

}
