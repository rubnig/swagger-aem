/* tslint:disable */
/* eslint-disable */
/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BundleDataProp,
    BundleDataPropFromJSON,
    BundleDataPropFromJSONTyped,
    BundleDataPropToJSON,
} from './';

/**
 * 
 * @export
 * @interface BundleData
 */
export interface BundleData {
    /**
     * Bundle ID
     * @type {number}
     * @memberof BundleData
     */
    id?: number;
    /**
     * Bundle name
     * @type {string}
     * @memberof BundleData
     */
    name?: string;
    /**
     * Is bundle a fragment
     * @type {boolean}
     * @memberof BundleData
     */
    fragment?: boolean;
    /**
     * Numeric raw bundle state value
     * @type {number}
     * @memberof BundleData
     */
    stateRaw?: number;
    /**
     * Bundle state value
     * @type {string}
     * @memberof BundleData
     */
    state?: string;
    /**
     * Bundle version
     * @type {string}
     * @memberof BundleData
     */
    version?: string;
    /**
     * Bundle symbolic name
     * @type {string}
     * @memberof BundleData
     */
    symbolicName?: string;
    /**
     * Bundle category
     * @type {string}
     * @memberof BundleData
     */
    category?: string;
    /**
     * 
     * @type {Array<BundleDataProp>}
     * @memberof BundleData
     */
    props?: Array<BundleDataProp>;
}

export function BundleDataFromJSON(json: any): BundleData {
    return BundleDataFromJSONTyped(json, false);
}

export function BundleDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): BundleData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'fragment': !exists(json, 'fragment') ? undefined : json['fragment'],
        'stateRaw': !exists(json, 'stateRaw') ? undefined : json['stateRaw'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'version': !exists(json, 'version') ? undefined : json['version'],
        'symbolicName': !exists(json, 'symbolicName') ? undefined : json['symbolicName'],
        'category': !exists(json, 'category') ? undefined : json['category'],
        'props': !exists(json, 'props') ? undefined : ((json['props'] as Array<any>).map(BundleDataPropFromJSON)),
    };
}

export function BundleDataToJSON(value?: BundleData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'fragment': value.fragment,
        'stateRaw': value.stateRaw,
        'state': value.state,
        'version': value.version,
        'symbolicName': value.symbolicName,
        'category': value.category,
        'props': value.props === undefined ? undefined : ((value.props as Array<any>).map(BundleDataPropToJSON)),
    };
}


