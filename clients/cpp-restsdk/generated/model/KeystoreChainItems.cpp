/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "KeystoreChainItems.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




KeystoreChainItems::KeystoreChainItems()
{
    m_Subject = utility::conversions::to_string_t("");
    m_SubjectIsSet = false;
    m_Issuer = utility::conversions::to_string_t("");
    m_IssuerIsSet = false;
    m_NotBefore = utility::conversions::to_string_t("");
    m_NotBeforeIsSet = false;
    m_NotAfter = utility::conversions::to_string_t("");
    m_NotAfterIsSet = false;
    m_SerialNumber = 0;
    m_SerialNumberIsSet = false;
}

KeystoreChainItems::~KeystoreChainItems()
{
}

void KeystoreChainItems::validate()
{
    // TODO: implement validation
}

web::json::value KeystoreChainItems::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SubjectIsSet)
    {
        val[utility::conversions::to_string_t("subject")] = ModelBase::toJson(m_Subject);
    }
    if(m_IssuerIsSet)
    {
        val[utility::conversions::to_string_t("issuer")] = ModelBase::toJson(m_Issuer);
    }
    if(m_NotBeforeIsSet)
    {
        val[utility::conversions::to_string_t("notBefore")] = ModelBase::toJson(m_NotBefore);
    }
    if(m_NotAfterIsSet)
    {
        val[utility::conversions::to_string_t("notAfter")] = ModelBase::toJson(m_NotAfter);
    }
    if(m_SerialNumberIsSet)
    {
        val[utility::conversions::to_string_t("serialNumber")] = ModelBase::toJson(m_SerialNumber);
    }

    return val;
}

bool KeystoreChainItems::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("subject")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subject"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_subject;
            ok &= ModelBase::fromJson(fieldValue, refVal_subject);
            setSubject(refVal_subject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("issuer")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("issuer"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_issuer;
            ok &= ModelBase::fromJson(fieldValue, refVal_issuer);
            setIssuer(refVal_issuer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("notBefore")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("notBefore"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_notBefore;
            ok &= ModelBase::fromJson(fieldValue, refVal_notBefore);
            setNotBefore(refVal_notBefore);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("notAfter")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("notAfter"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_notAfter;
            ok &= ModelBase::fromJson(fieldValue, refVal_notAfter);
            setNotAfter(refVal_notAfter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("serialNumber")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("serialNumber"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_serialNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_serialNumber);
            setSerialNumber(refVal_serialNumber);
        }
    }
    return ok;
}

void KeystoreChainItems::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_SubjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subject"), m_Subject));
    }
    if(m_IssuerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("issuer"), m_Issuer));
    }
    if(m_NotBeforeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("notBefore"), m_NotBefore));
    }
    if(m_NotAfterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("notAfter"), m_NotAfter));
    }
    if(m_SerialNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("serialNumber"), m_SerialNumber));
    }
}

bool KeystoreChainItems::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("subject")))
    {
        utility::string_t refVal_subject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subject")), refVal_subject );
        setSubject(refVal_subject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("issuer")))
    {
        utility::string_t refVal_issuer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("issuer")), refVal_issuer );
        setIssuer(refVal_issuer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("notBefore")))
    {
        utility::string_t refVal_notBefore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("notBefore")), refVal_notBefore );
        setNotBefore(refVal_notBefore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("notAfter")))
    {
        utility::string_t refVal_notAfter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("notAfter")), refVal_notAfter );
        setNotAfter(refVal_notAfter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("serialNumber")))
    {
        int32_t refVal_serialNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("serialNumber")), refVal_serialNumber );
        setSerialNumber(refVal_serialNumber);
    }
    return ok;
}

utility::string_t KeystoreChainItems::getSubject() const
{
    return m_Subject;
}

void KeystoreChainItems::setSubject(const utility::string_t& value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}

bool KeystoreChainItems::subjectIsSet() const
{
    return m_SubjectIsSet;
}

void KeystoreChainItems::unsetSubject()
{
    m_SubjectIsSet = false;
}
utility::string_t KeystoreChainItems::getIssuer() const
{
    return m_Issuer;
}

void KeystoreChainItems::setIssuer(const utility::string_t& value)
{
    m_Issuer = value;
    m_IssuerIsSet = true;
}

bool KeystoreChainItems::issuerIsSet() const
{
    return m_IssuerIsSet;
}

void KeystoreChainItems::unsetIssuer()
{
    m_IssuerIsSet = false;
}
utility::string_t KeystoreChainItems::getNotBefore() const
{
    return m_NotBefore;
}

void KeystoreChainItems::setNotBefore(const utility::string_t& value)
{
    m_NotBefore = value;
    m_NotBeforeIsSet = true;
}

bool KeystoreChainItems::notBeforeIsSet() const
{
    return m_NotBeforeIsSet;
}

void KeystoreChainItems::unsetNotBefore()
{
    m_NotBeforeIsSet = false;
}
utility::string_t KeystoreChainItems::getNotAfter() const
{
    return m_NotAfter;
}

void KeystoreChainItems::setNotAfter(const utility::string_t& value)
{
    m_NotAfter = value;
    m_NotAfterIsSet = true;
}

bool KeystoreChainItems::notAfterIsSet() const
{
    return m_NotAfterIsSet;
}

void KeystoreChainItems::unsetNotAfter()
{
    m_NotAfterIsSet = false;
}
int32_t KeystoreChainItems::getSerialNumber() const
{
    return m_SerialNumber;
}

void KeystoreChainItems::setSerialNumber(int32_t value)
{
    m_SerialNumber = value;
    m_SerialNumberIsSet = true;
}

bool KeystoreChainItems::serialNumberIsSet() const
{
    return m_SerialNumberIsSet;
}

void KeystoreChainItems::unsetSerialNumber()
{
    m_SerialNumberIsSet = false;
}
}
}
}
}


