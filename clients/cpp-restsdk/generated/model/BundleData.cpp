/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BundleData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BundleData::BundleData()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Fragment = false;
    m_FragmentIsSet = false;
    m_StateRaw = 0;
    m_StateRawIsSet = false;
    m_State = utility::conversions::to_string_t("");
    m_StateIsSet = false;
    m_Version = utility::conversions::to_string_t("");
    m_VersionIsSet = false;
    m_SymbolicName = utility::conversions::to_string_t("");
    m_SymbolicNameIsSet = false;
    m_Category = utility::conversions::to_string_t("");
    m_CategoryIsSet = false;
    m_PropsIsSet = false;
}

BundleData::~BundleData()
{
}

void BundleData::validate()
{
    // TODO: implement validation
}

web::json::value BundleData::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_FragmentIsSet)
    {
        val[utility::conversions::to_string_t("fragment")] = ModelBase::toJson(m_Fragment);
    }
    if(m_StateRawIsSet)
    {
        val[utility::conversions::to_string_t("stateRaw")] = ModelBase::toJson(m_StateRaw);
    }
    if(m_StateIsSet)
    {
        val[utility::conversions::to_string_t("state")] = ModelBase::toJson(m_State);
    }
    if(m_VersionIsSet)
    {
        val[utility::conversions::to_string_t("version")] = ModelBase::toJson(m_Version);
    }
    if(m_SymbolicNameIsSet)
    {
        val[utility::conversions::to_string_t("symbolicName")] = ModelBase::toJson(m_SymbolicName);
    }
    if(m_CategoryIsSet)
    {
        val[utility::conversions::to_string_t("category")] = ModelBase::toJson(m_Category);
    }
    if(m_PropsIsSet)
    {
        val[utility::conversions::to_string_t("props")] = ModelBase::toJson(m_Props);
    }

    return val;
}

bool BundleData::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fragment")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fragment"));
        if(!fieldValue.is_null())
        {
            bool refVal_fragment;
            ok &= ModelBase::fromJson(fieldValue, refVal_fragment);
            setFragment(refVal_fragment);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("stateRaw")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("stateRaw"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_stateRaw;
            ok &= ModelBase::fromJson(fieldValue, refVal_stateRaw);
            setStateRaw(refVal_stateRaw);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("state")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("state"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_state;
            ok &= ModelBase::fromJson(fieldValue, refVal_state);
            setState(refVal_state);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("version")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("version"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_version;
            ok &= ModelBase::fromJson(fieldValue, refVal_version);
            setVersion(refVal_version);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("symbolicName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("symbolicName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_symbolicName;
            ok &= ModelBase::fromJson(fieldValue, refVal_symbolicName);
            setSymbolicName(refVal_symbolicName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("category")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("category"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_category;
            ok &= ModelBase::fromJson(fieldValue, refVal_category);
            setCategory(refVal_category);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("props")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("props"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BundleDataProp>> refVal_props;
            ok &= ModelBase::fromJson(fieldValue, refVal_props);
            setProps(refVal_props);
        }
    }
    return ok;
}

void BundleData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_FragmentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fragment"), m_Fragment));
    }
    if(m_StateRawIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stateRaw"), m_StateRaw));
    }
    if(m_StateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("state"), m_State));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("version"), m_Version));
    }
    if(m_SymbolicNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("symbolicName"), m_SymbolicName));
    }
    if(m_CategoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("category"), m_Category));
    }
    if(m_PropsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("props"), m_Props));
    }
}

bool BundleData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fragment")))
    {
        bool refVal_fragment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fragment")), refVal_fragment );
        setFragment(refVal_fragment);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("stateRaw")))
    {
        int32_t refVal_stateRaw;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("stateRaw")), refVal_stateRaw );
        setStateRaw(refVal_stateRaw);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("state")))
    {
        utility::string_t refVal_state;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("state")), refVal_state );
        setState(refVal_state);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("version")))
    {
        utility::string_t refVal_version;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("version")), refVal_version );
        setVersion(refVal_version);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("symbolicName")))
    {
        utility::string_t refVal_symbolicName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("symbolicName")), refVal_symbolicName );
        setSymbolicName(refVal_symbolicName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("category")))
    {
        utility::string_t refVal_category;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("category")), refVal_category );
        setCategory(refVal_category);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("props")))
    {
        std::vector<std::shared_ptr<BundleDataProp>> refVal_props;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("props")), refVal_props );
        setProps(refVal_props);
    }
    return ok;
}

int32_t BundleData::getId() const
{
    return m_Id;
}

void BundleData::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BundleData::idIsSet() const
{
    return m_IdIsSet;
}

void BundleData::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t BundleData::getName() const
{
    return m_Name;
}

void BundleData::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BundleData::nameIsSet() const
{
    return m_NameIsSet;
}

void BundleData::unsetName()
{
    m_NameIsSet = false;
}
bool BundleData::isFragment() const
{
    return m_Fragment;
}

void BundleData::setFragment(bool value)
{
    m_Fragment = value;
    m_FragmentIsSet = true;
}

bool BundleData::fragmentIsSet() const
{
    return m_FragmentIsSet;
}

void BundleData::unsetFragment()
{
    m_FragmentIsSet = false;
}
int32_t BundleData::getStateRaw() const
{
    return m_StateRaw;
}

void BundleData::setStateRaw(int32_t value)
{
    m_StateRaw = value;
    m_StateRawIsSet = true;
}

bool BundleData::stateRawIsSet() const
{
    return m_StateRawIsSet;
}

void BundleData::unsetStateRaw()
{
    m_StateRawIsSet = false;
}
utility::string_t BundleData::getState() const
{
    return m_State;
}

void BundleData::setState(const utility::string_t& value)
{
    m_State = value;
    m_StateIsSet = true;
}

bool BundleData::stateIsSet() const
{
    return m_StateIsSet;
}

void BundleData::unsetState()
{
    m_StateIsSet = false;
}
utility::string_t BundleData::getVersion() const
{
    return m_Version;
}

void BundleData::setVersion(const utility::string_t& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool BundleData::versionIsSet() const
{
    return m_VersionIsSet;
}

void BundleData::unsetVersion()
{
    m_VersionIsSet = false;
}
utility::string_t BundleData::getSymbolicName() const
{
    return m_SymbolicName;
}

void BundleData::setSymbolicName(const utility::string_t& value)
{
    m_SymbolicName = value;
    m_SymbolicNameIsSet = true;
}

bool BundleData::symbolicNameIsSet() const
{
    return m_SymbolicNameIsSet;
}

void BundleData::unsetSymbolicName()
{
    m_SymbolicNameIsSet = false;
}
utility::string_t BundleData::getCategory() const
{
    return m_Category;
}

void BundleData::setCategory(const utility::string_t& value)
{
    m_Category = value;
    m_CategoryIsSet = true;
}

bool BundleData::categoryIsSet() const
{
    return m_CategoryIsSet;
}

void BundleData::unsetCategory()
{
    m_CategoryIsSet = false;
}
std::vector<std::shared_ptr<BundleDataProp>>& BundleData::getProps()
{
    return m_Props;
}

void BundleData::setProps(const std::vector<std::shared_ptr<BundleDataProp>>& value)
{
    m_Props = value;
    m_PropsIsSet = true;
}

bool BundleData::propsIsSet() const
{
    return m_PropsIsSet;
}

void BundleData::unsetProps()
{
    m_PropsIsSet = false;
}
}
}
}
}


