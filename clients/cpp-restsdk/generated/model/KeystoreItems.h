/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * KeystoreItems.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_KeystoreItems_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_KeystoreItems_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "KeystoreChainItems.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  KeystoreItems
    : public ModelBase
{
public:
    KeystoreItems();
    virtual ~KeystoreItems();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// KeystoreItems members

    /// <summary>
    /// Keystore alias name
    /// </summary>
    utility::string_t getAlias() const;
    bool aliasIsSet() const;
    void unsetAlias();

    void setAlias(const utility::string_t& value);

    /// <summary>
    /// e.g. \&quot;privateKey\&quot;
    /// </summary>
    utility::string_t getEntryType() const;
    bool entryTypeIsSet() const;
    void unsetEntryType();

    void setEntryType(const utility::string_t& value);

    /// <summary>
    /// e.g. \&quot;RSA\&quot;
    /// </summary>
    utility::string_t getAlgorithm() const;
    bool algorithmIsSet() const;
    void unsetAlgorithm();

    void setAlgorithm(const utility::string_t& value);

    /// <summary>
    /// e.g. \&quot;PKCS#8\&quot;
    /// </summary>
    utility::string_t getFormat() const;
    bool formatIsSet() const;
    void unsetFormat();

    void setFormat(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<KeystoreChainItems>>& getChain();
    bool chainIsSet() const;
    void unsetChain();

    void setChain(const std::vector<std::shared_ptr<KeystoreChainItems>>& value);


protected:
    utility::string_t m_Alias;
    bool m_AliasIsSet;
    utility::string_t m_EntryType;
    bool m_EntryTypeIsSet;
    utility::string_t m_Algorithm;
    bool m_AlgorithmIsSet;
    utility::string_t m_Format;
    bool m_FormatIsSet;
    std::vector<std::shared_ptr<KeystoreChainItems>> m_Chain;
    bool m_ChainIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_KeystoreItems_H_ */
