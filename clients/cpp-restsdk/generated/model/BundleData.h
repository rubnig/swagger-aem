/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BundleData.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BundleData_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BundleData_H_


#include "../ModelBase.h"

#include "BundleDataProp.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BundleData
    : public ModelBase
{
public:
    BundleData();
    virtual ~BundleData();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BundleData members

    /// <summary>
    /// Bundle ID
    /// </summary>
    int32_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int32_t value);

    /// <summary>
    /// Bundle name
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Is bundle a fragment
    /// </summary>
    bool isFragment() const;
    bool fragmentIsSet() const;
    void unsetFragment();

    void setFragment(bool value);

    /// <summary>
    /// Numeric raw bundle state value
    /// </summary>
    int32_t getStateRaw() const;
    bool stateRawIsSet() const;
    void unsetStateRaw();

    void setStateRaw(int32_t value);

    /// <summary>
    /// Bundle state value
    /// </summary>
    utility::string_t getState() const;
    bool stateIsSet() const;
    void unsetState();

    void setState(const utility::string_t& value);

    /// <summary>
    /// Bundle version
    /// </summary>
    utility::string_t getVersion() const;
    bool versionIsSet() const;
    void unsetVersion();

    void setVersion(const utility::string_t& value);

    /// <summary>
    /// Bundle symbolic name
    /// </summary>
    utility::string_t getSymbolicName() const;
    bool symbolicNameIsSet() const;
    void unsetSymbolicName();

    void setSymbolicName(const utility::string_t& value);

    /// <summary>
    /// Bundle category
    /// </summary>
    utility::string_t getCategory() const;
    bool categoryIsSet() const;
    void unsetCategory();

    void setCategory(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BundleDataProp>>& getProps();
    bool propsIsSet() const;
    void unsetProps();

    void setProps(const std::vector<std::shared_ptr<BundleDataProp>>& value);


protected:
    int32_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    bool m_Fragment;
    bool m_FragmentIsSet;
    int32_t m_StateRaw;
    bool m_StateRawIsSet;
    utility::string_t m_State;
    bool m_StateIsSet;
    utility::string_t m_Version;
    bool m_VersionIsSet;
    utility::string_t m_SymbolicName;
    bool m_SymbolicNameIsSet;
    utility::string_t m_Category;
    bool m_CategoryIsSet;
    std::vector<std::shared_ptr<BundleDataProp>> m_Props;
    bool m_PropsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BundleData_H_ */
