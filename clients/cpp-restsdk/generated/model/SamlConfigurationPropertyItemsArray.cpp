/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SamlConfigurationPropertyItemsArray.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




SamlConfigurationPropertyItemsArray::SamlConfigurationPropertyItemsArray()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Optional = false;
    m_OptionalIsSet = false;
    m_Is_set = false;
    m_Is_setIsSet = false;
    m_Type = 0;
    m_TypeIsSet = false;
    m_ValuesIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
}

SamlConfigurationPropertyItemsArray::~SamlConfigurationPropertyItemsArray()
{
}

void SamlConfigurationPropertyItemsArray::validate()
{
    // TODO: implement validation
}

web::json::value SamlConfigurationPropertyItemsArray::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_OptionalIsSet)
    {
        val[utility::conversions::to_string_t("optional")] = ModelBase::toJson(m_Optional);
    }
    if(m_Is_setIsSet)
    {
        val[utility::conversions::to_string_t("is_set")] = ModelBase::toJson(m_Is_set);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_ValuesIsSet)
    {
        val[utility::conversions::to_string_t("values")] = ModelBase::toJson(m_Values);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }

    return val;
}

bool SamlConfigurationPropertyItemsArray::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("optional")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("optional"));
        if(!fieldValue.is_null())
        {
            bool refVal_optional;
            ok &= ModelBase::fromJson(fieldValue, refVal_optional);
            setOptional(refVal_optional);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("is_set")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("is_set"));
        if(!fieldValue.is_null())
        {
            bool refVal_is_set;
            ok &= ModelBase::fromJson(fieldValue, refVal_is_set);
            setIsSet(refVal_is_set);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("values")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("values"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_values;
            ok &= ModelBase::fromJson(fieldValue, refVal_values);
            setValues(refVal_values);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    return ok;
}

void SamlConfigurationPropertyItemsArray::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_OptionalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("optional"), m_Optional));
    }
    if(m_Is_setIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("is_set"), m_Is_set));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    if(m_ValuesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("values"), m_Values));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
}

bool SamlConfigurationPropertyItemsArray::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("optional")))
    {
        bool refVal_optional;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("optional")), refVal_optional );
        setOptional(refVal_optional);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("is_set")))
    {
        bool refVal_is_set;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("is_set")), refVal_is_set );
        setIsSet(refVal_is_set);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        int32_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("values")))
    {
        std::vector<utility::string_t> refVal_values;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("values")), refVal_values );
        setValues(refVal_values);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    return ok;
}

utility::string_t SamlConfigurationPropertyItemsArray::getName() const
{
    return m_Name;
}

void SamlConfigurationPropertyItemsArray::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool SamlConfigurationPropertyItemsArray::nameIsSet() const
{
    return m_NameIsSet;
}

void SamlConfigurationPropertyItemsArray::unsetName()
{
    m_NameIsSet = false;
}
bool SamlConfigurationPropertyItemsArray::isOptional() const
{
    return m_Optional;
}

void SamlConfigurationPropertyItemsArray::setOptional(bool value)
{
    m_Optional = value;
    m_OptionalIsSet = true;
}

bool SamlConfigurationPropertyItemsArray::optionalIsSet() const
{
    return m_OptionalIsSet;
}

void SamlConfigurationPropertyItemsArray::unsetOptional()
{
    m_OptionalIsSet = false;
}
bool SamlConfigurationPropertyItemsArray::isIsSet() const
{
    return m_Is_set;
}

void SamlConfigurationPropertyItemsArray::setIsSet(bool value)
{
    m_Is_set = value;
    m_Is_setIsSet = true;
}

bool SamlConfigurationPropertyItemsArray::isSetIsSet() const
{
    return m_Is_setIsSet;
}

void SamlConfigurationPropertyItemsArray::unsetIs_set()
{
    m_Is_setIsSet = false;
}
int32_t SamlConfigurationPropertyItemsArray::getType() const
{
    return m_Type;
}

void SamlConfigurationPropertyItemsArray::setType(int32_t value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool SamlConfigurationPropertyItemsArray::typeIsSet() const
{
    return m_TypeIsSet;
}

void SamlConfigurationPropertyItemsArray::unsetType()
{
    m_TypeIsSet = false;
}
std::vector<utility::string_t>& SamlConfigurationPropertyItemsArray::getValues()
{
    return m_Values;
}

void SamlConfigurationPropertyItemsArray::setValues(const std::vector<utility::string_t>& value)
{
    m_Values = value;
    m_ValuesIsSet = true;
}

bool SamlConfigurationPropertyItemsArray::valuesIsSet() const
{
    return m_ValuesIsSet;
}

void SamlConfigurationPropertyItemsArray::unsetValues()
{
    m_ValuesIsSet = false;
}
utility::string_t SamlConfigurationPropertyItemsArray::getDescription() const
{
    return m_Description;
}

void SamlConfigurationPropertyItemsArray::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool SamlConfigurationPropertyItemsArray::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void SamlConfigurationPropertyItemsArray::unsetDescription()
{
    m_DescriptionIsSet = false;
}
}
}
}
}


