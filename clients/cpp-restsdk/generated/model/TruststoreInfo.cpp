/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TruststoreInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




TruststoreInfo::TruststoreInfo()
{
    m_AliasesIsSet = false;
    m_Exists = false;
    m_ExistsIsSet = false;
}

TruststoreInfo::~TruststoreInfo()
{
}

void TruststoreInfo::validate()
{
    // TODO: implement validation
}

web::json::value TruststoreInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AliasesIsSet)
    {
        val[utility::conversions::to_string_t("aliases")] = ModelBase::toJson(m_Aliases);
    }
    if(m_ExistsIsSet)
    {
        val[utility::conversions::to_string_t("exists")] = ModelBase::toJson(m_Exists);
    }

    return val;
}

bool TruststoreInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("aliases")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("aliases"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<TruststoreItems>> refVal_aliases;
            ok &= ModelBase::fromJson(fieldValue, refVal_aliases);
            setAliases(refVal_aliases);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exists")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("exists"));
        if(!fieldValue.is_null())
        {
            bool refVal_exists;
            ok &= ModelBase::fromJson(fieldValue, refVal_exists);
            setExists(refVal_exists);
        }
    }
    return ok;
}

void TruststoreInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AliasesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("aliases"), m_Aliases));
    }
    if(m_ExistsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exists"), m_Exists));
    }
}

bool TruststoreInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("aliases")))
    {
        std::vector<std::shared_ptr<TruststoreItems>> refVal_aliases;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("aliases")), refVal_aliases );
        setAliases(refVal_aliases);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exists")))
    {
        bool refVal_exists;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("exists")), refVal_exists );
        setExists(refVal_exists);
    }
    return ok;
}

std::vector<std::shared_ptr<TruststoreItems>>& TruststoreInfo::getAliases()
{
    return m_Aliases;
}

void TruststoreInfo::setAliases(const std::vector<std::shared_ptr<TruststoreItems>>& value)
{
    m_Aliases = value;
    m_AliasesIsSet = true;
}

bool TruststoreInfo::aliasesIsSet() const
{
    return m_AliasesIsSet;
}

void TruststoreInfo::unsetAliases()
{
    m_AliasesIsSet = false;
}
bool TruststoreInfo::isExists() const
{
    return m_Exists;
}

void TruststoreInfo::setExists(bool value)
{
    m_Exists = value;
    m_ExistsIsSet = true;
}

bool TruststoreInfo::existsIsSet() const
{
    return m_ExistsIsSet;
}

void TruststoreInfo::unsetExists()
{
    m_ExistsIsSet = false;
}
}
}
}
}


