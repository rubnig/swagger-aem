/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BundleInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BundleInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BundleInfo_H_


#include "../ModelBase.h"

#include "BundleData.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BundleInfo
    : public ModelBase
{
public:
    BundleInfo();
    virtual ~BundleInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BundleInfo members

    /// <summary>
    /// Status description of all bundles
    /// </summary>
    utility::string_t getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getS();
    bool SIsSet() const;
    void unsets();

    void setS(std::vector<int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BundleData>>& getData();
    bool dataIsSet() const;
    void unsetData();

    void setData(const std::vector<std::shared_ptr<BundleData>>& value);


protected:
    utility::string_t m_Status;
    bool m_StatusIsSet;
    std::vector<int32_t> m_s;
    bool m_sIsSet;
    std::vector<std::shared_ptr<BundleData>> m_Data;
    bool m_DataIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BundleInfo_H_ */
