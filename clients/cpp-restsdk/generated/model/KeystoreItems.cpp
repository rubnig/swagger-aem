/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "KeystoreItems.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




KeystoreItems::KeystoreItems()
{
    m_Alias = utility::conversions::to_string_t("");
    m_AliasIsSet = false;
    m_EntryType = utility::conversions::to_string_t("");
    m_EntryTypeIsSet = false;
    m_Algorithm = utility::conversions::to_string_t("");
    m_AlgorithmIsSet = false;
    m_Format = utility::conversions::to_string_t("");
    m_FormatIsSet = false;
    m_ChainIsSet = false;
}

KeystoreItems::~KeystoreItems()
{
}

void KeystoreItems::validate()
{
    // TODO: implement validation
}

web::json::value KeystoreItems::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AliasIsSet)
    {
        val[utility::conversions::to_string_t("alias")] = ModelBase::toJson(m_Alias);
    }
    if(m_EntryTypeIsSet)
    {
        val[utility::conversions::to_string_t("entryType")] = ModelBase::toJson(m_EntryType);
    }
    if(m_AlgorithmIsSet)
    {
        val[utility::conversions::to_string_t("algorithm")] = ModelBase::toJson(m_Algorithm);
    }
    if(m_FormatIsSet)
    {
        val[utility::conversions::to_string_t("format")] = ModelBase::toJson(m_Format);
    }
    if(m_ChainIsSet)
    {
        val[utility::conversions::to_string_t("chain")] = ModelBase::toJson(m_Chain);
    }

    return val;
}

bool KeystoreItems::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("alias")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("alias"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_alias;
            ok &= ModelBase::fromJson(fieldValue, refVal_alias);
            setAlias(refVal_alias);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("entryType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("entryType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_entryType;
            ok &= ModelBase::fromJson(fieldValue, refVal_entryType);
            setEntryType(refVal_entryType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("algorithm")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("algorithm"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_algorithm;
            ok &= ModelBase::fromJson(fieldValue, refVal_algorithm);
            setAlgorithm(refVal_algorithm);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("format")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("format"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_format;
            ok &= ModelBase::fromJson(fieldValue, refVal_format);
            setFormat(refVal_format);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("chain")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("chain"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<KeystoreChainItems>> refVal_chain;
            ok &= ModelBase::fromJson(fieldValue, refVal_chain);
            setChain(refVal_chain);
        }
    }
    return ok;
}

void KeystoreItems::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AliasIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("alias"), m_Alias));
    }
    if(m_EntryTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("entryType"), m_EntryType));
    }
    if(m_AlgorithmIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("algorithm"), m_Algorithm));
    }
    if(m_FormatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("format"), m_Format));
    }
    if(m_ChainIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("chain"), m_Chain));
    }
}

bool KeystoreItems::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("alias")))
    {
        utility::string_t refVal_alias;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("alias")), refVal_alias );
        setAlias(refVal_alias);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("entryType")))
    {
        utility::string_t refVal_entryType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("entryType")), refVal_entryType );
        setEntryType(refVal_entryType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("algorithm")))
    {
        utility::string_t refVal_algorithm;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("algorithm")), refVal_algorithm );
        setAlgorithm(refVal_algorithm);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("format")))
    {
        utility::string_t refVal_format;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("format")), refVal_format );
        setFormat(refVal_format);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("chain")))
    {
        std::vector<std::shared_ptr<KeystoreChainItems>> refVal_chain;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("chain")), refVal_chain );
        setChain(refVal_chain);
    }
    return ok;
}

utility::string_t KeystoreItems::getAlias() const
{
    return m_Alias;
}

void KeystoreItems::setAlias(const utility::string_t& value)
{
    m_Alias = value;
    m_AliasIsSet = true;
}

bool KeystoreItems::aliasIsSet() const
{
    return m_AliasIsSet;
}

void KeystoreItems::unsetAlias()
{
    m_AliasIsSet = false;
}
utility::string_t KeystoreItems::getEntryType() const
{
    return m_EntryType;
}

void KeystoreItems::setEntryType(const utility::string_t& value)
{
    m_EntryType = value;
    m_EntryTypeIsSet = true;
}

bool KeystoreItems::entryTypeIsSet() const
{
    return m_EntryTypeIsSet;
}

void KeystoreItems::unsetEntryType()
{
    m_EntryTypeIsSet = false;
}
utility::string_t KeystoreItems::getAlgorithm() const
{
    return m_Algorithm;
}

void KeystoreItems::setAlgorithm(const utility::string_t& value)
{
    m_Algorithm = value;
    m_AlgorithmIsSet = true;
}

bool KeystoreItems::algorithmIsSet() const
{
    return m_AlgorithmIsSet;
}

void KeystoreItems::unsetAlgorithm()
{
    m_AlgorithmIsSet = false;
}
utility::string_t KeystoreItems::getFormat() const
{
    return m_Format;
}

void KeystoreItems::setFormat(const utility::string_t& value)
{
    m_Format = value;
    m_FormatIsSet = true;
}

bool KeystoreItems::formatIsSet() const
{
    return m_FormatIsSet;
}

void KeystoreItems::unsetFormat()
{
    m_FormatIsSet = false;
}
std::vector<std::shared_ptr<KeystoreChainItems>>& KeystoreItems::getChain()
{
    return m_Chain;
}

void KeystoreItems::setChain(const std::vector<std::shared_ptr<KeystoreChainItems>>& value)
{
    m_Chain = value;
    m_ChainIsSet = true;
}

bool KeystoreItems::chainIsSet() const
{
    return m_ChainIsSet;
}

void KeystoreItems::unsetChain()
{
    m_ChainIsSet = false;
}
}
}
}
}


