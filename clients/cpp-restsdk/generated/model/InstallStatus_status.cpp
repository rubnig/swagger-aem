/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "InstallStatus_status.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




InstallStatus_status::InstallStatus_status()
{
    m_Finished = false;
    m_FinishedIsSet = false;
    m_ItemCount = 0;
    m_ItemCountIsSet = false;
}

InstallStatus_status::~InstallStatus_status()
{
}

void InstallStatus_status::validate()
{
    // TODO: implement validation
}

web::json::value InstallStatus_status::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FinishedIsSet)
    {
        val[utility::conversions::to_string_t("finished")] = ModelBase::toJson(m_Finished);
    }
    if(m_ItemCountIsSet)
    {
        val[utility::conversions::to_string_t("itemCount")] = ModelBase::toJson(m_ItemCount);
    }

    return val;
}

bool InstallStatus_status::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("finished")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("finished"));
        if(!fieldValue.is_null())
        {
            bool refVal_finished;
            ok &= ModelBase::fromJson(fieldValue, refVal_finished);
            setFinished(refVal_finished);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("itemCount")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("itemCount"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_itemCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_itemCount);
            setItemCount(refVal_itemCount);
        }
    }
    return ok;
}

void InstallStatus_status::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_FinishedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("finished"), m_Finished));
    }
    if(m_ItemCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("itemCount"), m_ItemCount));
    }
}

bool InstallStatus_status::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("finished")))
    {
        bool refVal_finished;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("finished")), refVal_finished );
        setFinished(refVal_finished);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("itemCount")))
    {
        int32_t refVal_itemCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("itemCount")), refVal_itemCount );
        setItemCount(refVal_itemCount);
    }
    return ok;
}

bool InstallStatus_status::isFinished() const
{
    return m_Finished;
}

void InstallStatus_status::setFinished(bool value)
{
    m_Finished = value;
    m_FinishedIsSet = true;
}

bool InstallStatus_status::finishedIsSet() const
{
    return m_FinishedIsSet;
}

void InstallStatus_status::unsetFinished()
{
    m_FinishedIsSet = false;
}
int32_t InstallStatus_status::getItemCount() const
{
    return m_ItemCount;
}

void InstallStatus_status::setItemCount(int32_t value)
{
    m_ItemCount = value;
    m_ItemCountIsSet = true;
}

bool InstallStatus_status::itemCountIsSet() const
{
    return m_ItemCountIsSet;
}

void InstallStatus_status::unsetItemCount()
{
    m_ItemCountIsSet = false;
}
}
}
}
}


