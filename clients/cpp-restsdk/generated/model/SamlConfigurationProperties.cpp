/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SamlConfigurationProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




SamlConfigurationProperties::SamlConfigurationProperties()
{
    m_PathIsSet = false;
    m_Service_rankingIsSet = false;
    m_IdpUrlIsSet = false;
    m_IdpCertAliasIsSet = false;
    m_IdpHttpRedirectIsSet = false;
    m_ServiceProviderEntityIdIsSet = false;
    m_AssertionConsumerServiceURLIsSet = false;
    m_SpPrivateKeyAliasIsSet = false;
    m_KeyStorePasswordIsSet = false;
    m_DefaultRedirectUrlIsSet = false;
    m_UserIDAttributeIsSet = false;
    m_UseEncryptionIsSet = false;
    m_CreateUserIsSet = false;
    m_AddGroupMembershipsIsSet = false;
    m_GroupMembershipAttributeIsSet = false;
    m_DefaultGroupsIsSet = false;
    m_NameIdFormatIsSet = false;
    m_SynchronizeAttributesIsSet = false;
    m_HandleLogoutIsSet = false;
    m_LogoutUrlIsSet = false;
    m_ClockToleranceIsSet = false;
    m_DigestMethodIsSet = false;
    m_SignatureMethodIsSet = false;
    m_UserIntermediatePathIsSet = false;
}

SamlConfigurationProperties::~SamlConfigurationProperties()
{
}

void SamlConfigurationProperties::validate()
{
    // TODO: implement validation
}

web::json::value SamlConfigurationProperties::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PathIsSet)
    {
        val[utility::conversions::to_string_t("path")] = ModelBase::toJson(m_Path);
    }
    if(m_Service_rankingIsSet)
    {
        val[utility::conversions::to_string_t("service.ranking")] = ModelBase::toJson(m_Service_ranking);
    }
    if(m_IdpUrlIsSet)
    {
        val[utility::conversions::to_string_t("idpUrl")] = ModelBase::toJson(m_IdpUrl);
    }
    if(m_IdpCertAliasIsSet)
    {
        val[utility::conversions::to_string_t("idpCertAlias")] = ModelBase::toJson(m_IdpCertAlias);
    }
    if(m_IdpHttpRedirectIsSet)
    {
        val[utility::conversions::to_string_t("idpHttpRedirect")] = ModelBase::toJson(m_IdpHttpRedirect);
    }
    if(m_ServiceProviderEntityIdIsSet)
    {
        val[utility::conversions::to_string_t("serviceProviderEntityId")] = ModelBase::toJson(m_ServiceProviderEntityId);
    }
    if(m_AssertionConsumerServiceURLIsSet)
    {
        val[utility::conversions::to_string_t("assertionConsumerServiceURL")] = ModelBase::toJson(m_AssertionConsumerServiceURL);
    }
    if(m_SpPrivateKeyAliasIsSet)
    {
        val[utility::conversions::to_string_t("spPrivateKeyAlias")] = ModelBase::toJson(m_SpPrivateKeyAlias);
    }
    if(m_KeyStorePasswordIsSet)
    {
        val[utility::conversions::to_string_t("keyStorePassword")] = ModelBase::toJson(m_KeyStorePassword);
    }
    if(m_DefaultRedirectUrlIsSet)
    {
        val[utility::conversions::to_string_t("defaultRedirectUrl")] = ModelBase::toJson(m_DefaultRedirectUrl);
    }
    if(m_UserIDAttributeIsSet)
    {
        val[utility::conversions::to_string_t("userIDAttribute")] = ModelBase::toJson(m_UserIDAttribute);
    }
    if(m_UseEncryptionIsSet)
    {
        val[utility::conversions::to_string_t("useEncryption")] = ModelBase::toJson(m_UseEncryption);
    }
    if(m_CreateUserIsSet)
    {
        val[utility::conversions::to_string_t("createUser")] = ModelBase::toJson(m_CreateUser);
    }
    if(m_AddGroupMembershipsIsSet)
    {
        val[utility::conversions::to_string_t("addGroupMemberships")] = ModelBase::toJson(m_AddGroupMemberships);
    }
    if(m_GroupMembershipAttributeIsSet)
    {
        val[utility::conversions::to_string_t("groupMembershipAttribute")] = ModelBase::toJson(m_GroupMembershipAttribute);
    }
    if(m_DefaultGroupsIsSet)
    {
        val[utility::conversions::to_string_t("defaultGroups")] = ModelBase::toJson(m_DefaultGroups);
    }
    if(m_NameIdFormatIsSet)
    {
        val[utility::conversions::to_string_t("nameIdFormat")] = ModelBase::toJson(m_NameIdFormat);
    }
    if(m_SynchronizeAttributesIsSet)
    {
        val[utility::conversions::to_string_t("synchronizeAttributes")] = ModelBase::toJson(m_SynchronizeAttributes);
    }
    if(m_HandleLogoutIsSet)
    {
        val[utility::conversions::to_string_t("handleLogout")] = ModelBase::toJson(m_HandleLogout);
    }
    if(m_LogoutUrlIsSet)
    {
        val[utility::conversions::to_string_t("logoutUrl")] = ModelBase::toJson(m_LogoutUrl);
    }
    if(m_ClockToleranceIsSet)
    {
        val[utility::conversions::to_string_t("clockTolerance")] = ModelBase::toJson(m_ClockTolerance);
    }
    if(m_DigestMethodIsSet)
    {
        val[utility::conversions::to_string_t("digestMethod")] = ModelBase::toJson(m_DigestMethod);
    }
    if(m_SignatureMethodIsSet)
    {
        val[utility::conversions::to_string_t("signatureMethod")] = ModelBase::toJson(m_SignatureMethod);
    }
    if(m_UserIntermediatePathIsSet)
    {
        val[utility::conversions::to_string_t("userIntermediatePath")] = ModelBase::toJson(m_UserIntermediatePath);
    }

    return val;
}

bool SamlConfigurationProperties::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("path")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("path"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsArray> refVal_path;
            ok &= ModelBase::fromJson(fieldValue, refVal_path);
            setPath(refVal_path);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("service.ranking")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("service.ranking"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsLong> refVal_service.ranking;
            ok &= ModelBase::fromJson(fieldValue, refVal_service.ranking);
            setServiceRanking(refVal_service.ranking);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("idpUrl")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("idpUrl"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> refVal_idpUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_idpUrl);
            setIdpUrl(refVal_idpUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("idpCertAlias")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("idpCertAlias"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> refVal_idpCertAlias;
            ok &= ModelBase::fromJson(fieldValue, refVal_idpCertAlias);
            setIdpCertAlias(refVal_idpCertAlias);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("idpHttpRedirect")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("idpHttpRedirect"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsBoolean> refVal_idpHttpRedirect;
            ok &= ModelBase::fromJson(fieldValue, refVal_idpHttpRedirect);
            setIdpHttpRedirect(refVal_idpHttpRedirect);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("serviceProviderEntityId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("serviceProviderEntityId"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> refVal_serviceProviderEntityId;
            ok &= ModelBase::fromJson(fieldValue, refVal_serviceProviderEntityId);
            setServiceProviderEntityId(refVal_serviceProviderEntityId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("assertionConsumerServiceURL")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("assertionConsumerServiceURL"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> refVal_assertionConsumerServiceURL;
            ok &= ModelBase::fromJson(fieldValue, refVal_assertionConsumerServiceURL);
            setAssertionConsumerServiceURL(refVal_assertionConsumerServiceURL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spPrivateKeyAlias")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spPrivateKeyAlias"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> refVal_spPrivateKeyAlias;
            ok &= ModelBase::fromJson(fieldValue, refVal_spPrivateKeyAlias);
            setSpPrivateKeyAlias(refVal_spPrivateKeyAlias);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("keyStorePassword")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("keyStorePassword"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> refVal_keyStorePassword;
            ok &= ModelBase::fromJson(fieldValue, refVal_keyStorePassword);
            setKeyStorePassword(refVal_keyStorePassword);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("defaultRedirectUrl")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("defaultRedirectUrl"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> refVal_defaultRedirectUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_defaultRedirectUrl);
            setDefaultRedirectUrl(refVal_defaultRedirectUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userIDAttribute")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("userIDAttribute"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> refVal_userIDAttribute;
            ok &= ModelBase::fromJson(fieldValue, refVal_userIDAttribute);
            setUserIDAttribute(refVal_userIDAttribute);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("useEncryption")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("useEncryption"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsBoolean> refVal_useEncryption;
            ok &= ModelBase::fromJson(fieldValue, refVal_useEncryption);
            setUseEncryption(refVal_useEncryption);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createUser")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createUser"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsBoolean> refVal_createUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_createUser);
            setCreateUser(refVal_createUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("addGroupMemberships")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("addGroupMemberships"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsBoolean> refVal_addGroupMemberships;
            ok &= ModelBase::fromJson(fieldValue, refVal_addGroupMemberships);
            setAddGroupMemberships(refVal_addGroupMemberships);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("groupMembershipAttribute")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("groupMembershipAttribute"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> refVal_groupMembershipAttribute;
            ok &= ModelBase::fromJson(fieldValue, refVal_groupMembershipAttribute);
            setGroupMembershipAttribute(refVal_groupMembershipAttribute);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("defaultGroups")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("defaultGroups"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsArray> refVal_defaultGroups;
            ok &= ModelBase::fromJson(fieldValue, refVal_defaultGroups);
            setDefaultGroups(refVal_defaultGroups);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nameIdFormat")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nameIdFormat"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> refVal_nameIdFormat;
            ok &= ModelBase::fromJson(fieldValue, refVal_nameIdFormat);
            setNameIdFormat(refVal_nameIdFormat);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("synchronizeAttributes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("synchronizeAttributes"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsArray> refVal_synchronizeAttributes;
            ok &= ModelBase::fromJson(fieldValue, refVal_synchronizeAttributes);
            setSynchronizeAttributes(refVal_synchronizeAttributes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("handleLogout")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("handleLogout"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsBoolean> refVal_handleLogout;
            ok &= ModelBase::fromJson(fieldValue, refVal_handleLogout);
            setHandleLogout(refVal_handleLogout);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("logoutUrl")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("logoutUrl"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> refVal_logoutUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_logoutUrl);
            setLogoutUrl(refVal_logoutUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("clockTolerance")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("clockTolerance"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsLong> refVal_clockTolerance;
            ok &= ModelBase::fromJson(fieldValue, refVal_clockTolerance);
            setClockTolerance(refVal_clockTolerance);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("digestMethod")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("digestMethod"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> refVal_digestMethod;
            ok &= ModelBase::fromJson(fieldValue, refVal_digestMethod);
            setDigestMethod(refVal_digestMethod);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("signatureMethod")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("signatureMethod"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> refVal_signatureMethod;
            ok &= ModelBase::fromJson(fieldValue, refVal_signatureMethod);
            setSignatureMethod(refVal_signatureMethod);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userIntermediatePath")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("userIntermediatePath"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> refVal_userIntermediatePath;
            ok &= ModelBase::fromJson(fieldValue, refVal_userIntermediatePath);
            setUserIntermediatePath(refVal_userIntermediatePath);
        }
    }
    return ok;
}

void SamlConfigurationProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_PathIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("path"), m_Path));
    }
    if(m_Service_rankingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("service.ranking"), m_Service_ranking));
    }
    if(m_IdpUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("idpUrl"), m_IdpUrl));
    }
    if(m_IdpCertAliasIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("idpCertAlias"), m_IdpCertAlias));
    }
    if(m_IdpHttpRedirectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("idpHttpRedirect"), m_IdpHttpRedirect));
    }
    if(m_ServiceProviderEntityIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("serviceProviderEntityId"), m_ServiceProviderEntityId));
    }
    if(m_AssertionConsumerServiceURLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("assertionConsumerServiceURL"), m_AssertionConsumerServiceURL));
    }
    if(m_SpPrivateKeyAliasIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spPrivateKeyAlias"), m_SpPrivateKeyAlias));
    }
    if(m_KeyStorePasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("keyStorePassword"), m_KeyStorePassword));
    }
    if(m_DefaultRedirectUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("defaultRedirectUrl"), m_DefaultRedirectUrl));
    }
    if(m_UserIDAttributeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userIDAttribute"), m_UserIDAttribute));
    }
    if(m_UseEncryptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("useEncryption"), m_UseEncryption));
    }
    if(m_CreateUserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createUser"), m_CreateUser));
    }
    if(m_AddGroupMembershipsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("addGroupMemberships"), m_AddGroupMemberships));
    }
    if(m_GroupMembershipAttributeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("groupMembershipAttribute"), m_GroupMembershipAttribute));
    }
    if(m_DefaultGroupsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("defaultGroups"), m_DefaultGroups));
    }
    if(m_NameIdFormatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nameIdFormat"), m_NameIdFormat));
    }
    if(m_SynchronizeAttributesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("synchronizeAttributes"), m_SynchronizeAttributes));
    }
    if(m_HandleLogoutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("handleLogout"), m_HandleLogout));
    }
    if(m_LogoutUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("logoutUrl"), m_LogoutUrl));
    }
    if(m_ClockToleranceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("clockTolerance"), m_ClockTolerance));
    }
    if(m_DigestMethodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("digestMethod"), m_DigestMethod));
    }
    if(m_SignatureMethodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("signatureMethod"), m_SignatureMethod));
    }
    if(m_UserIntermediatePathIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userIntermediatePath"), m_UserIntermediatePath));
    }
}

bool SamlConfigurationProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("path")))
    {
        std::shared_ptr<SamlConfigurationPropertyItemsArray> refVal_path;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("path")), refVal_path );
        setPath(refVal_path);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("service.ranking")))
    {
        std::shared_ptr<SamlConfigurationPropertyItemsLong> refVal_service.ranking;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("service.ranking")), refVal_service.ranking );
        setServiceRanking(refVal_service.ranking);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("idpUrl")))
    {
        std::shared_ptr<SamlConfigurationPropertyItemsString> refVal_idpUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("idpUrl")), refVal_idpUrl );
        setIdpUrl(refVal_idpUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("idpCertAlias")))
    {
        std::shared_ptr<SamlConfigurationPropertyItemsString> refVal_idpCertAlias;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("idpCertAlias")), refVal_idpCertAlias );
        setIdpCertAlias(refVal_idpCertAlias);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("idpHttpRedirect")))
    {
        std::shared_ptr<SamlConfigurationPropertyItemsBoolean> refVal_idpHttpRedirect;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("idpHttpRedirect")), refVal_idpHttpRedirect );
        setIdpHttpRedirect(refVal_idpHttpRedirect);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("serviceProviderEntityId")))
    {
        std::shared_ptr<SamlConfigurationPropertyItemsString> refVal_serviceProviderEntityId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("serviceProviderEntityId")), refVal_serviceProviderEntityId );
        setServiceProviderEntityId(refVal_serviceProviderEntityId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("assertionConsumerServiceURL")))
    {
        std::shared_ptr<SamlConfigurationPropertyItemsString> refVal_assertionConsumerServiceURL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("assertionConsumerServiceURL")), refVal_assertionConsumerServiceURL );
        setAssertionConsumerServiceURL(refVal_assertionConsumerServiceURL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spPrivateKeyAlias")))
    {
        std::shared_ptr<SamlConfigurationPropertyItemsString> refVal_spPrivateKeyAlias;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spPrivateKeyAlias")), refVal_spPrivateKeyAlias );
        setSpPrivateKeyAlias(refVal_spPrivateKeyAlias);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("keyStorePassword")))
    {
        std::shared_ptr<SamlConfigurationPropertyItemsString> refVal_keyStorePassword;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("keyStorePassword")), refVal_keyStorePassword );
        setKeyStorePassword(refVal_keyStorePassword);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultRedirectUrl")))
    {
        std::shared_ptr<SamlConfigurationPropertyItemsString> refVal_defaultRedirectUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("defaultRedirectUrl")), refVal_defaultRedirectUrl );
        setDefaultRedirectUrl(refVal_defaultRedirectUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userIDAttribute")))
    {
        std::shared_ptr<SamlConfigurationPropertyItemsString> refVal_userIDAttribute;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("userIDAttribute")), refVal_userIDAttribute );
        setUserIDAttribute(refVal_userIDAttribute);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("useEncryption")))
    {
        std::shared_ptr<SamlConfigurationPropertyItemsBoolean> refVal_useEncryption;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("useEncryption")), refVal_useEncryption );
        setUseEncryption(refVal_useEncryption);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createUser")))
    {
        std::shared_ptr<SamlConfigurationPropertyItemsBoolean> refVal_createUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createUser")), refVal_createUser );
        setCreateUser(refVal_createUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("addGroupMemberships")))
    {
        std::shared_ptr<SamlConfigurationPropertyItemsBoolean> refVal_addGroupMemberships;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("addGroupMemberships")), refVal_addGroupMemberships );
        setAddGroupMemberships(refVal_addGroupMemberships);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("groupMembershipAttribute")))
    {
        std::shared_ptr<SamlConfigurationPropertyItemsString> refVal_groupMembershipAttribute;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("groupMembershipAttribute")), refVal_groupMembershipAttribute );
        setGroupMembershipAttribute(refVal_groupMembershipAttribute);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultGroups")))
    {
        std::shared_ptr<SamlConfigurationPropertyItemsArray> refVal_defaultGroups;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("defaultGroups")), refVal_defaultGroups );
        setDefaultGroups(refVal_defaultGroups);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nameIdFormat")))
    {
        std::shared_ptr<SamlConfigurationPropertyItemsString> refVal_nameIdFormat;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nameIdFormat")), refVal_nameIdFormat );
        setNameIdFormat(refVal_nameIdFormat);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("synchronizeAttributes")))
    {
        std::shared_ptr<SamlConfigurationPropertyItemsArray> refVal_synchronizeAttributes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("synchronizeAttributes")), refVal_synchronizeAttributes );
        setSynchronizeAttributes(refVal_synchronizeAttributes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("handleLogout")))
    {
        std::shared_ptr<SamlConfigurationPropertyItemsBoolean> refVal_handleLogout;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("handleLogout")), refVal_handleLogout );
        setHandleLogout(refVal_handleLogout);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("logoutUrl")))
    {
        std::shared_ptr<SamlConfigurationPropertyItemsString> refVal_logoutUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("logoutUrl")), refVal_logoutUrl );
        setLogoutUrl(refVal_logoutUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("clockTolerance")))
    {
        std::shared_ptr<SamlConfigurationPropertyItemsLong> refVal_clockTolerance;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("clockTolerance")), refVal_clockTolerance );
        setClockTolerance(refVal_clockTolerance);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("digestMethod")))
    {
        std::shared_ptr<SamlConfigurationPropertyItemsString> refVal_digestMethod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("digestMethod")), refVal_digestMethod );
        setDigestMethod(refVal_digestMethod);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("signatureMethod")))
    {
        std::shared_ptr<SamlConfigurationPropertyItemsString> refVal_signatureMethod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("signatureMethod")), refVal_signatureMethod );
        setSignatureMethod(refVal_signatureMethod);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userIntermediatePath")))
    {
        std::shared_ptr<SamlConfigurationPropertyItemsString> refVal_userIntermediatePath;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("userIntermediatePath")), refVal_userIntermediatePath );
        setUserIntermediatePath(refVal_userIntermediatePath);
    }
    return ok;
}

std::shared_ptr<SamlConfigurationPropertyItemsArray> SamlConfigurationProperties::getPath() const
{
    return m_Path;
}

void SamlConfigurationProperties::setPath(const std::shared_ptr<SamlConfigurationPropertyItemsArray>& value)
{
    m_Path = value;
    m_PathIsSet = true;
}

bool SamlConfigurationProperties::pathIsSet() const
{
    return m_PathIsSet;
}

void SamlConfigurationProperties::unsetPath()
{
    m_PathIsSet = false;
}
std::shared_ptr<SamlConfigurationPropertyItemsLong> SamlConfigurationProperties::getServiceRanking() const
{
    return m_Service_ranking;
}

void SamlConfigurationProperties::setServiceRanking(const std::shared_ptr<SamlConfigurationPropertyItemsLong>& value)
{
    m_Service_ranking = value;
    m_Service_rankingIsSet = true;
}

bool SamlConfigurationProperties::serviceRankingIsSet() const
{
    return m_Service_rankingIsSet;
}

void SamlConfigurationProperties::unsetService_ranking()
{
    m_Service_rankingIsSet = false;
}
std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getIdpUrl() const
{
    return m_IdpUrl;
}

void SamlConfigurationProperties::setIdpUrl(const std::shared_ptr<SamlConfigurationPropertyItemsString>& value)
{
    m_IdpUrl = value;
    m_IdpUrlIsSet = true;
}

bool SamlConfigurationProperties::idpUrlIsSet() const
{
    return m_IdpUrlIsSet;
}

void SamlConfigurationProperties::unsetIdpUrl()
{
    m_IdpUrlIsSet = false;
}
std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getIdpCertAlias() const
{
    return m_IdpCertAlias;
}

void SamlConfigurationProperties::setIdpCertAlias(const std::shared_ptr<SamlConfigurationPropertyItemsString>& value)
{
    m_IdpCertAlias = value;
    m_IdpCertAliasIsSet = true;
}

bool SamlConfigurationProperties::idpCertAliasIsSet() const
{
    return m_IdpCertAliasIsSet;
}

void SamlConfigurationProperties::unsetIdpCertAlias()
{
    m_IdpCertAliasIsSet = false;
}
std::shared_ptr<SamlConfigurationPropertyItemsBoolean> SamlConfigurationProperties::getIdpHttpRedirect() const
{
    return m_IdpHttpRedirect;
}

void SamlConfigurationProperties::setIdpHttpRedirect(const std::shared_ptr<SamlConfigurationPropertyItemsBoolean>& value)
{
    m_IdpHttpRedirect = value;
    m_IdpHttpRedirectIsSet = true;
}

bool SamlConfigurationProperties::idpHttpRedirectIsSet() const
{
    return m_IdpHttpRedirectIsSet;
}

void SamlConfigurationProperties::unsetIdpHttpRedirect()
{
    m_IdpHttpRedirectIsSet = false;
}
std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getServiceProviderEntityId() const
{
    return m_ServiceProviderEntityId;
}

void SamlConfigurationProperties::setServiceProviderEntityId(const std::shared_ptr<SamlConfigurationPropertyItemsString>& value)
{
    m_ServiceProviderEntityId = value;
    m_ServiceProviderEntityIdIsSet = true;
}

bool SamlConfigurationProperties::serviceProviderEntityIdIsSet() const
{
    return m_ServiceProviderEntityIdIsSet;
}

void SamlConfigurationProperties::unsetServiceProviderEntityId()
{
    m_ServiceProviderEntityIdIsSet = false;
}
std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getAssertionConsumerServiceURL() const
{
    return m_AssertionConsumerServiceURL;
}

void SamlConfigurationProperties::setAssertionConsumerServiceURL(const std::shared_ptr<SamlConfigurationPropertyItemsString>& value)
{
    m_AssertionConsumerServiceURL = value;
    m_AssertionConsumerServiceURLIsSet = true;
}

bool SamlConfigurationProperties::assertionConsumerServiceURLIsSet() const
{
    return m_AssertionConsumerServiceURLIsSet;
}

void SamlConfigurationProperties::unsetAssertionConsumerServiceURL()
{
    m_AssertionConsumerServiceURLIsSet = false;
}
std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getSpPrivateKeyAlias() const
{
    return m_SpPrivateKeyAlias;
}

void SamlConfigurationProperties::setSpPrivateKeyAlias(const std::shared_ptr<SamlConfigurationPropertyItemsString>& value)
{
    m_SpPrivateKeyAlias = value;
    m_SpPrivateKeyAliasIsSet = true;
}

bool SamlConfigurationProperties::spPrivateKeyAliasIsSet() const
{
    return m_SpPrivateKeyAliasIsSet;
}

void SamlConfigurationProperties::unsetSpPrivateKeyAlias()
{
    m_SpPrivateKeyAliasIsSet = false;
}
std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getKeyStorePassword() const
{
    return m_KeyStorePassword;
}

void SamlConfigurationProperties::setKeyStorePassword(const std::shared_ptr<SamlConfigurationPropertyItemsString>& value)
{
    m_KeyStorePassword = value;
    m_KeyStorePasswordIsSet = true;
}

bool SamlConfigurationProperties::keyStorePasswordIsSet() const
{
    return m_KeyStorePasswordIsSet;
}

void SamlConfigurationProperties::unsetKeyStorePassword()
{
    m_KeyStorePasswordIsSet = false;
}
std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getDefaultRedirectUrl() const
{
    return m_DefaultRedirectUrl;
}

void SamlConfigurationProperties::setDefaultRedirectUrl(const std::shared_ptr<SamlConfigurationPropertyItemsString>& value)
{
    m_DefaultRedirectUrl = value;
    m_DefaultRedirectUrlIsSet = true;
}

bool SamlConfigurationProperties::defaultRedirectUrlIsSet() const
{
    return m_DefaultRedirectUrlIsSet;
}

void SamlConfigurationProperties::unsetDefaultRedirectUrl()
{
    m_DefaultRedirectUrlIsSet = false;
}
std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getUserIDAttribute() const
{
    return m_UserIDAttribute;
}

void SamlConfigurationProperties::setUserIDAttribute(const std::shared_ptr<SamlConfigurationPropertyItemsString>& value)
{
    m_UserIDAttribute = value;
    m_UserIDAttributeIsSet = true;
}

bool SamlConfigurationProperties::userIDAttributeIsSet() const
{
    return m_UserIDAttributeIsSet;
}

void SamlConfigurationProperties::unsetUserIDAttribute()
{
    m_UserIDAttributeIsSet = false;
}
std::shared_ptr<SamlConfigurationPropertyItemsBoolean> SamlConfigurationProperties::getUseEncryption() const
{
    return m_UseEncryption;
}

void SamlConfigurationProperties::setUseEncryption(const std::shared_ptr<SamlConfigurationPropertyItemsBoolean>& value)
{
    m_UseEncryption = value;
    m_UseEncryptionIsSet = true;
}

bool SamlConfigurationProperties::useEncryptionIsSet() const
{
    return m_UseEncryptionIsSet;
}

void SamlConfigurationProperties::unsetUseEncryption()
{
    m_UseEncryptionIsSet = false;
}
std::shared_ptr<SamlConfigurationPropertyItemsBoolean> SamlConfigurationProperties::getCreateUser() const
{
    return m_CreateUser;
}

void SamlConfigurationProperties::setCreateUser(const std::shared_ptr<SamlConfigurationPropertyItemsBoolean>& value)
{
    m_CreateUser = value;
    m_CreateUserIsSet = true;
}

bool SamlConfigurationProperties::createUserIsSet() const
{
    return m_CreateUserIsSet;
}

void SamlConfigurationProperties::unsetCreateUser()
{
    m_CreateUserIsSet = false;
}
std::shared_ptr<SamlConfigurationPropertyItemsBoolean> SamlConfigurationProperties::getAddGroupMemberships() const
{
    return m_AddGroupMemberships;
}

void SamlConfigurationProperties::setAddGroupMemberships(const std::shared_ptr<SamlConfigurationPropertyItemsBoolean>& value)
{
    m_AddGroupMemberships = value;
    m_AddGroupMembershipsIsSet = true;
}

bool SamlConfigurationProperties::addGroupMembershipsIsSet() const
{
    return m_AddGroupMembershipsIsSet;
}

void SamlConfigurationProperties::unsetAddGroupMemberships()
{
    m_AddGroupMembershipsIsSet = false;
}
std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getGroupMembershipAttribute() const
{
    return m_GroupMembershipAttribute;
}

void SamlConfigurationProperties::setGroupMembershipAttribute(const std::shared_ptr<SamlConfigurationPropertyItemsString>& value)
{
    m_GroupMembershipAttribute = value;
    m_GroupMembershipAttributeIsSet = true;
}

bool SamlConfigurationProperties::groupMembershipAttributeIsSet() const
{
    return m_GroupMembershipAttributeIsSet;
}

void SamlConfigurationProperties::unsetGroupMembershipAttribute()
{
    m_GroupMembershipAttributeIsSet = false;
}
std::shared_ptr<SamlConfigurationPropertyItemsArray> SamlConfigurationProperties::getDefaultGroups() const
{
    return m_DefaultGroups;
}

void SamlConfigurationProperties::setDefaultGroups(const std::shared_ptr<SamlConfigurationPropertyItemsArray>& value)
{
    m_DefaultGroups = value;
    m_DefaultGroupsIsSet = true;
}

bool SamlConfigurationProperties::defaultGroupsIsSet() const
{
    return m_DefaultGroupsIsSet;
}

void SamlConfigurationProperties::unsetDefaultGroups()
{
    m_DefaultGroupsIsSet = false;
}
std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getNameIdFormat() const
{
    return m_NameIdFormat;
}

void SamlConfigurationProperties::setNameIdFormat(const std::shared_ptr<SamlConfigurationPropertyItemsString>& value)
{
    m_NameIdFormat = value;
    m_NameIdFormatIsSet = true;
}

bool SamlConfigurationProperties::nameIdFormatIsSet() const
{
    return m_NameIdFormatIsSet;
}

void SamlConfigurationProperties::unsetNameIdFormat()
{
    m_NameIdFormatIsSet = false;
}
std::shared_ptr<SamlConfigurationPropertyItemsArray> SamlConfigurationProperties::getSynchronizeAttributes() const
{
    return m_SynchronizeAttributes;
}

void SamlConfigurationProperties::setSynchronizeAttributes(const std::shared_ptr<SamlConfigurationPropertyItemsArray>& value)
{
    m_SynchronizeAttributes = value;
    m_SynchronizeAttributesIsSet = true;
}

bool SamlConfigurationProperties::synchronizeAttributesIsSet() const
{
    return m_SynchronizeAttributesIsSet;
}

void SamlConfigurationProperties::unsetSynchronizeAttributes()
{
    m_SynchronizeAttributesIsSet = false;
}
std::shared_ptr<SamlConfigurationPropertyItemsBoolean> SamlConfigurationProperties::getHandleLogout() const
{
    return m_HandleLogout;
}

void SamlConfigurationProperties::setHandleLogout(const std::shared_ptr<SamlConfigurationPropertyItemsBoolean>& value)
{
    m_HandleLogout = value;
    m_HandleLogoutIsSet = true;
}

bool SamlConfigurationProperties::handleLogoutIsSet() const
{
    return m_HandleLogoutIsSet;
}

void SamlConfigurationProperties::unsetHandleLogout()
{
    m_HandleLogoutIsSet = false;
}
std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getLogoutUrl() const
{
    return m_LogoutUrl;
}

void SamlConfigurationProperties::setLogoutUrl(const std::shared_ptr<SamlConfigurationPropertyItemsString>& value)
{
    m_LogoutUrl = value;
    m_LogoutUrlIsSet = true;
}

bool SamlConfigurationProperties::logoutUrlIsSet() const
{
    return m_LogoutUrlIsSet;
}

void SamlConfigurationProperties::unsetLogoutUrl()
{
    m_LogoutUrlIsSet = false;
}
std::shared_ptr<SamlConfigurationPropertyItemsLong> SamlConfigurationProperties::getClockTolerance() const
{
    return m_ClockTolerance;
}

void SamlConfigurationProperties::setClockTolerance(const std::shared_ptr<SamlConfigurationPropertyItemsLong>& value)
{
    m_ClockTolerance = value;
    m_ClockToleranceIsSet = true;
}

bool SamlConfigurationProperties::clockToleranceIsSet() const
{
    return m_ClockToleranceIsSet;
}

void SamlConfigurationProperties::unsetClockTolerance()
{
    m_ClockToleranceIsSet = false;
}
std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getDigestMethod() const
{
    return m_DigestMethod;
}

void SamlConfigurationProperties::setDigestMethod(const std::shared_ptr<SamlConfigurationPropertyItemsString>& value)
{
    m_DigestMethod = value;
    m_DigestMethodIsSet = true;
}

bool SamlConfigurationProperties::digestMethodIsSet() const
{
    return m_DigestMethodIsSet;
}

void SamlConfigurationProperties::unsetDigestMethod()
{
    m_DigestMethodIsSet = false;
}
std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getSignatureMethod() const
{
    return m_SignatureMethod;
}

void SamlConfigurationProperties::setSignatureMethod(const std::shared_ptr<SamlConfigurationPropertyItemsString>& value)
{
    m_SignatureMethod = value;
    m_SignatureMethodIsSet = true;
}

bool SamlConfigurationProperties::signatureMethodIsSet() const
{
    return m_SignatureMethodIsSet;
}

void SamlConfigurationProperties::unsetSignatureMethod()
{
    m_SignatureMethodIsSet = false;
}
std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getUserIntermediatePath() const
{
    return m_UserIntermediatePath;
}

void SamlConfigurationProperties::setUserIntermediatePath(const std::shared_ptr<SamlConfigurationPropertyItemsString>& value)
{
    m_UserIntermediatePath = value;
    m_UserIntermediatePathIsSet = true;
}

bool SamlConfigurationProperties::userIntermediatePathIsSet() const
{
    return m_UserIntermediatePathIsSet;
}

void SamlConfigurationProperties::unsetUserIntermediatePath()
{
    m_UserIntermediatePathIsSet = false;
}
}
}
}
}


