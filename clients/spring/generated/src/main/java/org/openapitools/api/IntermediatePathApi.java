/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.KeystoreInfo;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-09-03T15:28:35.636+10:00[Australia/Melbourne]")
@Validated
@Api(value = "{intermediatePath}", description = "the {intermediatePath} API")
public interface IntermediatePathApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /{intermediatePath}/{authorizableId}.ks.json
     *
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @return Retrieved Authorizable Keystore info (status code 200)
     *         or Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "getAuthorizableKeystore", notes = "", response = KeystoreInfo.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Retrieved Authorizable Keystore info", response = KeystoreInfo.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/{intermediatePath}/{authorizableId}.ks.json",
        produces = { "text/plain" }
    )
    default ResponseEntity<KeystoreInfo> getAuthorizableKeystore(@ApiParam(value = "",required=true) @PathVariable("intermediatePath") String intermediatePath,@ApiParam(value = "",required=true) @PathVariable("authorizableId") String authorizableId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /{intermediatePath}/{authorizableId}/keystore/store.p12
     *
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @return Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "getKeystore", notes = "", response = org.springframework.core.io.Resource.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response", response = org.springframework.core.io.Resource.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/{intermediatePath}/{authorizableId}/keystore/store.p12",
        produces = { "application/octet-stream" }
    )
    default ResponseEntity<org.springframework.core.io.Resource> getKeystore(@ApiParam(value = "",required=true) @PathVariable("intermediatePath") String intermediatePath,@ApiParam(value = "",required=true) @PathVariable("authorizableId") String authorizableId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /{intermediatePath}/{authorizableId}.ks.html
     *
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @param colonOperation  (optional)
     * @param currentPassword  (optional)
     * @param newPassword  (optional)
     * @param rePassword  (optional)
     * @param keyPassword  (optional)
     * @param keyStorePass  (optional)
     * @param alias  (optional)
     * @param newAlias  (optional)
     * @param removeAlias  (optional)
     * @param certChain  (optional)
     * @param pk  (optional)
     * @param keyStore  (optional)
     * @return Retrieved Authorizable Keystore info (status code 200)
     *         or Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "postAuthorizableKeystore", notes = "", response = KeystoreInfo.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Retrieved Authorizable Keystore info", response = KeystoreInfo.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/{intermediatePath}/{authorizableId}.ks.html",
        produces = { "text/plain" },
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<KeystoreInfo> postAuthorizableKeystore(@ApiParam(value = "",required=true) @PathVariable("intermediatePath") String intermediatePath,@ApiParam(value = "",required=true) @PathVariable("authorizableId") String authorizableId,@ApiParam(value = "") @Valid @RequestParam(value = ":operation", required = false) String colonOperation,@ApiParam(value = "") @Valid @RequestParam(value = "currentPassword", required = false) String currentPassword,@ApiParam(value = "") @Valid @RequestParam(value = "newPassword", required = false) String newPassword,@ApiParam(value = "") @Valid @RequestParam(value = "rePassword", required = false) String rePassword,@ApiParam(value = "") @Valid @RequestParam(value = "keyPassword", required = false) String keyPassword,@ApiParam(value = "") @Valid @RequestParam(value = "keyStorePass", required = false) String keyStorePass,@ApiParam(value = "") @Valid @RequestParam(value = "alias", required = false) String alias,@ApiParam(value = "") @Valid @RequestParam(value = "newAlias", required = false) String newAlias,@ApiParam(value = "") @Valid @RequestParam(value = "removeAlias", required = false) String removeAlias,@ApiParam(value = "") @Valid @RequestPart(value = "cert-chain", required = false) MultipartFile cert-chain,@ApiParam(value = "") @Valid @RequestPart(value = "pk", required = false) MultipartFile pk,@ApiParam(value = "") @Valid @RequestPart(value = "keyStore", required = false) MultipartFile keyStore) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
