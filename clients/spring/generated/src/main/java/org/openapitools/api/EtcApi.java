/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import java.math.BigDecimal;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-09-03T15:28:35.636+10:00[Australia/Melbourne]")
@Validated
@Api(value = "etc", description = "the etc API")
public interface EtcApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /etc/replication/agents.{runmode}/{name}
     *
     * @param runmode  (required)
     * @param name  (required)
     * @return Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "deleteAgent", notes = "", authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/etc/replication/agents.{runmode}/{name}"
    )
    default ResponseEntity<Void> deleteAgent(@ApiParam(value = "",required=true) @PathVariable("runmode") String runmode,@ApiParam(value = "",required=true) @PathVariable("name") String name) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /etc/replication/agents.{runmode}/{name}
     *
     * @param runmode  (required)
     * @param name  (required)
     * @return Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "getAgent", notes = "", authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/etc/replication/agents.{runmode}/{name}"
    )
    default ResponseEntity<Void> getAgent(@ApiParam(value = "",required=true) @PathVariable("runmode") String runmode,@ApiParam(value = "",required=true) @PathVariable("name") String name) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /etc/replication/agents.{runmode}.-1.json
     *
     * @param runmode  (required)
     * @return Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "getAgents", notes = "", response = String.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/etc/replication/agents.{runmode}.-1.json",
        produces = { "application/json" }
    )
    default ResponseEntity<String> getAgents(@ApiParam(value = "",required=true) @PathVariable("runmode") String runmode) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /etc/packages/{group}/{name}-{version}.zip
     *
     * @param group  (required)
     * @param name  (required)
     * @param version  (required)
     * @return Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "getPackage", notes = "", response = org.springframework.core.io.Resource.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response", response = org.springframework.core.io.Resource.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/etc/packages/{group}/{name}-{version}.zip",
        produces = { "application/octet-stream" }
    )
    default ResponseEntity<org.springframework.core.io.Resource> getPackage(@ApiParam(value = "",required=true) @PathVariable("group") String group,@ApiParam(value = "",required=true) @PathVariable("name") String name,@ApiParam(value = "",required=true) @PathVariable("version") String version) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json
     *
     * @param group  (required)
     * @param name  (required)
     * @param version  (required)
     * @return Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "getPackageFilter", notes = "", response = String.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json",
        produces = { "application/json" }
    )
    default ResponseEntity<String> getPackageFilter(@ApiParam(value = "",required=true) @PathVariable("group") String group,@ApiParam(value = "",required=true) @PathVariable("name") String name,@ApiParam(value = "",required=true) @PathVariable("version") String version) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /etc/truststore/truststore.p12
     *
     * @return Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "getTruststore", notes = "", response = org.springframework.core.io.Resource.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response", response = org.springframework.core.io.Resource.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/etc/truststore/truststore.p12",
        produces = { "application/octet-stream" }
    )
    default ResponseEntity<org.springframework.core.io.Resource> getTruststore() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /etc/replication/agents.{runmode}/{name}
     *
     * @param runmode  (required)
     * @param name  (required)
     * @param jcrColonContentCqColonDistribute  (optional)
     * @param jcrColonContentCqColonDistributeAtTypeHint  (optional)
     * @param jcrColonContentCqColonName  (optional)
     * @param jcrColonContentCqColonTemplate  (optional)
     * @param jcrColonContentEnabled  (optional)
     * @param jcrColonContentJcrColonDescription  (optional)
     * @param jcrColonContentJcrColonLastModified  (optional)
     * @param jcrColonContentJcrColonLastModifiedBy  (optional)
     * @param jcrColonContentJcrColonMixinTypes  (optional)
     * @param jcrColonContentJcrColonTitle  (optional)
     * @param jcrColonContentLogLevel  (optional)
     * @param jcrColonContentNoStatusUpdate  (optional)
     * @param jcrColonContentNoVersioning  (optional)
     * @param jcrColonContentProtocolConnectTimeout  (optional)
     * @param jcrColonContentProtocolHTTPConnectionClosed  (optional)
     * @param jcrColonContentProtocolHTTPExpired  (optional)
     * @param jcrColonContentProtocolHTTPHeaders  (optional)
     * @param jcrColonContentProtocolHTTPHeadersAtTypeHint  (optional)
     * @param jcrColonContentProtocolHTTPMethod  (optional)
     * @param jcrColonContentProtocolHTTPSRelaxed  (optional)
     * @param jcrColonContentProtocolInterface  (optional)
     * @param jcrColonContentProtocolSocketTimeout  (optional)
     * @param jcrColonContentProtocolVersion  (optional)
     * @param jcrColonContentProxyNTLMDomain  (optional)
     * @param jcrColonContentProxyNTLMHost  (optional)
     * @param jcrColonContentProxyHost  (optional)
     * @param jcrColonContentProxyPassword  (optional)
     * @param jcrColonContentProxyPort  (optional)
     * @param jcrColonContentProxyUser  (optional)
     * @param jcrColonContentQueueBatchMaxSize  (optional)
     * @param jcrColonContentQueueBatchMode  (optional)
     * @param jcrColonContentQueueBatchWaitTime  (optional)
     * @param jcrColonContentRetryDelay  (optional)
     * @param jcrColonContentReverseReplication  (optional)
     * @param jcrColonContentSerializationType  (optional)
     * @param jcrColonContentSlingColonResourceType  (optional)
     * @param jcrColonContentSsl  (optional)
     * @param jcrColonContentTransportNTLMDomain  (optional)
     * @param jcrColonContentTransportNTLMHost  (optional)
     * @param jcrColonContentTransportPassword  (optional)
     * @param jcrColonContentTransportUri  (optional)
     * @param jcrColonContentTransportUser  (optional)
     * @param jcrColonContentTriggerDistribute  (optional)
     * @param jcrColonContentTriggerModified  (optional)
     * @param jcrColonContentTriggerOnOffTime  (optional)
     * @param jcrColonContentTriggerReceive  (optional)
     * @param jcrColonContentTriggerSpecific  (optional)
     * @param jcrColonContentUserId  (optional)
     * @param jcrColonPrimaryType  (optional)
     * @param colonOperation  (optional)
     * @return Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "postAgent", notes = "", authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/etc/replication/agents.{runmode}/{name}"
    )
    default ResponseEntity<Void> postAgent(@ApiParam(value = "",required=true) @PathVariable("runmode") String runmode,@ApiParam(value = "",required=true) @PathVariable("name") String name,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/cq:distribute", required = false) Boolean jcrColonContentCqColonDistribute,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/cq:distribute@TypeHint", required = false) String jcrColonContentCqColonDistributeAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/cq:name", required = false) String jcrColonContentCqColonName,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/cq:template", required = false) String jcrColonContentCqColonTemplate,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/enabled", required = false) Boolean jcrColonContentEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/jcr:description", required = false) String jcrColonContentJcrColonDescription,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/jcr:lastModified", required = false) String jcrColonContentJcrColonLastModified,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/jcr:lastModifiedBy", required = false) String jcrColonContentJcrColonLastModifiedBy,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/jcr:mixinTypes", required = false) String jcrColonContentJcrColonMixinTypes,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/jcr:title", required = false) String jcrColonContentJcrColonTitle,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/logLevel", required = false) String jcrColonContentLogLevel,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/noStatusUpdate", required = false) Boolean jcrColonContentNoStatusUpdate,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/noVersioning", required = false) Boolean jcrColonContentNoVersioning,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/protocolConnectTimeout", required = false) BigDecimal jcrColonContentProtocolConnectTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/protocolHTTPConnectionClosed", required = false) Boolean jcrColonContentProtocolHTTPConnectionClosed,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/protocolHTTPExpired", required = false) String jcrColonContentProtocolHTTPExpired,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/protocolHTTPHeaders", required = false) List<String> jcrColonContentProtocolHTTPHeaders,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/protocolHTTPHeaders@TypeHint", required = false) String jcrColonContentProtocolHTTPHeadersAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/protocolHTTPMethod", required = false) String jcrColonContentProtocolHTTPMethod,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/protocolHTTPSRelaxed", required = false) Boolean jcrColonContentProtocolHTTPSRelaxed,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/protocolInterface", required = false) String jcrColonContentProtocolInterface,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/protocolSocketTimeout", required = false) BigDecimal jcrColonContentProtocolSocketTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/protocolVersion", required = false) String jcrColonContentProtocolVersion,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/proxyNTLMDomain", required = false) String jcrColonContentProxyNTLMDomain,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/proxyNTLMHost", required = false) String jcrColonContentProxyNTLMHost,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/proxyHost", required = false) String jcrColonContentProxyHost,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/proxyPassword", required = false) String jcrColonContentProxyPassword,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/proxyPort", required = false) BigDecimal jcrColonContentProxyPort,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/proxyUser", required = false) String jcrColonContentProxyUser,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/queueBatchMaxSize", required = false) BigDecimal jcrColonContentQueueBatchMaxSize,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/queueBatchMode", required = false) String jcrColonContentQueueBatchMode,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/queueBatchWaitTime", required = false) BigDecimal jcrColonContentQueueBatchWaitTime,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/retryDelay", required = false) String jcrColonContentRetryDelay,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/reverseReplication", required = false) Boolean jcrColonContentReverseReplication,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/serializationType", required = false) String jcrColonContentSerializationType,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/sling:resourceType", required = false) String jcrColonContentSlingColonResourceType,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/ssl", required = false) String jcrColonContentSsl,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/transportNTLMDomain", required = false) String jcrColonContentTransportNTLMDomain,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/transportNTLMHost", required = false) String jcrColonContentTransportNTLMHost,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/transportPassword", required = false) String jcrColonContentTransportPassword,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/transportUri", required = false) String jcrColonContentTransportUri,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/transportUser", required = false) String jcrColonContentTransportUser,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/triggerDistribute", required = false) Boolean jcrColonContentTriggerDistribute,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/triggerModified", required = false) Boolean jcrColonContentTriggerModified,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/triggerOnOffTime", required = false) Boolean jcrColonContentTriggerOnOffTime,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/triggerReceive", required = false) Boolean jcrColonContentTriggerReceive,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/triggerSpecific", required = false) Boolean jcrColonContentTriggerSpecific,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/userId", required = false) String jcrColonContentUserId,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:primaryType", required = false) String jcrColonPrimaryType,@ApiParam(value = "") @Valid @RequestParam(value = ":operation", required = false) String colonOperation) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /etc/replication/treeactivation.html
     *
     * @param ignoredeactivated  (required)
     * @param onlymodified  (required)
     * @param path  (required)
     * @return Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "postTreeActivation", notes = "", authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/etc/replication/treeactivation.html"
    )
    default ResponseEntity<Void> postTreeActivation(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "ignoredeactivated", required = true) Boolean ignoredeactivated,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "onlymodified", required = true) Boolean onlymodified,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "path", required = true) String path) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /etc/truststore
     *
     * @param truststoreP12  (optional)
     * @return Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "postTruststorePKCS12", notes = "", response = String.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/etc/truststore",
        produces = { "text/plain" },
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<String> postTruststorePKCS12(@ApiParam(value = "") @Valid @RequestPart(value = "truststore.p12", required = false) MultipartFile truststore.p12) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
