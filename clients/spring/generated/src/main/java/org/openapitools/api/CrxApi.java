/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.InstallStatus;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-09-03T15:28:35.636+10:00[Australia/Melbourne]")
@Validated
@Api(value = "crx", description = "the crx API")
public interface CrxApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /crx/server/crx.default/jcr:root/.1.json
     *
     * @return CRXDE is enabled (status code 200)
     *         or CRXDE is disabled (status code 404)
     */
    @ApiOperation(value = "", nickname = "getCrxdeStatus", notes = "", response = String.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "crx", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "CRXDE is enabled", response = String.class),
        @ApiResponse(code = 404, message = "CRXDE is disabled", response = String.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/crx/server/crx.default/jcr:root/.1.json",
        produces = { "plain/text" }
    )
    default ResponseEntity<String> getCrxdeStatus() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /crx/packmgr/installstatus.jsp
     *
     * @return Retrieved CRX package manager install status (status code 200)
     *         or Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "getInstallStatus", notes = "", response = InstallStatus.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "crx", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Retrieved CRX package manager install status", response = InstallStatus.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/crx/packmgr/installstatus.jsp",
        produces = { "application/json" }
    )
    default ResponseEntity<InstallStatus> getInstallStatus() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : { \"finished\" : true, \"itemCount\" : 0 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /crx/packmgr/service/script.html
     *
     * @return Package Manager Servlet is disabled (status code 404)
     *         or Package Manager Servlet is active (status code 405)
     */
    @ApiOperation(value = "", nickname = "getPackageManagerServlet", notes = "", authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "crx", })
    @ApiResponses(value = { 
        @ApiResponse(code = 404, message = "Package Manager Servlet is disabled", response = String.class),
        @ApiResponse(code = 405, message = "Package Manager Servlet is active", response = String.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/crx/packmgr/service/script.html",
        produces = { "text/html" }
    )
    default ResponseEntity<Void> getPackageManagerServlet() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /crx/packmgr/service.jsp
     *
     * @param cmd  (required)
     * @return Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "postPackageService", notes = "", response = String.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "crx", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/crx/packmgr/service.jsp",
        produces = { "text/xml" }
    )
    default ResponseEntity<String> postPackageService(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "cmd", required = true) String cmd) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /crx/packmgr/service/.json/{path}
     *
     * @param path  (required)
     * @param cmd  (required)
     * @param groupName  (optional)
     * @param packageName  (optional)
     * @param packageVersion  (optional)
     * @param charset  (optional)
     * @param force  (optional)
     * @param recursive  (optional)
     * @param _package  (optional)
     * @return Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "postPackageServiceJson", notes = "", response = String.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "crx", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/crx/packmgr/service/.json/{path}",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<String> postPackageServiceJson(@ApiParam(value = "",required=true) @PathVariable("path") String path,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "cmd", required = true) String cmd,@ApiParam(value = "") @Valid @RequestParam(value = "groupName", required = false) String groupName,@ApiParam(value = "") @Valid @RequestParam(value = "packageName", required = false) String packageName,@ApiParam(value = "") @Valid @RequestParam(value = "packageVersion", required = false) String packageVersion,@ApiParam(value = "") @Valid @RequestParam(value = "_charset_", required = false) String charset,@ApiParam(value = "") @Valid @RequestParam(value = "force", required = false) Boolean force,@ApiParam(value = "") @Valid @RequestParam(value = "recursive", required = false) Boolean recursive,@ApiParam(value = "") @Valid @RequestPart(value = "package", required = false) MultipartFile package) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /crx/packmgr/update.jsp
     *
     * @param groupName  (required)
     * @param packageName  (required)
     * @param version  (required)
     * @param path  (required)
     * @param filter  (optional)
     * @param charset  (optional)
     * @return Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "postPackageUpdate", notes = "", response = String.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "crx", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/crx/packmgr/update.jsp",
        produces = { "application/json" }
    )
    default ResponseEntity<String> postPackageUpdate(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "groupName", required = true) String groupName,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "packageName", required = true) String packageName,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "version", required = true) String version,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "path", required = true) String path,@ApiParam(value = "") @Valid @RequestParam(value = "filter", required = false) String filter,@ApiParam(value = "") @Valid @RequestParam(value = "_charset_", required = false) String charset) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /crx/explorer/ui/setpassword.jsp
     *
     * @param old  (required)
     * @param plain  (required)
     * @param verify  (required)
     * @return Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "postSetPassword", notes = "", response = String.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "crx", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/crx/explorer/ui/setpassword.jsp",
        produces = { "text/plain" }
    )
    default ResponseEntity<String> postSetPassword(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "old", required = true) String old,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "plain", required = true) String plain,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "verify", required = true) String verify) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
