/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-09-03T15:28:35.636+10:00[Australia/Melbourne]")
@Validated
@Api(value = "{path}", description = "the {path} API")
public interface PathApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /{path}/{name}
     *
     * @param path  (required)
     * @param name  (required)
     * @return Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "deleteNode", notes = "", authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/{path}/{name}"
    )
    default ResponseEntity<Void> deleteNode(@ApiParam(value = "",required=true) @PathVariable("path") String path,@ApiParam(value = "",required=true) @PathVariable("name") String name) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /{path}/{name}
     *
     * @param path  (required)
     * @param name  (required)
     * @return Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "getNode", notes = "", authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/{path}/{name}"
    )
    default ResponseEntity<Void> getNode(@ApiParam(value = "",required=true) @PathVariable("path") String path,@ApiParam(value = "",required=true) @PathVariable("name") String name) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /{path}/{name}
     *
     * @param path  (required)
     * @param name  (required)
     * @param colonOperation  (optional)
     * @param deleteAuthorizable  (optional)
     * @param file  (optional)
     * @return Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "postNode", notes = "", authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/{path}/{name}",
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<Void> postNode(@ApiParam(value = "",required=true) @PathVariable("path") String path,@ApiParam(value = "",required=true) @PathVariable("name") String name,@ApiParam(value = "") @Valid @RequestParam(value = ":operation", required = false) String colonOperation,@ApiParam(value = "") @Valid @RequestParam(value = "deleteAuthorizable", required = false) String deleteAuthorizable,@ApiParam(value = "") @Valid @RequestPart(value = "file", required = false) MultipartFile file) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /{path}/{name}.rw.html
     *
     * @param path  (required)
     * @param name  (required)
     * @param addMembers  (optional)
     * @return Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "postNodeRw", notes = "", authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/{path}/{name}.rw.html"
    )
    default ResponseEntity<Void> postNodeRw(@ApiParam(value = "",required=true) @PathVariable("path") String path,@ApiParam(value = "",required=true) @PathVariable("name") String name,@ApiParam(value = "") @Valid @RequestParam(value = "addMembers", required = false) String addMembers) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /{path}/
     *
     * @param path  (required)
     * @param jcrColonPrimaryType  (required)
     * @param colonName  (required)
     * @return Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "postPath", notes = "", authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/{path}/"
    )
    default ResponseEntity<Void> postPath(@ApiParam(value = "",required=true) @PathVariable("path") String path,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "jcr:primaryType", required = true) String jcrColonPrimaryType,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = ":name", required = true) String colonName) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
