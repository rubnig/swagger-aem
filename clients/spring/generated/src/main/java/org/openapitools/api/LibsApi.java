/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.TruststoreInfo;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-09-03T15:28:35.636+10:00[Australia/Melbourne]")
@Validated
@Api(value = "libs", description = "the libs API")
public interface LibsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /libs/granite/core/content/login.html
     *
     * @return Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "getLoginPage", notes = "", response = String.class, tags={ "cq", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/libs/granite/core/content/login.html",
        produces = { "text/html" }
    )
    default ResponseEntity<String> getLoginPage() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /libs/granite/security/truststore.json
     *
     * @return Retrieved AEM Truststore info (status code 200)
     *         or Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "getTruststoreInfo", notes = "", response = TruststoreInfo.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Retrieved AEM Truststore info", response = TruststoreInfo.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/libs/granite/security/truststore.json",
        produces = { "application/json" }
    )
    default ResponseEntity<TruststoreInfo> getTruststoreInfo() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"aliases\" : [ { \"entryType\" : \"entryType\", \"notAfter\" : \"notAfter\", \"serialNumber\" : 0, \"subject\" : \"subject\", \"alias\" : \"alias\", \"issuer\" : \"issuer\", \"notBefore\" : \"notBefore\" }, { \"entryType\" : \"entryType\", \"notAfter\" : \"notAfter\", \"serialNumber\" : 0, \"subject\" : \"subject\", \"alias\" : \"alias\", \"issuer\" : \"issuer\", \"notBefore\" : \"notBefore\" } ], \"exists\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /libs/granite/security/post/authorizables
     *
     * @param authorizableId  (required)
     * @param intermediatePath  (required)
     * @param createUser  (optional)
     * @param createGroup  (optional)
     * @param repColonPassword  (optional)
     * @param profileGivenName  (optional)
     * @return Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "postAuthorizables", notes = "", response = String.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/libs/granite/security/post/authorizables",
        produces = { "text/html" }
    )
    default ResponseEntity<String> postAuthorizables(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "authorizableId", required = true) String authorizableId,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "intermediatePath", required = true) String intermediatePath,@ApiParam(value = "") @Valid @RequestParam(value = "createUser", required = false) String createUser,@ApiParam(value = "") @Valid @RequestParam(value = "createGroup", required = false) String createGroup,@ApiParam(value = "") @Valid @RequestParam(value = "rep:password", required = false) String repColonPassword,@ApiParam(value = "") @Valid @RequestParam(value = "profile/givenName", required = false) String profileGivenName) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /libs/granite/security/post/truststore
     *
     * @param colonOperation  (optional)
     * @param newPassword  (optional)
     * @param rePassword  (optional)
     * @param keyStoreType  (optional)
     * @param removeAlias  (optional)
     * @param certificate  (optional)
     * @return Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "postTruststore", notes = "", response = String.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/libs/granite/security/post/truststore",
        produces = { "text/plain" },
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<String> postTruststore(@ApiParam(value = "") @Valid @RequestParam(value = ":operation", required = false) String colonOperation,@ApiParam(value = "") @Valid @RequestParam(value = "newPassword", required = false) String newPassword,@ApiParam(value = "") @Valid @RequestParam(value = "rePassword", required = false) String rePassword,@ApiParam(value = "") @Valid @RequestParam(value = "keyStoreType", required = false) String keyStoreType,@ApiParam(value = "") @Valid @RequestParam(value = "removeAlias", required = false) String removeAlias,@ApiParam(value = "") @Valid @RequestPart(value = "certificate", required = false) MultipartFile certificate) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /libs/granite/security/post/sslSetup.html
     *
     * @param keystorePassword  (required)
     * @param keystorePasswordConfirm  (required)
     * @param truststorePassword  (required)
     * @param truststorePasswordConfirm  (required)
     * @param httpsHostname  (required)
     * @param httpsPort  (required)
     * @param privatekeyFile  (optional)
     * @param certificateFile  (optional)
     * @return Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "sslSetup", notes = "", response = String.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "granite", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/libs/granite/security/post/sslSetup.html",
        produces = { "text/plain" },
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<String> sslSetup(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "keystorePassword", required = true) String keystorePassword,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "keystorePasswordConfirm", required = true) String keystorePasswordConfirm,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "truststorePassword", required = true) String truststorePassword,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "truststorePasswordConfirm", required = true) String truststorePasswordConfirm,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "httpsHostname", required = true) String httpsHostname,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "httpsPort", required = true) String httpsPort,@ApiParam(value = "") @Valid @RequestPart(value = "privatekeyFile", required = false) MultipartFile privatekeyFile,@ApiParam(value = "") @Valid @RequestPart(value = "certificateFile", required = false) MultipartFile certificateFile) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
