/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.BundleInfo;
import org.openapitools.model.SamlConfigurationInfo;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-09-03T15:28:35.636+10:00[Australia/Melbourne]")
@Validated
@Api(value = "system", description = "the system API")
public interface SystemApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /system/health
     *
     * @param tags  (optional)
     * @param combineTagsOr  (optional)
     * @return Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "getAemHealthCheck", notes = "", response = String.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "custom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/system/health",
        produces = { "application/json" }
    )
    default ResponseEntity<String> getAemHealthCheck(@ApiParam(value = "") @Valid @RequestParam(value = "tags", required = false) String tags,@ApiParam(value = "") @Valid @RequestParam(value = "combineTagsOr", required = false) Boolean combineTagsOr) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /system/console/status-productinfo.json
     *
     * @return Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "getAemProductInfo", notes = "", response = String.class, responseContainer = "List", authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "console", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response", response = String.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/system/console/status-productinfo.json",
        produces = { "application/json" }
    )
    default ResponseEntity<List<String>> getAemProductInfo() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /system/console/bundles/{name}.json
     *
     * @param name  (required)
     * @return Retrieved bundle info (status code 200)
     *         or Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "getBundleInfo", notes = "", response = BundleInfo.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "console", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Retrieved bundle info", response = BundleInfo.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/system/console/bundles/{name}.json",
        produces = { "application/json" }
    )
    default ResponseEntity<BundleInfo> getBundleInfo(@ApiParam(value = "",required=true) @PathVariable("name") String name) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"s\" : [ 0, 0 ], \"data\" : [ { \"fragment\" : true, \"stateRaw\" : 1, \"name\" : \"name\", \"symbolicName\" : \"symbolicName\", \"id\" : 6, \"state\" : \"state\", \"category\" : \"category\", \"version\" : \"version\", \"props\" : [ { \"value\" : \"value\", \"key\" : \"key\" }, { \"value\" : \"value\", \"key\" : \"key\" } ] }, { \"fragment\" : true, \"stateRaw\" : 1, \"name\" : \"name\", \"symbolicName\" : \"symbolicName\", \"id\" : 6, \"state\" : \"state\", \"category\" : \"category\", \"version\" : \"version\", \"props\" : [ { \"value\" : \"value\", \"key\" : \"key\" }, { \"value\" : \"value\", \"key\" : \"key\" } ] } ], \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /system/console/configMgr
     *
     * @return OK (status code 200)
     *         or Unexpected error. (status code 5XX)
     */
    @ApiOperation(value = "", nickname = "getConfigMgr", notes = "", response = String.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "console", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 5XX, message = "Unexpected error.") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/system/console/configMgr",
        produces = { "text/xml" }
    )
    default ResponseEntity<String> getConfigMgr() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /system/console/bundles/{name}
     *
     * @param name  (required)
     * @param action  (required)
     * @return Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "postBundle", notes = "", authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "console", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/system/console/bundles/{name}"
    )
    default ResponseEntity<Void> postBundle(@ApiParam(value = "",required=true) @PathVariable("name") String name,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "action", required = true) String action) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /system/console/jmx/com.adobe.granite:type=Repository/op/{action}
     *
     * @param action  (required)
     * @return Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "postJmxRepository", notes = "", authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "console", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/system/console/jmx/com.adobe.granite:type=Repository/op/{action}"
    )
    default ResponseEntity<Void> postJmxRepository(@ApiParam(value = "",required=true) @PathVariable("action") String action) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler
     *
     * @param post  (optional)
     * @param apply  (optional)
     * @param delete  (optional)
     * @param action  (optional)
     * @param $location  (optional)
     * @param path  (optional)
     * @param serviceRanking  (optional)
     * @param idpUrl  (optional)
     * @param idpCertAlias  (optional)
     * @param idpHttpRedirect  (optional)
     * @param serviceProviderEntityId  (optional)
     * @param assertionConsumerServiceURL  (optional)
     * @param spPrivateKeyAlias  (optional)
     * @param keyStorePassword  (optional)
     * @param defaultRedirectUrl  (optional)
     * @param userIDAttribute  (optional)
     * @param useEncryption  (optional)
     * @param createUser  (optional)
     * @param addGroupMemberships  (optional)
     * @param groupMembershipAttribute  (optional)
     * @param defaultGroups  (optional)
     * @param nameIdFormat  (optional)
     * @param synchronizeAttributes  (optional)
     * @param handleLogout  (optional)
     * @param logoutUrl  (optional)
     * @param clockTolerance  (optional)
     * @param digestMethod  (optional)
     * @param signatureMethod  (optional)
     * @param userIntermediatePath  (optional)
     * @param propertylist  (optional)
     * @return Retrieved AEM SAML Configuration (status code 200)
     *         or Default response (status code 302)
     *         or Default response (status code 200)
     */
    @ApiOperation(value = "", nickname = "postSamlConfiguration", notes = "", response = SamlConfigurationInfo.class, authorizations = {
        
        @Authorization(value = "aemAuth")
         }, tags={ "console", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Retrieved AEM SAML Configuration", response = SamlConfigurationInfo.class),
        @ApiResponse(code = 302, message = "Default response", response = String.class),
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler",
        produces = { "text/plain" }
    )
    default ResponseEntity<SamlConfigurationInfo> postSamlConfiguration(@ApiParam(value = "") @Valid @RequestParam(value = "post", required = false) Boolean post,@ApiParam(value = "") @Valid @RequestParam(value = "apply", required = false) Boolean apply,@ApiParam(value = "") @Valid @RequestParam(value = "delete", required = false) Boolean delete,@ApiParam(value = "") @Valid @RequestParam(value = "action", required = false) String action,@ApiParam(value = "") @Valid @RequestParam(value = "$location", required = false) String $location,@ApiParam(value = "") @Valid @RequestParam(value = "path", required = false) List<String> path,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "idpUrl", required = false) String idpUrl,@ApiParam(value = "") @Valid @RequestParam(value = "idpCertAlias", required = false) String idpCertAlias,@ApiParam(value = "") @Valid @RequestParam(value = "idpHttpRedirect", required = false) Boolean idpHttpRedirect,@ApiParam(value = "") @Valid @RequestParam(value = "serviceProviderEntityId", required = false) String serviceProviderEntityId,@ApiParam(value = "") @Valid @RequestParam(value = "assertionConsumerServiceURL", required = false) String assertionConsumerServiceURL,@ApiParam(value = "") @Valid @RequestParam(value = "spPrivateKeyAlias", required = false) String spPrivateKeyAlias,@ApiParam(value = "") @Valid @RequestParam(value = "keyStorePassword", required = false) String keyStorePassword,@ApiParam(value = "") @Valid @RequestParam(value = "defaultRedirectUrl", required = false) String defaultRedirectUrl,@ApiParam(value = "") @Valid @RequestParam(value = "userIDAttribute", required = false) String userIDAttribute,@ApiParam(value = "") @Valid @RequestParam(value = "useEncryption", required = false) Boolean useEncryption,@ApiParam(value = "") @Valid @RequestParam(value = "createUser", required = false) Boolean createUser,@ApiParam(value = "") @Valid @RequestParam(value = "addGroupMemberships", required = false) Boolean addGroupMemberships,@ApiParam(value = "") @Valid @RequestParam(value = "groupMembershipAttribute", required = false) String groupMembershipAttribute,@ApiParam(value = "") @Valid @RequestParam(value = "defaultGroups", required = false) List<String> defaultGroups,@ApiParam(value = "") @Valid @RequestParam(value = "nameIdFormat", required = false) String nameIdFormat,@ApiParam(value = "") @Valid @RequestParam(value = "synchronizeAttributes", required = false) List<String> synchronizeAttributes,@ApiParam(value = "") @Valid @RequestParam(value = "handleLogout", required = false) Boolean handleLogout,@ApiParam(value = "") @Valid @RequestParam(value = "logoutUrl", required = false) String logoutUrl,@ApiParam(value = "") @Valid @RequestParam(value = "clockTolerance", required = false) Integer clockTolerance,@ApiParam(value = "") @Valid @RequestParam(value = "digestMethod", required = false) String digestMethod,@ApiParam(value = "") @Valid @RequestParam(value = "signatureMethod", required = false) String signatureMethod,@ApiParam(value = "") @Valid @RequestParam(value = "userIntermediatePath", required = false) String userIntermediatePath,@ApiParam(value = "") @Valid @RequestParam(value = "propertylist", required = false) List<String> propertylist) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
