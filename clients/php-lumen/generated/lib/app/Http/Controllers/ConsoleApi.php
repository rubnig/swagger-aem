<?php

/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 * PHP version 7.2.5
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class ConsoleApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation postBundle
     *
     * .
     *
     * @param string $name  (required)
     *
     * @return Http response
     */
    public function postBundle($name)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing postBundle as a post method ?');
    }
    /**
     * Operation getBundleInfo
     *
     * .
     *
     * @param string $name  (required)
     *
     * @return Http response
     */
    public function getBundleInfo($name)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getBundleInfo as a get method ?');
    }
    /**
     * Operation getConfigMgr
     *
     * .
     *
     *
     * @return Http response
     */
    public function getConfigMgr()
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getConfigMgr as a get method ?');
    }
    /**
     * Operation postSamlConfiguration
     *
     * .
     *
     *
     * @return Http response
     */
    public function postSamlConfiguration()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $post = $input['post'];

        $apply = $input['apply'];

        $delete = $input['delete'];

        $action = $input['action'];

        $location = $input['location'];

        $path = $input['path'];

        $service_ranking = $input['service_ranking'];

        $idp_url = $input['idp_url'];

        $idp_cert_alias = $input['idp_cert_alias'];

        $idp_http_redirect = $input['idp_http_redirect'];

        $service_provider_entity_id = $input['service_provider_entity_id'];

        $assertion_consumer_service_url = $input['assertion_consumer_service_url'];

        $sp_private_key_alias = $input['sp_private_key_alias'];

        $key_store_password = $input['key_store_password'];

        $default_redirect_url = $input['default_redirect_url'];

        $user_id_attribute = $input['user_id_attribute'];

        $use_encryption = $input['use_encryption'];

        $create_user = $input['create_user'];

        $add_group_memberships = $input['add_group_memberships'];

        $group_membership_attribute = $input['group_membership_attribute'];

        $default_groups = $input['default_groups'];

        $name_id_format = $input['name_id_format'];

        $synchronize_attributes = $input['synchronize_attributes'];

        $handle_logout = $input['handle_logout'];

        $logout_url = $input['logout_url'];

        $clock_tolerance = $input['clock_tolerance'];

        $digest_method = $input['digest_method'];

        $signature_method = $input['signature_method'];

        $user_intermediate_path = $input['user_intermediate_path'];

        $propertylist = $input['propertylist'];


        return response('How about implementing postSamlConfiguration as a post method ?');
    }
    /**
     * Operation postJmxRepository
     *
     * .
     *
     * @param string $action  (required)
     *
     * @return Http response
     */
    public function postJmxRepository($action)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing postJmxRepository as a post method ?');
    }
    /**
     * Operation getAemProductInfo
     *
     * .
     *
     *
     * @return Http response
     */
    public function getAemProductInfo()
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getAemProductInfo as a get method ?');
    }
}
