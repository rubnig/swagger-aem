<?php

/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 * PHP version 7.2.5
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class CrxApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation postSetPassword
     *
     * .
     *
     *
     * @return Http response
     */
    public function postSetPassword()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['old'])) {
            throw new \InvalidArgumentException('Missing the required parameter $old when calling postSetPassword');
        }
        $old = $input['old'];

        if (!isset($input['plain'])) {
            throw new \InvalidArgumentException('Missing the required parameter $plain when calling postSetPassword');
        }
        $plain = $input['plain'];

        if (!isset($input['verify'])) {
            throw new \InvalidArgumentException('Missing the required parameter $verify when calling postSetPassword');
        }
        $verify = $input['verify'];


        return response('How about implementing postSetPassword as a post method ?');
    }
    /**
     * Operation getInstallStatus
     *
     * .
     *
     *
     * @return Http response
     */
    public function getInstallStatus()
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getInstallStatus as a get method ?');
    }
    /**
     * Operation postPackageService
     *
     * .
     *
     *
     * @return Http response
     */
    public function postPackageService()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['cmd'])) {
            throw new \InvalidArgumentException('Missing the required parameter $cmd when calling postPackageService');
        }
        $cmd = $input['cmd'];


        return response('How about implementing postPackageService as a post method ?');
    }
    /**
     * Operation postPackageServiceJson
     *
     * .
     *
     * @param string $path  (required)
     *
     * @return Http response
     */
    public function postPackageServiceJson($path)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing postPackageServiceJson as a post method ?');
    }
    /**
     * Operation getPackageManagerServlet
     *
     * .
     *
     *
     * @return Http response
     */
    public function getPackageManagerServlet()
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getPackageManagerServlet as a get method ?');
    }
    /**
     * Operation postPackageUpdate
     *
     * .
     *
     *
     * @return Http response
     */
    public function postPackageUpdate()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['group_name'])) {
            throw new \InvalidArgumentException('Missing the required parameter $group_name when calling postPackageUpdate');
        }
        $group_name = $input['group_name'];

        if (!isset($input['package_name'])) {
            throw new \InvalidArgumentException('Missing the required parameter $package_name when calling postPackageUpdate');
        }
        $package_name = $input['package_name'];

        if (!isset($input['version'])) {
            throw new \InvalidArgumentException('Missing the required parameter $version when calling postPackageUpdate');
        }
        $version = $input['version'];

        if (!isset($input['path'])) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling postPackageUpdate');
        }
        $path = $input['path'];

        $filter = $input['filter'];

        $_charset_ = $input['_charset_'];


        return response('How about implementing postPackageUpdate as a post method ?');
    }
    /**
     * Operation getCrxdeStatus
     *
     * .
     *
     *
     * @return Http response
     */
    public function getCrxdeStatus()
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getCrxdeStatus as a get method ?');
    }
}
