<?php

/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 * PHP version 7.2.5
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class GraniteApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation sslSetup
     *
     * .
     *
     *
     * @return Http response
     */
    public function sslSetup()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['keystore_password'])) {
            throw new \InvalidArgumentException('Missing the required parameter $keystore_password when calling sslSetup');
        }
        $keystore_password = $input['keystore_password'];

        if (!isset($input['keystore_password_confirm'])) {
            throw new \InvalidArgumentException('Missing the required parameter $keystore_password_confirm when calling sslSetup');
        }
        $keystore_password_confirm = $input['keystore_password_confirm'];

        if (!isset($input['truststore_password'])) {
            throw new \InvalidArgumentException('Missing the required parameter $truststore_password when calling sslSetup');
        }
        $truststore_password = $input['truststore_password'];

        if (!isset($input['truststore_password_confirm'])) {
            throw new \InvalidArgumentException('Missing the required parameter $truststore_password_confirm when calling sslSetup');
        }
        $truststore_password_confirm = $input['truststore_password_confirm'];

        if (!isset($input['https_hostname'])) {
            throw new \InvalidArgumentException('Missing the required parameter $https_hostname when calling sslSetup');
        }
        $https_hostname = $input['https_hostname'];

        if (!isset($input['https_port'])) {
            throw new \InvalidArgumentException('Missing the required parameter $https_port when calling sslSetup');
        }
        $https_port = $input['https_port'];

        $privatekey_file = $input['privatekey_file'];

        $certificate_file = $input['certificate_file'];


        return response('How about implementing sslSetup as a post method ?');
    }
}
