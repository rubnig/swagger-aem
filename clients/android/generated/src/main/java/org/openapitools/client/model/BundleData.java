/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.util.*;
import org.openapitools.client.model.BundleDataProp;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class BundleData {
  
  @SerializedName("id")
  private Integer id = null;
  @SerializedName("name")
  private String name = null;
  @SerializedName("fragment")
  private Boolean fragment = null;
  @SerializedName("stateRaw")
  private Integer stateRaw = null;
  @SerializedName("state")
  private String state = null;
  @SerializedName("version")
  private String version = null;
  @SerializedName("symbolicName")
  private String symbolicName = null;
  @SerializedName("category")
  private String category = null;
  @SerializedName("props")
  private List<BundleDataProp> props = null;

  /**
   * Bundle ID
   **/
  @ApiModelProperty(value = "Bundle ID")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }

  /**
   * Bundle name
   **/
  @ApiModelProperty(value = "Bundle name")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }

  /**
   * Is bundle a fragment
   **/
  @ApiModelProperty(value = "Is bundle a fragment")
  public Boolean getFragment() {
    return fragment;
  }
  public void setFragment(Boolean fragment) {
    this.fragment = fragment;
  }

  /**
   * Numeric raw bundle state value
   **/
  @ApiModelProperty(value = "Numeric raw bundle state value")
  public Integer getStateRaw() {
    return stateRaw;
  }
  public void setStateRaw(Integer stateRaw) {
    this.stateRaw = stateRaw;
  }

  /**
   * Bundle state value
   **/
  @ApiModelProperty(value = "Bundle state value")
  public String getState() {
    return state;
  }
  public void setState(String state) {
    this.state = state;
  }

  /**
   * Bundle version
   **/
  @ApiModelProperty(value = "Bundle version")
  public String getVersion() {
    return version;
  }
  public void setVersion(String version) {
    this.version = version;
  }

  /**
   * Bundle symbolic name
   **/
  @ApiModelProperty(value = "Bundle symbolic name")
  public String getSymbolicName() {
    return symbolicName;
  }
  public void setSymbolicName(String symbolicName) {
    this.symbolicName = symbolicName;
  }

  /**
   * Bundle category
   **/
  @ApiModelProperty(value = "Bundle category")
  public String getCategory() {
    return category;
  }
  public void setCategory(String category) {
    this.category = category;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public List<BundleDataProp> getProps() {
    return props;
  }
  public void setProps(List<BundleDataProp> props) {
    this.props = props;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BundleData bundleData = (BundleData) o;
    return (this.id == null ? bundleData.id == null : this.id.equals(bundleData.id)) &&
        (this.name == null ? bundleData.name == null : this.name.equals(bundleData.name)) &&
        (this.fragment == null ? bundleData.fragment == null : this.fragment.equals(bundleData.fragment)) &&
        (this.stateRaw == null ? bundleData.stateRaw == null : this.stateRaw.equals(bundleData.stateRaw)) &&
        (this.state == null ? bundleData.state == null : this.state.equals(bundleData.state)) &&
        (this.version == null ? bundleData.version == null : this.version.equals(bundleData.version)) &&
        (this.symbolicName == null ? bundleData.symbolicName == null : this.symbolicName.equals(bundleData.symbolicName)) &&
        (this.category == null ? bundleData.category == null : this.category.equals(bundleData.category)) &&
        (this.props == null ? bundleData.props == null : this.props.equals(bundleData.props));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.id == null ? 0: this.id.hashCode());
    result = 31 * result + (this.name == null ? 0: this.name.hashCode());
    result = 31 * result + (this.fragment == null ? 0: this.fragment.hashCode());
    result = 31 * result + (this.stateRaw == null ? 0: this.stateRaw.hashCode());
    result = 31 * result + (this.state == null ? 0: this.state.hashCode());
    result = 31 * result + (this.version == null ? 0: this.version.hashCode());
    result = 31 * result + (this.symbolicName == null ? 0: this.symbolicName.hashCode());
    result = 31 * result + (this.category == null ? 0: this.category.hashCode());
    result = 31 * result + (this.props == null ? 0: this.props.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class BundleData {\n");
    
    sb.append("  id: ").append(id).append("\n");
    sb.append("  name: ").append(name).append("\n");
    sb.append("  fragment: ").append(fragment).append("\n");
    sb.append("  stateRaw: ").append(stateRaw).append("\n");
    sb.append("  state: ").append(state).append("\n");
    sb.append("  version: ").append(version).append("\n");
    sb.append("  symbolicName: ").append(symbolicName).append("\n");
    sb.append("  category: ").append(category).append("\n");
    sb.append("  props: ").append(props).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
