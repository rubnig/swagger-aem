/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import java.math.BigDecimal;
import java.io.File;
import org.openapitools.client.model.KeystoreInfo;
import org.openapitools.client.model.TruststoreInfo;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class SlingApi {
  String basePath = "http://localhost";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * 
   * @param runmode 
   * @param name 
   * @return void
  */
  public void deleteAgent (String runmode, String name) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'runmode' is set
    if (runmode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'runmode' when calling deleteAgent",
        new ApiException(400, "Missing the required parameter 'runmode' when calling deleteAgent"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling deleteAgent",
        new ApiException(400, "Missing the required parameter 'name' when calling deleteAgent"));
    }

    // create path and map variables
    String path = "/etc/replication/agents.{runmode}/{name}".replaceAll("\\{" + "runmode" + "\\}", apiInvoker.escapeString(runmode.toString())).replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param runmode    * @param name 
  */
  public void deleteAgent (String runmode, String name, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'runmode' is set
    if (runmode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'runmode' when calling deleteAgent",
        new ApiException(400, "Missing the required parameter 'runmode' when calling deleteAgent"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling deleteAgent",
        new ApiException(400, "Missing the required parameter 'name' when calling deleteAgent"));
    }

    // create path and map variables
    String path = "/etc/replication/agents.{runmode}/{name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "runmode" + "\\}", apiInvoker.escapeString(runmode.toString())).replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param path 
   * @param name 
   * @return void
  */
  public void deleteNode (String path, String name) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'path' is set
    if (path == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'path' when calling deleteNode",
        new ApiException(400, "Missing the required parameter 'path' when calling deleteNode"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling deleteNode",
        new ApiException(400, "Missing the required parameter 'name' when calling deleteNode"));
    }

    // create path and map variables
    String path = "/{path}/{name}".replaceAll("\\{" + "path" + "\\}", apiInvoker.escapeString(path.toString())).replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param path    * @param name 
  */
  public void deleteNode (String path, String name, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'path' is set
    if (path == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'path' when calling deleteNode",
        new ApiException(400, "Missing the required parameter 'path' when calling deleteNode"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling deleteNode",
        new ApiException(400, "Missing the required parameter 'name' when calling deleteNode"));
    }

    // create path and map variables
    String path = "/{path}/{name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "path" + "\\}", apiInvoker.escapeString(path.toString())).replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param runmode 
   * @param name 
   * @return void
  */
  public void getAgent (String runmode, String name) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'runmode' is set
    if (runmode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'runmode' when calling getAgent",
        new ApiException(400, "Missing the required parameter 'runmode' when calling getAgent"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling getAgent",
        new ApiException(400, "Missing the required parameter 'name' when calling getAgent"));
    }

    // create path and map variables
    String path = "/etc/replication/agents.{runmode}/{name}".replaceAll("\\{" + "runmode" + "\\}", apiInvoker.escapeString(runmode.toString())).replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param runmode    * @param name 
  */
  public void getAgent (String runmode, String name, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'runmode' is set
    if (runmode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'runmode' when calling getAgent",
        new ApiException(400, "Missing the required parameter 'runmode' when calling getAgent"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling getAgent",
        new ApiException(400, "Missing the required parameter 'name' when calling getAgent"));
    }

    // create path and map variables
    String path = "/etc/replication/agents.{runmode}/{name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "runmode" + "\\}", apiInvoker.escapeString(runmode.toString())).replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param runmode 
   * @return String
  */
  public String getAgents (String runmode) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'runmode' is set
    if (runmode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'runmode' when calling getAgents",
        new ApiException(400, "Missing the required parameter 'runmode' when calling getAgents"));
    }

    // create path and map variables
    String path = "/etc/replication/agents.{runmode}.-1.json".replaceAll("\\{" + "runmode" + "\\}", apiInvoker.escapeString(runmode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param runmode 
  */
  public void getAgents (String runmode, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'runmode' is set
    if (runmode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'runmode' when calling getAgents",
        new ApiException(400, "Missing the required parameter 'runmode' when calling getAgents"));
    }

    // create path and map variables
    String path = "/etc/replication/agents.{runmode}.-1.json".replaceAll("\\{format\\}","json").replaceAll("\\{" + "runmode" + "\\}", apiInvoker.escapeString(runmode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param intermediatePath 
   * @param authorizableId 
   * @return KeystoreInfo
  */
  public KeystoreInfo getAuthorizableKeystore (String intermediatePath, String authorizableId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'intermediatePath' is set
    if (intermediatePath == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'intermediatePath' when calling getAuthorizableKeystore",
        new ApiException(400, "Missing the required parameter 'intermediatePath' when calling getAuthorizableKeystore"));
    }
    // verify the required parameter 'authorizableId' is set
    if (authorizableId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorizableId' when calling getAuthorizableKeystore",
        new ApiException(400, "Missing the required parameter 'authorizableId' when calling getAuthorizableKeystore"));
    }

    // create path and map variables
    String path = "/{intermediatePath}/{authorizableId}.ks.json".replaceAll("\\{" + "intermediatePath" + "\\}", apiInvoker.escapeString(intermediatePath.toString())).replaceAll("\\{" + "authorizableId" + "\\}", apiInvoker.escapeString(authorizableId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (KeystoreInfo) ApiInvoker.deserialize(localVarResponse, "", KeystoreInfo.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param intermediatePath    * @param authorizableId 
  */
  public void getAuthorizableKeystore (String intermediatePath, String authorizableId, final Response.Listener<KeystoreInfo> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'intermediatePath' is set
    if (intermediatePath == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'intermediatePath' when calling getAuthorizableKeystore",
        new ApiException(400, "Missing the required parameter 'intermediatePath' when calling getAuthorizableKeystore"));
    }
    // verify the required parameter 'authorizableId' is set
    if (authorizableId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorizableId' when calling getAuthorizableKeystore",
        new ApiException(400, "Missing the required parameter 'authorizableId' when calling getAuthorizableKeystore"));
    }

    // create path and map variables
    String path = "/{intermediatePath}/{authorizableId}.ks.json".replaceAll("\\{format\\}","json").replaceAll("\\{" + "intermediatePath" + "\\}", apiInvoker.escapeString(intermediatePath.toString())).replaceAll("\\{" + "authorizableId" + "\\}", apiInvoker.escapeString(authorizableId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((KeystoreInfo) ApiInvoker.deserialize(localVarResponse,  "", KeystoreInfo.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param intermediatePath 
   * @param authorizableId 
   * @return File
  */
  public File getKeystore (String intermediatePath, String authorizableId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'intermediatePath' is set
    if (intermediatePath == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'intermediatePath' when calling getKeystore",
        new ApiException(400, "Missing the required parameter 'intermediatePath' when calling getKeystore"));
    }
    // verify the required parameter 'authorizableId' is set
    if (authorizableId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorizableId' when calling getKeystore",
        new ApiException(400, "Missing the required parameter 'authorizableId' when calling getKeystore"));
    }

    // create path and map variables
    String path = "/{intermediatePath}/{authorizableId}/keystore/store.p12".replaceAll("\\{" + "intermediatePath" + "\\}", apiInvoker.escapeString(intermediatePath.toString())).replaceAll("\\{" + "authorizableId" + "\\}", apiInvoker.escapeString(authorizableId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (File) ApiInvoker.deserialize(localVarResponse, "", File.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param intermediatePath    * @param authorizableId 
  */
  public void getKeystore (String intermediatePath, String authorizableId, final Response.Listener<File> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'intermediatePath' is set
    if (intermediatePath == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'intermediatePath' when calling getKeystore",
        new ApiException(400, "Missing the required parameter 'intermediatePath' when calling getKeystore"));
    }
    // verify the required parameter 'authorizableId' is set
    if (authorizableId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorizableId' when calling getKeystore",
        new ApiException(400, "Missing the required parameter 'authorizableId' when calling getKeystore"));
    }

    // create path and map variables
    String path = "/{intermediatePath}/{authorizableId}/keystore/store.p12".replaceAll("\\{format\\}","json").replaceAll("\\{" + "intermediatePath" + "\\}", apiInvoker.escapeString(intermediatePath.toString())).replaceAll("\\{" + "authorizableId" + "\\}", apiInvoker.escapeString(authorizableId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((File) ApiInvoker.deserialize(localVarResponse,  "", File.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param path 
   * @param name 
   * @return void
  */
  public void getNode (String path, String name) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'path' is set
    if (path == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'path' when calling getNode",
        new ApiException(400, "Missing the required parameter 'path' when calling getNode"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling getNode",
        new ApiException(400, "Missing the required parameter 'name' when calling getNode"));
    }

    // create path and map variables
    String path = "/{path}/{name}".replaceAll("\\{" + "path" + "\\}", apiInvoker.escapeString(path.toString())).replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param path    * @param name 
  */
  public void getNode (String path, String name, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'path' is set
    if (path == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'path' when calling getNode",
        new ApiException(400, "Missing the required parameter 'path' when calling getNode"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling getNode",
        new ApiException(400, "Missing the required parameter 'name' when calling getNode"));
    }

    // create path and map variables
    String path = "/{path}/{name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "path" + "\\}", apiInvoker.escapeString(path.toString())).replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param group 
   * @param name 
   * @param version 
   * @return File
  */
  public File getPackage (String group, String name, String version) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'group' is set
    if (group == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'group' when calling getPackage",
        new ApiException(400, "Missing the required parameter 'group' when calling getPackage"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling getPackage",
        new ApiException(400, "Missing the required parameter 'name' when calling getPackage"));
    }
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling getPackage",
        new ApiException(400, "Missing the required parameter 'version' when calling getPackage"));
    }

    // create path and map variables
    String path = "/etc/packages/{group}/{name}-{version}.zip".replaceAll("\\{" + "group" + "\\}", apiInvoker.escapeString(group.toString())).replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString())).replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (File) ApiInvoker.deserialize(localVarResponse, "", File.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param group    * @param name    * @param version 
  */
  public void getPackage (String group, String name, String version, final Response.Listener<File> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'group' is set
    if (group == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'group' when calling getPackage",
        new ApiException(400, "Missing the required parameter 'group' when calling getPackage"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling getPackage",
        new ApiException(400, "Missing the required parameter 'name' when calling getPackage"));
    }
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling getPackage",
        new ApiException(400, "Missing the required parameter 'version' when calling getPackage"));
    }

    // create path and map variables
    String path = "/etc/packages/{group}/{name}-{version}.zip".replaceAll("\\{format\\}","json").replaceAll("\\{" + "group" + "\\}", apiInvoker.escapeString(group.toString())).replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString())).replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((File) ApiInvoker.deserialize(localVarResponse,  "", File.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param group 
   * @param name 
   * @param version 
   * @return String
  */
  public String getPackageFilter (String group, String name, String version) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'group' is set
    if (group == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'group' when calling getPackageFilter",
        new ApiException(400, "Missing the required parameter 'group' when calling getPackageFilter"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling getPackageFilter",
        new ApiException(400, "Missing the required parameter 'name' when calling getPackageFilter"));
    }
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling getPackageFilter",
        new ApiException(400, "Missing the required parameter 'version' when calling getPackageFilter"));
    }

    // create path and map variables
    String path = "/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json".replaceAll("\\{" + "group" + "\\}", apiInvoker.escapeString(group.toString())).replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString())).replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param group    * @param name    * @param version 
  */
  public void getPackageFilter (String group, String name, String version, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'group' is set
    if (group == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'group' when calling getPackageFilter",
        new ApiException(400, "Missing the required parameter 'group' when calling getPackageFilter"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling getPackageFilter",
        new ApiException(400, "Missing the required parameter 'name' when calling getPackageFilter"));
    }
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling getPackageFilter",
        new ApiException(400, "Missing the required parameter 'version' when calling getPackageFilter"));
    }

    // create path and map variables
    String path = "/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json".replaceAll("\\{format\\}","json").replaceAll("\\{" + "group" + "\\}", apiInvoker.escapeString(group.toString())).replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString())).replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param path 
   * @param pLimit 
   * @param _1property 
   * @param _1propertyValue 
   * @return String
  */
  public String getQuery (String path, BigDecimal pLimit, String _1property, String _1propertyValue) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'path' is set
    if (path == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'path' when calling getQuery",
        new ApiException(400, "Missing the required parameter 'path' when calling getQuery"));
    }
    // verify the required parameter 'pLimit' is set
    if (pLimit == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pLimit' when calling getQuery",
        new ApiException(400, "Missing the required parameter 'pLimit' when calling getQuery"));
    }
    // verify the required parameter '_1property' is set
    if (_1property == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_1property' when calling getQuery",
        new ApiException(400, "Missing the required parameter '_1property' when calling getQuery"));
    }
    // verify the required parameter '_1propertyValue' is set
    if (_1propertyValue == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_1propertyValue' when calling getQuery",
        new ApiException(400, "Missing the required parameter '_1propertyValue' when calling getQuery"));
    }

    // create path and map variables
    String path = "/bin/querybuilder.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "path", path));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "p.limit", pLimit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "1_property", _1property));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "1_property.value", _1propertyValue));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param path    * @param pLimit    * @param _1property    * @param _1propertyValue 
  */
  public void getQuery (String path, BigDecimal pLimit, String _1property, String _1propertyValue, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'path' is set
    if (path == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'path' when calling getQuery",
        new ApiException(400, "Missing the required parameter 'path' when calling getQuery"));
    }
    // verify the required parameter 'pLimit' is set
    if (pLimit == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pLimit' when calling getQuery",
        new ApiException(400, "Missing the required parameter 'pLimit' when calling getQuery"));
    }
    // verify the required parameter '_1property' is set
    if (_1property == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_1property' when calling getQuery",
        new ApiException(400, "Missing the required parameter '_1property' when calling getQuery"));
    }
    // verify the required parameter '_1propertyValue' is set
    if (_1propertyValue == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_1propertyValue' when calling getQuery",
        new ApiException(400, "Missing the required parameter '_1propertyValue' when calling getQuery"));
    }

    // create path and map variables
    String path = "/bin/querybuilder.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "path", path));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "p.limit", pLimit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "1_property", _1property));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "1_property.value", _1propertyValue));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @return File
  */
  public File getTruststore () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/etc/truststore/truststore.p12";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (File) ApiInvoker.deserialize(localVarResponse, "", File.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 

  */
  public void getTruststore (final Response.Listener<File> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/etc/truststore/truststore.p12".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((File) ApiInvoker.deserialize(localVarResponse,  "", File.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @return TruststoreInfo
  */
  public TruststoreInfo getTruststoreInfo () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/libs/granite/security/truststore.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TruststoreInfo) ApiInvoker.deserialize(localVarResponse, "", TruststoreInfo.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 

  */
  public void getTruststoreInfo (final Response.Listener<TruststoreInfo> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/libs/granite/security/truststore.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TruststoreInfo) ApiInvoker.deserialize(localVarResponse,  "", TruststoreInfo.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param runmode 
   * @param name 
   * @param jcrcontentCqdistribute 
   * @param jcrcontentCqdistributeTypeHint 
   * @param jcrcontentCqname 
   * @param jcrcontentCqtemplate 
   * @param jcrcontentEnabled 
   * @param jcrcontentJcrdescription 
   * @param jcrcontentJcrlastModified 
   * @param jcrcontentJcrlastModifiedBy 
   * @param jcrcontentJcrmixinTypes 
   * @param jcrcontentJcrtitle 
   * @param jcrcontentLogLevel 
   * @param jcrcontentNoStatusUpdate 
   * @param jcrcontentNoVersioning 
   * @param jcrcontentProtocolConnectTimeout 
   * @param jcrcontentProtocolHTTPConnectionClosed 
   * @param jcrcontentProtocolHTTPExpired 
   * @param jcrcontentProtocolHTTPHeaders 
   * @param jcrcontentProtocolHTTPHeadersTypeHint 
   * @param jcrcontentProtocolHTTPMethod 
   * @param jcrcontentProtocolHTTPSRelaxed 
   * @param jcrcontentProtocolInterface 
   * @param jcrcontentProtocolSocketTimeout 
   * @param jcrcontentProtocolVersion 
   * @param jcrcontentProxyNTLMDomain 
   * @param jcrcontentProxyNTLMHost 
   * @param jcrcontentProxyHost 
   * @param jcrcontentProxyPassword 
   * @param jcrcontentProxyPort 
   * @param jcrcontentProxyUser 
   * @param jcrcontentQueueBatchMaxSize 
   * @param jcrcontentQueueBatchMode 
   * @param jcrcontentQueueBatchWaitTime 
   * @param jcrcontentRetryDelay 
   * @param jcrcontentReverseReplication 
   * @param jcrcontentSerializationType 
   * @param jcrcontentSlingresourceType 
   * @param jcrcontentSsl 
   * @param jcrcontentTransportNTLMDomain 
   * @param jcrcontentTransportNTLMHost 
   * @param jcrcontentTransportPassword 
   * @param jcrcontentTransportUri 
   * @param jcrcontentTransportUser 
   * @param jcrcontentTriggerDistribute 
   * @param jcrcontentTriggerModified 
   * @param jcrcontentTriggerOnOffTime 
   * @param jcrcontentTriggerReceive 
   * @param jcrcontentTriggerSpecific 
   * @param jcrcontentUserId 
   * @param jcrprimaryType 
   * @param operation 
   * @return void
  */
  public void postAgent (String runmode, String name, Boolean jcrcontentCqdistribute, String jcrcontentCqdistributeTypeHint, String jcrcontentCqname, String jcrcontentCqtemplate, Boolean jcrcontentEnabled, String jcrcontentJcrdescription, String jcrcontentJcrlastModified, String jcrcontentJcrlastModifiedBy, String jcrcontentJcrmixinTypes, String jcrcontentJcrtitle, String jcrcontentLogLevel, Boolean jcrcontentNoStatusUpdate, Boolean jcrcontentNoVersioning, BigDecimal jcrcontentProtocolConnectTimeout, Boolean jcrcontentProtocolHTTPConnectionClosed, String jcrcontentProtocolHTTPExpired, List<String> jcrcontentProtocolHTTPHeaders, String jcrcontentProtocolHTTPHeadersTypeHint, String jcrcontentProtocolHTTPMethod, Boolean jcrcontentProtocolHTTPSRelaxed, String jcrcontentProtocolInterface, BigDecimal jcrcontentProtocolSocketTimeout, String jcrcontentProtocolVersion, String jcrcontentProxyNTLMDomain, String jcrcontentProxyNTLMHost, String jcrcontentProxyHost, String jcrcontentProxyPassword, BigDecimal jcrcontentProxyPort, String jcrcontentProxyUser, BigDecimal jcrcontentQueueBatchMaxSize, String jcrcontentQueueBatchMode, BigDecimal jcrcontentQueueBatchWaitTime, String jcrcontentRetryDelay, Boolean jcrcontentReverseReplication, String jcrcontentSerializationType, String jcrcontentSlingresourceType, String jcrcontentSsl, String jcrcontentTransportNTLMDomain, String jcrcontentTransportNTLMHost, String jcrcontentTransportPassword, String jcrcontentTransportUri, String jcrcontentTransportUser, Boolean jcrcontentTriggerDistribute, Boolean jcrcontentTriggerModified, Boolean jcrcontentTriggerOnOffTime, Boolean jcrcontentTriggerReceive, Boolean jcrcontentTriggerSpecific, String jcrcontentUserId, String jcrprimaryType, String operation) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'runmode' is set
    if (runmode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'runmode' when calling postAgent",
        new ApiException(400, "Missing the required parameter 'runmode' when calling postAgent"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling postAgent",
        new ApiException(400, "Missing the required parameter 'name' when calling postAgent"));
    }

    // create path and map variables
    String path = "/etc/replication/agents.{runmode}/{name}".replaceAll("\\{" + "runmode" + "\\}", apiInvoker.escapeString(runmode.toString())).replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/cq:distribute", jcrcontentCqdistribute));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/cq:distribute@TypeHint", jcrcontentCqdistributeTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/cq:name", jcrcontentCqname));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/cq:template", jcrcontentCqtemplate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/enabled", jcrcontentEnabled));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/jcr:description", jcrcontentJcrdescription));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/jcr:lastModified", jcrcontentJcrlastModified));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/jcr:lastModifiedBy", jcrcontentJcrlastModifiedBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/jcr:mixinTypes", jcrcontentJcrmixinTypes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/jcr:title", jcrcontentJcrtitle));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/logLevel", jcrcontentLogLevel));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/noStatusUpdate", jcrcontentNoStatusUpdate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/noVersioning", jcrcontentNoVersioning));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/protocolConnectTimeout", jcrcontentProtocolConnectTimeout));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/protocolHTTPConnectionClosed", jcrcontentProtocolHTTPConnectionClosed));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/protocolHTTPExpired", jcrcontentProtocolHTTPExpired));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "jcr:content/protocolHTTPHeaders", jcrcontentProtocolHTTPHeaders));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/protocolHTTPHeaders@TypeHint", jcrcontentProtocolHTTPHeadersTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/protocolHTTPMethod", jcrcontentProtocolHTTPMethod));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/protocolHTTPSRelaxed", jcrcontentProtocolHTTPSRelaxed));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/protocolInterface", jcrcontentProtocolInterface));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/protocolSocketTimeout", jcrcontentProtocolSocketTimeout));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/protocolVersion", jcrcontentProtocolVersion));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/proxyNTLMDomain", jcrcontentProxyNTLMDomain));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/proxyNTLMHost", jcrcontentProxyNTLMHost));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/proxyHost", jcrcontentProxyHost));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/proxyPassword", jcrcontentProxyPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/proxyPort", jcrcontentProxyPort));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/proxyUser", jcrcontentProxyUser));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/queueBatchMaxSize", jcrcontentQueueBatchMaxSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/queueBatchMode", jcrcontentQueueBatchMode));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/queueBatchWaitTime", jcrcontentQueueBatchWaitTime));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/retryDelay", jcrcontentRetryDelay));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/reverseReplication", jcrcontentReverseReplication));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/serializationType", jcrcontentSerializationType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/sling:resourceType", jcrcontentSlingresourceType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/ssl", jcrcontentSsl));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/transportNTLMDomain", jcrcontentTransportNTLMDomain));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/transportNTLMHost", jcrcontentTransportNTLMHost));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/transportPassword", jcrcontentTransportPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/transportUri", jcrcontentTransportUri));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/transportUser", jcrcontentTransportUser));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/triggerDistribute", jcrcontentTriggerDistribute));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/triggerModified", jcrcontentTriggerModified));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/triggerOnOffTime", jcrcontentTriggerOnOffTime));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/triggerReceive", jcrcontentTriggerReceive));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/triggerSpecific", jcrcontentTriggerSpecific));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/userId", jcrcontentUserId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:primaryType", jcrprimaryType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", ":operation", operation));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param runmode    * @param name    * @param jcrcontentCqdistribute    * @param jcrcontentCqdistributeTypeHint    * @param jcrcontentCqname    * @param jcrcontentCqtemplate    * @param jcrcontentEnabled    * @param jcrcontentJcrdescription    * @param jcrcontentJcrlastModified    * @param jcrcontentJcrlastModifiedBy    * @param jcrcontentJcrmixinTypes    * @param jcrcontentJcrtitle    * @param jcrcontentLogLevel    * @param jcrcontentNoStatusUpdate    * @param jcrcontentNoVersioning    * @param jcrcontentProtocolConnectTimeout    * @param jcrcontentProtocolHTTPConnectionClosed    * @param jcrcontentProtocolHTTPExpired    * @param jcrcontentProtocolHTTPHeaders    * @param jcrcontentProtocolHTTPHeadersTypeHint    * @param jcrcontentProtocolHTTPMethod    * @param jcrcontentProtocolHTTPSRelaxed    * @param jcrcontentProtocolInterface    * @param jcrcontentProtocolSocketTimeout    * @param jcrcontentProtocolVersion    * @param jcrcontentProxyNTLMDomain    * @param jcrcontentProxyNTLMHost    * @param jcrcontentProxyHost    * @param jcrcontentProxyPassword    * @param jcrcontentProxyPort    * @param jcrcontentProxyUser    * @param jcrcontentQueueBatchMaxSize    * @param jcrcontentQueueBatchMode    * @param jcrcontentQueueBatchWaitTime    * @param jcrcontentRetryDelay    * @param jcrcontentReverseReplication    * @param jcrcontentSerializationType    * @param jcrcontentSlingresourceType    * @param jcrcontentSsl    * @param jcrcontentTransportNTLMDomain    * @param jcrcontentTransportNTLMHost    * @param jcrcontentTransportPassword    * @param jcrcontentTransportUri    * @param jcrcontentTransportUser    * @param jcrcontentTriggerDistribute    * @param jcrcontentTriggerModified    * @param jcrcontentTriggerOnOffTime    * @param jcrcontentTriggerReceive    * @param jcrcontentTriggerSpecific    * @param jcrcontentUserId    * @param jcrprimaryType    * @param operation 
  */
  public void postAgent (String runmode, String name, Boolean jcrcontentCqdistribute, String jcrcontentCqdistributeTypeHint, String jcrcontentCqname, String jcrcontentCqtemplate, Boolean jcrcontentEnabled, String jcrcontentJcrdescription, String jcrcontentJcrlastModified, String jcrcontentJcrlastModifiedBy, String jcrcontentJcrmixinTypes, String jcrcontentJcrtitle, String jcrcontentLogLevel, Boolean jcrcontentNoStatusUpdate, Boolean jcrcontentNoVersioning, BigDecimal jcrcontentProtocolConnectTimeout, Boolean jcrcontentProtocolHTTPConnectionClosed, String jcrcontentProtocolHTTPExpired, List<String> jcrcontentProtocolHTTPHeaders, String jcrcontentProtocolHTTPHeadersTypeHint, String jcrcontentProtocolHTTPMethod, Boolean jcrcontentProtocolHTTPSRelaxed, String jcrcontentProtocolInterface, BigDecimal jcrcontentProtocolSocketTimeout, String jcrcontentProtocolVersion, String jcrcontentProxyNTLMDomain, String jcrcontentProxyNTLMHost, String jcrcontentProxyHost, String jcrcontentProxyPassword, BigDecimal jcrcontentProxyPort, String jcrcontentProxyUser, BigDecimal jcrcontentQueueBatchMaxSize, String jcrcontentQueueBatchMode, BigDecimal jcrcontentQueueBatchWaitTime, String jcrcontentRetryDelay, Boolean jcrcontentReverseReplication, String jcrcontentSerializationType, String jcrcontentSlingresourceType, String jcrcontentSsl, String jcrcontentTransportNTLMDomain, String jcrcontentTransportNTLMHost, String jcrcontentTransportPassword, String jcrcontentTransportUri, String jcrcontentTransportUser, Boolean jcrcontentTriggerDistribute, Boolean jcrcontentTriggerModified, Boolean jcrcontentTriggerOnOffTime, Boolean jcrcontentTriggerReceive, Boolean jcrcontentTriggerSpecific, String jcrcontentUserId, String jcrprimaryType, String operation, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'runmode' is set
    if (runmode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'runmode' when calling postAgent",
        new ApiException(400, "Missing the required parameter 'runmode' when calling postAgent"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling postAgent",
        new ApiException(400, "Missing the required parameter 'name' when calling postAgent"));
    }

    // create path and map variables
    String path = "/etc/replication/agents.{runmode}/{name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "runmode" + "\\}", apiInvoker.escapeString(runmode.toString())).replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/cq:distribute", jcrcontentCqdistribute));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/cq:distribute@TypeHint", jcrcontentCqdistributeTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/cq:name", jcrcontentCqname));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/cq:template", jcrcontentCqtemplate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/enabled", jcrcontentEnabled));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/jcr:description", jcrcontentJcrdescription));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/jcr:lastModified", jcrcontentJcrlastModified));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/jcr:lastModifiedBy", jcrcontentJcrlastModifiedBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/jcr:mixinTypes", jcrcontentJcrmixinTypes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/jcr:title", jcrcontentJcrtitle));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/logLevel", jcrcontentLogLevel));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/noStatusUpdate", jcrcontentNoStatusUpdate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/noVersioning", jcrcontentNoVersioning));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/protocolConnectTimeout", jcrcontentProtocolConnectTimeout));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/protocolHTTPConnectionClosed", jcrcontentProtocolHTTPConnectionClosed));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/protocolHTTPExpired", jcrcontentProtocolHTTPExpired));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "jcr:content/protocolHTTPHeaders", jcrcontentProtocolHTTPHeaders));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/protocolHTTPHeaders@TypeHint", jcrcontentProtocolHTTPHeadersTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/protocolHTTPMethod", jcrcontentProtocolHTTPMethod));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/protocolHTTPSRelaxed", jcrcontentProtocolHTTPSRelaxed));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/protocolInterface", jcrcontentProtocolInterface));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/protocolSocketTimeout", jcrcontentProtocolSocketTimeout));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/protocolVersion", jcrcontentProtocolVersion));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/proxyNTLMDomain", jcrcontentProxyNTLMDomain));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/proxyNTLMHost", jcrcontentProxyNTLMHost));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/proxyHost", jcrcontentProxyHost));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/proxyPassword", jcrcontentProxyPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/proxyPort", jcrcontentProxyPort));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/proxyUser", jcrcontentProxyUser));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/queueBatchMaxSize", jcrcontentQueueBatchMaxSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/queueBatchMode", jcrcontentQueueBatchMode));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/queueBatchWaitTime", jcrcontentQueueBatchWaitTime));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/retryDelay", jcrcontentRetryDelay));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/reverseReplication", jcrcontentReverseReplication));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/serializationType", jcrcontentSerializationType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/sling:resourceType", jcrcontentSlingresourceType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/ssl", jcrcontentSsl));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/transportNTLMDomain", jcrcontentTransportNTLMDomain));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/transportNTLMHost", jcrcontentTransportNTLMHost));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/transportPassword", jcrcontentTransportPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/transportUri", jcrcontentTransportUri));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/transportUser", jcrcontentTransportUser));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/triggerDistribute", jcrcontentTriggerDistribute));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/triggerModified", jcrcontentTriggerModified));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/triggerOnOffTime", jcrcontentTriggerOnOffTime));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/triggerReceive", jcrcontentTriggerReceive));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/triggerSpecific", jcrcontentTriggerSpecific));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:content/userId", jcrcontentUserId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:primaryType", jcrprimaryType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", ":operation", operation));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param intermediatePath 
   * @param authorizableId 
   * @param operation 
   * @param currentPassword 
   * @param newPassword 
   * @param rePassword 
   * @param keyPassword 
   * @param keyStorePass 
   * @param alias 
   * @param newAlias 
   * @param removeAlias 
   * @param certChain 
   * @param pk 
   * @param keyStore 
   * @return KeystoreInfo
  */
  public KeystoreInfo postAuthorizableKeystore (String intermediatePath, String authorizableId, String operation, String currentPassword, String newPassword, String rePassword, String keyPassword, String keyStorePass, String alias, String newAlias, String removeAlias, File certChain, File pk, File keyStore) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'intermediatePath' is set
    if (intermediatePath == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'intermediatePath' when calling postAuthorizableKeystore",
        new ApiException(400, "Missing the required parameter 'intermediatePath' when calling postAuthorizableKeystore"));
    }
    // verify the required parameter 'authorizableId' is set
    if (authorizableId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorizableId' when calling postAuthorizableKeystore",
        new ApiException(400, "Missing the required parameter 'authorizableId' when calling postAuthorizableKeystore"));
    }

    // create path and map variables
    String path = "/{intermediatePath}/{authorizableId}.ks.html".replaceAll("\\{" + "intermediatePath" + "\\}", apiInvoker.escapeString(intermediatePath.toString())).replaceAll("\\{" + "authorizableId" + "\\}", apiInvoker.escapeString(authorizableId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", ":operation", operation));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "currentPassword", currentPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "newPassword", newPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rePassword", rePassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "keyPassword", keyPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "keyStorePass", keyStorePass));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "alias", alias));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "newAlias", newAlias));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "removeAlias", removeAlias));
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (certChain != null) {
        localVarBuilder.addBinaryBody("cert-chain", certChain);
      }
      if (pk != null) {
        localVarBuilder.addBinaryBody("pk", pk);
      }
      if (keyStore != null) {
        localVarBuilder.addBinaryBody("keyStore", keyStore);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (KeystoreInfo) ApiInvoker.deserialize(localVarResponse, "", KeystoreInfo.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param intermediatePath    * @param authorizableId    * @param operation    * @param currentPassword    * @param newPassword    * @param rePassword    * @param keyPassword    * @param keyStorePass    * @param alias    * @param newAlias    * @param removeAlias    * @param certChain    * @param pk    * @param keyStore 
  */
  public void postAuthorizableKeystore (String intermediatePath, String authorizableId, String operation, String currentPassword, String newPassword, String rePassword, String keyPassword, String keyStorePass, String alias, String newAlias, String removeAlias, File certChain, File pk, File keyStore, final Response.Listener<KeystoreInfo> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'intermediatePath' is set
    if (intermediatePath == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'intermediatePath' when calling postAuthorizableKeystore",
        new ApiException(400, "Missing the required parameter 'intermediatePath' when calling postAuthorizableKeystore"));
    }
    // verify the required parameter 'authorizableId' is set
    if (authorizableId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorizableId' when calling postAuthorizableKeystore",
        new ApiException(400, "Missing the required parameter 'authorizableId' when calling postAuthorizableKeystore"));
    }

    // create path and map variables
    String path = "/{intermediatePath}/{authorizableId}.ks.html".replaceAll("\\{format\\}","json").replaceAll("\\{" + "intermediatePath" + "\\}", apiInvoker.escapeString(intermediatePath.toString())).replaceAll("\\{" + "authorizableId" + "\\}", apiInvoker.escapeString(authorizableId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", ":operation", operation));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "currentPassword", currentPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "newPassword", newPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rePassword", rePassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "keyPassword", keyPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "keyStorePass", keyStorePass));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "alias", alias));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "newAlias", newAlias));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "removeAlias", removeAlias));


    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (certChain != null) {
        localVarBuilder.addBinaryBody("cert-chain", certChain);
      }
      
      if (pk != null) {
        localVarBuilder.addBinaryBody("pk", pk);
      }
      
      if (keyStore != null) {
        localVarBuilder.addBinaryBody("keyStore", keyStore);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      


    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((KeystoreInfo) ApiInvoker.deserialize(localVarResponse,  "", KeystoreInfo.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param authorizableId 
   * @param intermediatePath 
   * @param createUser 
   * @param createGroup 
   * @param reppassword 
   * @param profileGivenName 
   * @return String
  */
  public String postAuthorizables (String authorizableId, String intermediatePath, String createUser, String createGroup, String reppassword, String profileGivenName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'authorizableId' is set
    if (authorizableId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorizableId' when calling postAuthorizables",
        new ApiException(400, "Missing the required parameter 'authorizableId' when calling postAuthorizables"));
    }
    // verify the required parameter 'intermediatePath' is set
    if (intermediatePath == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'intermediatePath' when calling postAuthorizables",
        new ApiException(400, "Missing the required parameter 'intermediatePath' when calling postAuthorizables"));
    }

    // create path and map variables
    String path = "/libs/granite/security/post/authorizables";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "authorizableId", authorizableId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "intermediatePath", intermediatePath));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "createUser", createUser));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "createGroup", createGroup));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rep:password", reppassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "profile/givenName", profileGivenName));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param authorizableId    * @param intermediatePath    * @param createUser    * @param createGroup    * @param reppassword    * @param profileGivenName 
  */
  public void postAuthorizables (String authorizableId, String intermediatePath, String createUser, String createGroup, String reppassword, String profileGivenName, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'authorizableId' is set
    if (authorizableId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorizableId' when calling postAuthorizables",
        new ApiException(400, "Missing the required parameter 'authorizableId' when calling postAuthorizables"));
    }
    // verify the required parameter 'intermediatePath' is set
    if (intermediatePath == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'intermediatePath' when calling postAuthorizables",
        new ApiException(400, "Missing the required parameter 'intermediatePath' when calling postAuthorizables"));
    }

    // create path and map variables
    String path = "/libs/granite/security/post/authorizables".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "authorizableId", authorizableId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "intermediatePath", intermediatePath));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "createUser", createUser));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "createGroup", createGroup));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rep:password", reppassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "profile/givenName", profileGivenName));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param keyStorePassword 
   * @param keyStorePasswordTypeHint 
   * @param serviceRanking 
   * @param serviceRankingTypeHint 
   * @param idpHttpRedirect 
   * @param idpHttpRedirectTypeHint 
   * @param createUser 
   * @param createUserTypeHint 
   * @param defaultRedirectUrl 
   * @param defaultRedirectUrlTypeHint 
   * @param userIDAttribute 
   * @param userIDAttributeTypeHint 
   * @param defaultGroups 
   * @param defaultGroupsTypeHint 
   * @param idpCertAlias 
   * @param idpCertAliasTypeHint 
   * @param addGroupMemberships 
   * @param addGroupMembershipsTypeHint 
   * @param path 
   * @param pathTypeHint 
   * @param synchronizeAttributes 
   * @param synchronizeAttributesTypeHint 
   * @param clockTolerance 
   * @param clockToleranceTypeHint 
   * @param groupMembershipAttribute 
   * @param groupMembershipAttributeTypeHint 
   * @param idpUrl 
   * @param idpUrlTypeHint 
   * @param logoutUrl 
   * @param logoutUrlTypeHint 
   * @param serviceProviderEntityId 
   * @param serviceProviderEntityIdTypeHint 
   * @param assertionConsumerServiceURL 
   * @param assertionConsumerServiceURLTypeHint 
   * @param handleLogout 
   * @param handleLogoutTypeHint 
   * @param spPrivateKeyAlias 
   * @param spPrivateKeyAliasTypeHint 
   * @param useEncryption 
   * @param useEncryptionTypeHint 
   * @param nameIdFormat 
   * @param nameIdFormatTypeHint 
   * @param digestMethod 
   * @param digestMethodTypeHint 
   * @param signatureMethod 
   * @param signatureMethodTypeHint 
   * @param userIntermediatePath 
   * @param userIntermediatePathTypeHint 
   * @return void
  */
  public void postConfigAdobeGraniteSamlAuthenticationHandler (String keyStorePassword, String keyStorePasswordTypeHint, Integer serviceRanking, String serviceRankingTypeHint, Boolean idpHttpRedirect, String idpHttpRedirectTypeHint, Boolean createUser, String createUserTypeHint, String defaultRedirectUrl, String defaultRedirectUrlTypeHint, String userIDAttribute, String userIDAttributeTypeHint, List<String> defaultGroups, String defaultGroupsTypeHint, String idpCertAlias, String idpCertAliasTypeHint, Boolean addGroupMemberships, String addGroupMembershipsTypeHint, List<String> path, String pathTypeHint, List<String> synchronizeAttributes, String synchronizeAttributesTypeHint, Integer clockTolerance, String clockToleranceTypeHint, String groupMembershipAttribute, String groupMembershipAttributeTypeHint, String idpUrl, String idpUrlTypeHint, String logoutUrl, String logoutUrlTypeHint, String serviceProviderEntityId, String serviceProviderEntityIdTypeHint, String assertionConsumerServiceURL, String assertionConsumerServiceURLTypeHint, Boolean handleLogout, String handleLogoutTypeHint, String spPrivateKeyAlias, String spPrivateKeyAliasTypeHint, Boolean useEncryption, String useEncryptionTypeHint, String nameIdFormat, String nameIdFormatTypeHint, String digestMethod, String digestMethodTypeHint, String signatureMethod, String signatureMethodTypeHint, String userIntermediatePath, String userIntermediatePathTypeHint) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "keyStorePassword", keyStorePassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "keyStorePassword@TypeHint", keyStorePasswordTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "service.ranking", serviceRanking));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "service.ranking@TypeHint", serviceRankingTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "idpHttpRedirect", idpHttpRedirect));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "idpHttpRedirect@TypeHint", idpHttpRedirectTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "createUser", createUser));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "createUser@TypeHint", createUserTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "defaultRedirectUrl", defaultRedirectUrl));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "defaultRedirectUrl@TypeHint", defaultRedirectUrlTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "userIDAttribute", userIDAttribute));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "userIDAttribute@TypeHint", userIDAttributeTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "defaultGroups", defaultGroups));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "defaultGroups@TypeHint", defaultGroupsTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "idpCertAlias", idpCertAlias));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "idpCertAlias@TypeHint", idpCertAliasTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "addGroupMemberships", addGroupMemberships));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "addGroupMemberships@TypeHint", addGroupMembershipsTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "path", path));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "path@TypeHint", pathTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "synchronizeAttributes", synchronizeAttributes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "synchronizeAttributes@TypeHint", synchronizeAttributesTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "clockTolerance", clockTolerance));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "clockTolerance@TypeHint", clockToleranceTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "groupMembershipAttribute", groupMembershipAttribute));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "groupMembershipAttribute@TypeHint", groupMembershipAttributeTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "idpUrl", idpUrl));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "idpUrl@TypeHint", idpUrlTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "logoutUrl", logoutUrl));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "logoutUrl@TypeHint", logoutUrlTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "serviceProviderEntityId", serviceProviderEntityId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "serviceProviderEntityId@TypeHint", serviceProviderEntityIdTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "assertionConsumerServiceURL", assertionConsumerServiceURL));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "assertionConsumerServiceURL@TypeHint", assertionConsumerServiceURLTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "handleLogout", handleLogout));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "handleLogout@TypeHint", handleLogoutTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "spPrivateKeyAlias", spPrivateKeyAlias));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "spPrivateKeyAlias@TypeHint", spPrivateKeyAliasTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useEncryption", useEncryption));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useEncryption@TypeHint", useEncryptionTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "nameIdFormat", nameIdFormat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "nameIdFormat@TypeHint", nameIdFormatTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "digestMethod", digestMethod));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "digestMethod@TypeHint", digestMethodTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "signatureMethod", signatureMethod));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "signatureMethod@TypeHint", signatureMethodTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "userIntermediatePath", userIntermediatePath));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "userIntermediatePath@TypeHint", userIntermediatePathTypeHint));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param keyStorePassword    * @param keyStorePasswordTypeHint    * @param serviceRanking    * @param serviceRankingTypeHint    * @param idpHttpRedirect    * @param idpHttpRedirectTypeHint    * @param createUser    * @param createUserTypeHint    * @param defaultRedirectUrl    * @param defaultRedirectUrlTypeHint    * @param userIDAttribute    * @param userIDAttributeTypeHint    * @param defaultGroups    * @param defaultGroupsTypeHint    * @param idpCertAlias    * @param idpCertAliasTypeHint    * @param addGroupMemberships    * @param addGroupMembershipsTypeHint    * @param path    * @param pathTypeHint    * @param synchronizeAttributes    * @param synchronizeAttributesTypeHint    * @param clockTolerance    * @param clockToleranceTypeHint    * @param groupMembershipAttribute    * @param groupMembershipAttributeTypeHint    * @param idpUrl    * @param idpUrlTypeHint    * @param logoutUrl    * @param logoutUrlTypeHint    * @param serviceProviderEntityId    * @param serviceProviderEntityIdTypeHint    * @param assertionConsumerServiceURL    * @param assertionConsumerServiceURLTypeHint    * @param handleLogout    * @param handleLogoutTypeHint    * @param spPrivateKeyAlias    * @param spPrivateKeyAliasTypeHint    * @param useEncryption    * @param useEncryptionTypeHint    * @param nameIdFormat    * @param nameIdFormatTypeHint    * @param digestMethod    * @param digestMethodTypeHint    * @param signatureMethod    * @param signatureMethodTypeHint    * @param userIntermediatePath    * @param userIntermediatePathTypeHint 
  */
  public void postConfigAdobeGraniteSamlAuthenticationHandler (String keyStorePassword, String keyStorePasswordTypeHint, Integer serviceRanking, String serviceRankingTypeHint, Boolean idpHttpRedirect, String idpHttpRedirectTypeHint, Boolean createUser, String createUserTypeHint, String defaultRedirectUrl, String defaultRedirectUrlTypeHint, String userIDAttribute, String userIDAttributeTypeHint, List<String> defaultGroups, String defaultGroupsTypeHint, String idpCertAlias, String idpCertAliasTypeHint, Boolean addGroupMemberships, String addGroupMembershipsTypeHint, List<String> path, String pathTypeHint, List<String> synchronizeAttributes, String synchronizeAttributesTypeHint, Integer clockTolerance, String clockToleranceTypeHint, String groupMembershipAttribute, String groupMembershipAttributeTypeHint, String idpUrl, String idpUrlTypeHint, String logoutUrl, String logoutUrlTypeHint, String serviceProviderEntityId, String serviceProviderEntityIdTypeHint, String assertionConsumerServiceURL, String assertionConsumerServiceURLTypeHint, Boolean handleLogout, String handleLogoutTypeHint, String spPrivateKeyAlias, String spPrivateKeyAliasTypeHint, Boolean useEncryption, String useEncryptionTypeHint, String nameIdFormat, String nameIdFormatTypeHint, String digestMethod, String digestMethodTypeHint, String signatureMethod, String signatureMethodTypeHint, String userIntermediatePath, String userIntermediatePathTypeHint, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "keyStorePassword", keyStorePassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "keyStorePassword@TypeHint", keyStorePasswordTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "service.ranking", serviceRanking));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "service.ranking@TypeHint", serviceRankingTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "idpHttpRedirect", idpHttpRedirect));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "idpHttpRedirect@TypeHint", idpHttpRedirectTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "createUser", createUser));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "createUser@TypeHint", createUserTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "defaultRedirectUrl", defaultRedirectUrl));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "defaultRedirectUrl@TypeHint", defaultRedirectUrlTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "userIDAttribute", userIDAttribute));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "userIDAttribute@TypeHint", userIDAttributeTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "defaultGroups", defaultGroups));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "defaultGroups@TypeHint", defaultGroupsTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "idpCertAlias", idpCertAlias));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "idpCertAlias@TypeHint", idpCertAliasTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "addGroupMemberships", addGroupMemberships));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "addGroupMemberships@TypeHint", addGroupMembershipsTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "path", path));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "path@TypeHint", pathTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "synchronizeAttributes", synchronizeAttributes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "synchronizeAttributes@TypeHint", synchronizeAttributesTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "clockTolerance", clockTolerance));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "clockTolerance@TypeHint", clockToleranceTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "groupMembershipAttribute", groupMembershipAttribute));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "groupMembershipAttribute@TypeHint", groupMembershipAttributeTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "idpUrl", idpUrl));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "idpUrl@TypeHint", idpUrlTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "logoutUrl", logoutUrl));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "logoutUrl@TypeHint", logoutUrlTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "serviceProviderEntityId", serviceProviderEntityId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "serviceProviderEntityId@TypeHint", serviceProviderEntityIdTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "assertionConsumerServiceURL", assertionConsumerServiceURL));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "assertionConsumerServiceURL@TypeHint", assertionConsumerServiceURLTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "handleLogout", handleLogout));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "handleLogout@TypeHint", handleLogoutTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "spPrivateKeyAlias", spPrivateKeyAlias));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "spPrivateKeyAlias@TypeHint", spPrivateKeyAliasTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useEncryption", useEncryption));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useEncryption@TypeHint", useEncryptionTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "nameIdFormat", nameIdFormat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "nameIdFormat@TypeHint", nameIdFormatTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "digestMethod", digestMethod));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "digestMethod@TypeHint", digestMethodTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "signatureMethod", signatureMethod));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "signatureMethod@TypeHint", signatureMethodTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "userIntermediatePath", userIntermediatePath));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "userIntermediatePath@TypeHint", userIntermediatePathTypeHint));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param orgApacheFelixHttpsNio 
   * @param orgApacheFelixHttpsNioTypeHint 
   * @param orgApacheFelixHttpsKeystore 
   * @param orgApacheFelixHttpsKeystoreTypeHint 
   * @param orgApacheFelixHttpsKeystorePassword 
   * @param orgApacheFelixHttpsKeystorePasswordTypeHint 
   * @param orgApacheFelixHttpsKeystoreKey 
   * @param orgApacheFelixHttpsKeystoreKeyTypeHint 
   * @param orgApacheFelixHttpsKeystoreKeyPassword 
   * @param orgApacheFelixHttpsKeystoreKeyPasswordTypeHint 
   * @param orgApacheFelixHttpsTruststore 
   * @param orgApacheFelixHttpsTruststoreTypeHint 
   * @param orgApacheFelixHttpsTruststorePassword 
   * @param orgApacheFelixHttpsTruststorePasswordTypeHint 
   * @param orgApacheFelixHttpsClientcertificate 
   * @param orgApacheFelixHttpsClientcertificateTypeHint 
   * @param orgApacheFelixHttpsEnable 
   * @param orgApacheFelixHttpsEnableTypeHint 
   * @param orgOsgiServiceHttpPortSecure 
   * @param orgOsgiServiceHttpPortSecureTypeHint 
   * @return void
  */
  public void postConfigApacheFelixJettyBasedHttpService (Boolean orgApacheFelixHttpsNio, String orgApacheFelixHttpsNioTypeHint, String orgApacheFelixHttpsKeystore, String orgApacheFelixHttpsKeystoreTypeHint, String orgApacheFelixHttpsKeystorePassword, String orgApacheFelixHttpsKeystorePasswordTypeHint, String orgApacheFelixHttpsKeystoreKey, String orgApacheFelixHttpsKeystoreKeyTypeHint, String orgApacheFelixHttpsKeystoreKeyPassword, String orgApacheFelixHttpsKeystoreKeyPasswordTypeHint, String orgApacheFelixHttpsTruststore, String orgApacheFelixHttpsTruststoreTypeHint, String orgApacheFelixHttpsTruststorePassword, String orgApacheFelixHttpsTruststorePasswordTypeHint, String orgApacheFelixHttpsClientcertificate, String orgApacheFelixHttpsClientcertificateTypeHint, Boolean orgApacheFelixHttpsEnable, String orgApacheFelixHttpsEnableTypeHint, String orgOsgiServiceHttpPortSecure, String orgOsgiServiceHttpPortSecureTypeHint) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/apps/system/config/org.apache.felix.http";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.nio", orgApacheFelixHttpsNio));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.nio@TypeHint", orgApacheFelixHttpsNioTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.keystore", orgApacheFelixHttpsKeystore));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.keystore@TypeHint", orgApacheFelixHttpsKeystoreTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.keystore.password", orgApacheFelixHttpsKeystorePassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.keystore.password@TypeHint", orgApacheFelixHttpsKeystorePasswordTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.keystore.key", orgApacheFelixHttpsKeystoreKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.keystore.key@TypeHint", orgApacheFelixHttpsKeystoreKeyTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.keystore.key.password", orgApacheFelixHttpsKeystoreKeyPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.keystore.key.password@TypeHint", orgApacheFelixHttpsKeystoreKeyPasswordTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.truststore", orgApacheFelixHttpsTruststore));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.truststore@TypeHint", orgApacheFelixHttpsTruststoreTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.truststore.password", orgApacheFelixHttpsTruststorePassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.truststore.password@TypeHint", orgApacheFelixHttpsTruststorePasswordTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.clientcertificate", orgApacheFelixHttpsClientcertificate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.clientcertificate@TypeHint", orgApacheFelixHttpsClientcertificateTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.enable", orgApacheFelixHttpsEnable));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.enable@TypeHint", orgApacheFelixHttpsEnableTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.osgi.service.http.port.secure", orgOsgiServiceHttpPortSecure));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.osgi.service.http.port.secure@TypeHint", orgOsgiServiceHttpPortSecureTypeHint));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param orgApacheFelixHttpsNio    * @param orgApacheFelixHttpsNioTypeHint    * @param orgApacheFelixHttpsKeystore    * @param orgApacheFelixHttpsKeystoreTypeHint    * @param orgApacheFelixHttpsKeystorePassword    * @param orgApacheFelixHttpsKeystorePasswordTypeHint    * @param orgApacheFelixHttpsKeystoreKey    * @param orgApacheFelixHttpsKeystoreKeyTypeHint    * @param orgApacheFelixHttpsKeystoreKeyPassword    * @param orgApacheFelixHttpsKeystoreKeyPasswordTypeHint    * @param orgApacheFelixHttpsTruststore    * @param orgApacheFelixHttpsTruststoreTypeHint    * @param orgApacheFelixHttpsTruststorePassword    * @param orgApacheFelixHttpsTruststorePasswordTypeHint    * @param orgApacheFelixHttpsClientcertificate    * @param orgApacheFelixHttpsClientcertificateTypeHint    * @param orgApacheFelixHttpsEnable    * @param orgApacheFelixHttpsEnableTypeHint    * @param orgOsgiServiceHttpPortSecure    * @param orgOsgiServiceHttpPortSecureTypeHint 
  */
  public void postConfigApacheFelixJettyBasedHttpService (Boolean orgApacheFelixHttpsNio, String orgApacheFelixHttpsNioTypeHint, String orgApacheFelixHttpsKeystore, String orgApacheFelixHttpsKeystoreTypeHint, String orgApacheFelixHttpsKeystorePassword, String orgApacheFelixHttpsKeystorePasswordTypeHint, String orgApacheFelixHttpsKeystoreKey, String orgApacheFelixHttpsKeystoreKeyTypeHint, String orgApacheFelixHttpsKeystoreKeyPassword, String orgApacheFelixHttpsKeystoreKeyPasswordTypeHint, String orgApacheFelixHttpsTruststore, String orgApacheFelixHttpsTruststoreTypeHint, String orgApacheFelixHttpsTruststorePassword, String orgApacheFelixHttpsTruststorePasswordTypeHint, String orgApacheFelixHttpsClientcertificate, String orgApacheFelixHttpsClientcertificateTypeHint, Boolean orgApacheFelixHttpsEnable, String orgApacheFelixHttpsEnableTypeHint, String orgOsgiServiceHttpPortSecure, String orgOsgiServiceHttpPortSecureTypeHint, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/apps/system/config/org.apache.felix.http".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.nio", orgApacheFelixHttpsNio));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.nio@TypeHint", orgApacheFelixHttpsNioTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.keystore", orgApacheFelixHttpsKeystore));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.keystore@TypeHint", orgApacheFelixHttpsKeystoreTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.keystore.password", orgApacheFelixHttpsKeystorePassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.keystore.password@TypeHint", orgApacheFelixHttpsKeystorePasswordTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.keystore.key", orgApacheFelixHttpsKeystoreKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.keystore.key@TypeHint", orgApacheFelixHttpsKeystoreKeyTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.keystore.key.password", orgApacheFelixHttpsKeystoreKeyPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.keystore.key.password@TypeHint", orgApacheFelixHttpsKeystoreKeyPasswordTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.truststore", orgApacheFelixHttpsTruststore));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.truststore@TypeHint", orgApacheFelixHttpsTruststoreTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.truststore.password", orgApacheFelixHttpsTruststorePassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.truststore.password@TypeHint", orgApacheFelixHttpsTruststorePasswordTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.clientcertificate", orgApacheFelixHttpsClientcertificate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.clientcertificate@TypeHint", orgApacheFelixHttpsClientcertificateTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.enable", orgApacheFelixHttpsEnable));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.apache.felix.https.enable@TypeHint", orgApacheFelixHttpsEnableTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.osgi.service.http.port.secure", orgOsgiServiceHttpPortSecure));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "org.osgi.service.http.port.secure@TypeHint", orgOsgiServiceHttpPortSecureTypeHint));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param proxyHost 
   * @param proxyHostTypeHint 
   * @param proxyPort 
   * @param proxyPortTypeHint 
   * @param proxyExceptions 
   * @param proxyExceptionsTypeHint 
   * @param proxyEnabled 
   * @param proxyEnabledTypeHint 
   * @param proxyUser 
   * @param proxyUserTypeHint 
   * @param proxyPassword 
   * @param proxyPasswordTypeHint 
   * @return void
  */
  public void postConfigApacheHttpComponentsProxyConfiguration (String proxyHost, String proxyHostTypeHint, Integer proxyPort, String proxyPortTypeHint, List<String> proxyExceptions, String proxyExceptionsTypeHint, Boolean proxyEnabled, String proxyEnabledTypeHint, String proxyUser, String proxyUserTypeHint, String proxyPassword, String proxyPasswordTypeHint) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/apps/system/config/org.apache.http.proxyconfigurator.config";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "proxy.host", proxyHost));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "proxy.host@TypeHint", proxyHostTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "proxy.port", proxyPort));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "proxy.port@TypeHint", proxyPortTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "proxy.exceptions", proxyExceptions));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "proxy.exceptions@TypeHint", proxyExceptionsTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "proxy.enabled", proxyEnabled));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "proxy.enabled@TypeHint", proxyEnabledTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "proxy.user", proxyUser));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "proxy.user@TypeHint", proxyUserTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "proxy.password", proxyPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "proxy.password@TypeHint", proxyPasswordTypeHint));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param proxyHost    * @param proxyHostTypeHint    * @param proxyPort    * @param proxyPortTypeHint    * @param proxyExceptions    * @param proxyExceptionsTypeHint    * @param proxyEnabled    * @param proxyEnabledTypeHint    * @param proxyUser    * @param proxyUserTypeHint    * @param proxyPassword    * @param proxyPasswordTypeHint 
  */
  public void postConfigApacheHttpComponentsProxyConfiguration (String proxyHost, String proxyHostTypeHint, Integer proxyPort, String proxyPortTypeHint, List<String> proxyExceptions, String proxyExceptionsTypeHint, Boolean proxyEnabled, String proxyEnabledTypeHint, String proxyUser, String proxyUserTypeHint, String proxyPassword, String proxyPasswordTypeHint, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/apps/system/config/org.apache.http.proxyconfigurator.config".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "proxy.host", proxyHost));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "proxy.host@TypeHint", proxyHostTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "proxy.port", proxyPort));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "proxy.port@TypeHint", proxyPortTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "proxy.exceptions", proxyExceptions));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "proxy.exceptions@TypeHint", proxyExceptionsTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "proxy.enabled", proxyEnabled));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "proxy.enabled@TypeHint", proxyEnabledTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "proxy.user", proxyUser));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "proxy.user@TypeHint", proxyUserTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "proxy.password", proxyPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "proxy.password@TypeHint", proxyPasswordTypeHint));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param alias 
   * @param aliasTypeHint 
   * @param davCreateAbsoluteUri 
   * @param davCreateAbsoluteUriTypeHint 
   * @return void
  */
  public void postConfigApacheSlingDavExServlet (String alias, String aliasTypeHint, Boolean davCreateAbsoluteUri, String davCreateAbsoluteUriTypeHint) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "alias", alias));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "alias@TypeHint", aliasTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "dav.create-absolute-uri", davCreateAbsoluteUri));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "dav.create-absolute-uri@TypeHint", davCreateAbsoluteUriTypeHint));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param alias    * @param aliasTypeHint    * @param davCreateAbsoluteUri    * @param davCreateAbsoluteUriTypeHint 
  */
  public void postConfigApacheSlingDavExServlet (String alias, String aliasTypeHint, Boolean davCreateAbsoluteUri, String davCreateAbsoluteUriTypeHint, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "alias", alias));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "alias@TypeHint", aliasTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "dav.create-absolute-uri", davCreateAbsoluteUri));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "dav.create-absolute-uri@TypeHint", davCreateAbsoluteUriTypeHint));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param jsonMaximumresults 
   * @param jsonMaximumresultsTypeHint 
   * @param enableHtml 
   * @param enableHtmlTypeHint 
   * @param enableTxt 
   * @param enableTxtTypeHint 
   * @param enableXml 
   * @param enableXmlTypeHint 
   * @return void
  */
  public void postConfigApacheSlingGetServlet (String jsonMaximumresults, String jsonMaximumresultsTypeHint, Boolean enableHtml, String enableHtmlTypeHint, Boolean enableTxt, String enableTxtTypeHint, Boolean enableXml, String enableXmlTypeHint) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "json.maximumresults", jsonMaximumresults));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "json.maximumresults@TypeHint", jsonMaximumresultsTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "enable.html", enableHtml));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "enable.html@TypeHint", enableHtmlTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "enable.txt", enableTxt));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "enable.txt@TypeHint", enableTxtTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "enable.xml", enableXml));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "enable.xml@TypeHint", enableXmlTypeHint));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param jsonMaximumresults    * @param jsonMaximumresultsTypeHint    * @param enableHtml    * @param enableHtmlTypeHint    * @param enableTxt    * @param enableTxtTypeHint    * @param enableXml    * @param enableXmlTypeHint 
  */
  public void postConfigApacheSlingGetServlet (String jsonMaximumresults, String jsonMaximumresultsTypeHint, Boolean enableHtml, String enableHtmlTypeHint, Boolean enableTxt, String enableTxtTypeHint, Boolean enableXml, String enableXmlTypeHint, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "json.maximumresults", jsonMaximumresults));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "json.maximumresults@TypeHint", jsonMaximumresultsTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "enable.html", enableHtml));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "enable.html@TypeHint", enableHtmlTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "enable.txt", enableTxt));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "enable.txt@TypeHint", enableTxtTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "enable.xml", enableXml));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "enable.xml@TypeHint", enableXmlTypeHint));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param allowEmpty 
   * @param allowEmptyTypeHint 
   * @param allowHosts 
   * @param allowHostsTypeHint 
   * @param allowHostsRegexp 
   * @param allowHostsRegexpTypeHint 
   * @param filterMethods 
   * @param filterMethodsTypeHint 
   * @return void
  */
  public void postConfigApacheSlingReferrerFilter (Boolean allowEmpty, String allowEmptyTypeHint, String allowHosts, String allowHostsTypeHint, String allowHostsRegexp, String allowHostsRegexpTypeHint, String filterMethods, String filterMethodsTypeHint) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/apps/system/config/org.apache.sling.security.impl.ReferrerFilter";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "allow.empty", allowEmpty));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "allow.empty@TypeHint", allowEmptyTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "allow.hosts", allowHosts));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "allow.hosts@TypeHint", allowHostsTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "allow.hosts.regexp", allowHostsRegexp));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "allow.hosts.regexp@TypeHint", allowHostsRegexpTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter.methods", filterMethods));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter.methods@TypeHint", filterMethodsTypeHint));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param allowEmpty    * @param allowEmptyTypeHint    * @param allowHosts    * @param allowHostsTypeHint    * @param allowHostsRegexp    * @param allowHostsRegexpTypeHint    * @param filterMethods    * @param filterMethodsTypeHint 
  */
  public void postConfigApacheSlingReferrerFilter (Boolean allowEmpty, String allowEmptyTypeHint, String allowHosts, String allowHostsTypeHint, String allowHostsRegexp, String allowHostsRegexpTypeHint, String filterMethods, String filterMethodsTypeHint, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/apps/system/config/org.apache.sling.security.impl.ReferrerFilter".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "allow.empty", allowEmpty));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "allow.empty@TypeHint", allowEmptyTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "allow.hosts", allowHosts));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "allow.hosts@TypeHint", allowHostsTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "allow.hosts.regexp", allowHostsRegexp));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "allow.hosts.regexp@TypeHint", allowHostsRegexpTypeHint));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter.methods", filterMethods));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter.methods@TypeHint", filterMethodsTypeHint));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param configNodeName 
   * @return void
  */
  public void postConfigProperty (String configNodeName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'configNodeName' is set
    if (configNodeName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'configNodeName' when calling postConfigProperty",
        new ApiException(400, "Missing the required parameter 'configNodeName' when calling postConfigProperty"));
    }

    // create path and map variables
    String path = "/apps/system/config/{configNodeName}".replaceAll("\\{" + "configNodeName" + "\\}", apiInvoker.escapeString(configNodeName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param configNodeName 
  */
  public void postConfigProperty (String configNodeName, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'configNodeName' is set
    if (configNodeName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'configNodeName' when calling postConfigProperty",
        new ApiException(400, "Missing the required parameter 'configNodeName' when calling postConfigProperty"));
    }

    // create path and map variables
    String path = "/apps/system/config/{configNodeName}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "configNodeName" + "\\}", apiInvoker.escapeString(configNodeName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param path 
   * @param name 
   * @param operation 
   * @param deleteAuthorizable 
   * @param file 
   * @return void
  */
  public void postNode (String path, String name, String operation, String deleteAuthorizable, File file) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'path' is set
    if (path == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'path' when calling postNode",
        new ApiException(400, "Missing the required parameter 'path' when calling postNode"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling postNode",
        new ApiException(400, "Missing the required parameter 'name' when calling postNode"));
    }

    // create path and map variables
    String path = "/{path}/{name}".replaceAll("\\{" + "path" + "\\}", apiInvoker.escapeString(path.toString())).replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", ":operation", operation));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "deleteAuthorizable", deleteAuthorizable));
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param path    * @param name    * @param operation    * @param deleteAuthorizable    * @param file 
  */
  public void postNode (String path, String name, String operation, String deleteAuthorizable, File file, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'path' is set
    if (path == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'path' when calling postNode",
        new ApiException(400, "Missing the required parameter 'path' when calling postNode"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling postNode",
        new ApiException(400, "Missing the required parameter 'name' when calling postNode"));
    }

    // create path and map variables
    String path = "/{path}/{name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "path" + "\\}", apiInvoker.escapeString(path.toString())).replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", ":operation", operation));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "deleteAuthorizable", deleteAuthorizable));


    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param path 
   * @param name 
   * @param addMembers 
   * @return void
  */
  public void postNodeRw (String path, String name, String addMembers) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'path' is set
    if (path == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'path' when calling postNodeRw",
        new ApiException(400, "Missing the required parameter 'path' when calling postNodeRw"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling postNodeRw",
        new ApiException(400, "Missing the required parameter 'name' when calling postNodeRw"));
    }

    // create path and map variables
    String path = "/{path}/{name}.rw.html".replaceAll("\\{" + "path" + "\\}", apiInvoker.escapeString(path.toString())).replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "addMembers", addMembers));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param path    * @param name    * @param addMembers 
  */
  public void postNodeRw (String path, String name, String addMembers, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'path' is set
    if (path == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'path' when calling postNodeRw",
        new ApiException(400, "Missing the required parameter 'path' when calling postNodeRw"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling postNodeRw",
        new ApiException(400, "Missing the required parameter 'name' when calling postNodeRw"));
    }

    // create path and map variables
    String path = "/{path}/{name}.rw.html".replaceAll("\\{format\\}","json").replaceAll("\\{" + "path" + "\\}", apiInvoker.escapeString(path.toString())).replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "addMembers", addMembers));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param path 
   * @param jcrprimaryType 
   * @param name 
   * @return void
  */
  public void postPath (String path, String jcrprimaryType, String name) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'path' is set
    if (path == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'path' when calling postPath",
        new ApiException(400, "Missing the required parameter 'path' when calling postPath"));
    }
    // verify the required parameter 'jcrprimaryType' is set
    if (jcrprimaryType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jcrprimaryType' when calling postPath",
        new ApiException(400, "Missing the required parameter 'jcrprimaryType' when calling postPath"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling postPath",
        new ApiException(400, "Missing the required parameter 'name' when calling postPath"));
    }

    // create path and map variables
    String path = "/{path}/".replaceAll("\\{" + "path" + "\\}", apiInvoker.escapeString(path.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:primaryType", jcrprimaryType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", ":name", name));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param path    * @param jcrprimaryType    * @param name 
  */
  public void postPath (String path, String jcrprimaryType, String name, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'path' is set
    if (path == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'path' when calling postPath",
        new ApiException(400, "Missing the required parameter 'path' when calling postPath"));
    }
    // verify the required parameter 'jcrprimaryType' is set
    if (jcrprimaryType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jcrprimaryType' when calling postPath",
        new ApiException(400, "Missing the required parameter 'jcrprimaryType' when calling postPath"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling postPath",
        new ApiException(400, "Missing the required parameter 'name' when calling postPath"));
    }

    // create path and map variables
    String path = "/{path}/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "path" + "\\}", apiInvoker.escapeString(path.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "jcr:primaryType", jcrprimaryType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", ":name", name));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param path 
   * @param pLimit 
   * @param _1property 
   * @param _1propertyValue 
   * @return String
  */
  public String postQuery (String path, BigDecimal pLimit, String _1property, String _1propertyValue) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'path' is set
    if (path == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'path' when calling postQuery",
        new ApiException(400, "Missing the required parameter 'path' when calling postQuery"));
    }
    // verify the required parameter 'pLimit' is set
    if (pLimit == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pLimit' when calling postQuery",
        new ApiException(400, "Missing the required parameter 'pLimit' when calling postQuery"));
    }
    // verify the required parameter '_1property' is set
    if (_1property == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_1property' when calling postQuery",
        new ApiException(400, "Missing the required parameter '_1property' when calling postQuery"));
    }
    // verify the required parameter '_1propertyValue' is set
    if (_1propertyValue == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_1propertyValue' when calling postQuery",
        new ApiException(400, "Missing the required parameter '_1propertyValue' when calling postQuery"));
    }

    // create path and map variables
    String path = "/bin/querybuilder.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "path", path));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "p.limit", pLimit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "1_property", _1property));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "1_property.value", _1propertyValue));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param path    * @param pLimit    * @param _1property    * @param _1propertyValue 
  */
  public void postQuery (String path, BigDecimal pLimit, String _1property, String _1propertyValue, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'path' is set
    if (path == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'path' when calling postQuery",
        new ApiException(400, "Missing the required parameter 'path' when calling postQuery"));
    }
    // verify the required parameter 'pLimit' is set
    if (pLimit == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pLimit' when calling postQuery",
        new ApiException(400, "Missing the required parameter 'pLimit' when calling postQuery"));
    }
    // verify the required parameter '_1property' is set
    if (_1property == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_1property' when calling postQuery",
        new ApiException(400, "Missing the required parameter '_1property' when calling postQuery"));
    }
    // verify the required parameter '_1propertyValue' is set
    if (_1propertyValue == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_1propertyValue' when calling postQuery",
        new ApiException(400, "Missing the required parameter '_1propertyValue' when calling postQuery"));
    }

    // create path and map variables
    String path = "/bin/querybuilder.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "path", path));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "p.limit", pLimit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "1_property", _1property));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "1_property.value", _1propertyValue));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param ignoredeactivated 
   * @param onlymodified 
   * @param path 
   * @return void
  */
  public void postTreeActivation (Boolean ignoredeactivated, Boolean onlymodified, String path) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'ignoredeactivated' is set
    if (ignoredeactivated == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ignoredeactivated' when calling postTreeActivation",
        new ApiException(400, "Missing the required parameter 'ignoredeactivated' when calling postTreeActivation"));
    }
    // verify the required parameter 'onlymodified' is set
    if (onlymodified == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'onlymodified' when calling postTreeActivation",
        new ApiException(400, "Missing the required parameter 'onlymodified' when calling postTreeActivation"));
    }
    // verify the required parameter 'path' is set
    if (path == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'path' when calling postTreeActivation",
        new ApiException(400, "Missing the required parameter 'path' when calling postTreeActivation"));
    }

    // create path and map variables
    String path = "/etc/replication/treeactivation.html";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ignoredeactivated", ignoredeactivated));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "onlymodified", onlymodified));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "path", path));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param ignoredeactivated    * @param onlymodified    * @param path 
  */
  public void postTreeActivation (Boolean ignoredeactivated, Boolean onlymodified, String path, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'ignoredeactivated' is set
    if (ignoredeactivated == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ignoredeactivated' when calling postTreeActivation",
        new ApiException(400, "Missing the required parameter 'ignoredeactivated' when calling postTreeActivation"));
    }
    // verify the required parameter 'onlymodified' is set
    if (onlymodified == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'onlymodified' when calling postTreeActivation",
        new ApiException(400, "Missing the required parameter 'onlymodified' when calling postTreeActivation"));
    }
    // verify the required parameter 'path' is set
    if (path == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'path' when calling postTreeActivation",
        new ApiException(400, "Missing the required parameter 'path' when calling postTreeActivation"));
    }

    // create path and map variables
    String path = "/etc/replication/treeactivation.html".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "ignoredeactivated", ignoredeactivated));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "onlymodified", onlymodified));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "path", path));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param operation 
   * @param newPassword 
   * @param rePassword 
   * @param keyStoreType 
   * @param removeAlias 
   * @param certificate 
   * @return String
  */
  public String postTruststore (String operation, String newPassword, String rePassword, String keyStoreType, String removeAlias, File certificate) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/libs/granite/security/post/truststore";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", ":operation", operation));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "newPassword", newPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rePassword", rePassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "keyStoreType", keyStoreType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "removeAlias", removeAlias));
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (certificate != null) {
        localVarBuilder.addBinaryBody("certificate", certificate);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param operation    * @param newPassword    * @param rePassword    * @param keyStoreType    * @param removeAlias    * @param certificate 
  */
  public void postTruststore (String operation, String newPassword, String rePassword, String keyStoreType, String removeAlias, File certificate, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/libs/granite/security/post/truststore".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", ":operation", operation));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "newPassword", newPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rePassword", rePassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "keyStoreType", keyStoreType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "removeAlias", removeAlias));


    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (certificate != null) {
        localVarBuilder.addBinaryBody("certificate", certificate);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param truststoreP12 
   * @return String
  */
  public String postTruststorePKCS12 (File truststoreP12) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/etc/truststore";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (truststoreP12 != null) {
        localVarBuilder.addBinaryBody("truststore.p12", truststoreP12);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param truststoreP12 
  */
  public void postTruststorePKCS12 (File truststoreP12, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/etc/truststore".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (truststoreP12 != null) {
        localVarBuilder.addBinaryBody("truststore.p12", truststoreP12);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
