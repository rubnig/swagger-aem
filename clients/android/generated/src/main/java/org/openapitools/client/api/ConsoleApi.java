/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.BundleInfo;
import org.openapitools.client.model.SamlConfigurationInfo;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ConsoleApi {
  String basePath = "http://localhost";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * 
   * @return List<String>
  */
  public List<String> getAemProductInfo () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/system/console/status-productinfo.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<String>) ApiInvoker.deserialize(localVarResponse, "array", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 

  */
  public void getAemProductInfo (final Response.Listener<List<String>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/system/console/status-productinfo.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<String>) ApiInvoker.deserialize(localVarResponse,  "array", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param name 
   * @return BundleInfo
  */
  public BundleInfo getBundleInfo (String name) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling getBundleInfo",
        new ApiException(400, "Missing the required parameter 'name' when calling getBundleInfo"));
    }

    // create path and map variables
    String path = "/system/console/bundles/{name}.json".replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BundleInfo) ApiInvoker.deserialize(localVarResponse, "", BundleInfo.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param name 
  */
  public void getBundleInfo (String name, final Response.Listener<BundleInfo> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling getBundleInfo",
        new ApiException(400, "Missing the required parameter 'name' when calling getBundleInfo"));
    }

    // create path and map variables
    String path = "/system/console/bundles/{name}.json".replaceAll("\\{format\\}","json").replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BundleInfo) ApiInvoker.deserialize(localVarResponse,  "", BundleInfo.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @return String
  */
  public String getConfigMgr () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/system/console/configMgr";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 

  */
  public void getConfigMgr (final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/system/console/configMgr".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param name 
   * @param action 
   * @return void
  */
  public void postBundle (String name, String action) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling postBundle",
        new ApiException(400, "Missing the required parameter 'name' when calling postBundle"));
    }
    // verify the required parameter 'action' is set
    if (action == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'action' when calling postBundle",
        new ApiException(400, "Missing the required parameter 'action' when calling postBundle"));
    }

    // create path and map variables
    String path = "/system/console/bundles/{name}".replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "action", action));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param name    * @param action 
  */
  public void postBundle (String name, String action, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling postBundle",
        new ApiException(400, "Missing the required parameter 'name' when calling postBundle"));
    }
    // verify the required parameter 'action' is set
    if (action == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'action' when calling postBundle",
        new ApiException(400, "Missing the required parameter 'action' when calling postBundle"));
    }

    // create path and map variables
    String path = "/system/console/bundles/{name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "action", action));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param action 
   * @return void
  */
  public void postJmxRepository (String action) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'action' is set
    if (action == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'action' when calling postJmxRepository",
        new ApiException(400, "Missing the required parameter 'action' when calling postJmxRepository"));
    }

    // create path and map variables
    String path = "/system/console/jmx/com.adobe.granite:type=Repository/op/{action}".replaceAll("\\{" + "action" + "\\}", apiInvoker.escapeString(action.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param action 
  */
  public void postJmxRepository (String action, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'action' is set
    if (action == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'action' when calling postJmxRepository",
        new ApiException(400, "Missing the required parameter 'action' when calling postJmxRepository"));
    }

    // create path and map variables
    String path = "/system/console/jmx/com.adobe.granite:type=Repository/op/{action}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "action" + "\\}", apiInvoker.escapeString(action.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param path 
   * @param serviceRanking 
   * @param idpUrl 
   * @param idpCertAlias 
   * @param idpHttpRedirect 
   * @param serviceProviderEntityId 
   * @param assertionConsumerServiceURL 
   * @param spPrivateKeyAlias 
   * @param keyStorePassword 
   * @param defaultRedirectUrl 
   * @param userIDAttribute 
   * @param useEncryption 
   * @param createUser 
   * @param addGroupMemberships 
   * @param groupMembershipAttribute 
   * @param defaultGroups 
   * @param nameIdFormat 
   * @param synchronizeAttributes 
   * @param handleLogout 
   * @param logoutUrl 
   * @param clockTolerance 
   * @param digestMethod 
   * @param signatureMethod 
   * @param userIntermediatePath 
   * @param propertylist 
   * @return SamlConfigurationInfo
  */
  public SamlConfigurationInfo postSamlConfiguration (Boolean post, Boolean apply, Boolean delete, String action, String location, List<String> path, Integer serviceRanking, String idpUrl, String idpCertAlias, Boolean idpHttpRedirect, String serviceProviderEntityId, String assertionConsumerServiceURL, String spPrivateKeyAlias, String keyStorePassword, String defaultRedirectUrl, String userIDAttribute, Boolean useEncryption, Boolean createUser, Boolean addGroupMemberships, String groupMembershipAttribute, List<String> defaultGroups, String nameIdFormat, List<String> synchronizeAttributes, Boolean handleLogout, String logoutUrl, Integer clockTolerance, String digestMethod, String signatureMethod, String userIntermediatePath, List<String> propertylist) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "post", post));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "apply", apply));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "delete", delete));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "action", action));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "$location", location));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "path", path));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "service.ranking", serviceRanking));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "idpUrl", idpUrl));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "idpCertAlias", idpCertAlias));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "idpHttpRedirect", idpHttpRedirect));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "serviceProviderEntityId", serviceProviderEntityId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "assertionConsumerServiceURL", assertionConsumerServiceURL));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "spPrivateKeyAlias", spPrivateKeyAlias));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "keyStorePassword", keyStorePassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "defaultRedirectUrl", defaultRedirectUrl));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "userIDAttribute", userIDAttribute));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useEncryption", useEncryption));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "createUser", createUser));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "addGroupMemberships", addGroupMemberships));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "groupMembershipAttribute", groupMembershipAttribute));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "defaultGroups", defaultGroups));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "nameIdFormat", nameIdFormat));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "synchronizeAttributes", synchronizeAttributes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "handleLogout", handleLogout));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "logoutUrl", logoutUrl));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "clockTolerance", clockTolerance));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "digestMethod", digestMethod));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "signatureMethod", signatureMethod));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "userIntermediatePath", userIntermediatePath));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "propertylist", propertylist));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SamlConfigurationInfo) ApiInvoker.deserialize(localVarResponse, "", SamlConfigurationInfo.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param post    * @param apply    * @param delete    * @param action    * @param location    * @param path    * @param serviceRanking    * @param idpUrl    * @param idpCertAlias    * @param idpHttpRedirect    * @param serviceProviderEntityId    * @param assertionConsumerServiceURL    * @param spPrivateKeyAlias    * @param keyStorePassword    * @param defaultRedirectUrl    * @param userIDAttribute    * @param useEncryption    * @param createUser    * @param addGroupMemberships    * @param groupMembershipAttribute    * @param defaultGroups    * @param nameIdFormat    * @param synchronizeAttributes    * @param handleLogout    * @param logoutUrl    * @param clockTolerance    * @param digestMethod    * @param signatureMethod    * @param userIntermediatePath    * @param propertylist 
  */
  public void postSamlConfiguration (Boolean post, Boolean apply, Boolean delete, String action, String location, List<String> path, Integer serviceRanking, String idpUrl, String idpCertAlias, Boolean idpHttpRedirect, String serviceProviderEntityId, String assertionConsumerServiceURL, String spPrivateKeyAlias, String keyStorePassword, String defaultRedirectUrl, String userIDAttribute, Boolean useEncryption, Boolean createUser, Boolean addGroupMemberships, String groupMembershipAttribute, List<String> defaultGroups, String nameIdFormat, List<String> synchronizeAttributes, Boolean handleLogout, String logoutUrl, Integer clockTolerance, String digestMethod, String signatureMethod, String userIntermediatePath, List<String> propertylist, final Response.Listener<SamlConfigurationInfo> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "post", post));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "apply", apply));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "delete", delete));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "action", action));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "$location", location));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "path", path));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "service.ranking", serviceRanking));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "idpUrl", idpUrl));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "idpCertAlias", idpCertAlias));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "idpHttpRedirect", idpHttpRedirect));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "serviceProviderEntityId", serviceProviderEntityId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "assertionConsumerServiceURL", assertionConsumerServiceURL));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "spPrivateKeyAlias", spPrivateKeyAlias));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "keyStorePassword", keyStorePassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "defaultRedirectUrl", defaultRedirectUrl));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "userIDAttribute", userIDAttribute));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "useEncryption", useEncryption));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "createUser", createUser));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "addGroupMemberships", addGroupMemberships));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "groupMembershipAttribute", groupMembershipAttribute));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "defaultGroups", defaultGroups));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "nameIdFormat", nameIdFormat));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "synchronizeAttributes", synchronizeAttributes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "handleLogout", handleLogout));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "logoutUrl", logoutUrl));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "clockTolerance", clockTolerance));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "digestMethod", digestMethod));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "signatureMethod", signatureMethod));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "userIntermediatePath", userIntermediatePath));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "propertylist", propertylist));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SamlConfigurationInfo) ApiInvoker.deserialize(localVarResponse,  "", SamlConfigurationInfo.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
