/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import java.io.File;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class GraniteApi {
  String basePath = "http://localhost";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * 
   * @param keystorePassword 
   * @param keystorePasswordConfirm 
   * @param truststorePassword 
   * @param truststorePasswordConfirm 
   * @param httpsHostname 
   * @param httpsPort 
   * @param privatekeyFile 
   * @param certificateFile 
   * @return String
  */
  public String sslSetup (String keystorePassword, String keystorePasswordConfirm, String truststorePassword, String truststorePasswordConfirm, String httpsHostname, String httpsPort, File privatekeyFile, File certificateFile) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'keystorePassword' is set
    if (keystorePassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'keystorePassword' when calling sslSetup",
        new ApiException(400, "Missing the required parameter 'keystorePassword' when calling sslSetup"));
    }
    // verify the required parameter 'keystorePasswordConfirm' is set
    if (keystorePasswordConfirm == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'keystorePasswordConfirm' when calling sslSetup",
        new ApiException(400, "Missing the required parameter 'keystorePasswordConfirm' when calling sslSetup"));
    }
    // verify the required parameter 'truststorePassword' is set
    if (truststorePassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'truststorePassword' when calling sslSetup",
        new ApiException(400, "Missing the required parameter 'truststorePassword' when calling sslSetup"));
    }
    // verify the required parameter 'truststorePasswordConfirm' is set
    if (truststorePasswordConfirm == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'truststorePasswordConfirm' when calling sslSetup",
        new ApiException(400, "Missing the required parameter 'truststorePasswordConfirm' when calling sslSetup"));
    }
    // verify the required parameter 'httpsHostname' is set
    if (httpsHostname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'httpsHostname' when calling sslSetup",
        new ApiException(400, "Missing the required parameter 'httpsHostname' when calling sslSetup"));
    }
    // verify the required parameter 'httpsPort' is set
    if (httpsPort == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'httpsPort' when calling sslSetup",
        new ApiException(400, "Missing the required parameter 'httpsPort' when calling sslSetup"));
    }

    // create path and map variables
    String path = "/libs/granite/security/post/sslSetup.html";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "keystorePassword", keystorePassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "keystorePasswordConfirm", keystorePasswordConfirm));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "truststorePassword", truststorePassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "truststorePasswordConfirm", truststorePasswordConfirm));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "httpsHostname", httpsHostname));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "httpsPort", httpsPort));
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (privatekeyFile != null) {
        localVarBuilder.addBinaryBody("privatekeyFile", privatekeyFile);
      }
      if (certificateFile != null) {
        localVarBuilder.addBinaryBody("certificateFile", certificateFile);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param keystorePassword    * @param keystorePasswordConfirm    * @param truststorePassword    * @param truststorePasswordConfirm    * @param httpsHostname    * @param httpsPort    * @param privatekeyFile    * @param certificateFile 
  */
  public void sslSetup (String keystorePassword, String keystorePasswordConfirm, String truststorePassword, String truststorePasswordConfirm, String httpsHostname, String httpsPort, File privatekeyFile, File certificateFile, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'keystorePassword' is set
    if (keystorePassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'keystorePassword' when calling sslSetup",
        new ApiException(400, "Missing the required parameter 'keystorePassword' when calling sslSetup"));
    }
    // verify the required parameter 'keystorePasswordConfirm' is set
    if (keystorePasswordConfirm == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'keystorePasswordConfirm' when calling sslSetup",
        new ApiException(400, "Missing the required parameter 'keystorePasswordConfirm' when calling sslSetup"));
    }
    // verify the required parameter 'truststorePassword' is set
    if (truststorePassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'truststorePassword' when calling sslSetup",
        new ApiException(400, "Missing the required parameter 'truststorePassword' when calling sslSetup"));
    }
    // verify the required parameter 'truststorePasswordConfirm' is set
    if (truststorePasswordConfirm == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'truststorePasswordConfirm' when calling sslSetup",
        new ApiException(400, "Missing the required parameter 'truststorePasswordConfirm' when calling sslSetup"));
    }
    // verify the required parameter 'httpsHostname' is set
    if (httpsHostname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'httpsHostname' when calling sslSetup",
        new ApiException(400, "Missing the required parameter 'httpsHostname' when calling sslSetup"));
    }
    // verify the required parameter 'httpsPort' is set
    if (httpsPort == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'httpsPort' when calling sslSetup",
        new ApiException(400, "Missing the required parameter 'httpsPort' when calling sslSetup"));
    }

    // create path and map variables
    String path = "/libs/granite/security/post/sslSetup.html".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "keystorePassword", keystorePassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "keystorePasswordConfirm", keystorePasswordConfirm));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "truststorePassword", truststorePassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "truststorePasswordConfirm", truststorePasswordConfirm));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "httpsHostname", httpsHostname));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "httpsPort", httpsPort));


    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (privatekeyFile != null) {
        localVarBuilder.addBinaryBody("privatekeyFile", privatekeyFile);
      }
      
      if (certificateFile != null) {
        localVarBuilder.addBinaryBody("certificateFile", certificateFile);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      

    }

    String[] authNames = new String[] { "aemAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
