/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api


import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class CustomApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "CustomApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val getAemHealthCheckOperation = (apiOperation[String]("getAemHealthCheck")
    summary ""
    parameters(queryParam[String]("tags").description("").optional, queryParam[Boolean]("combineTagsOr").description("").optional)
  )

  get("/system/health", operation(getAemHealthCheckOperation)) {
            val tags = params.getAs[String]("tags")

    //println("tags: " + tags)
            val combineTagsOr = params.getAs[Boolean]("combineTagsOr")

    //println("combineTagsOr: " + combineTagsOr)
  }

  

  val postConfigAemHealthCheckServletOperation = (apiOperation[Unit]("postConfigAemHealthCheckServlet")
    summary ""
    parameters(queryParam[List[String]]("bundlesPeriodignored").description("").optional.defaultValue(List.empty[String] ), queryParam[String]("bundlesPeriodignoredAtTypeHint").description("").optional)
  )

  post("/apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck", operation(postConfigAemHealthCheckServletOperation)) {
        val bundlesPeriodignoredString = params.getAs[String]("bundlesPeriodignored")
    val bundlesPeriodignored = if("multi" == "default" || "multi" == "csv") {
      bundlesPeriodignoredString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("bundlesPeriodignored: " + bundlesPeriodignored)
            val bundlesPeriodignoredAtTypeHint = params.getAs[String]("bundlesPeriodignoredAtTypeHint")

    //println("bundlesPeriodignoredAtTypeHint: " + bundlesPeriodignoredAtTypeHint)
  }

  

  val postConfigAemPasswordResetOperation = (apiOperation[Unit]("postConfigAemPasswordReset")
    summary ""
    parameters(queryParam[List[String]]("pwdresetPeriodauthorizables").description("").optional.defaultValue(List.empty[String] ), queryParam[String]("pwdresetPeriodauthorizablesAtTypeHint").description("").optional)
  )

  post("/apps/system/config/com.shinesolutions.aem.passwordreset.Activator", operation(postConfigAemPasswordResetOperation)) {
        val pwdresetPeriodauthorizablesString = params.getAs[String]("pwdresetPeriodauthorizables")
    val pwdresetPeriodauthorizables = if("multi" == "default" || "multi" == "csv") {
      pwdresetPeriodauthorizablesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("pwdresetPeriodauthorizables: " + pwdresetPeriodauthorizables)
            val pwdresetPeriodauthorizablesAtTypeHint = params.getAs[String]("pwdresetPeriodauthorizablesAtTypeHint")

    //println("pwdresetPeriodauthorizablesAtTypeHint: " + pwdresetPeriodauthorizablesAtTypeHint)
  }

}
