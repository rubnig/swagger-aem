/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.BundleInfo
import org.openapitools.server.model.SamlConfigurationInfo

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class ConsoleApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "ConsoleApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val getAemProductInfoOperation = (apiOperation[List[String]]("getAemProductInfo")
    summary ""
    parameters()
  )

  get("/system/console/status-productinfo.json", operation(getAemProductInfoOperation)) {
  }

  

  val getBundleInfoOperation = (apiOperation[BundleInfo]("getBundleInfo")
    summary ""
    parameters(pathParam[String]("name").description(""))
  )

  get("/system/console/bundles/{name}.json", operation(getBundleInfoOperation)) {
    val name = params.getOrElse("name", halt(400))
    //println("name: " + name)
  }

  

  val getConfigMgrOperation = (apiOperation[String]("getConfigMgr")
    summary ""
    parameters()
  )

  get("/system/console/configMgr", operation(getConfigMgrOperation)) {
  }

  

  val postBundleOperation = (apiOperation[Unit]("postBundle")
    summary ""
    parameters(pathParam[String]("name").description(""), queryParam[String]("action").description(""))
  )

  post("/system/console/bundles/:name", operation(postBundleOperation)) {
    val name = params.getOrElse("name", halt(400))
    //println("name: " + name)
            val action = params.getAs[String]("action")

    //println("action: " + action)
  }

  

  val postJmxRepositoryOperation = (apiOperation[Unit]("postJmxRepository")
    summary ""
    parameters(pathParam[String]("action").description(""))
  )

  post("/system/console/jmx/com.adobe.granite:type=Repository/op/:action", operation(postJmxRepositoryOperation)) {
    val action = params.getOrElse("action", halt(400))
    //println("action: " + action)
  }

  

  val postSamlConfigurationOperation = (apiOperation[SamlConfigurationInfo]("postSamlConfiguration")
    summary ""
    parameters(queryParam[Boolean]("post").description("").optional, queryParam[Boolean]("apply").description("").optional, queryParam[Boolean]("delete").description("").optional, queryParam[String]("action").description("").optional, queryParam[String]("Dollarlocation").description("").optional, queryParam[List[String]]("path").description("").optional.defaultValue(List.empty[String] ), queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("idpUrl").description("").optional, queryParam[String]("idpCertAlias").description("").optional, queryParam[Boolean]("idpHttpRedirect").description("").optional, queryParam[String]("serviceProviderEntityId").description("").optional, queryParam[String]("assertionConsumerServiceURL").description("").optional, queryParam[String]("spPrivateKeyAlias").description("").optional, queryParam[String]("keyStorePassword").description("").optional, queryParam[String]("defaultRedirectUrl").description("").optional, queryParam[String]("userIDAttribute").description("").optional, queryParam[Boolean]("useEncryption").description("").optional, queryParam[Boolean]("createUser").description("").optional, queryParam[Boolean]("addGroupMemberships").description("").optional, queryParam[String]("groupMembershipAttribute").description("").optional, queryParam[List[String]]("defaultGroups").description("").optional.defaultValue(List.empty[String] ), queryParam[String]("nameIdFormat").description("").optional, queryParam[List[String]]("synchronizeAttributes").description("").optional.defaultValue(List.empty[String] ), queryParam[Boolean]("handleLogout").description("").optional, queryParam[String]("logoutUrl").description("").optional, queryParam[Int]("clockTolerance").description("").optional, queryParam[String]("digestMethod").description("").optional, queryParam[String]("signatureMethod").description("").optional, queryParam[String]("userIntermediatePath").description("").optional, queryParam[List[String]]("propertylist").description("").optional.defaultValue(List.empty[String] ))
  )

  post("/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler", operation(postSamlConfigurationOperation)) {
            val post = params.getAs[Boolean]("post")

    //println("post: " + post)
            val apply = params.getAs[Boolean]("apply")

    //println("apply: " + apply)
            val delete = params.getAs[Boolean]("delete")

    //println("delete: " + delete)
            val action = params.getAs[String]("action")

    //println("action: " + action)
            val Dollarlocation = params.getAs[String]("Dollarlocation")

    //println("Dollarlocation: " + Dollarlocation)
        val pathString = params.getAs[String]("path")
    val path = if("multi" == "default" || "multi" == "csv") {
      pathString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("path: " + path)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val idpUrl = params.getAs[String]("idpUrl")

    //println("idpUrl: " + idpUrl)
            val idpCertAlias = params.getAs[String]("idpCertAlias")

    //println("idpCertAlias: " + idpCertAlias)
            val idpHttpRedirect = params.getAs[Boolean]("idpHttpRedirect")

    //println("idpHttpRedirect: " + idpHttpRedirect)
            val serviceProviderEntityId = params.getAs[String]("serviceProviderEntityId")

    //println("serviceProviderEntityId: " + serviceProviderEntityId)
            val assertionConsumerServiceURL = params.getAs[String]("assertionConsumerServiceURL")

    //println("assertionConsumerServiceURL: " + assertionConsumerServiceURL)
            val spPrivateKeyAlias = params.getAs[String]("spPrivateKeyAlias")

    //println("spPrivateKeyAlias: " + spPrivateKeyAlias)
            val keyStorePassword = params.getAs[String]("keyStorePassword")

    //println("keyStorePassword: " + keyStorePassword)
            val defaultRedirectUrl = params.getAs[String]("defaultRedirectUrl")

    //println("defaultRedirectUrl: " + defaultRedirectUrl)
            val userIDAttribute = params.getAs[String]("userIDAttribute")

    //println("userIDAttribute: " + userIDAttribute)
            val useEncryption = params.getAs[Boolean]("useEncryption")

    //println("useEncryption: " + useEncryption)
            val createUser = params.getAs[Boolean]("createUser")

    //println("createUser: " + createUser)
            val addGroupMemberships = params.getAs[Boolean]("addGroupMemberships")

    //println("addGroupMemberships: " + addGroupMemberships)
            val groupMembershipAttribute = params.getAs[String]("groupMembershipAttribute")

    //println("groupMembershipAttribute: " + groupMembershipAttribute)
        val defaultGroupsString = params.getAs[String]("defaultGroups")
    val defaultGroups = if("multi" == "default" || "multi" == "csv") {
      defaultGroupsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("defaultGroups: " + defaultGroups)
            val nameIdFormat = params.getAs[String]("nameIdFormat")

    //println("nameIdFormat: " + nameIdFormat)
        val synchronizeAttributesString = params.getAs[String]("synchronizeAttributes")
    val synchronizeAttributes = if("multi" == "default" || "multi" == "csv") {
      synchronizeAttributesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("synchronizeAttributes: " + synchronizeAttributes)
            val handleLogout = params.getAs[Boolean]("handleLogout")

    //println("handleLogout: " + handleLogout)
            val logoutUrl = params.getAs[String]("logoutUrl")

    //println("logoutUrl: " + logoutUrl)
            val clockTolerance = params.getAs[Int]("clockTolerance")

    //println("clockTolerance: " + clockTolerance)
            val digestMethod = params.getAs[String]("digestMethod")

    //println("digestMethod: " + digestMethod)
            val signatureMethod = params.getAs[String]("signatureMethod")

    //println("signatureMethod: " + signatureMethod)
            val userIntermediatePath = params.getAs[String]("userIntermediatePath")

    //println("userIntermediatePath: " + userIntermediatePath)
        val propertylistString = params.getAs[String]("propertylist")
    val propertylist = if("csv" == "default" || "csv" == "csv") {
      propertylistString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("propertylist: " + propertylist)
  }

}
