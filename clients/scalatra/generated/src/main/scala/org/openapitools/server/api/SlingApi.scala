/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import java.io.File
import org.openapitools.server.model.KeystoreInfo
import org.openapitools.server.model.TruststoreInfo

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class SlingApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "SlingApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val deleteAgentOperation = (apiOperation[Unit]("deleteAgent")
    summary ""
    parameters(pathParam[String]("runmode").description(""), pathParam[String]("name").description(""))
  )

  delete("/etc/replication/agents.{runmode}/:name", operation(deleteAgentOperation)) {
    val runmode = params.getOrElse("runmode", halt(400))
    //println("runmode: " + runmode)
    val name = params.getOrElse("name", halt(400))
    //println("name: " + name)
  }

  

  val deleteNodeOperation = (apiOperation[Unit]("deleteNode")
    summary ""
    parameters(pathParam[String]("path").description(""), pathParam[String]("name").description(""))
  )

  delete("/:path/:name", operation(deleteNodeOperation)) {
    val path = params.getOrElse("path", halt(400))
    //println("path: " + path)
    val name = params.getOrElse("name", halt(400))
    //println("name: " + name)
  }

  

  val getAgentOperation = (apiOperation[Unit]("getAgent")
    summary ""
    parameters(pathParam[String]("runmode").description(""), pathParam[String]("name").description(""))
  )

  get("/etc/replication/agents.{runmode}/:name", operation(getAgentOperation)) {
    val runmode = params.getOrElse("runmode", halt(400))
    //println("runmode: " + runmode)
    val name = params.getOrElse("name", halt(400))
    //println("name: " + name)
  }

  

  val getAgentsOperation = (apiOperation[String]("getAgents")
    summary ""
    parameters(pathParam[String]("runmode").description(""))
  )

  get("/etc/replication/agents.{runmode}.-1.json", operation(getAgentsOperation)) {
    val runmode = params.getOrElse("runmode", halt(400))
    //println("runmode: " + runmode)
  }

  

  val getAuthorizableKeystoreOperation = (apiOperation[KeystoreInfo]("getAuthorizableKeystore")
    summary ""
    parameters(pathParam[String]("intermediatePath").description(""), pathParam[String]("authorizableId").description(""))
  )

  get("/:intermediatePath/{authorizableId}.ks.json", operation(getAuthorizableKeystoreOperation)) {
    val intermediatePath = params.getOrElse("intermediatePath", halt(400))
    //println("intermediatePath: " + intermediatePath)
    val authorizableId = params.getOrElse("authorizableId", halt(400))
    //println("authorizableId: " + authorizableId)
  }

  

  val getKeystoreOperation = (apiOperation[File]("getKeystore")
    summary ""
    parameters(pathParam[String]("intermediatePath").description(""), pathParam[String]("authorizableId").description(""))
  )

  get("/:intermediatePath/:authorizableId/keystore/store.p12", operation(getKeystoreOperation)) {
    val intermediatePath = params.getOrElse("intermediatePath", halt(400))
    //println("intermediatePath: " + intermediatePath)
    val authorizableId = params.getOrElse("authorizableId", halt(400))
    //println("authorizableId: " + authorizableId)
  }

  

  val getNodeOperation = (apiOperation[Unit]("getNode")
    summary ""
    parameters(pathParam[String]("path").description(""), pathParam[String]("name").description(""))
  )

  get("/:path/:name", operation(getNodeOperation)) {
    val path = params.getOrElse("path", halt(400))
    //println("path: " + path)
    val name = params.getOrElse("name", halt(400))
    //println("name: " + name)
  }

  

  val getPackageOperation = (apiOperation[File]("getPackage")
    summary ""
    parameters(pathParam[String]("group").description(""), pathParam[String]("name").description(""), pathParam[String]("version").description(""))
  )

  get("/etc/packages/:group/{name}-{version}.zip", operation(getPackageOperation)) {
    val group = params.getOrElse("group", halt(400))
    //println("group: " + group)
    val name = params.getOrElse("name", halt(400))
    //println("name: " + name)
    val version = params.getOrElse("version", halt(400))
    //println("version: " + version)
  }

  

  val getPackageFilterOperation = (apiOperation[String]("getPackageFilter")
    summary ""
    parameters(pathParam[String]("group").description(""), pathParam[String]("name").description(""), pathParam[String]("version").description(""))
  )

  get("/etc/packages/:group/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json", operation(getPackageFilterOperation)) {
    val group = params.getOrElse("group", halt(400))
    //println("group: " + group)
    val name = params.getOrElse("name", halt(400))
    //println("name: " + name)
    val version = params.getOrElse("version", halt(400))
    //println("version: " + version)
  }

  

  val getQueryOperation = (apiOperation[String]("getQuery")
    summary ""
    parameters(queryParam[String]("path").description(""), queryParam[Double]("pPeriodlimit").description(""), queryParam[String]("1Property").description(""), queryParam[String]("1PropertyPeriodvalue").description(""))
  )

  get("/bin/querybuilder.json", operation(getQueryOperation)) {
            val path = params.getAs[String]("path")

    //println("path: " + path)
            val pPeriodlimit = params.getAs[Double]("pPeriodlimit")

    //println("pPeriodlimit: " + pPeriodlimit)
            val 1Property = params.getAs[String]("1Property")

    //println("1Property: " + 1Property)
            val 1PropertyPeriodvalue = params.getAs[String]("1PropertyPeriodvalue")

    //println("1PropertyPeriodvalue: " + 1PropertyPeriodvalue)
  }

  

  val getTruststoreOperation = (apiOperation[File]("getTruststore")
    summary ""
    parameters()
  )

  get("/etc/truststore/truststore.p12", operation(getTruststoreOperation)) {
  }

  

  val getTruststoreInfoOperation = (apiOperation[TruststoreInfo]("getTruststoreInfo")
    summary ""
    parameters()
  )

  get("/libs/granite/security/truststore.json", operation(getTruststoreInfoOperation)) {
  }

  

  val postAgentOperation = (apiOperation[Unit]("postAgent")
    summary ""
    parameters(pathParam[String]("runmode").description(""), pathParam[String]("name").description(""), queryParam[Boolean]("jcrContentSlashcqDistribute").description("").optional, queryParam[String]("jcrContentSlashcqDistributeAtTypeHint").description("").optional, queryParam[String]("jcrContentSlashcqName").description("").optional, queryParam[String]("jcrContentSlashcqTemplate").description("").optional, queryParam[Boolean]("jcrContentSlashenabled").description("").optional, queryParam[String]("jcrContentSlashjcrDescription").description("").optional, queryParam[String]("jcrContentSlashjcrLastModified").description("").optional, queryParam[String]("jcrContentSlashjcrLastModifiedBy").description("").optional, queryParam[String]("jcrContentSlashjcrMixinTypes").description("").optional, queryParam[String]("jcrContentSlashjcrTitle").description("").optional, queryParam[String]("jcrContentSlashlogLevel").description("").optional, queryParam[Boolean]("jcrContentSlashnoStatusUpdate").description("").optional, queryParam[Boolean]("jcrContentSlashnoVersioning").description("").optional, queryParam[Double]("jcrContentSlashprotocolConnectTimeout").description("").optional, queryParam[Boolean]("jcrContentSlashprotocolHTTPConnectionClosed").description("").optional, queryParam[String]("jcrContentSlashprotocolHTTPExpired").description("").optional, queryParam[List[String]]("jcrContentSlashprotocolHTTPHeaders").description("").optional.defaultValue(List.empty[String] ), queryParam[String]("jcrContentSlashprotocolHTTPHeadersAtTypeHint").description("").optional, queryParam[String]("jcrContentSlashprotocolHTTPMethod").description("").optional, queryParam[Boolean]("jcrContentSlashprotocolHTTPSRelaxed").description("").optional, queryParam[String]("jcrContentSlashprotocolInterface").description("").optional, queryParam[Double]("jcrContentSlashprotocolSocketTimeout").description("").optional, queryParam[String]("jcrContentSlashprotocolVersion").description("").optional, queryParam[String]("jcrContentSlashproxyNTLMDomain").description("").optional, queryParam[String]("jcrContentSlashproxyNTLMHost").description("").optional, queryParam[String]("jcrContentSlashproxyHost").description("").optional, queryParam[String]("jcrContentSlashproxyPassword").description("").optional, queryParam[Double]("jcrContentSlashproxyPort").description("").optional, queryParam[String]("jcrContentSlashproxyUser").description("").optional, queryParam[Double]("jcrContentSlashqueueBatchMaxSize").description("").optional, queryParam[String]("jcrContentSlashqueueBatchMode").description("").optional, queryParam[Double]("jcrContentSlashqueueBatchWaitTime").description("").optional, queryParam[String]("jcrContentSlashretryDelay").description("").optional, queryParam[Boolean]("jcrContentSlashreverseReplication").description("").optional, queryParam[String]("jcrContentSlashserializationType").description("").optional, queryParam[String]("jcrContentSlashslingResourceType").description("").optional, queryParam[String]("jcrContentSlashssl").description("").optional, queryParam[String]("jcrContentSlashtransportNTLMDomain").description("").optional, queryParam[String]("jcrContentSlashtransportNTLMHost").description("").optional, queryParam[String]("jcrContentSlashtransportPassword").description("").optional, queryParam[String]("jcrContentSlashtransportUri").description("").optional, queryParam[String]("jcrContentSlashtransportUser").description("").optional, queryParam[Boolean]("jcrContentSlashtriggerDistribute").description("").optional, queryParam[Boolean]("jcrContentSlashtriggerModified").description("").optional, queryParam[Boolean]("jcrContentSlashtriggerOnOffTime").description("").optional, queryParam[Boolean]("jcrContentSlashtriggerReceive").description("").optional, queryParam[Boolean]("jcrContentSlashtriggerSpecific").description("").optional, queryParam[String]("jcrContentSlashuserId").description("").optional, queryParam[String]("jcrPrimaryType").description("").optional, queryParam[String]("operation").description("").optional)
  )

  post("/etc/replication/agents.{runmode}/:name", operation(postAgentOperation)) {
    val runmode = params.getOrElse("runmode", halt(400))
    //println("runmode: " + runmode)
    val name = params.getOrElse("name", halt(400))
    //println("name: " + name)
            val jcrContentSlashcqDistribute = params.getAs[Boolean]("jcrContentSlashcqDistribute")

    //println("jcrContentSlashcqDistribute: " + jcrContentSlashcqDistribute)
            val jcrContentSlashcqDistributeAtTypeHint = params.getAs[String]("jcrContentSlashcqDistributeAtTypeHint")

    //println("jcrContentSlashcqDistributeAtTypeHint: " + jcrContentSlashcqDistributeAtTypeHint)
            val jcrContentSlashcqName = params.getAs[String]("jcrContentSlashcqName")

    //println("jcrContentSlashcqName: " + jcrContentSlashcqName)
            val jcrContentSlashcqTemplate = params.getAs[String]("jcrContentSlashcqTemplate")

    //println("jcrContentSlashcqTemplate: " + jcrContentSlashcqTemplate)
            val jcrContentSlashenabled = params.getAs[Boolean]("jcrContentSlashenabled")

    //println("jcrContentSlashenabled: " + jcrContentSlashenabled)
            val jcrContentSlashjcrDescription = params.getAs[String]("jcrContentSlashjcrDescription")

    //println("jcrContentSlashjcrDescription: " + jcrContentSlashjcrDescription)
            val jcrContentSlashjcrLastModified = params.getAs[String]("jcrContentSlashjcrLastModified")

    //println("jcrContentSlashjcrLastModified: " + jcrContentSlashjcrLastModified)
            val jcrContentSlashjcrLastModifiedBy = params.getAs[String]("jcrContentSlashjcrLastModifiedBy")

    //println("jcrContentSlashjcrLastModifiedBy: " + jcrContentSlashjcrLastModifiedBy)
            val jcrContentSlashjcrMixinTypes = params.getAs[String]("jcrContentSlashjcrMixinTypes")

    //println("jcrContentSlashjcrMixinTypes: " + jcrContentSlashjcrMixinTypes)
            val jcrContentSlashjcrTitle = params.getAs[String]("jcrContentSlashjcrTitle")

    //println("jcrContentSlashjcrTitle: " + jcrContentSlashjcrTitle)
            val jcrContentSlashlogLevel = params.getAs[String]("jcrContentSlashlogLevel")

    //println("jcrContentSlashlogLevel: " + jcrContentSlashlogLevel)
            val jcrContentSlashnoStatusUpdate = params.getAs[Boolean]("jcrContentSlashnoStatusUpdate")

    //println("jcrContentSlashnoStatusUpdate: " + jcrContentSlashnoStatusUpdate)
            val jcrContentSlashnoVersioning = params.getAs[Boolean]("jcrContentSlashnoVersioning")

    //println("jcrContentSlashnoVersioning: " + jcrContentSlashnoVersioning)
            val jcrContentSlashprotocolConnectTimeout = params.getAs[Double]("jcrContentSlashprotocolConnectTimeout")

    //println("jcrContentSlashprotocolConnectTimeout: " + jcrContentSlashprotocolConnectTimeout)
            val jcrContentSlashprotocolHTTPConnectionClosed = params.getAs[Boolean]("jcrContentSlashprotocolHTTPConnectionClosed")

    //println("jcrContentSlashprotocolHTTPConnectionClosed: " + jcrContentSlashprotocolHTTPConnectionClosed)
            val jcrContentSlashprotocolHTTPExpired = params.getAs[String]("jcrContentSlashprotocolHTTPExpired")

    //println("jcrContentSlashprotocolHTTPExpired: " + jcrContentSlashprotocolHTTPExpired)
        val jcrContentSlashprotocolHTTPHeadersString = params.getAs[String]("jcrContentSlashprotocolHTTPHeaders")
    val jcrContentSlashprotocolHTTPHeaders = if("multi" == "default" || "multi" == "csv") {
      jcrContentSlashprotocolHTTPHeadersString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("jcrContentSlashprotocolHTTPHeaders: " + jcrContentSlashprotocolHTTPHeaders)
            val jcrContentSlashprotocolHTTPHeadersAtTypeHint = params.getAs[String]("jcrContentSlashprotocolHTTPHeadersAtTypeHint")

    //println("jcrContentSlashprotocolHTTPHeadersAtTypeHint: " + jcrContentSlashprotocolHTTPHeadersAtTypeHint)
            val jcrContentSlashprotocolHTTPMethod = params.getAs[String]("jcrContentSlashprotocolHTTPMethod")

    //println("jcrContentSlashprotocolHTTPMethod: " + jcrContentSlashprotocolHTTPMethod)
            val jcrContentSlashprotocolHTTPSRelaxed = params.getAs[Boolean]("jcrContentSlashprotocolHTTPSRelaxed")

    //println("jcrContentSlashprotocolHTTPSRelaxed: " + jcrContentSlashprotocolHTTPSRelaxed)
            val jcrContentSlashprotocolInterface = params.getAs[String]("jcrContentSlashprotocolInterface")

    //println("jcrContentSlashprotocolInterface: " + jcrContentSlashprotocolInterface)
            val jcrContentSlashprotocolSocketTimeout = params.getAs[Double]("jcrContentSlashprotocolSocketTimeout")

    //println("jcrContentSlashprotocolSocketTimeout: " + jcrContentSlashprotocolSocketTimeout)
            val jcrContentSlashprotocolVersion = params.getAs[String]("jcrContentSlashprotocolVersion")

    //println("jcrContentSlashprotocolVersion: " + jcrContentSlashprotocolVersion)
            val jcrContentSlashproxyNTLMDomain = params.getAs[String]("jcrContentSlashproxyNTLMDomain")

    //println("jcrContentSlashproxyNTLMDomain: " + jcrContentSlashproxyNTLMDomain)
            val jcrContentSlashproxyNTLMHost = params.getAs[String]("jcrContentSlashproxyNTLMHost")

    //println("jcrContentSlashproxyNTLMHost: " + jcrContentSlashproxyNTLMHost)
            val jcrContentSlashproxyHost = params.getAs[String]("jcrContentSlashproxyHost")

    //println("jcrContentSlashproxyHost: " + jcrContentSlashproxyHost)
            val jcrContentSlashproxyPassword = params.getAs[String]("jcrContentSlashproxyPassword")

    //println("jcrContentSlashproxyPassword: " + jcrContentSlashproxyPassword)
            val jcrContentSlashproxyPort = params.getAs[Double]("jcrContentSlashproxyPort")

    //println("jcrContentSlashproxyPort: " + jcrContentSlashproxyPort)
            val jcrContentSlashproxyUser = params.getAs[String]("jcrContentSlashproxyUser")

    //println("jcrContentSlashproxyUser: " + jcrContentSlashproxyUser)
            val jcrContentSlashqueueBatchMaxSize = params.getAs[Double]("jcrContentSlashqueueBatchMaxSize")

    //println("jcrContentSlashqueueBatchMaxSize: " + jcrContentSlashqueueBatchMaxSize)
            val jcrContentSlashqueueBatchMode = params.getAs[String]("jcrContentSlashqueueBatchMode")

    //println("jcrContentSlashqueueBatchMode: " + jcrContentSlashqueueBatchMode)
            val jcrContentSlashqueueBatchWaitTime = params.getAs[Double]("jcrContentSlashqueueBatchWaitTime")

    //println("jcrContentSlashqueueBatchWaitTime: " + jcrContentSlashqueueBatchWaitTime)
            val jcrContentSlashretryDelay = params.getAs[String]("jcrContentSlashretryDelay")

    //println("jcrContentSlashretryDelay: " + jcrContentSlashretryDelay)
            val jcrContentSlashreverseReplication = params.getAs[Boolean]("jcrContentSlashreverseReplication")

    //println("jcrContentSlashreverseReplication: " + jcrContentSlashreverseReplication)
            val jcrContentSlashserializationType = params.getAs[String]("jcrContentSlashserializationType")

    //println("jcrContentSlashserializationType: " + jcrContentSlashserializationType)
            val jcrContentSlashslingResourceType = params.getAs[String]("jcrContentSlashslingResourceType")

    //println("jcrContentSlashslingResourceType: " + jcrContentSlashslingResourceType)
            val jcrContentSlashssl = params.getAs[String]("jcrContentSlashssl")

    //println("jcrContentSlashssl: " + jcrContentSlashssl)
            val jcrContentSlashtransportNTLMDomain = params.getAs[String]("jcrContentSlashtransportNTLMDomain")

    //println("jcrContentSlashtransportNTLMDomain: " + jcrContentSlashtransportNTLMDomain)
            val jcrContentSlashtransportNTLMHost = params.getAs[String]("jcrContentSlashtransportNTLMHost")

    //println("jcrContentSlashtransportNTLMHost: " + jcrContentSlashtransportNTLMHost)
            val jcrContentSlashtransportPassword = params.getAs[String]("jcrContentSlashtransportPassword")

    //println("jcrContentSlashtransportPassword: " + jcrContentSlashtransportPassword)
            val jcrContentSlashtransportUri = params.getAs[String]("jcrContentSlashtransportUri")

    //println("jcrContentSlashtransportUri: " + jcrContentSlashtransportUri)
            val jcrContentSlashtransportUser = params.getAs[String]("jcrContentSlashtransportUser")

    //println("jcrContentSlashtransportUser: " + jcrContentSlashtransportUser)
            val jcrContentSlashtriggerDistribute = params.getAs[Boolean]("jcrContentSlashtriggerDistribute")

    //println("jcrContentSlashtriggerDistribute: " + jcrContentSlashtriggerDistribute)
            val jcrContentSlashtriggerModified = params.getAs[Boolean]("jcrContentSlashtriggerModified")

    //println("jcrContentSlashtriggerModified: " + jcrContentSlashtriggerModified)
            val jcrContentSlashtriggerOnOffTime = params.getAs[Boolean]("jcrContentSlashtriggerOnOffTime")

    //println("jcrContentSlashtriggerOnOffTime: " + jcrContentSlashtriggerOnOffTime)
            val jcrContentSlashtriggerReceive = params.getAs[Boolean]("jcrContentSlashtriggerReceive")

    //println("jcrContentSlashtriggerReceive: " + jcrContentSlashtriggerReceive)
            val jcrContentSlashtriggerSpecific = params.getAs[Boolean]("jcrContentSlashtriggerSpecific")

    //println("jcrContentSlashtriggerSpecific: " + jcrContentSlashtriggerSpecific)
            val jcrContentSlashuserId = params.getAs[String]("jcrContentSlashuserId")

    //println("jcrContentSlashuserId: " + jcrContentSlashuserId)
            val jcrPrimaryType = params.getAs[String]("jcrPrimaryType")

    //println("jcrPrimaryType: " + jcrPrimaryType)
            val operation = params.getAs[String]("operation")

    //println("operation: " + operation)
  }

  

  val postAuthorizableKeystoreOperation = (apiOperation[KeystoreInfo]("postAuthorizableKeystore")
    summary ""
    parameters(pathParam[String]("intermediatePath").description(""), pathParam[String]("authorizableId").description(""), queryParam[String]("operation").description("").optional, queryParam[String]("currentPassword").description("").optional, queryParam[String]("newPassword").description("").optional, queryParam[String]("rePassword").description("").optional, queryParam[String]("keyPassword").description("").optional, queryParam[String]("keyStorePass").description("").optional, queryParam[String]("alias").description("").optional, queryParam[String]("newAlias").description("").optional, queryParam[String]("removeAlias").description("").optional, formParam[File]("certChain").description("").optional, formParam[File]("pk").description("").optional, formParam[File]("keyStore").description("").optional)
  )

  post("/:intermediatePath/{authorizableId}.ks.html", operation(postAuthorizableKeystoreOperation)) {
    val intermediatePath = params.getOrElse("intermediatePath", halt(400))
    //println("intermediatePath: " + intermediatePath)
    val authorizableId = params.getOrElse("authorizableId", halt(400))
    //println("authorizableId: " + authorizableId)
            val operation = params.getAs[String]("operation")

    //println("operation: " + operation)
            val currentPassword = params.getAs[String]("currentPassword")

    //println("currentPassword: " + currentPassword)
            val newPassword = params.getAs[String]("newPassword")

    //println("newPassword: " + newPassword)
            val rePassword = params.getAs[String]("rePassword")

    //println("rePassword: " + rePassword)
            val keyPassword = params.getAs[String]("keyPassword")

    //println("keyPassword: " + keyPassword)
            val keyStorePass = params.getAs[String]("keyStorePass")

    //println("keyStorePass: " + keyStorePass)
            val alias = params.getAs[String]("alias")

    //println("alias: " + alias)
            val newAlias = params.getAs[String]("newAlias")

    //println("newAlias: " + newAlias)
            val removeAlias = params.getAs[String]("removeAlias")

    //println("removeAlias: " + removeAlias)
    val certChain = fileParams("certChain")
    //println("certChain: " + certChain)
    val pk = fileParams("pk")
    //println("pk: " + pk)
    val keyStore = fileParams("keyStore")
    //println("keyStore: " + keyStore)
  }

  

  val postAuthorizablesOperation = (apiOperation[String]("postAuthorizables")
    summary ""
    parameters(queryParam[String]("authorizableId").description(""), queryParam[String]("intermediatePath").description(""), queryParam[String]("createUser").description("").optional, queryParam[String]("createGroup").description("").optional, queryParam[String]("repPassword").description("").optional, queryParam[String]("profileSlashgivenName").description("").optional)
  )

  post("/libs/granite/security/post/authorizables", operation(postAuthorizablesOperation)) {
            val authorizableId = params.getAs[String]("authorizableId")

    //println("authorizableId: " + authorizableId)
            val intermediatePath = params.getAs[String]("intermediatePath")

    //println("intermediatePath: " + intermediatePath)
            val createUser = params.getAs[String]("createUser")

    //println("createUser: " + createUser)
            val createGroup = params.getAs[String]("createGroup")

    //println("createGroup: " + createGroup)
            val repPassword = params.getAs[String]("repPassword")

    //println("repPassword: " + repPassword)
            val profileSlashgivenName = params.getAs[String]("profileSlashgivenName")

    //println("profileSlashgivenName: " + profileSlashgivenName)
  }

  

  val postConfigAdobeGraniteSamlAuthenticationHandlerOperation = (apiOperation[Unit]("postConfigAdobeGraniteSamlAuthenticationHandler")
    summary ""
    parameters(queryParam[String]("keyStorePassword").description("").optional, queryParam[String]("keyStorePasswordAtTypeHint").description("").optional, queryParam[Int]("servicePeriodranking").description("").optional, queryParam[String]("servicePeriodrankingAtTypeHint").description("").optional, queryParam[Boolean]("idpHttpRedirect").description("").optional, queryParam[String]("idpHttpRedirectAtTypeHint").description("").optional, queryParam[Boolean]("createUser").description("").optional, queryParam[String]("createUserAtTypeHint").description("").optional, queryParam[String]("defaultRedirectUrl").description("").optional, queryParam[String]("defaultRedirectUrlAtTypeHint").description("").optional, queryParam[String]("userIDAttribute").description("").optional, queryParam[String]("userIDAttributeAtTypeHint").description("").optional, queryParam[List[String]]("defaultGroups").description("").optional.defaultValue(List.empty[String] ), queryParam[String]("defaultGroupsAtTypeHint").description("").optional, queryParam[String]("idpCertAlias").description("").optional, queryParam[String]("idpCertAliasAtTypeHint").description("").optional, queryParam[Boolean]("addGroupMemberships").description("").optional, queryParam[String]("addGroupMembershipsAtTypeHint").description("").optional, queryParam[List[String]]("path").description("").optional.defaultValue(List.empty[String] ), queryParam[String]("pathAtTypeHint").description("").optional, queryParam[List[String]]("synchronizeAttributes").description("").optional.defaultValue(List.empty[String] ), queryParam[String]("synchronizeAttributesAtTypeHint").description("").optional, queryParam[Int]("clockTolerance").description("").optional, queryParam[String]("clockToleranceAtTypeHint").description("").optional, queryParam[String]("groupMembershipAttribute").description("").optional, queryParam[String]("groupMembershipAttributeAtTypeHint").description("").optional, queryParam[String]("idpUrl").description("").optional, queryParam[String]("idpUrlAtTypeHint").description("").optional, queryParam[String]("logoutUrl").description("").optional, queryParam[String]("logoutUrlAtTypeHint").description("").optional, queryParam[String]("serviceProviderEntityId").description("").optional, queryParam[String]("serviceProviderEntityIdAtTypeHint").description("").optional, queryParam[String]("assertionConsumerServiceURL").description("").optional, queryParam[String]("assertionConsumerServiceURLAtTypeHint").description("").optional, queryParam[Boolean]("handleLogout").description("").optional, queryParam[String]("handleLogoutAtTypeHint").description("").optional, queryParam[String]("spPrivateKeyAlias").description("").optional, queryParam[String]("spPrivateKeyAliasAtTypeHint").description("").optional, queryParam[Boolean]("useEncryption").description("").optional, queryParam[String]("useEncryptionAtTypeHint").description("").optional, queryParam[String]("nameIdFormat").description("").optional, queryParam[String]("nameIdFormatAtTypeHint").description("").optional, queryParam[String]("digestMethod").description("").optional, queryParam[String]("digestMethodAtTypeHint").description("").optional, queryParam[String]("signatureMethod").description("").optional, queryParam[String]("signatureMethodAtTypeHint").description("").optional, queryParam[String]("userIntermediatePath").description("").optional, queryParam[String]("userIntermediatePathAtTypeHint").description("").optional)
  )

  post("/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config", operation(postConfigAdobeGraniteSamlAuthenticationHandlerOperation)) {
            val keyStorePassword = params.getAs[String]("keyStorePassword")

    //println("keyStorePassword: " + keyStorePassword)
            val keyStorePasswordAtTypeHint = params.getAs[String]("keyStorePasswordAtTypeHint")

    //println("keyStorePasswordAtTypeHint: " + keyStorePasswordAtTypeHint)
            val servicePeriodranking = params.getAs[Int]("servicePeriodranking")

    //println("servicePeriodranking: " + servicePeriodranking)
            val servicePeriodrankingAtTypeHint = params.getAs[String]("servicePeriodrankingAtTypeHint")

    //println("servicePeriodrankingAtTypeHint: " + servicePeriodrankingAtTypeHint)
            val idpHttpRedirect = params.getAs[Boolean]("idpHttpRedirect")

    //println("idpHttpRedirect: " + idpHttpRedirect)
            val idpHttpRedirectAtTypeHint = params.getAs[String]("idpHttpRedirectAtTypeHint")

    //println("idpHttpRedirectAtTypeHint: " + idpHttpRedirectAtTypeHint)
            val createUser = params.getAs[Boolean]("createUser")

    //println("createUser: " + createUser)
            val createUserAtTypeHint = params.getAs[String]("createUserAtTypeHint")

    //println("createUserAtTypeHint: " + createUserAtTypeHint)
            val defaultRedirectUrl = params.getAs[String]("defaultRedirectUrl")

    //println("defaultRedirectUrl: " + defaultRedirectUrl)
            val defaultRedirectUrlAtTypeHint = params.getAs[String]("defaultRedirectUrlAtTypeHint")

    //println("defaultRedirectUrlAtTypeHint: " + defaultRedirectUrlAtTypeHint)
            val userIDAttribute = params.getAs[String]("userIDAttribute")

    //println("userIDAttribute: " + userIDAttribute)
            val userIDAttributeAtTypeHint = params.getAs[String]("userIDAttributeAtTypeHint")

    //println("userIDAttributeAtTypeHint: " + userIDAttributeAtTypeHint)
        val defaultGroupsString = params.getAs[String]("defaultGroups")
    val defaultGroups = if("multi" == "default" || "multi" == "csv") {
      defaultGroupsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("defaultGroups: " + defaultGroups)
            val defaultGroupsAtTypeHint = params.getAs[String]("defaultGroupsAtTypeHint")

    //println("defaultGroupsAtTypeHint: " + defaultGroupsAtTypeHint)
            val idpCertAlias = params.getAs[String]("idpCertAlias")

    //println("idpCertAlias: " + idpCertAlias)
            val idpCertAliasAtTypeHint = params.getAs[String]("idpCertAliasAtTypeHint")

    //println("idpCertAliasAtTypeHint: " + idpCertAliasAtTypeHint)
            val addGroupMemberships = params.getAs[Boolean]("addGroupMemberships")

    //println("addGroupMemberships: " + addGroupMemberships)
            val addGroupMembershipsAtTypeHint = params.getAs[String]("addGroupMembershipsAtTypeHint")

    //println("addGroupMembershipsAtTypeHint: " + addGroupMembershipsAtTypeHint)
        val pathString = params.getAs[String]("path")
    val path = if("multi" == "default" || "multi" == "csv") {
      pathString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("path: " + path)
            val pathAtTypeHint = params.getAs[String]("pathAtTypeHint")

    //println("pathAtTypeHint: " + pathAtTypeHint)
        val synchronizeAttributesString = params.getAs[String]("synchronizeAttributes")
    val synchronizeAttributes = if("multi" == "default" || "multi" == "csv") {
      synchronizeAttributesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("synchronizeAttributes: " + synchronizeAttributes)
            val synchronizeAttributesAtTypeHint = params.getAs[String]("synchronizeAttributesAtTypeHint")

    //println("synchronizeAttributesAtTypeHint: " + synchronizeAttributesAtTypeHint)
            val clockTolerance = params.getAs[Int]("clockTolerance")

    //println("clockTolerance: " + clockTolerance)
            val clockToleranceAtTypeHint = params.getAs[String]("clockToleranceAtTypeHint")

    //println("clockToleranceAtTypeHint: " + clockToleranceAtTypeHint)
            val groupMembershipAttribute = params.getAs[String]("groupMembershipAttribute")

    //println("groupMembershipAttribute: " + groupMembershipAttribute)
            val groupMembershipAttributeAtTypeHint = params.getAs[String]("groupMembershipAttributeAtTypeHint")

    //println("groupMembershipAttributeAtTypeHint: " + groupMembershipAttributeAtTypeHint)
            val idpUrl = params.getAs[String]("idpUrl")

    //println("idpUrl: " + idpUrl)
            val idpUrlAtTypeHint = params.getAs[String]("idpUrlAtTypeHint")

    //println("idpUrlAtTypeHint: " + idpUrlAtTypeHint)
            val logoutUrl = params.getAs[String]("logoutUrl")

    //println("logoutUrl: " + logoutUrl)
            val logoutUrlAtTypeHint = params.getAs[String]("logoutUrlAtTypeHint")

    //println("logoutUrlAtTypeHint: " + logoutUrlAtTypeHint)
            val serviceProviderEntityId = params.getAs[String]("serviceProviderEntityId")

    //println("serviceProviderEntityId: " + serviceProviderEntityId)
            val serviceProviderEntityIdAtTypeHint = params.getAs[String]("serviceProviderEntityIdAtTypeHint")

    //println("serviceProviderEntityIdAtTypeHint: " + serviceProviderEntityIdAtTypeHint)
            val assertionConsumerServiceURL = params.getAs[String]("assertionConsumerServiceURL")

    //println("assertionConsumerServiceURL: " + assertionConsumerServiceURL)
            val assertionConsumerServiceURLAtTypeHint = params.getAs[String]("assertionConsumerServiceURLAtTypeHint")

    //println("assertionConsumerServiceURLAtTypeHint: " + assertionConsumerServiceURLAtTypeHint)
            val handleLogout = params.getAs[Boolean]("handleLogout")

    //println("handleLogout: " + handleLogout)
            val handleLogoutAtTypeHint = params.getAs[String]("handleLogoutAtTypeHint")

    //println("handleLogoutAtTypeHint: " + handleLogoutAtTypeHint)
            val spPrivateKeyAlias = params.getAs[String]("spPrivateKeyAlias")

    //println("spPrivateKeyAlias: " + spPrivateKeyAlias)
            val spPrivateKeyAliasAtTypeHint = params.getAs[String]("spPrivateKeyAliasAtTypeHint")

    //println("spPrivateKeyAliasAtTypeHint: " + spPrivateKeyAliasAtTypeHint)
            val useEncryption = params.getAs[Boolean]("useEncryption")

    //println("useEncryption: " + useEncryption)
            val useEncryptionAtTypeHint = params.getAs[String]("useEncryptionAtTypeHint")

    //println("useEncryptionAtTypeHint: " + useEncryptionAtTypeHint)
            val nameIdFormat = params.getAs[String]("nameIdFormat")

    //println("nameIdFormat: " + nameIdFormat)
            val nameIdFormatAtTypeHint = params.getAs[String]("nameIdFormatAtTypeHint")

    //println("nameIdFormatAtTypeHint: " + nameIdFormatAtTypeHint)
            val digestMethod = params.getAs[String]("digestMethod")

    //println("digestMethod: " + digestMethod)
            val digestMethodAtTypeHint = params.getAs[String]("digestMethodAtTypeHint")

    //println("digestMethodAtTypeHint: " + digestMethodAtTypeHint)
            val signatureMethod = params.getAs[String]("signatureMethod")

    //println("signatureMethod: " + signatureMethod)
            val signatureMethodAtTypeHint = params.getAs[String]("signatureMethodAtTypeHint")

    //println("signatureMethodAtTypeHint: " + signatureMethodAtTypeHint)
            val userIntermediatePath = params.getAs[String]("userIntermediatePath")

    //println("userIntermediatePath: " + userIntermediatePath)
            val userIntermediatePathAtTypeHint = params.getAs[String]("userIntermediatePathAtTypeHint")

    //println("userIntermediatePathAtTypeHint: " + userIntermediatePathAtTypeHint)
  }

  

  val postConfigApacheFelixJettyBasedHttpServiceOperation = (apiOperation[Unit]("postConfigApacheFelixJettyBasedHttpService")
    summary ""
    parameters(queryParam[Boolean]("orgPeriodapachePeriodfelixPeriodhttpsPeriodnio").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodnioAtTypeHint").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystoreAtTypeHint").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpasswordAtTypeHint").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkey").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyAtTypeHint").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpasswordAtTypeHint").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststoreAtTypeHint").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpasswordAtTypeHint").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificateAtTypeHint").description("").optional, queryParam[Boolean]("orgPeriodapachePeriodfelixPeriodhttpsPeriodenable").description("").optional, queryParam[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodenableAtTypeHint").description("").optional, queryParam[String]("orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure").description("").optional, queryParam[String]("orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecureAtTypeHint").description("").optional)
  )

  post("/apps/system/config/org.apache.felix.http", operation(postConfigApacheFelixJettyBasedHttpServiceOperation)) {
            val orgPeriodapachePeriodfelixPeriodhttpsPeriodnio = params.getAs[Boolean]("orgPeriodapachePeriodfelixPeriodhttpsPeriodnio")

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodnio: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodnio)
            val orgPeriodapachePeriodfelixPeriodhttpsPeriodnioAtTypeHint = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodnioAtTypeHint")

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodnioAtTypeHint: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodnioAtTypeHint)
            val orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore")

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore)
            val orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystoreAtTypeHint = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystoreAtTypeHint")

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystoreAtTypeHint: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystoreAtTypeHint)
            val orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword")

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword)
            val orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpasswordAtTypeHint = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpasswordAtTypeHint")

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpasswordAtTypeHint: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpasswordAtTypeHint)
            val orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkey = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkey")

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkey: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkey)
            val orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyAtTypeHint = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyAtTypeHint")

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyAtTypeHint: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyAtTypeHint)
            val orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword")

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword)
            val orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpasswordAtTypeHint = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpasswordAtTypeHint")

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpasswordAtTypeHint: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpasswordAtTypeHint)
            val orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore")

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore)
            val orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststoreAtTypeHint = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststoreAtTypeHint")

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststoreAtTypeHint: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststoreAtTypeHint)
            val orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword")

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword)
            val orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpasswordAtTypeHint = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpasswordAtTypeHint")

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpasswordAtTypeHint: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpasswordAtTypeHint)
            val orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate")

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate)
            val orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificateAtTypeHint = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificateAtTypeHint")

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificateAtTypeHint: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificateAtTypeHint)
            val orgPeriodapachePeriodfelixPeriodhttpsPeriodenable = params.getAs[Boolean]("orgPeriodapachePeriodfelixPeriodhttpsPeriodenable")

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodenable: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodenable)
            val orgPeriodapachePeriodfelixPeriodhttpsPeriodenableAtTypeHint = params.getAs[String]("orgPeriodapachePeriodfelixPeriodhttpsPeriodenableAtTypeHint")

    //println("orgPeriodapachePeriodfelixPeriodhttpsPeriodenableAtTypeHint: " + orgPeriodapachePeriodfelixPeriodhttpsPeriodenableAtTypeHint)
            val orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure = params.getAs[String]("orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure")

    //println("orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure: " + orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure)
            val orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecureAtTypeHint = params.getAs[String]("orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecureAtTypeHint")

    //println("orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecureAtTypeHint: " + orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecureAtTypeHint)
  }

  

  val postConfigApacheHttpComponentsProxyConfigurationOperation = (apiOperation[Unit]("postConfigApacheHttpComponentsProxyConfiguration")
    summary ""
    parameters(queryParam[String]("proxyPeriodhost").description("").optional, queryParam[String]("proxyPeriodhostAtTypeHint").description("").optional, queryParam[Int]("proxyPeriodport").description("").optional, queryParam[String]("proxyPeriodportAtTypeHint").description("").optional, queryParam[List[String]]("proxyPeriodexceptions").description("").optional.defaultValue(List.empty[String] ), queryParam[String]("proxyPeriodexceptionsAtTypeHint").description("").optional, queryParam[Boolean]("proxyPeriodenabled").description("").optional, queryParam[String]("proxyPeriodenabledAtTypeHint").description("").optional, queryParam[String]("proxyPerioduser").description("").optional, queryParam[String]("proxyPerioduserAtTypeHint").description("").optional, queryParam[String]("proxyPeriodpassword").description("").optional, queryParam[String]("proxyPeriodpasswordAtTypeHint").description("").optional)
  )

  post("/apps/system/config/org.apache.http.proxyconfigurator.config", operation(postConfigApacheHttpComponentsProxyConfigurationOperation)) {
            val proxyPeriodhost = params.getAs[String]("proxyPeriodhost")

    //println("proxyPeriodhost: " + proxyPeriodhost)
            val proxyPeriodhostAtTypeHint = params.getAs[String]("proxyPeriodhostAtTypeHint")

    //println("proxyPeriodhostAtTypeHint: " + proxyPeriodhostAtTypeHint)
            val proxyPeriodport = params.getAs[Int]("proxyPeriodport")

    //println("proxyPeriodport: " + proxyPeriodport)
            val proxyPeriodportAtTypeHint = params.getAs[String]("proxyPeriodportAtTypeHint")

    //println("proxyPeriodportAtTypeHint: " + proxyPeriodportAtTypeHint)
        val proxyPeriodexceptionsString = params.getAs[String]("proxyPeriodexceptions")
    val proxyPeriodexceptions = if("multi" == "default" || "multi" == "csv") {
      proxyPeriodexceptionsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("proxyPeriodexceptions: " + proxyPeriodexceptions)
            val proxyPeriodexceptionsAtTypeHint = params.getAs[String]("proxyPeriodexceptionsAtTypeHint")

    //println("proxyPeriodexceptionsAtTypeHint: " + proxyPeriodexceptionsAtTypeHint)
            val proxyPeriodenabled = params.getAs[Boolean]("proxyPeriodenabled")

    //println("proxyPeriodenabled: " + proxyPeriodenabled)
            val proxyPeriodenabledAtTypeHint = params.getAs[String]("proxyPeriodenabledAtTypeHint")

    //println("proxyPeriodenabledAtTypeHint: " + proxyPeriodenabledAtTypeHint)
            val proxyPerioduser = params.getAs[String]("proxyPerioduser")

    //println("proxyPerioduser: " + proxyPerioduser)
            val proxyPerioduserAtTypeHint = params.getAs[String]("proxyPerioduserAtTypeHint")

    //println("proxyPerioduserAtTypeHint: " + proxyPerioduserAtTypeHint)
            val proxyPeriodpassword = params.getAs[String]("proxyPeriodpassword")

    //println("proxyPeriodpassword: " + proxyPeriodpassword)
            val proxyPeriodpasswordAtTypeHint = params.getAs[String]("proxyPeriodpasswordAtTypeHint")

    //println("proxyPeriodpasswordAtTypeHint: " + proxyPeriodpasswordAtTypeHint)
  }

  

  val postConfigApacheSlingDavExServletOperation = (apiOperation[Unit]("postConfigApacheSlingDavExServlet")
    summary ""
    parameters(queryParam[String]("alias").description("").optional, queryParam[String]("aliasAtTypeHint").description("").optional, queryParam[Boolean]("davPeriodcreateAbsoluteUri").description("").optional, queryParam[String]("davPeriodcreateAbsoluteUriAtTypeHint").description("").optional)
  )

  post("/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet", operation(postConfigApacheSlingDavExServletOperation)) {
            val alias = params.getAs[String]("alias")

    //println("alias: " + alias)
            val aliasAtTypeHint = params.getAs[String]("aliasAtTypeHint")

    //println("aliasAtTypeHint: " + aliasAtTypeHint)
            val davPeriodcreateAbsoluteUri = params.getAs[Boolean]("davPeriodcreateAbsoluteUri")

    //println("davPeriodcreateAbsoluteUri: " + davPeriodcreateAbsoluteUri)
            val davPeriodcreateAbsoluteUriAtTypeHint = params.getAs[String]("davPeriodcreateAbsoluteUriAtTypeHint")

    //println("davPeriodcreateAbsoluteUriAtTypeHint: " + davPeriodcreateAbsoluteUriAtTypeHint)
  }

  

  val postConfigApacheSlingGetServletOperation = (apiOperation[Unit]("postConfigApacheSlingGetServlet")
    summary ""
    parameters(queryParam[String]("jsonPeriodmaximumresults").description("").optional, queryParam[String]("jsonPeriodmaximumresultsAtTypeHint").description("").optional, queryParam[Boolean]("enablePeriodhtml").description("").optional, queryParam[String]("enablePeriodhtmlAtTypeHint").description("").optional, queryParam[Boolean]("enablePeriodtxt").description("").optional, queryParam[String]("enablePeriodtxtAtTypeHint").description("").optional, queryParam[Boolean]("enablePeriodxml").description("").optional, queryParam[String]("enablePeriodxmlAtTypeHint").description("").optional)
  )

  post("/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet", operation(postConfigApacheSlingGetServletOperation)) {
            val jsonPeriodmaximumresults = params.getAs[String]("jsonPeriodmaximumresults")

    //println("jsonPeriodmaximumresults: " + jsonPeriodmaximumresults)
            val jsonPeriodmaximumresultsAtTypeHint = params.getAs[String]("jsonPeriodmaximumresultsAtTypeHint")

    //println("jsonPeriodmaximumresultsAtTypeHint: " + jsonPeriodmaximumresultsAtTypeHint)
            val enablePeriodhtml = params.getAs[Boolean]("enablePeriodhtml")

    //println("enablePeriodhtml: " + enablePeriodhtml)
            val enablePeriodhtmlAtTypeHint = params.getAs[String]("enablePeriodhtmlAtTypeHint")

    //println("enablePeriodhtmlAtTypeHint: " + enablePeriodhtmlAtTypeHint)
            val enablePeriodtxt = params.getAs[Boolean]("enablePeriodtxt")

    //println("enablePeriodtxt: " + enablePeriodtxt)
            val enablePeriodtxtAtTypeHint = params.getAs[String]("enablePeriodtxtAtTypeHint")

    //println("enablePeriodtxtAtTypeHint: " + enablePeriodtxtAtTypeHint)
            val enablePeriodxml = params.getAs[Boolean]("enablePeriodxml")

    //println("enablePeriodxml: " + enablePeriodxml)
            val enablePeriodxmlAtTypeHint = params.getAs[String]("enablePeriodxmlAtTypeHint")

    //println("enablePeriodxmlAtTypeHint: " + enablePeriodxmlAtTypeHint)
  }

  

  val postConfigApacheSlingReferrerFilterOperation = (apiOperation[Unit]("postConfigApacheSlingReferrerFilter")
    summary ""
    parameters(queryParam[Boolean]("allowPeriodempty").description("").optional, queryParam[String]("allowPeriodemptyAtTypeHint").description("").optional, queryParam[String]("allowPeriodhosts").description("").optional, queryParam[String]("allowPeriodhostsAtTypeHint").description("").optional, queryParam[String]("allowPeriodhostsPeriodregexp").description("").optional, queryParam[String]("allowPeriodhostsPeriodregexpAtTypeHint").description("").optional, queryParam[String]("filterPeriodmethods").description("").optional, queryParam[String]("filterPeriodmethodsAtTypeHint").description("").optional)
  )

  post("/apps/system/config/org.apache.sling.security.impl.ReferrerFilter", operation(postConfigApacheSlingReferrerFilterOperation)) {
            val allowPeriodempty = params.getAs[Boolean]("allowPeriodempty")

    //println("allowPeriodempty: " + allowPeriodempty)
            val allowPeriodemptyAtTypeHint = params.getAs[String]("allowPeriodemptyAtTypeHint")

    //println("allowPeriodemptyAtTypeHint: " + allowPeriodemptyAtTypeHint)
            val allowPeriodhosts = params.getAs[String]("allowPeriodhosts")

    //println("allowPeriodhosts: " + allowPeriodhosts)
            val allowPeriodhostsAtTypeHint = params.getAs[String]("allowPeriodhostsAtTypeHint")

    //println("allowPeriodhostsAtTypeHint: " + allowPeriodhostsAtTypeHint)
            val allowPeriodhostsPeriodregexp = params.getAs[String]("allowPeriodhostsPeriodregexp")

    //println("allowPeriodhostsPeriodregexp: " + allowPeriodhostsPeriodregexp)
            val allowPeriodhostsPeriodregexpAtTypeHint = params.getAs[String]("allowPeriodhostsPeriodregexpAtTypeHint")

    //println("allowPeriodhostsPeriodregexpAtTypeHint: " + allowPeriodhostsPeriodregexpAtTypeHint)
            val filterPeriodmethods = params.getAs[String]("filterPeriodmethods")

    //println("filterPeriodmethods: " + filterPeriodmethods)
            val filterPeriodmethodsAtTypeHint = params.getAs[String]("filterPeriodmethodsAtTypeHint")

    //println("filterPeriodmethodsAtTypeHint: " + filterPeriodmethodsAtTypeHint)
  }

  

  val postConfigPropertyOperation = (apiOperation[Unit]("postConfigProperty")
    summary ""
    parameters(pathParam[String]("configNodeName").description(""))
  )

  post("/apps/system/config/:configNodeName", operation(postConfigPropertyOperation)) {
    val configNodeName = params.getOrElse("configNodeName", halt(400))
    //println("configNodeName: " + configNodeName)
  }

  

  val postNodeOperation = (apiOperation[Unit]("postNode")
    summary ""
    parameters(pathParam[String]("path").description(""), pathParam[String]("name").description(""), queryParam[String]("operation").description("").optional, queryParam[String]("deleteAuthorizable").description("").optional, formParam[File]("file").description("").optional)
  )

  post("/:path/:name", operation(postNodeOperation)) {
    val path = params.getOrElse("path", halt(400))
    //println("path: " + path)
    val name = params.getOrElse("name", halt(400))
    //println("name: " + name)
            val operation = params.getAs[String]("operation")

    //println("operation: " + operation)
            val deleteAuthorizable = params.getAs[String]("deleteAuthorizable")

    //println("deleteAuthorizable: " + deleteAuthorizable)
    val file = fileParams("file")
    //println("file: " + file)
  }

  

  val postNodeRwOperation = (apiOperation[Unit]("postNodeRw")
    summary ""
    parameters(pathParam[String]("path").description(""), pathParam[String]("name").description(""), queryParam[String]("addMembers").description("").optional)
  )

  post("/:path/{name}.rw.html", operation(postNodeRwOperation)) {
    val path = params.getOrElse("path", halt(400))
    //println("path: " + path)
    val name = params.getOrElse("name", halt(400))
    //println("name: " + name)
            val addMembers = params.getAs[String]("addMembers")

    //println("addMembers: " + addMembers)
  }

  

  val postPathOperation = (apiOperation[Unit]("postPath")
    summary ""
    parameters(pathParam[String]("path").description(""), queryParam[String]("jcrPrimaryType").description(""), queryParam[String]("name").description(""))
  )

  post("/:path/", operation(postPathOperation)) {
    val path = params.getOrElse("path", halt(400))
    //println("path: " + path)
            val jcrPrimaryType = params.getAs[String]("jcrPrimaryType")

    //println("jcrPrimaryType: " + jcrPrimaryType)
            val name = params.getAs[String]("name")

    //println("name: " + name)
  }

  

  val postQueryOperation = (apiOperation[String]("postQuery")
    summary ""
    parameters(queryParam[String]("path").description(""), queryParam[Double]("pPeriodlimit").description(""), queryParam[String]("1Property").description(""), queryParam[String]("1PropertyPeriodvalue").description(""))
  )

  post("/bin/querybuilder.json", operation(postQueryOperation)) {
            val path = params.getAs[String]("path")

    //println("path: " + path)
            val pPeriodlimit = params.getAs[Double]("pPeriodlimit")

    //println("pPeriodlimit: " + pPeriodlimit)
            val 1Property = params.getAs[String]("1Property")

    //println("1Property: " + 1Property)
            val 1PropertyPeriodvalue = params.getAs[String]("1PropertyPeriodvalue")

    //println("1PropertyPeriodvalue: " + 1PropertyPeriodvalue)
  }

  

  val postTreeActivationOperation = (apiOperation[Unit]("postTreeActivation")
    summary ""
    parameters(queryParam[Boolean]("ignoredeactivated").description(""), queryParam[Boolean]("onlymodified").description(""), queryParam[String]("path").description(""))
  )

  post("/etc/replication/treeactivation.html", operation(postTreeActivationOperation)) {
            val ignoredeactivated = params.getAs[Boolean]("ignoredeactivated")

    //println("ignoredeactivated: " + ignoredeactivated)
            val onlymodified = params.getAs[Boolean]("onlymodified")

    //println("onlymodified: " + onlymodified)
            val path = params.getAs[String]("path")

    //println("path: " + path)
  }

  

  val postTruststoreOperation = (apiOperation[String]("postTruststore")
    summary ""
    parameters(queryParam[String]("operation").description("").optional, queryParam[String]("newPassword").description("").optional, queryParam[String]("rePassword").description("").optional, queryParam[String]("keyStoreType").description("").optional, queryParam[String]("removeAlias").description("").optional, formParam[File]("certificate").description("").optional)
  )

  post("/libs/granite/security/post/truststore", operation(postTruststoreOperation)) {
            val operation = params.getAs[String]("operation")

    //println("operation: " + operation)
            val newPassword = params.getAs[String]("newPassword")

    //println("newPassword: " + newPassword)
            val rePassword = params.getAs[String]("rePassword")

    //println("rePassword: " + rePassword)
            val keyStoreType = params.getAs[String]("keyStoreType")

    //println("keyStoreType: " + keyStoreType)
            val removeAlias = params.getAs[String]("removeAlias")

    //println("removeAlias: " + removeAlias)
    val certificate = fileParams("certificate")
    //println("certificate: " + certificate)
  }

  

  val postTruststorePKCS12Operation = (apiOperation[String]("postTruststorePKCS12")
    summary ""
    parameters(formParam[File]("truststorePeriodp12").description("").optional)
  )

  post("/etc/truststore", operation(postTruststorePKCS12Operation)) {
    val truststorePeriodp12 = fileParams("truststorePeriodp12")
    //println("truststorePeriodp12: " + truststorePeriodp12)
  }

}
