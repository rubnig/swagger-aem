/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import java.io.File

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class GraniteApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "GraniteApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val sslSetupOperation = (apiOperation[String]("sslSetup")
    summary ""
    parameters(queryParam[String]("keystorePassword").description(""), queryParam[String]("keystorePasswordConfirm").description(""), queryParam[String]("truststorePassword").description(""), queryParam[String]("truststorePasswordConfirm").description(""), queryParam[String]("httpsHostname").description(""), queryParam[String]("httpsPort").description(""), formParam[File]("privatekeyFile").description("").optional, formParam[File]("certificateFile").description("").optional)
  )

  post("/libs/granite/security/post/sslSetup.html", operation(sslSetupOperation)) {
            val keystorePassword = params.getAs[String]("keystorePassword")

    //println("keystorePassword: " + keystorePassword)
            val keystorePasswordConfirm = params.getAs[String]("keystorePasswordConfirm")

    //println("keystorePasswordConfirm: " + keystorePasswordConfirm)
            val truststorePassword = params.getAs[String]("truststorePassword")

    //println("truststorePassword: " + truststorePassword)
            val truststorePasswordConfirm = params.getAs[String]("truststorePasswordConfirm")

    //println("truststorePasswordConfirm: " + truststorePasswordConfirm)
            val httpsHostname = params.getAs[String]("httpsHostname")

    //println("httpsHostname: " + httpsHostname)
            val httpsPort = params.getAs[String]("httpsPort")

    //println("httpsPort: " + httpsPort)
    val privatekeyFile = fileParams("privatekeyFile")
    //println("privatekeyFile: " + privatekeyFile)
    val certificateFile = fileParams("certificateFile")
    //println("certificateFile: " + certificateFile)
  }

}
