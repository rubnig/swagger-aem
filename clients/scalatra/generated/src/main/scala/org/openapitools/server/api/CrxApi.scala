/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import java.io.File
import org.openapitools.server.model.InstallStatus

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class CrxApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "CrxApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val getCrxdeStatusOperation = (apiOperation[String]("getCrxdeStatus")
    summary ""
    parameters()
  )

  get("/crx/server/crx.default/jcr:root/.1.json", operation(getCrxdeStatusOperation)) {
  }

  

  val getInstallStatusOperation = (apiOperation[InstallStatus]("getInstallStatus")
    summary ""
    parameters()
  )

  get("/crx/packmgr/installstatus.jsp", operation(getInstallStatusOperation)) {
  }

  

  val getPackageManagerServletOperation = (apiOperation[Unit]("getPackageManagerServlet")
    summary ""
    parameters()
  )

  get("/crx/packmgr/service/script.html", operation(getPackageManagerServletOperation)) {
  }

  

  val postPackageServiceOperation = (apiOperation[String]("postPackageService")
    summary ""
    parameters(queryParam[String]("cmd").description(""))
  )

  post("/crx/packmgr/service.jsp", operation(postPackageServiceOperation)) {
            val cmd = params.getAs[String]("cmd")

    //println("cmd: " + cmd)
  }

  

  val postPackageServiceJsonOperation = (apiOperation[String]("postPackageServiceJson")
    summary ""
    parameters(pathParam[String]("path").description(""), queryParam[String]("cmd").description(""), queryParam[String]("groupName").description("").optional, queryParam[String]("packageName").description("").optional, queryParam[String]("packageVersion").description("").optional, queryParam[String]("charset").description("").optional, queryParam[Boolean]("force").description("").optional, queryParam[Boolean]("recursive").description("").optional, formParam[File]("`package`").description("").optional)
  )

  post("/crx/packmgr/service/.json/:path", operation(postPackageServiceJsonOperation)) {
    val path = params.getOrElse("path", halt(400))
    //println("path: " + path)
            val cmd = params.getAs[String]("cmd")

    //println("cmd: " + cmd)
            val groupName = params.getAs[String]("groupName")

    //println("groupName: " + groupName)
            val packageName = params.getAs[String]("packageName")

    //println("packageName: " + packageName)
            val packageVersion = params.getAs[String]("packageVersion")

    //println("packageVersion: " + packageVersion)
            val charset = params.getAs[String]("charset")

    //println("charset: " + charset)
            val force = params.getAs[Boolean]("force")

    //println("force: " + force)
            val recursive = params.getAs[Boolean]("recursive")

    //println("recursive: " + recursive)
    val `package` = fileParams("`package`")
    //println("`package`: " + `package`)
  }

  

  val postPackageUpdateOperation = (apiOperation[String]("postPackageUpdate")
    summary ""
    parameters(queryParam[String]("groupName").description(""), queryParam[String]("packageName").description(""), queryParam[String]("version").description(""), queryParam[String]("path").description(""), queryParam[String]("filter").description("").optional, queryParam[String]("charset").description("").optional)
  )

  post("/crx/packmgr/update.jsp", operation(postPackageUpdateOperation)) {
            val groupName = params.getAs[String]("groupName")

    //println("groupName: " + groupName)
            val packageName = params.getAs[String]("packageName")

    //println("packageName: " + packageName)
            val version = params.getAs[String]("version")

    //println("version: " + version)
            val path = params.getAs[String]("path")

    //println("path: " + path)
            val filter = params.getAs[String]("filter")

    //println("filter: " + filter)
            val charset = params.getAs[String]("charset")

    //println("charset: " + charset)
  }

  

  val postSetPasswordOperation = (apiOperation[String]("postSetPassword")
    summary ""
    parameters(queryParam[String]("old").description(""), queryParam[String]("plain").description(""), queryParam[String]("verify").description(""))
  )

  post("/crx/explorer/ui/setpassword.jsp", operation(postSetPasswordOperation)) {
            val old = params.getAs[String]("old")

    //println("old: " + old)
            val plain = params.getAs[String]("plain")

    //println("plain: " + plain)
            val verify = params.getAs[String]("verify")

    //println("verify: " + verify)
  }

}
