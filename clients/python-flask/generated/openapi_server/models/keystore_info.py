# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.keystore_items import KeystoreItems
from openapi_server import util

from openapi_server.models.keystore_items import KeystoreItems  # noqa: E501

class KeystoreInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aliases=None, exists=None):  # noqa: E501
        """KeystoreInfo - a model defined in OpenAPI

        :param aliases: The aliases of this KeystoreInfo.  # noqa: E501
        :type aliases: List[KeystoreItems]
        :param exists: The exists of this KeystoreInfo.  # noqa: E501
        :type exists: bool
        """
        self.openapi_types = {
            'aliases': List[KeystoreItems],
            'exists': bool
        }

        self.attribute_map = {
            'aliases': 'aliases',
            'exists': 'exists'
        }

        self._aliases = aliases
        self._exists = exists

    @classmethod
    def from_dict(cls, dikt) -> 'KeystoreInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The KeystoreInfo of this KeystoreInfo.  # noqa: E501
        :rtype: KeystoreInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aliases(self):
        """Gets the aliases of this KeystoreInfo.


        :return: The aliases of this KeystoreInfo.
        :rtype: List[KeystoreItems]
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this KeystoreInfo.


        :param aliases: The aliases of this KeystoreInfo.
        :type aliases: List[KeystoreItems]
        """

        self._aliases = aliases

    @property
    def exists(self):
        """Gets the exists of this KeystoreInfo.

        False if truststore don't exist  # noqa: E501

        :return: The exists of this KeystoreInfo.
        :rtype: bool
        """
        return self._exists

    @exists.setter
    def exists(self, exists):
        """Sets the exists of this KeystoreInfo.

        False if truststore don't exist  # noqa: E501

        :param exists: The exists of this KeystoreInfo.
        :type exists: bool
        """

        self._exists = exists
