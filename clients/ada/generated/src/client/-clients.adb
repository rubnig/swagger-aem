--  Adobe Experience Manager (AEM) API
--  Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
--
--  The version of the OpenAPI document: 3.5.0_pre.0
--  Contact: opensource@shinesolutions.com
--
--  NOTE: This package is auto generated by OpenAPI-Generator 5.2.1.
--  https://openapi-generator.tech
--  Do not edit the class manually.

pragma Warnings (Off, "*is not referenced");
with Swagger.Streams;
package body .Clients is
   pragma Style_Checks ("-mr");

   --  
   procedure Get_Aem_Product_Info
      (Client : in out Client_Type;
       Result : out Swagger.UString_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/system/console/status-productinfo.json");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Aem_Product_Info;

   --  
   procedure Get_Bundle_Info
      (Client : in out Client_Type;
       Name : in Swagger.UString;
       Result : out .Models.BundleInfo_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/system/console/bundles/{name}.json");
      URI.Set_Path_Param ("name", Name);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Bundle_Info;

   --  
   procedure Get_Config_Mgr
      (Client : in out Client_Type;
       Result : out Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.TEXT_XML));

      URI.Set_Path ("/system/console/configMgr");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Config_Mgr;

   --  
   procedure Post_Bundle
      (Client : in out Client_Type;
       Name : in Swagger.UString;
       Action : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin


      URI.Add_Param ("action", Action);
      URI.Set_Path ("/system/console/bundles/{name}");
      URI.Set_Path_Param ("name", Name);
      Client.Call (Swagger.Clients.POST, URI);
   end Post_Bundle;

   --  
   procedure Post_Jmx_Repository
      (Client : in out Client_Type;
       Action : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin


      URI.Set_Path ("/system/console/jmx/com.adobe.granite:type=Repository/op/{action}");
      URI.Set_Path_Param ("action", Action);
      Client.Call (Swagger.Clients.POST, URI);
   end Post_Jmx_Repository;

   --  
   procedure Post_Saml_Configuration
      (Client : in out Client_Type;
       Post : in Swagger.Nullable_Boolean;
       Apply : in Swagger.Nullable_Boolean;
       Delete : in Swagger.Nullable_Boolean;
       Action : in Swagger.Nullable_UString;
       Dollarlocation : in Swagger.Nullable_UString;
       Path : in Swagger.UString_Vectors.Vector;
       Service_Periodranking : in Swagger.Nullable_Integer;
       Idp_Url : in Swagger.Nullable_UString;
       Idp_Cert_Alias : in Swagger.Nullable_UString;
       Idp_Http_Redirect : in Swagger.Nullable_Boolean;
       Service_Provider_Entity_Id : in Swagger.Nullable_UString;
       Assertion_Consumer_Service_URL : in Swagger.Nullable_UString;
       Sp_Private_Key_Alias : in Swagger.Nullable_UString;
       Key_Store_Password : in Swagger.Nullable_UString;
       Default_Redirect_Url : in Swagger.Nullable_UString;
       User_IDAttribute : in Swagger.Nullable_UString;
       Use_Encryption : in Swagger.Nullable_Boolean;
       Create_User : in Swagger.Nullable_Boolean;
       Add_Group_Memberships : in Swagger.Nullable_Boolean;
       Group_Membership_Attribute : in Swagger.Nullable_UString;
       Default_Groups : in Swagger.UString_Vectors.Vector;
       Name_Id_Format : in Swagger.Nullable_UString;
       Synchronize_Attributes : in Swagger.UString_Vectors.Vector;
       Handle_Logout : in Swagger.Nullable_Boolean;
       Logout_Url : in Swagger.Nullable_UString;
       Clock_Tolerance : in Swagger.Nullable_Integer;
       Digest_Method : in Swagger.Nullable_UString;
       Signature_Method : in Swagger.Nullable_UString;
       User_Intermediate_Path : in Swagger.Nullable_UString;
       Propertylist : in Swagger.UString_Vectors.Vector;
       Result : out .Models.SamlConfigurationInfo_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.TEXT_PLAIN));

      URI.Add_Param ("post", Post);
      URI.Add_Param ("apply", Apply);
      URI.Add_Param ("delete", Delete);
      URI.Add_Param ("action", Action);
      URI.Add_Param ("$location", Dollarlocation);
      URI.Add_Param ("path", Path);
      URI.Add_Param ("service.ranking", Service_Periodranking);
      URI.Add_Param ("idpUrl", Idp_Url);
      URI.Add_Param ("idpCertAlias", Idp_Cert_Alias);
      URI.Add_Param ("idpHttpRedirect", Idp_Http_Redirect);
      URI.Add_Param ("serviceProviderEntityId", Service_Provider_Entity_Id);
      URI.Add_Param ("assertionConsumerServiceURL", Assertion_Consumer_Service_URL);
      URI.Add_Param ("spPrivateKeyAlias", Sp_Private_Key_Alias);
      URI.Add_Param ("keyStorePassword", Key_Store_Password);
      URI.Add_Param ("defaultRedirectUrl", Default_Redirect_Url);
      URI.Add_Param ("userIDAttribute", User_IDAttribute);
      URI.Add_Param ("useEncryption", Use_Encryption);
      URI.Add_Param ("createUser", Create_User);
      URI.Add_Param ("addGroupMemberships", Add_Group_Memberships);
      URI.Add_Param ("groupMembershipAttribute", Group_Membership_Attribute);
      URI.Add_Param ("defaultGroups", Default_Groups);
      URI.Add_Param ("nameIdFormat", Name_Id_Format);
      URI.Add_Param ("synchronizeAttributes", Synchronize_Attributes);
      URI.Add_Param ("handleLogout", Handle_Logout);
      URI.Add_Param ("logoutUrl", Logout_Url);
      URI.Add_Param ("clockTolerance", Clock_Tolerance);
      URI.Add_Param ("digestMethod", Digest_Method);
      URI.Add_Param ("signatureMethod", Signature_Method);
      URI.Add_Param ("userIntermediatePath", User_Intermediate_Path);
      URI.Add_Param ("propertylist", Propertylist);
      URI.Set_Path ("/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Post_Saml_Configuration;

   --  
   procedure Get_Login_Page
      (Client : in out Client_Type;
       Result : out Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.TEXT_HTML));

      URI.Set_Path ("/libs/granite/core/content/login.html");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Login_Page;

   --  
   procedure Post_Cq_Actions
      (Client : in out Client_Type;
       Authorizable_Id : in Swagger.UString;
       Changelog : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin


      URI.Add_Param ("authorizableId", Authorizable_Id);
      URI.Add_Param ("changelog", Changelog);
      URI.Set_Path ("/.cqactions.html");
      Client.Call (Swagger.Clients.POST, URI);
   end Post_Cq_Actions;

   --  
   procedure Get_Crxde_Status
      (Client : in out Client_Type;
       Result : out Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.PLAIN_TEXT));

      URI.Set_Path ("/crx/server/crx.default/jcr:root/.1.json");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Crxde_Status;

   --  
   procedure Get_Install_Status
      (Client : in out Client_Type;
       Result : out .Models.InstallStatus_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/crx/packmgr/installstatus.jsp");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Install_Status;

   --  
   procedure Get_Package_Manager_Servlet
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.TEXT_HTML));

      URI.Set_Path ("/crx/packmgr/service/script.html");
      Client.Call (Swagger.Clients.GET, URI);
   end Get_Package_Manager_Servlet;

   --  
   procedure Post_Package_Service
      (Client : in out Client_Type;
       Cmd : in Swagger.UString;
       Result : out Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.TEXT_XML));

      URI.Add_Param ("cmd", Cmd);
      URI.Set_Path ("/crx/packmgr/service.jsp");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Post_Package_Service;

   --  
   procedure Post_Package_Service_Json
      (Client : in out Client_Type;
       Path : in Swagger.UString;
       Cmd : in Swagger.UString;
       Group_Name : in Swagger.Nullable_UString;
       Package_Name : in Swagger.Nullable_UString;
       Package_Version : in Swagger.Nullable_UString;
       Charset : in Swagger.Nullable_UString;
       Force : in Swagger.Nullable_Boolean;
       Recursive : in Swagger.Nullable_Boolean;
       P_Package : in Swagger.File_Part_Type;
       Result : out Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_FORM));
      .Models.Serialize (Req.Stream, "package", P_Package);

      URI.Add_Param ("cmd", Cmd);
      URI.Add_Param ("groupName", Group_Name);
      URI.Add_Param ("packageName", Package_Name);
      URI.Add_Param ("packageVersion", Package_Version);
      URI.Add_Param ("_charset_", Charset);
      URI.Add_Param ("force", Force);
      URI.Add_Param ("recursive", Recursive);
      URI.Set_Path ("/crx/packmgr/service/.json/{path}");
      URI.Set_Path_Param ("path", Path);
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Post_Package_Service_Json;

   --  
   procedure Post_Package_Update
      (Client : in out Client_Type;
       Group_Name : in Swagger.UString;
       Package_Name : in Swagger.UString;
       Version : in Swagger.UString;
       Path : in Swagger.UString;
       Filter : in Swagger.Nullable_UString;
       Charset : in Swagger.Nullable_UString;
       Result : out Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("groupName", Group_Name);
      URI.Add_Param ("packageName", Package_Name);
      URI.Add_Param ("version", Version);
      URI.Add_Param ("path", Path);
      URI.Add_Param ("filter", Filter);
      URI.Add_Param ("_charset_", Charset);
      URI.Set_Path ("/crx/packmgr/update.jsp");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Post_Package_Update;

   --  
   procedure Post_Set_Password
      (Client : in out Client_Type;
       Old : in Swagger.UString;
       Plain : in Swagger.UString;
       Verify : in Swagger.UString;
       Result : out Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.TEXT_PLAIN));

      URI.Add_Param ("old", Old);
      URI.Add_Param ("plain", Plain);
      URI.Add_Param ("verify", Verify);
      URI.Set_Path ("/crx/explorer/ui/setpassword.jsp");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Post_Set_Password;

   --  
   procedure Get_Aem_Health_Check
      (Client : in out Client_Type;
       Tags : in Swagger.Nullable_UString;
       Combine_Tags_Or : in Swagger.Nullable_Boolean;
       Result : out Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("tags", Tags);
      URI.Add_Param ("combineTagsOr", Combine_Tags_Or);
      URI.Set_Path ("/system/health");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Aem_Health_Check;

   --  
   procedure Post_Config_Aem_Health_Check_Servlet
      (Client : in out Client_Type;
       Bundles_Periodignored : in Swagger.UString_Vectors.Vector;
       Bundles_Periodignored_At_Type_Hint : in Swagger.Nullable_UString) is
      URI   : Swagger.Clients.URI_Type;
   begin


      URI.Add_Param ("bundles.ignored", Bundles_Periodignored);
      URI.Add_Param ("bundles.ignored@TypeHint", Bundles_Periodignored_At_Type_Hint);
      URI.Set_Path ("/apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck");
      Client.Call (Swagger.Clients.POST, URI);
   end Post_Config_Aem_Health_Check_Servlet;

   --  
   procedure Post_Config_Aem_Password_Reset
      (Client : in out Client_Type;
       Pwdreset_Periodauthorizables : in Swagger.UString_Vectors.Vector;
       Pwdreset_Periodauthorizables_At_Type_Hint : in Swagger.Nullable_UString) is
      URI   : Swagger.Clients.URI_Type;
   begin


      URI.Add_Param ("pwdreset.authorizables", Pwdreset_Periodauthorizables);
      URI.Add_Param ("pwdreset.authorizables@TypeHint", Pwdreset_Periodauthorizables_At_Type_Hint);
      URI.Set_Path ("/apps/system/config/com.shinesolutions.aem.passwordreset.Activator");
      Client.Call (Swagger.Clients.POST, URI);
   end Post_Config_Aem_Password_Reset;

   --  
   procedure Ssl_Setup
      (Client : in out Client_Type;
       Keystore_Password : in Swagger.UString;
       Keystore_Password_Confirm : in Swagger.UString;
       Truststore_Password : in Swagger.UString;
       Truststore_Password_Confirm : in Swagger.UString;
       Https_Hostname : in Swagger.UString;
       Https_Port : in Swagger.UString;
       Privatekey_File : in Swagger.File_Part_Type;
       Certificate_File : in Swagger.File_Part_Type;
       Result : out Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.TEXT_PLAIN));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_FORM));
      .Models.Serialize (Req.Stream, "privatekeyFile", Privatekey_File);
      .Models.Serialize (Req.Stream, "certificateFile", Certificate_File);

      URI.Add_Param ("keystorePassword", Keystore_Password);
      URI.Add_Param ("keystorePasswordConfirm", Keystore_Password_Confirm);
      URI.Add_Param ("truststorePassword", Truststore_Password);
      URI.Add_Param ("truststorePasswordConfirm", Truststore_Password_Confirm);
      URI.Add_Param ("httpsHostname", Https_Hostname);
      URI.Add_Param ("httpsPort", Https_Port);
      URI.Set_Path ("/libs/granite/security/post/sslSetup.html");
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Ssl_Setup;

   --  
   procedure Delete_Agent
      (Client : in out Client_Type;
       Runmode : in Swagger.UString;
       Name : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin


      URI.Set_Path ("/etc/replication/agents.{runmode}/{name}");
      URI.Set_Path_Param ("runmode", Runmode);
      URI.Set_Path_Param ("name", Name);
      Client.Call (Swagger.Clients.DELETE, URI);
   end Delete_Agent;

   --  
   procedure Delete_Node
      (Client : in out Client_Type;
       Path : in Swagger.UString;
       Name : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin


      URI.Set_Path ("/{path}/{name}");
      URI.Set_Path_Param ("path", Path);
      URI.Set_Path_Param ("name", Name);
      Client.Call (Swagger.Clients.DELETE, URI);
   end Delete_Node;

   --  
   procedure Get_Agent
      (Client : in out Client_Type;
       Runmode : in Swagger.UString;
       Name : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin


      URI.Set_Path ("/etc/replication/agents.{runmode}/{name}");
      URI.Set_Path_Param ("runmode", Runmode);
      URI.Set_Path_Param ("name", Name);
      Client.Call (Swagger.Clients.GET, URI);
   end Get_Agent;

   --  
   procedure Get_Agents
      (Client : in out Client_Type;
       Runmode : in Swagger.UString;
       Result : out Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/etc/replication/agents.{runmode}.-1.json");
      URI.Set_Path_Param ("runmode", Runmode);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Agents;

   --  
   procedure Get_Authorizable_Keystore
      (Client : in out Client_Type;
       Intermediate_Path : in Swagger.UString;
       Authorizable_Id : in Swagger.UString;
       Result : out .Models.KeystoreInfo_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.TEXT_PLAIN));

      URI.Set_Path ("/{intermediatePath}/{authorizableId}.ks.json");
      URI.Set_Path_Param ("intermediatePath", Intermediate_Path);
      URI.Set_Path_Param ("authorizableId", Authorizable_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Authorizable_Keystore;

   --  
   procedure Get_Keystore
      (Client : in out Client_Type;
       Intermediate_Path : in Swagger.UString;
       Authorizable_Id : in Swagger.UString;
       Result : out Swagger.Http_Content_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_OCTET_STREAM));

      URI.Set_Path ("/{intermediatePath}/{authorizableId}/keystore/store.p12");
      URI.Set_Path_Param ("intermediatePath", Intermediate_Path);
      URI.Set_Path_Param ("authorizableId", Authorizable_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Keystore;

   --  
   procedure Get_Node
      (Client : in out Client_Type;
       Path : in Swagger.UString;
       Name : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin


      URI.Set_Path ("/{path}/{name}");
      URI.Set_Path_Param ("path", Path);
      URI.Set_Path_Param ("name", Name);
      Client.Call (Swagger.Clients.GET, URI);
   end Get_Node;

   --  
   procedure Get_Package
      (Client : in out Client_Type;
       Group : in Swagger.UString;
       Name : in Swagger.UString;
       Version : in Swagger.UString;
       Result : out Swagger.Http_Content_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_OCTET_STREAM));

      URI.Set_Path ("/etc/packages/{group}/{name}-{version}.zip");
      URI.Set_Path_Param ("group", Group);
      URI.Set_Path_Param ("name", Name);
      URI.Set_Path_Param ("version", Version);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Package;

   --  
   procedure Get_Package_Filter
      (Client : in out Client_Type;
       Group : in Swagger.UString;
       Name : in Swagger.UString;
       Version : in Swagger.UString;
       Result : out Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json");
      URI.Set_Path_Param ("group", Group);
      URI.Set_Path_Param ("name", Name);
      URI.Set_Path_Param ("version", Version);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Package_Filter;

   --  
   procedure Get_Query
      (Client : in out Client_Type;
       Path : in Swagger.UString;
       P_Periodlimit : in Swagger.Number;
       P_1Property : in Swagger.UString;
       P_1Property_Periodvalue : in Swagger.UString;
       Result : out Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("path", Path);
      URI.Add_Param ("p.limit", P_Periodlimit);
      URI.Add_Param ("1_property", P_1Property);
      URI.Add_Param ("1_property.value", P_1Property_Periodvalue);
      URI.Set_Path ("/bin/querybuilder.json");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Query;

   --  
   procedure Get_Truststore
      (Client : in out Client_Type;
       Result : out Swagger.Http_Content_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_OCTET_STREAM));

      URI.Set_Path ("/etc/truststore/truststore.p12");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Truststore;

   --  
   procedure Get_Truststore_Info
      (Client : in out Client_Type;
       Result : out .Models.TruststoreInfo_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/libs/granite/security/truststore.json");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Truststore_Info;

   --  
   procedure Post_Agent
      (Client : in out Client_Type;
       Runmode : in Swagger.UString;
       Name : in Swagger.UString;
       Jcr_Content_Slashcq_Distribute : in Swagger.Nullable_Boolean;
       Jcr_Content_Slashcq_Distribute_At_Type_Hint : in Swagger.Nullable_UString;
       Jcr_Content_Slashcq_Name : in Swagger.Nullable_UString;
       Jcr_Content_Slashcq_Template : in Swagger.Nullable_UString;
       Jcr_Content_Slashenabled : in Swagger.Nullable_Boolean;
       Jcr_Content_Slashjcr_Description : in Swagger.Nullable_UString;
       Jcr_Content_Slashjcr_Last_Modified : in Swagger.Nullable_UString;
       Jcr_Content_Slashjcr_Last_Modified_By : in Swagger.Nullable_UString;
       Jcr_Content_Slashjcr_Mixin_Types : in Swagger.Nullable_UString;
       Jcr_Content_Slashjcr_Title : in Swagger.Nullable_UString;
       Jcr_Content_Slashlog_Level : in Swagger.Nullable_UString;
       Jcr_Content_Slashno_Status_Update : in Swagger.Nullable_Boolean;
       Jcr_Content_Slashno_Versioning : in Swagger.Nullable_Boolean;
       Jcr_Content_Slashprotocol_Connect_Timeout : in Swagger.Number;
       Jcr_Content_Slashprotocol_HTTPConnection_Closed : in Swagger.Nullable_Boolean;
       Jcr_Content_Slashprotocol_HTTPExpired : in Swagger.Nullable_UString;
       Jcr_Content_Slashprotocol_HTTPHeaders : in Swagger.UString_Vectors.Vector;
       Jcr_Content_Slashprotocol_HTTPHeaders_At_Type_Hint : in Swagger.Nullable_UString;
       Jcr_Content_Slashprotocol_HTTPMethod : in Swagger.Nullable_UString;
       Jcr_Content_Slashprotocol_HTTPSRelaxed : in Swagger.Nullable_Boolean;
       Jcr_Content_Slashprotocol_Interface : in Swagger.Nullable_UString;
       Jcr_Content_Slashprotocol_Socket_Timeout : in Swagger.Number;
       Jcr_Content_Slashprotocol_Version : in Swagger.Nullable_UString;
       Jcr_Content_Slashproxy_NTLMDomain : in Swagger.Nullable_UString;
       Jcr_Content_Slashproxy_NTLMHost : in Swagger.Nullable_UString;
       Jcr_Content_Slashproxy_Host : in Swagger.Nullable_UString;
       Jcr_Content_Slashproxy_Password : in Swagger.Nullable_UString;
       Jcr_Content_Slashproxy_Port : in Swagger.Number;
       Jcr_Content_Slashproxy_User : in Swagger.Nullable_UString;
       Jcr_Content_Slashqueue_Batch_Max_Size : in Swagger.Number;
       Jcr_Content_Slashqueue_Batch_Mode : in Swagger.Nullable_UString;
       Jcr_Content_Slashqueue_Batch_Wait_Time : in Swagger.Number;
       Jcr_Content_Slashretry_Delay : in Swagger.Nullable_UString;
       Jcr_Content_Slashreverse_Replication : in Swagger.Nullable_Boolean;
       Jcr_Content_Slashserialization_Type : in Swagger.Nullable_UString;
       Jcr_Content_Slashsling_Resource_Type : in Swagger.Nullable_UString;
       Jcr_Content_Slashssl : in Swagger.Nullable_UString;
       Jcr_Content_Slashtransport_NTLMDomain : in Swagger.Nullable_UString;
       Jcr_Content_Slashtransport_NTLMHost : in Swagger.Nullable_UString;
       Jcr_Content_Slashtransport_Password : in Swagger.Nullable_UString;
       Jcr_Content_Slashtransport_Uri : in Swagger.Nullable_UString;
       Jcr_Content_Slashtransport_User : in Swagger.Nullable_UString;
       Jcr_Content_Slashtrigger_Distribute : in Swagger.Nullable_Boolean;
       Jcr_Content_Slashtrigger_Modified : in Swagger.Nullable_Boolean;
       Jcr_Content_Slashtrigger_On_Off_Time : in Swagger.Nullable_Boolean;
       Jcr_Content_Slashtrigger_Receive : in Swagger.Nullable_Boolean;
       Jcr_Content_Slashtrigger_Specific : in Swagger.Nullable_Boolean;
       Jcr_Content_Slashuser_Id : in Swagger.Nullable_UString;
       Jcr_Primary_Type : in Swagger.Nullable_UString;
       Operation : in Swagger.Nullable_UString) is
      URI   : Swagger.Clients.URI_Type;
   begin


      URI.Add_Param ("jcr:content/cq:distribute", Jcr_Content_Slashcq_Distribute);
      URI.Add_Param ("jcr:content/cq:distribute@TypeHint", Jcr_Content_Slashcq_Distribute_At_Type_Hint);
      URI.Add_Param ("jcr:content/cq:name", Jcr_Content_Slashcq_Name);
      URI.Add_Param ("jcr:content/cq:template", Jcr_Content_Slashcq_Template);
      URI.Add_Param ("jcr:content/enabled", Jcr_Content_Slashenabled);
      URI.Add_Param ("jcr:content/jcr:description", Jcr_Content_Slashjcr_Description);
      URI.Add_Param ("jcr:content/jcr:lastModified", Jcr_Content_Slashjcr_Last_Modified);
      URI.Add_Param ("jcr:content/jcr:lastModifiedBy", Jcr_Content_Slashjcr_Last_Modified_By);
      URI.Add_Param ("jcr:content/jcr:mixinTypes", Jcr_Content_Slashjcr_Mixin_Types);
      URI.Add_Param ("jcr:content/jcr:title", Jcr_Content_Slashjcr_Title);
      URI.Add_Param ("jcr:content/logLevel", Jcr_Content_Slashlog_Level);
      URI.Add_Param ("jcr:content/noStatusUpdate", Jcr_Content_Slashno_Status_Update);
      URI.Add_Param ("jcr:content/noVersioning", Jcr_Content_Slashno_Versioning);
      URI.Add_Param ("jcr:content/protocolConnectTimeout", Jcr_Content_Slashprotocol_Connect_Timeout);
      URI.Add_Param ("jcr:content/protocolHTTPConnectionClosed", Jcr_Content_Slashprotocol_HTTPConnection_Closed);
      URI.Add_Param ("jcr:content/protocolHTTPExpired", Jcr_Content_Slashprotocol_HTTPExpired);
      URI.Add_Param ("jcr:content/protocolHTTPHeaders", Jcr_Content_Slashprotocol_HTTPHeaders);
      URI.Add_Param ("jcr:content/protocolHTTPHeaders@TypeHint", Jcr_Content_Slashprotocol_HTTPHeaders_At_Type_Hint);
      URI.Add_Param ("jcr:content/protocolHTTPMethod", Jcr_Content_Slashprotocol_HTTPMethod);
      URI.Add_Param ("jcr:content/protocolHTTPSRelaxed", Jcr_Content_Slashprotocol_HTTPSRelaxed);
      URI.Add_Param ("jcr:content/protocolInterface", Jcr_Content_Slashprotocol_Interface);
      URI.Add_Param ("jcr:content/protocolSocketTimeout", Jcr_Content_Slashprotocol_Socket_Timeout);
      URI.Add_Param ("jcr:content/protocolVersion", Jcr_Content_Slashprotocol_Version);
      URI.Add_Param ("jcr:content/proxyNTLMDomain", Jcr_Content_Slashproxy_NTLMDomain);
      URI.Add_Param ("jcr:content/proxyNTLMHost", Jcr_Content_Slashproxy_NTLMHost);
      URI.Add_Param ("jcr:content/proxyHost", Jcr_Content_Slashproxy_Host);
      URI.Add_Param ("jcr:content/proxyPassword", Jcr_Content_Slashproxy_Password);
      URI.Add_Param ("jcr:content/proxyPort", Jcr_Content_Slashproxy_Port);
      URI.Add_Param ("jcr:content/proxyUser", Jcr_Content_Slashproxy_User);
      URI.Add_Param ("jcr:content/queueBatchMaxSize", Jcr_Content_Slashqueue_Batch_Max_Size);
      URI.Add_Param ("jcr:content/queueBatchMode", Jcr_Content_Slashqueue_Batch_Mode);
      URI.Add_Param ("jcr:content/queueBatchWaitTime", Jcr_Content_Slashqueue_Batch_Wait_Time);
      URI.Add_Param ("jcr:content/retryDelay", Jcr_Content_Slashretry_Delay);
      URI.Add_Param ("jcr:content/reverseReplication", Jcr_Content_Slashreverse_Replication);
      URI.Add_Param ("jcr:content/serializationType", Jcr_Content_Slashserialization_Type);
      URI.Add_Param ("jcr:content/sling:resourceType", Jcr_Content_Slashsling_Resource_Type);
      URI.Add_Param ("jcr:content/ssl", Jcr_Content_Slashssl);
      URI.Add_Param ("jcr:content/transportNTLMDomain", Jcr_Content_Slashtransport_NTLMDomain);
      URI.Add_Param ("jcr:content/transportNTLMHost", Jcr_Content_Slashtransport_NTLMHost);
      URI.Add_Param ("jcr:content/transportPassword", Jcr_Content_Slashtransport_Password);
      URI.Add_Param ("jcr:content/transportUri", Jcr_Content_Slashtransport_Uri);
      URI.Add_Param ("jcr:content/transportUser", Jcr_Content_Slashtransport_User);
      URI.Add_Param ("jcr:content/triggerDistribute", Jcr_Content_Slashtrigger_Distribute);
      URI.Add_Param ("jcr:content/triggerModified", Jcr_Content_Slashtrigger_Modified);
      URI.Add_Param ("jcr:content/triggerOnOffTime", Jcr_Content_Slashtrigger_On_Off_Time);
      URI.Add_Param ("jcr:content/triggerReceive", Jcr_Content_Slashtrigger_Receive);
      URI.Add_Param ("jcr:content/triggerSpecific", Jcr_Content_Slashtrigger_Specific);
      URI.Add_Param ("jcr:content/userId", Jcr_Content_Slashuser_Id);
      URI.Add_Param ("jcr:primaryType", Jcr_Primary_Type);
      URI.Add_Param (":operation", Operation);
      URI.Set_Path ("/etc/replication/agents.{runmode}/{name}");
      URI.Set_Path_Param ("runmode", Runmode);
      URI.Set_Path_Param ("name", Name);
      Client.Call (Swagger.Clients.POST, URI);
   end Post_Agent;

   --  
   procedure Post_Authorizable_Keystore
      (Client : in out Client_Type;
       Intermediate_Path : in Swagger.UString;
       Authorizable_Id : in Swagger.UString;
       Operation : in Swagger.Nullable_UString;
       Current_Password : in Swagger.Nullable_UString;
       New_Password : in Swagger.Nullable_UString;
       Re_Password : in Swagger.Nullable_UString;
       Key_Password : in Swagger.Nullable_UString;
       Key_Store_Pass : in Swagger.Nullable_UString;
       Alias : in Swagger.Nullable_UString;
       New_Alias : in Swagger.Nullable_UString;
       Remove_Alias : in Swagger.Nullable_UString;
       Cert_Chain : in Swagger.File_Part_Type;
       Pk : in Swagger.File_Part_Type;
       Key_Store : in Swagger.File_Part_Type;
       Result : out .Models.KeystoreInfo_Type) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.TEXT_PLAIN));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_FORM));
      .Models.Serialize (Req.Stream, "cert-chain", Cert_Chain);
      .Models.Serialize (Req.Stream, "pk", Pk);
      .Models.Serialize (Req.Stream, "keyStore", Key_Store);

      URI.Add_Param (":operation", Operation);
      URI.Add_Param ("currentPassword", Current_Password);
      URI.Add_Param ("newPassword", New_Password);
      URI.Add_Param ("rePassword", Re_Password);
      URI.Add_Param ("keyPassword", Key_Password);
      URI.Add_Param ("keyStorePass", Key_Store_Pass);
      URI.Add_Param ("alias", Alias);
      URI.Add_Param ("newAlias", New_Alias);
      URI.Add_Param ("removeAlias", Remove_Alias);
      URI.Set_Path ("/{intermediatePath}/{authorizableId}.ks.html");
      URI.Set_Path_Param ("intermediatePath", Intermediate_Path);
      URI.Set_Path_Param ("authorizableId", Authorizable_Id);
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Post_Authorizable_Keystore;

   --  
   procedure Post_Authorizables
      (Client : in out Client_Type;
       Authorizable_Id : in Swagger.UString;
       Intermediate_Path : in Swagger.UString;
       Create_User : in Swagger.Nullable_UString;
       Create_Group : in Swagger.Nullable_UString;
       Rep_Password : in Swagger.Nullable_UString;
       Profile_Slashgiven_Name : in Swagger.Nullable_UString;
       Result : out Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.TEXT_HTML));

      URI.Add_Param ("authorizableId", Authorizable_Id);
      URI.Add_Param ("intermediatePath", Intermediate_Path);
      URI.Add_Param ("createUser", Create_User);
      URI.Add_Param ("createGroup", Create_Group);
      URI.Add_Param ("rep:password", Rep_Password);
      URI.Add_Param ("profile/givenName", Profile_Slashgiven_Name);
      URI.Set_Path ("/libs/granite/security/post/authorizables");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Post_Authorizables;

   --  
   procedure Post_Config_Adobe_Granite_Saml_Authentication_Handler
      (Client : in out Client_Type;
       Key_Store_Password : in Swagger.Nullable_UString;
       Key_Store_Password_At_Type_Hint : in Swagger.Nullable_UString;
       Service_Periodranking : in Swagger.Nullable_Integer;
       Service_Periodranking_At_Type_Hint : in Swagger.Nullable_UString;
       Idp_Http_Redirect : in Swagger.Nullable_Boolean;
       Idp_Http_Redirect_At_Type_Hint : in Swagger.Nullable_UString;
       Create_User : in Swagger.Nullable_Boolean;
       Create_User_At_Type_Hint : in Swagger.Nullable_UString;
       Default_Redirect_Url : in Swagger.Nullable_UString;
       Default_Redirect_Url_At_Type_Hint : in Swagger.Nullable_UString;
       User_IDAttribute : in Swagger.Nullable_UString;
       User_IDAttribute_At_Type_Hint : in Swagger.Nullable_UString;
       Default_Groups : in Swagger.UString_Vectors.Vector;
       Default_Groups_At_Type_Hint : in Swagger.Nullable_UString;
       Idp_Cert_Alias : in Swagger.Nullable_UString;
       Idp_Cert_Alias_At_Type_Hint : in Swagger.Nullable_UString;
       Add_Group_Memberships : in Swagger.Nullable_Boolean;
       Add_Group_Memberships_At_Type_Hint : in Swagger.Nullable_UString;
       Path : in Swagger.UString_Vectors.Vector;
       Path_At_Type_Hint : in Swagger.Nullable_UString;
       Synchronize_Attributes : in Swagger.UString_Vectors.Vector;
       Synchronize_Attributes_At_Type_Hint : in Swagger.Nullable_UString;
       Clock_Tolerance : in Swagger.Nullable_Integer;
       Clock_Tolerance_At_Type_Hint : in Swagger.Nullable_UString;
       Group_Membership_Attribute : in Swagger.Nullable_UString;
       Group_Membership_Attribute_At_Type_Hint : in Swagger.Nullable_UString;
       Idp_Url : in Swagger.Nullable_UString;
       Idp_Url_At_Type_Hint : in Swagger.Nullable_UString;
       Logout_Url : in Swagger.Nullable_UString;
       Logout_Url_At_Type_Hint : in Swagger.Nullable_UString;
       Service_Provider_Entity_Id : in Swagger.Nullable_UString;
       Service_Provider_Entity_Id_At_Type_Hint : in Swagger.Nullable_UString;
       Assertion_Consumer_Service_URL : in Swagger.Nullable_UString;
       Assertion_Consumer_Service_URLAt_Type_Hint : in Swagger.Nullable_UString;
       Handle_Logout : in Swagger.Nullable_Boolean;
       Handle_Logout_At_Type_Hint : in Swagger.Nullable_UString;
       Sp_Private_Key_Alias : in Swagger.Nullable_UString;
       Sp_Private_Key_Alias_At_Type_Hint : in Swagger.Nullable_UString;
       Use_Encryption : in Swagger.Nullable_Boolean;
       Use_Encryption_At_Type_Hint : in Swagger.Nullable_UString;
       Name_Id_Format : in Swagger.Nullable_UString;
       Name_Id_Format_At_Type_Hint : in Swagger.Nullable_UString;
       Digest_Method : in Swagger.Nullable_UString;
       Digest_Method_At_Type_Hint : in Swagger.Nullable_UString;
       Signature_Method : in Swagger.Nullable_UString;
       Signature_Method_At_Type_Hint : in Swagger.Nullable_UString;
       User_Intermediate_Path : in Swagger.Nullable_UString;
       User_Intermediate_Path_At_Type_Hint : in Swagger.Nullable_UString) is
      URI   : Swagger.Clients.URI_Type;
   begin


      URI.Add_Param ("keyStorePassword", Key_Store_Password);
      URI.Add_Param ("keyStorePassword@TypeHint", Key_Store_Password_At_Type_Hint);
      URI.Add_Param ("service.ranking", Service_Periodranking);
      URI.Add_Param ("service.ranking@TypeHint", Service_Periodranking_At_Type_Hint);
      URI.Add_Param ("idpHttpRedirect", Idp_Http_Redirect);
      URI.Add_Param ("idpHttpRedirect@TypeHint", Idp_Http_Redirect_At_Type_Hint);
      URI.Add_Param ("createUser", Create_User);
      URI.Add_Param ("createUser@TypeHint", Create_User_At_Type_Hint);
      URI.Add_Param ("defaultRedirectUrl", Default_Redirect_Url);
      URI.Add_Param ("defaultRedirectUrl@TypeHint", Default_Redirect_Url_At_Type_Hint);
      URI.Add_Param ("userIDAttribute", User_IDAttribute);
      URI.Add_Param ("userIDAttribute@TypeHint", User_IDAttribute_At_Type_Hint);
      URI.Add_Param ("defaultGroups", Default_Groups);
      URI.Add_Param ("defaultGroups@TypeHint", Default_Groups_At_Type_Hint);
      URI.Add_Param ("idpCertAlias", Idp_Cert_Alias);
      URI.Add_Param ("idpCertAlias@TypeHint", Idp_Cert_Alias_At_Type_Hint);
      URI.Add_Param ("addGroupMemberships", Add_Group_Memberships);
      URI.Add_Param ("addGroupMemberships@TypeHint", Add_Group_Memberships_At_Type_Hint);
      URI.Add_Param ("path", Path);
      URI.Add_Param ("path@TypeHint", Path_At_Type_Hint);
      URI.Add_Param ("synchronizeAttributes", Synchronize_Attributes);
      URI.Add_Param ("synchronizeAttributes@TypeHint", Synchronize_Attributes_At_Type_Hint);
      URI.Add_Param ("clockTolerance", Clock_Tolerance);
      URI.Add_Param ("clockTolerance@TypeHint", Clock_Tolerance_At_Type_Hint);
      URI.Add_Param ("groupMembershipAttribute", Group_Membership_Attribute);
      URI.Add_Param ("groupMembershipAttribute@TypeHint", Group_Membership_Attribute_At_Type_Hint);
      URI.Add_Param ("idpUrl", Idp_Url);
      URI.Add_Param ("idpUrl@TypeHint", Idp_Url_At_Type_Hint);
      URI.Add_Param ("logoutUrl", Logout_Url);
      URI.Add_Param ("logoutUrl@TypeHint", Logout_Url_At_Type_Hint);
      URI.Add_Param ("serviceProviderEntityId", Service_Provider_Entity_Id);
      URI.Add_Param ("serviceProviderEntityId@TypeHint", Service_Provider_Entity_Id_At_Type_Hint);
      URI.Add_Param ("assertionConsumerServiceURL", Assertion_Consumer_Service_URL);
      URI.Add_Param ("assertionConsumerServiceURL@TypeHint", Assertion_Consumer_Service_URLAt_Type_Hint);
      URI.Add_Param ("handleLogout", Handle_Logout);
      URI.Add_Param ("handleLogout@TypeHint", Handle_Logout_At_Type_Hint);
      URI.Add_Param ("spPrivateKeyAlias", Sp_Private_Key_Alias);
      URI.Add_Param ("spPrivateKeyAlias@TypeHint", Sp_Private_Key_Alias_At_Type_Hint);
      URI.Add_Param ("useEncryption", Use_Encryption);
      URI.Add_Param ("useEncryption@TypeHint", Use_Encryption_At_Type_Hint);
      URI.Add_Param ("nameIdFormat", Name_Id_Format);
      URI.Add_Param ("nameIdFormat@TypeHint", Name_Id_Format_At_Type_Hint);
      URI.Add_Param ("digestMethod", Digest_Method);
      URI.Add_Param ("digestMethod@TypeHint", Digest_Method_At_Type_Hint);
      URI.Add_Param ("signatureMethod", Signature_Method);
      URI.Add_Param ("signatureMethod@TypeHint", Signature_Method_At_Type_Hint);
      URI.Add_Param ("userIntermediatePath", User_Intermediate_Path);
      URI.Add_Param ("userIntermediatePath@TypeHint", User_Intermediate_Path_At_Type_Hint);
      URI.Set_Path ("/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config");
      Client.Call (Swagger.Clients.POST, URI);
   end Post_Config_Adobe_Granite_Saml_Authentication_Handler;

   --  
   procedure Post_Config_Apache_Felix_Jetty_Based_Http_Service
      (Client : in out Client_Type;
       Org_Periodapache_Periodfelix_Periodhttps_Periodnio : in Swagger.Nullable_Boolean;
       Org_Periodapache_Periodfelix_Periodhttps_Periodnio_At_Type_Hint : in Swagger.Nullable_UString;
       Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore : in Swagger.Nullable_UString;
       Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_At_Type_Hint : in Swagger.Nullable_UString;
       Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodpassword : in Swagger.Nullable_UString;
       Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodpassword_At_Type_Hint : in Swagger.Nullable_UString;
       Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey : in Swagger.Nullable_UString;
       Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_At_Type_Hint : in Swagger.Nullable_UString;
       Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_Periodpassword : in Swagger.Nullable_UString;
       Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_Periodpassword_At_Type_Hint : in Swagger.Nullable_UString;
       Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore : in Swagger.Nullable_UString;
       Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_At_Type_Hint : in Swagger.Nullable_UString;
       Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_Periodpassword : in Swagger.Nullable_UString;
       Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_Periodpassword_At_Type_Hint : in Swagger.Nullable_UString;
       Org_Periodapache_Periodfelix_Periodhttps_Periodclientcertificate : in Swagger.Nullable_UString;
       Org_Periodapache_Periodfelix_Periodhttps_Periodclientcertificate_At_Type_Hint : in Swagger.Nullable_UString;
       Org_Periodapache_Periodfelix_Periodhttps_Periodenable : in Swagger.Nullable_Boolean;
       Org_Periodapache_Periodfelix_Periodhttps_Periodenable_At_Type_Hint : in Swagger.Nullable_UString;
       Org_Periodosgi_Periodservice_Periodhttp_Periodport_Periodsecure : in Swagger.Nullable_UString;
       Org_Periodosgi_Periodservice_Periodhttp_Periodport_Periodsecure_At_Type_Hint : in Swagger.Nullable_UString) is
      URI   : Swagger.Clients.URI_Type;
   begin


      URI.Add_Param ("org.apache.felix.https.nio", Org_Periodapache_Periodfelix_Periodhttps_Periodnio);
      URI.Add_Param ("org.apache.felix.https.nio@TypeHint", Org_Periodapache_Periodfelix_Periodhttps_Periodnio_At_Type_Hint);
      URI.Add_Param ("org.apache.felix.https.keystore", Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore);
      URI.Add_Param ("org.apache.felix.https.keystore@TypeHint", Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_At_Type_Hint);
      URI.Add_Param ("org.apache.felix.https.keystore.password", Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodpassword);
      URI.Add_Param ("org.apache.felix.https.keystore.password@TypeHint", Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodpassword_At_Type_Hint);
      URI.Add_Param ("org.apache.felix.https.keystore.key", Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey);
      URI.Add_Param ("org.apache.felix.https.keystore.key@TypeHint", Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_At_Type_Hint);
      URI.Add_Param ("org.apache.felix.https.keystore.key.password", Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_Periodpassword);
      URI.Add_Param ("org.apache.felix.https.keystore.key.password@TypeHint", Org_Periodapache_Periodfelix_Periodhttps_Periodkeystore_Periodkey_Periodpassword_At_Type_Hint);
      URI.Add_Param ("org.apache.felix.https.truststore", Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore);
      URI.Add_Param ("org.apache.felix.https.truststore@TypeHint", Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_At_Type_Hint);
      URI.Add_Param ("org.apache.felix.https.truststore.password", Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_Periodpassword);
      URI.Add_Param ("org.apache.felix.https.truststore.password@TypeHint", Org_Periodapache_Periodfelix_Periodhttps_Periodtruststore_Periodpassword_At_Type_Hint);
      URI.Add_Param ("org.apache.felix.https.clientcertificate", Org_Periodapache_Periodfelix_Periodhttps_Periodclientcertificate);
      URI.Add_Param ("org.apache.felix.https.clientcertificate@TypeHint", Org_Periodapache_Periodfelix_Periodhttps_Periodclientcertificate_At_Type_Hint);
      URI.Add_Param ("org.apache.felix.https.enable", Org_Periodapache_Periodfelix_Periodhttps_Periodenable);
      URI.Add_Param ("org.apache.felix.https.enable@TypeHint", Org_Periodapache_Periodfelix_Periodhttps_Periodenable_At_Type_Hint);
      URI.Add_Param ("org.osgi.service.http.port.secure", Org_Periodosgi_Periodservice_Periodhttp_Periodport_Periodsecure);
      URI.Add_Param ("org.osgi.service.http.port.secure@TypeHint", Org_Periodosgi_Periodservice_Periodhttp_Periodport_Periodsecure_At_Type_Hint);
      URI.Set_Path ("/apps/system/config/org.apache.felix.http");
      Client.Call (Swagger.Clients.POST, URI);
   end Post_Config_Apache_Felix_Jetty_Based_Http_Service;

   --  
   procedure Post_Config_Apache_Http_Components_Proxy_Configuration
      (Client : in out Client_Type;
       Proxy_Periodhost : in Swagger.Nullable_UString;
       Proxy_Periodhost_At_Type_Hint : in Swagger.Nullable_UString;
       Proxy_Periodport : in Swagger.Nullable_Integer;
       Proxy_Periodport_At_Type_Hint : in Swagger.Nullable_UString;
       Proxy_Periodexceptions : in Swagger.UString_Vectors.Vector;
       Proxy_Periodexceptions_At_Type_Hint : in Swagger.Nullable_UString;
       Proxy_Periodenabled : in Swagger.Nullable_Boolean;
       Proxy_Periodenabled_At_Type_Hint : in Swagger.Nullable_UString;
       Proxy_Perioduser : in Swagger.Nullable_UString;
       Proxy_Perioduser_At_Type_Hint : in Swagger.Nullable_UString;
       Proxy_Periodpassword : in Swagger.Nullable_UString;
       Proxy_Periodpassword_At_Type_Hint : in Swagger.Nullable_UString) is
      URI   : Swagger.Clients.URI_Type;
   begin


      URI.Add_Param ("proxy.host", Proxy_Periodhost);
      URI.Add_Param ("proxy.host@TypeHint", Proxy_Periodhost_At_Type_Hint);
      URI.Add_Param ("proxy.port", Proxy_Periodport);
      URI.Add_Param ("proxy.port@TypeHint", Proxy_Periodport_At_Type_Hint);
      URI.Add_Param ("proxy.exceptions", Proxy_Periodexceptions);
      URI.Add_Param ("proxy.exceptions@TypeHint", Proxy_Periodexceptions_At_Type_Hint);
      URI.Add_Param ("proxy.enabled", Proxy_Periodenabled);
      URI.Add_Param ("proxy.enabled@TypeHint", Proxy_Periodenabled_At_Type_Hint);
      URI.Add_Param ("proxy.user", Proxy_Perioduser);
      URI.Add_Param ("proxy.user@TypeHint", Proxy_Perioduser_At_Type_Hint);
      URI.Add_Param ("proxy.password", Proxy_Periodpassword);
      URI.Add_Param ("proxy.password@TypeHint", Proxy_Periodpassword_At_Type_Hint);
      URI.Set_Path ("/apps/system/config/org.apache.http.proxyconfigurator.config");
      Client.Call (Swagger.Clients.POST, URI);
   end Post_Config_Apache_Http_Components_Proxy_Configuration;

   --  
   procedure Post_Config_Apache_Sling_Dav_Ex_Servlet
      (Client : in out Client_Type;
       Alias : in Swagger.Nullable_UString;
       Alias_At_Type_Hint : in Swagger.Nullable_UString;
       Dav_Periodcreate_Absolute_Uri : in Swagger.Nullable_Boolean;
       Dav_Periodcreate_Absolute_Uri_At_Type_Hint : in Swagger.Nullable_UString) is
      URI   : Swagger.Clients.URI_Type;
   begin


      URI.Add_Param ("alias", Alias);
      URI.Add_Param ("alias@TypeHint", Alias_At_Type_Hint);
      URI.Add_Param ("dav.create-absolute-uri", Dav_Periodcreate_Absolute_Uri);
      URI.Add_Param ("dav.create-absolute-uri@TypeHint", Dav_Periodcreate_Absolute_Uri_At_Type_Hint);
      URI.Set_Path ("/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet");
      Client.Call (Swagger.Clients.POST, URI);
   end Post_Config_Apache_Sling_Dav_Ex_Servlet;

   --  
   procedure Post_Config_Apache_Sling_Get_Servlet
      (Client : in out Client_Type;
       Json_Periodmaximumresults : in Swagger.Nullable_UString;
       Json_Periodmaximumresults_At_Type_Hint : in Swagger.Nullable_UString;
       Enable_Periodhtml : in Swagger.Nullable_Boolean;
       Enable_Periodhtml_At_Type_Hint : in Swagger.Nullable_UString;
       Enable_Periodtxt : in Swagger.Nullable_Boolean;
       Enable_Periodtxt_At_Type_Hint : in Swagger.Nullable_UString;
       Enable_Periodxml : in Swagger.Nullable_Boolean;
       Enable_Periodxml_At_Type_Hint : in Swagger.Nullable_UString) is
      URI   : Swagger.Clients.URI_Type;
   begin


      URI.Add_Param ("json.maximumresults", Json_Periodmaximumresults);
      URI.Add_Param ("json.maximumresults@TypeHint", Json_Periodmaximumresults_At_Type_Hint);
      URI.Add_Param ("enable.html", Enable_Periodhtml);
      URI.Add_Param ("enable.html@TypeHint", Enable_Periodhtml_At_Type_Hint);
      URI.Add_Param ("enable.txt", Enable_Periodtxt);
      URI.Add_Param ("enable.txt@TypeHint", Enable_Periodtxt_At_Type_Hint);
      URI.Add_Param ("enable.xml", Enable_Periodxml);
      URI.Add_Param ("enable.xml@TypeHint", Enable_Periodxml_At_Type_Hint);
      URI.Set_Path ("/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet");
      Client.Call (Swagger.Clients.POST, URI);
   end Post_Config_Apache_Sling_Get_Servlet;

   --  
   procedure Post_Config_Apache_Sling_Referrer_Filter
      (Client : in out Client_Type;
       Allow_Periodempty : in Swagger.Nullable_Boolean;
       Allow_Periodempty_At_Type_Hint : in Swagger.Nullable_UString;
       Allow_Periodhosts : in Swagger.Nullable_UString;
       Allow_Periodhosts_At_Type_Hint : in Swagger.Nullable_UString;
       Allow_Periodhosts_Periodregexp : in Swagger.Nullable_UString;
       Allow_Periodhosts_Periodregexp_At_Type_Hint : in Swagger.Nullable_UString;
       Filter_Periodmethods : in Swagger.Nullable_UString;
       Filter_Periodmethods_At_Type_Hint : in Swagger.Nullable_UString) is
      URI   : Swagger.Clients.URI_Type;
   begin


      URI.Add_Param ("allow.empty", Allow_Periodempty);
      URI.Add_Param ("allow.empty@TypeHint", Allow_Periodempty_At_Type_Hint);
      URI.Add_Param ("allow.hosts", Allow_Periodhosts);
      URI.Add_Param ("allow.hosts@TypeHint", Allow_Periodhosts_At_Type_Hint);
      URI.Add_Param ("allow.hosts.regexp", Allow_Periodhosts_Periodregexp);
      URI.Add_Param ("allow.hosts.regexp@TypeHint", Allow_Periodhosts_Periodregexp_At_Type_Hint);
      URI.Add_Param ("filter.methods", Filter_Periodmethods);
      URI.Add_Param ("filter.methods@TypeHint", Filter_Periodmethods_At_Type_Hint);
      URI.Set_Path ("/apps/system/config/org.apache.sling.security.impl.ReferrerFilter");
      Client.Call (Swagger.Clients.POST, URI);
   end Post_Config_Apache_Sling_Referrer_Filter;

   --  
   procedure Post_Config_Property
      (Client : in out Client_Type;
       Config_Node_Name : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin


      URI.Set_Path ("/apps/system/config/{configNodeName}");
      URI.Set_Path_Param ("configNodeName", Config_Node_Name);
      Client.Call (Swagger.Clients.POST, URI);
   end Post_Config_Property;

   --  
   procedure Post_Node
      (Client : in out Client_Type;
       Path : in Swagger.UString;
       Name : in Swagger.UString;
       Operation : in Swagger.Nullable_UString;
       Delete_Authorizable : in Swagger.Nullable_UString;
       File : in Swagger.File_Part_Type) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
   begin

      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_FORM));
      .Models.Serialize (Req.Stream, "file", File);

      URI.Add_Param (":operation", Operation);
      URI.Add_Param ("deleteAuthorizable", Delete_Authorizable);
      URI.Set_Path ("/{path}/{name}");
      URI.Set_Path_Param ("path", Path);
      URI.Set_Path_Param ("name", Name);
      Client.Call (Swagger.Clients.POST, URI, Req);
   end Post_Node;

   --  
   procedure Post_Node_Rw
      (Client : in out Client_Type;
       Path : in Swagger.UString;
       Name : in Swagger.UString;
       Add_Members : in Swagger.Nullable_UString) is
      URI   : Swagger.Clients.URI_Type;
   begin


      URI.Add_Param ("addMembers", Add_Members);
      URI.Set_Path ("/{path}/{name}.rw.html");
      URI.Set_Path_Param ("path", Path);
      URI.Set_Path_Param ("name", Name);
      Client.Call (Swagger.Clients.POST, URI);
   end Post_Node_Rw;

   --  
   procedure Post_Path
      (Client : in out Client_Type;
       Path : in Swagger.UString;
       Jcr_Primary_Type : in Swagger.UString;
       Name : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin


      URI.Add_Param ("jcr:primaryType", Jcr_Primary_Type);
      URI.Add_Param (":name", Name);
      URI.Set_Path ("/{path}/");
      URI.Set_Path_Param ("path", Path);
      Client.Call (Swagger.Clients.POST, URI);
   end Post_Path;

   --  
   procedure Post_Query
      (Client : in out Client_Type;
       Path : in Swagger.UString;
       P_Periodlimit : in Swagger.Number;
       P_1Property : in Swagger.UString;
       P_1Property_Periodvalue : in Swagger.UString;
       Result : out Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("path", Path);
      URI.Add_Param ("p.limit", P_Periodlimit);
      URI.Add_Param ("1_property", P_1Property);
      URI.Add_Param ("1_property.value", P_1Property_Periodvalue);
      URI.Set_Path ("/bin/querybuilder.json");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Post_Query;

   --  
   procedure Post_Tree_Activation
      (Client : in out Client_Type;
       Ignoredeactivated : in Boolean;
       Onlymodified : in Boolean;
       Path : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin


      URI.Add_Param ("ignoredeactivated", Ignoredeactivated);
      URI.Add_Param ("onlymodified", Onlymodified);
      URI.Add_Param ("path", Path);
      URI.Set_Path ("/etc/replication/treeactivation.html");
      Client.Call (Swagger.Clients.POST, URI);
   end Post_Tree_Activation;

   --  
   procedure Post_Truststore
      (Client : in out Client_Type;
       Operation : in Swagger.Nullable_UString;
       New_Password : in Swagger.Nullable_UString;
       Re_Password : in Swagger.Nullable_UString;
       Key_Store_Type : in Swagger.Nullable_UString;
       Remove_Alias : in Swagger.Nullable_UString;
       Certificate : in Swagger.File_Part_Type;
       Result : out Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.TEXT_PLAIN));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_FORM));
      .Models.Serialize (Req.Stream, "certificate", Certificate);

      URI.Add_Param (":operation", Operation);
      URI.Add_Param ("newPassword", New_Password);
      URI.Add_Param ("rePassword", Re_Password);
      URI.Add_Param ("keyStoreType", Key_Store_Type);
      URI.Add_Param ("removeAlias", Remove_Alias);
      URI.Set_Path ("/libs/granite/security/post/truststore");
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Post_Truststore;

   --  
   procedure Post_Truststore_PKCS12
      (Client : in out Client_Type;
       Truststore_Periodp_12 : in Swagger.File_Part_Type;
       Result : out Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.TEXT_PLAIN));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_FORM));
      .Models.Serialize (Req.Stream, "truststore.p12", Truststore_Periodp_12);

      URI.Set_Path ("/etc/truststore");
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Post_Truststore_PKCS12;
end .Clients;
