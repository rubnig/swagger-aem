/*
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASCustomApi {
    OASClient client;

    public OASCustomApi(OASClient client) {
        this.client = client;
    }

    public OASCustomApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * 
     * 
     * @param tags  (optional)
     * @param combineTagsOr  (optional)
     * @return String
     * @throws OAS.ApiException if fails to make API call
     */
    public String getAemHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('tags', (String) params.get('tags')));
        query.addAll(client.makeParam('combineTagsOr', (Boolean) params.get('combineTagsOr')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (String) client.invoke(
            'GET', '/system/health', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            String.class
        );
    }
    /**
     * 
     * 
     * @param bundlesIgnored  (optional, default to new List<String>())
     * @param bundlesIgnoredTypeHint  (optional)
     * @throws OAS.ApiException if fails to make API call
     */
    public void postConfigAemHealthCheckServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParams('bundles.ignored', (List<String>) params.get('bundlesIgnored')));
        query.addAll(client.makeParam('bundles.ignored@TypeHint', (String) params.get('bundlesIgnoredTypeHint')));

        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'POST', '/apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>(),
            new List<String>(),
            new List<String> { 'aemAuth' },
            null
        );
    }
    /**
     * 
     * 
     * @param pwdresetAuthorizables  (optional, default to new List<String>())
     * @param pwdresetAuthorizablesTypeHint  (optional)
     * @throws OAS.ApiException if fails to make API call
     */
    public void postConfigAemPasswordReset(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParams('pwdreset.authorizables', (List<String>) params.get('pwdresetAuthorizables')));
        query.addAll(client.makeParam('pwdreset.authorizables@TypeHint', (String) params.get('pwdresetAuthorizablesTypeHint')));

        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'POST', '/apps/system/config/com.shinesolutions.aem.passwordreset.Activator', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>(),
            new List<String>(),
            new List<String> { 'aemAuth' },
            null
        );
    }
}
