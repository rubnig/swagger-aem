/*
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASCrxApi {
    OASClient client;

    public OASCrxApi(OASClient client) {
        this.client = client;
    }

    public OASCrxApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * 
     * 
     * @return String
     * @throws OAS.ApiException if fails to make API call
     */
    public String getCrxdeStatus() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (String) client.invoke(
            'GET', '/crx/server/crx.default/jcr:root/.1.json', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'plain/text' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            String.class
        );
    }
    /**
     * 
     * 
     * @return OASInstallStatus
     * @throws OAS.ApiException if fails to make API call
     */
    public OASInstallStatus getInstallStatus() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASInstallStatus) client.invoke(
            'GET', '/crx/packmgr/installstatus.jsp', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASInstallStatus.class
        );
    }
    /**
     * 
     * 
     * @throws OAS.ApiException if fails to make API call
     */
    public void getPackageManagerServlet() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'GET', '/crx/packmgr/service/script.html', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/html' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            null
        );
    }
    /**
     * 
     * 
     * @param cmd  (required)
     * @return String
     * @throws OAS.ApiException if fails to make API call
     */
    public String postPackageService(Map<String, Object> params) {
        client.assertNotNull(params.get('cmd'), 'cmd');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('cmd', (String) params.get('cmd')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (String) client.invoke(
            'POST', '/crx/packmgr/service.jsp', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/xml' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            String.class
        );
    }
    /**
     * 
     * 
     * @param path  (required)
     * @param cmd  (required)
     * @param groupName  (optional)
     * @param packageName  (optional)
     * @param packageVersion  (optional)
     * @param charset  (optional)
     * @param force  (optional)
     * @param recursive  (optional)
     * @param r_package  (optional)
     * @return String
     * @throws OAS.ApiException if fails to make API call
     */
    public String postPackageServiceJson(Map<String, Object> params) {
        client.assertNotNull(params.get('path'), 'path');
        client.assertNotNull(params.get('cmd'), 'cmd');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('cmd', (String) params.get('cmd')));
        query.addAll(client.makeParam('groupName', (String) params.get('groupName')));
        query.addAll(client.makeParam('packageName', (String) params.get('packageName')));
        query.addAll(client.makeParam('packageVersion', (String) params.get('packageVersion')));
        query.addAll(client.makeParam('_charset_', (String) params.get('charset')));
        query.addAll(client.makeParam('force', (Boolean) params.get('force')));
        query.addAll(client.makeParam('recursive', (Boolean) params.get('recursive')));

        List<OAS.Param> form = new List<OAS.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('package', (Blob) params.get('r_package')));

        return (String) client.invoke(
            'POST', '/crx/packmgr/service/.json/{path}', '',
            query, form,
            new Map<String, Object>{
                'path' => (String) params.get('path')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'multipart/form-data' },
            new List<String> { 'aemAuth' },
            String.class
        );
    }
    /**
     * 
     * 
     * @param groupName  (required)
     * @param packageName  (required)
     * @param version  (required)
     * @param path  (required)
     * @param filter  (optional)
     * @param charset  (optional)
     * @return String
     * @throws OAS.ApiException if fails to make API call
     */
    public String postPackageUpdate(Map<String, Object> params) {
        client.assertNotNull(params.get('groupName'), 'groupName');
        client.assertNotNull(params.get('packageName'), 'packageName');
        client.assertNotNull(params.get('version'), 'version');
        client.assertNotNull(params.get('path'), 'path');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('groupName', (String) params.get('groupName')));
        query.addAll(client.makeParam('packageName', (String) params.get('packageName')));
        query.addAll(client.makeParam('version', (String) params.get('version')));
        query.addAll(client.makeParam('path', (String) params.get('path')));
        query.addAll(client.makeParam('filter', (String) params.get('filter')));
        query.addAll(client.makeParam('_charset_', (String) params.get('charset')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (String) client.invoke(
            'POST', '/crx/packmgr/update.jsp', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            String.class
        );
    }
    /**
     * 
     * 
     * @param old  (required)
     * @param plain  (required)
     * @param verify  (required)
     * @return String
     * @throws OAS.ApiException if fails to make API call
     */
    public String postSetPassword(Map<String, Object> params) {
        client.assertNotNull(params.get('old'), 'old');
        client.assertNotNull(params.get('plain'), 'plain');
        client.assertNotNull(params.get('verify'), 'verify');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('old', (String) params.get('old')));
        query.addAll(client.makeParam('plain', (String) params.get('plain')));
        query.addAll(client.makeParam('verify', (String) params.get('verify')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (String) client.invoke(
            'POST', '/crx/explorer/ui/setpassword.jsp', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            String.class
        );
    }
}
