/*
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SlingApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <response code="0">Default response</response>
        [HttpDelete]
        [Route("/etc/replication/agents.{runmode}/{name}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteAgent")]
        public virtual IActionResult DeleteAgent([FromRoute (Name = "runmode")][Required]string runmode, [FromRoute (Name = "name")][Required]string name)
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <response code="0">Default response</response>
        [HttpDelete]
        [Route("/{path}/{name}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteNode")]
        public virtual IActionResult DeleteNode([FromRoute (Name = "path")][Required]string path, [FromRoute (Name = "name")][Required]string name)
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <response code="0">Default response</response>
        [HttpGet]
        [Route("/etc/replication/agents.{runmode}/{name}")]
        [ValidateModelState]
        [SwaggerOperation("GetAgent")]
        public virtual IActionResult GetAgent([FromRoute (Name = "runmode")][Required]string runmode, [FromRoute (Name = "name")][Required]string name)
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="runmode"></param>
        /// <response code="0">Default response</response>
        [HttpGet]
        [Route("/etc/replication/agents.{runmode}.-1.json")]
        [ValidateModelState]
        [SwaggerOperation("GetAgents")]
        [SwaggerResponse(statusCode: 0, type: typeof(string), description: "Default response")]
        public virtual IActionResult GetAgents([FromRoute (Name = "runmode")][Required]string runmode)
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(string));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <response code="200">Retrieved Authorizable Keystore info</response>
        /// <response code="0">Default response</response>
        [HttpGet]
        [Route("/{intermediatePath}/{authorizableId}.ks.json")]
        [ValidateModelState]
        [SwaggerOperation("GetAuthorizableKeystore")]
        [SwaggerResponse(statusCode: 200, type: typeof(KeystoreInfo), description: "Retrieved Authorizable Keystore info")]
        [SwaggerResponse(statusCode: 0, type: typeof(string), description: "Default response")]
        public virtual IActionResult GetAuthorizableKeystore([FromRoute (Name = "intermediatePath")][Required]string intermediatePath, [FromRoute (Name = "authorizableId")][Required]string authorizableId)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(KeystoreInfo));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(string));
            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<KeystoreInfo>(exampleJson)
            : default(KeystoreInfo);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <response code="0">Default response</response>
        [HttpGet]
        [Route("/{intermediatePath}/{authorizableId}/keystore/store.p12")]
        [ValidateModelState]
        [SwaggerOperation("GetKeystore")]
        [SwaggerResponse(statusCode: 0, type: typeof(System.IO.Stream), description: "Default response")]
        public virtual IActionResult GetKeystore([FromRoute (Name = "intermediatePath")][Required]string intermediatePath, [FromRoute (Name = "authorizableId")][Required]string authorizableId)
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(System.IO.Stream));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <response code="0">Default response</response>
        [HttpGet]
        [Route("/{path}/{name}")]
        [ValidateModelState]
        [SwaggerOperation("GetNode")]
        public virtual IActionResult GetNode([FromRoute (Name = "path")][Required]string path, [FromRoute (Name = "name")][Required]string name)
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="group"></param>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <response code="0">Default response</response>
        [HttpGet]
        [Route("/etc/packages/{group}/{name}-{version}.zip")]
        [ValidateModelState]
        [SwaggerOperation("GetPackage")]
        [SwaggerResponse(statusCode: 0, type: typeof(System.IO.Stream), description: "Default response")]
        public virtual IActionResult GetPackage([FromRoute (Name = "group")][Required]string group, [FromRoute (Name = "name")][Required]string name, [FromRoute (Name = "version")][Required]string version)
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(System.IO.Stream));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="group"></param>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <response code="0">Default response</response>
        [HttpGet]
        [Route("/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json")]
        [ValidateModelState]
        [SwaggerOperation("GetPackageFilter")]
        [SwaggerResponse(statusCode: 0, type: typeof(string), description: "Default response")]
        public virtual IActionResult GetPackageFilter([FromRoute (Name = "group")][Required]string group, [FromRoute (Name = "name")][Required]string name, [FromRoute (Name = "version")][Required]string version)
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(string));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="path"></param>
        /// <param name="pLimit"></param>
        /// <param name="_1property"></param>
        /// <param name="_1propertyValue"></param>
        /// <response code="0">Default response</response>
        [HttpGet]
        [Route("/bin/querybuilder.json")]
        [ValidateModelState]
        [SwaggerOperation("GetQuery")]
        [SwaggerResponse(statusCode: 0, type: typeof(string), description: "Default response")]
        public virtual IActionResult GetQuery([FromQuery (Name = "path")][Required()]string path, [FromQuery (Name = "p.limit")][Required()]decimal pLimit, [FromQuery (Name = "1_property")][Required()]string _1property, [FromQuery (Name = "1_property.value")][Required()]string _1propertyValue)
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(string));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <response code="0">Default response</response>
        [HttpGet]
        [Route("/etc/truststore/truststore.p12")]
        [ValidateModelState]
        [SwaggerOperation("GetTruststore")]
        [SwaggerResponse(statusCode: 0, type: typeof(System.IO.Stream), description: "Default response")]
        public virtual IActionResult GetTruststore()
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(System.IO.Stream));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <response code="200">Retrieved AEM Truststore info</response>
        /// <response code="0">Default response</response>
        [HttpGet]
        [Route("/libs/granite/security/truststore.json")]
        [ValidateModelState]
        [SwaggerOperation("GetTruststoreInfo")]
        [SwaggerResponse(statusCode: 200, type: typeof(TruststoreInfo), description: "Retrieved AEM Truststore info")]
        [SwaggerResponse(statusCode: 0, type: typeof(string), description: "Default response")]
        public virtual IActionResult GetTruststoreInfo()
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(TruststoreInfo));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(string));
            string exampleJson = null;
            exampleJson = "{\n  \"aliases\" : [ {\n    \"entryType\" : \"entryType\",\n    \"notAfter\" : \"notAfter\",\n    \"serialNumber\" : 0,\n    \"subject\" : \"subject\",\n    \"alias\" : \"alias\",\n    \"issuer\" : \"issuer\",\n    \"notBefore\" : \"notBefore\"\n  }, {\n    \"entryType\" : \"entryType\",\n    \"notAfter\" : \"notAfter\",\n    \"serialNumber\" : 0,\n    \"subject\" : \"subject\",\n    \"alias\" : \"alias\",\n    \"issuer\" : \"issuer\",\n    \"notBefore\" : \"notBefore\"\n  } ],\n  \"exists\" : true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TruststoreInfo>(exampleJson)
            : default(TruststoreInfo);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <param name="jcrcontentCqdistribute"></param>
        /// <param name="jcrcontentCqdistributeTypeHint"></param>
        /// <param name="jcrcontentCqname"></param>
        /// <param name="jcrcontentCqtemplate"></param>
        /// <param name="jcrcontentEnabled"></param>
        /// <param name="jcrcontentJcrdescription"></param>
        /// <param name="jcrcontentJcrlastModified"></param>
        /// <param name="jcrcontentJcrlastModifiedBy"></param>
        /// <param name="jcrcontentJcrmixinTypes"></param>
        /// <param name="jcrcontentJcrtitle"></param>
        /// <param name="jcrcontentLogLevel"></param>
        /// <param name="jcrcontentNoStatusUpdate"></param>
        /// <param name="jcrcontentNoVersioning"></param>
        /// <param name="jcrcontentProtocolConnectTimeout"></param>
        /// <param name="jcrcontentProtocolHTTPConnectionClosed"></param>
        /// <param name="jcrcontentProtocolHTTPExpired"></param>
        /// <param name="jcrcontentProtocolHTTPHeaders"></param>
        /// <param name="jcrcontentProtocolHTTPHeadersTypeHint"></param>
        /// <param name="jcrcontentProtocolHTTPMethod"></param>
        /// <param name="jcrcontentProtocolHTTPSRelaxed"></param>
        /// <param name="jcrcontentProtocolInterface"></param>
        /// <param name="jcrcontentProtocolSocketTimeout"></param>
        /// <param name="jcrcontentProtocolVersion"></param>
        /// <param name="jcrcontentProxyNTLMDomain"></param>
        /// <param name="jcrcontentProxyNTLMHost"></param>
        /// <param name="jcrcontentProxyHost"></param>
        /// <param name="jcrcontentProxyPassword"></param>
        /// <param name="jcrcontentProxyPort"></param>
        /// <param name="jcrcontentProxyUser"></param>
        /// <param name="jcrcontentQueueBatchMaxSize"></param>
        /// <param name="jcrcontentQueueBatchMode"></param>
        /// <param name="jcrcontentQueueBatchWaitTime"></param>
        /// <param name="jcrcontentRetryDelay"></param>
        /// <param name="jcrcontentReverseReplication"></param>
        /// <param name="jcrcontentSerializationType"></param>
        /// <param name="jcrcontentSlingresourceType"></param>
        /// <param name="jcrcontentSsl"></param>
        /// <param name="jcrcontentTransportNTLMDomain"></param>
        /// <param name="jcrcontentTransportNTLMHost"></param>
        /// <param name="jcrcontentTransportPassword"></param>
        /// <param name="jcrcontentTransportUri"></param>
        /// <param name="jcrcontentTransportUser"></param>
        /// <param name="jcrcontentTriggerDistribute"></param>
        /// <param name="jcrcontentTriggerModified"></param>
        /// <param name="jcrcontentTriggerOnOffTime"></param>
        /// <param name="jcrcontentTriggerReceive"></param>
        /// <param name="jcrcontentTriggerSpecific"></param>
        /// <param name="jcrcontentUserId"></param>
        /// <param name="jcrprimaryType"></param>
        /// <param name="operation"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("/etc/replication/agents.{runmode}/{name}")]
        [ValidateModelState]
        [SwaggerOperation("PostAgent")]
        public virtual IActionResult PostAgent([FromRoute (Name = "runmode")][Required]string runmode, [FromRoute (Name = "name")][Required]string name, [FromQuery (Name = "jcr:content/cq:distribute")]bool? jcrcontentCqdistribute, [FromQuery (Name = "jcr:content/cq:distribute@TypeHint")]string jcrcontentCqdistributeTypeHint, [FromQuery (Name = "jcr:content/cq:name")]string jcrcontentCqname, [FromQuery (Name = "jcr:content/cq:template")]string jcrcontentCqtemplate, [FromQuery (Name = "jcr:content/enabled")]bool? jcrcontentEnabled, [FromQuery (Name = "jcr:content/jcr:description")]string jcrcontentJcrdescription, [FromQuery (Name = "jcr:content/jcr:lastModified")]string jcrcontentJcrlastModified, [FromQuery (Name = "jcr:content/jcr:lastModifiedBy")]string jcrcontentJcrlastModifiedBy, [FromQuery (Name = "jcr:content/jcr:mixinTypes")]string jcrcontentJcrmixinTypes, [FromQuery (Name = "jcr:content/jcr:title")]string jcrcontentJcrtitle, [FromQuery (Name = "jcr:content/logLevel")]string jcrcontentLogLevel, [FromQuery (Name = "jcr:content/noStatusUpdate")]bool? jcrcontentNoStatusUpdate, [FromQuery (Name = "jcr:content/noVersioning")]bool? jcrcontentNoVersioning, [FromQuery (Name = "jcr:content/protocolConnectTimeout")]decimal? jcrcontentProtocolConnectTimeout, [FromQuery (Name = "jcr:content/protocolHTTPConnectionClosed")]bool? jcrcontentProtocolHTTPConnectionClosed, [FromQuery (Name = "jcr:content/protocolHTTPExpired")]string jcrcontentProtocolHTTPExpired, [FromQuery (Name = "jcr:content/protocolHTTPHeaders")]List<string> jcrcontentProtocolHTTPHeaders, [FromQuery (Name = "jcr:content/protocolHTTPHeaders@TypeHint")]string jcrcontentProtocolHTTPHeadersTypeHint, [FromQuery (Name = "jcr:content/protocolHTTPMethod")]string jcrcontentProtocolHTTPMethod, [FromQuery (Name = "jcr:content/protocolHTTPSRelaxed")]bool? jcrcontentProtocolHTTPSRelaxed, [FromQuery (Name = "jcr:content/protocolInterface")]string jcrcontentProtocolInterface, [FromQuery (Name = "jcr:content/protocolSocketTimeout")]decimal? jcrcontentProtocolSocketTimeout, [FromQuery (Name = "jcr:content/protocolVersion")]string jcrcontentProtocolVersion, [FromQuery (Name = "jcr:content/proxyNTLMDomain")]string jcrcontentProxyNTLMDomain, [FromQuery (Name = "jcr:content/proxyNTLMHost")]string jcrcontentProxyNTLMHost, [FromQuery (Name = "jcr:content/proxyHost")]string jcrcontentProxyHost, [FromQuery (Name = "jcr:content/proxyPassword")]string jcrcontentProxyPassword, [FromQuery (Name = "jcr:content/proxyPort")]decimal? jcrcontentProxyPort, [FromQuery (Name = "jcr:content/proxyUser")]string jcrcontentProxyUser, [FromQuery (Name = "jcr:content/queueBatchMaxSize")]decimal? jcrcontentQueueBatchMaxSize, [FromQuery (Name = "jcr:content/queueBatchMode")]string jcrcontentQueueBatchMode, [FromQuery (Name = "jcr:content/queueBatchWaitTime")]decimal? jcrcontentQueueBatchWaitTime, [FromQuery (Name = "jcr:content/retryDelay")]string jcrcontentRetryDelay, [FromQuery (Name = "jcr:content/reverseReplication")]bool? jcrcontentReverseReplication, [FromQuery (Name = "jcr:content/serializationType")]string jcrcontentSerializationType, [FromQuery (Name = "jcr:content/sling:resourceType")]string jcrcontentSlingresourceType, [FromQuery (Name = "jcr:content/ssl")]string jcrcontentSsl, [FromQuery (Name = "jcr:content/transportNTLMDomain")]string jcrcontentTransportNTLMDomain, [FromQuery (Name = "jcr:content/transportNTLMHost")]string jcrcontentTransportNTLMHost, [FromQuery (Name = "jcr:content/transportPassword")]string jcrcontentTransportPassword, [FromQuery (Name = "jcr:content/transportUri")]string jcrcontentTransportUri, [FromQuery (Name = "jcr:content/transportUser")]string jcrcontentTransportUser, [FromQuery (Name = "jcr:content/triggerDistribute")]bool? jcrcontentTriggerDistribute, [FromQuery (Name = "jcr:content/triggerModified")]bool? jcrcontentTriggerModified, [FromQuery (Name = "jcr:content/triggerOnOffTime")]bool? jcrcontentTriggerOnOffTime, [FromQuery (Name = "jcr:content/triggerReceive")]bool? jcrcontentTriggerReceive, [FromQuery (Name = "jcr:content/triggerSpecific")]bool? jcrcontentTriggerSpecific, [FromQuery (Name = "jcr:content/userId")]string jcrcontentUserId, [FromQuery (Name = "jcr:primaryType")]string jcrprimaryType, [FromQuery (Name = ":operation")]string operation)
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <param name="operation"></param>
        /// <param name="currentPassword"></param>
        /// <param name="newPassword"></param>
        /// <param name="rePassword"></param>
        /// <param name="keyPassword"></param>
        /// <param name="keyStorePass"></param>
        /// <param name="alias"></param>
        /// <param name="newAlias"></param>
        /// <param name="removeAlias"></param>
        /// <param name="certChain"></param>
        /// <param name="pk"></param>
        /// <param name="keyStore"></param>
        /// <response code="200">Retrieved Authorizable Keystore info</response>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("/{intermediatePath}/{authorizableId}.ks.html")]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [SwaggerOperation("PostAuthorizableKeystore")]
        [SwaggerResponse(statusCode: 200, type: typeof(KeystoreInfo), description: "Retrieved Authorizable Keystore info")]
        [SwaggerResponse(statusCode: 0, type: typeof(string), description: "Default response")]
        public virtual IActionResult PostAuthorizableKeystore([FromRoute (Name = "intermediatePath")][Required]string intermediatePath, [FromRoute (Name = "authorizableId")][Required]string authorizableId, [FromQuery (Name = ":operation")]string operation, [FromQuery (Name = "currentPassword")]string currentPassword, [FromQuery (Name = "newPassword")]string newPassword, [FromQuery (Name = "rePassword")]string rePassword, [FromQuery (Name = "keyPassword")]string keyPassword, [FromQuery (Name = "keyStorePass")]string keyStorePass, [FromQuery (Name = "alias")]string alias, [FromQuery (Name = "newAlias")]string newAlias, [FromQuery (Name = "removeAlias")]string removeAlias, IFormFile certChain, IFormFile pk, IFormFile keyStore)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(KeystoreInfo));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(string));
            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<KeystoreInfo>(exampleJson)
            : default(KeystoreInfo);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="authorizableId"></param>
        /// <param name="intermediatePath"></param>
        /// <param name="createUser"></param>
        /// <param name="createGroup"></param>
        /// <param name="reppassword"></param>
        /// <param name="profileGivenName"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("/libs/granite/security/post/authorizables")]
        [ValidateModelState]
        [SwaggerOperation("PostAuthorizables")]
        [SwaggerResponse(statusCode: 0, type: typeof(string), description: "Default response")]
        public virtual IActionResult PostAuthorizables([FromQuery (Name = "authorizableId")][Required()]string authorizableId, [FromQuery (Name = "intermediatePath")][Required()]string intermediatePath, [FromQuery (Name = "createUser")]string createUser, [FromQuery (Name = "createGroup")]string createGroup, [FromQuery (Name = "rep:password")]string reppassword, [FromQuery (Name = "profile/givenName")]string profileGivenName)
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(string));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="keyStorePassword"></param>
        /// <param name="keyStorePasswordTypeHint"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="serviceRankingTypeHint"></param>
        /// <param name="idpHttpRedirect"></param>
        /// <param name="idpHttpRedirectTypeHint"></param>
        /// <param name="createUser"></param>
        /// <param name="createUserTypeHint"></param>
        /// <param name="defaultRedirectUrl"></param>
        /// <param name="defaultRedirectUrlTypeHint"></param>
        /// <param name="userIDAttribute"></param>
        /// <param name="userIDAttributeTypeHint"></param>
        /// <param name="defaultGroups"></param>
        /// <param name="defaultGroupsTypeHint"></param>
        /// <param name="idpCertAlias"></param>
        /// <param name="idpCertAliasTypeHint"></param>
        /// <param name="addGroupMemberships"></param>
        /// <param name="addGroupMembershipsTypeHint"></param>
        /// <param name="path"></param>
        /// <param name="pathTypeHint"></param>
        /// <param name="synchronizeAttributes"></param>
        /// <param name="synchronizeAttributesTypeHint"></param>
        /// <param name="clockTolerance"></param>
        /// <param name="clockToleranceTypeHint"></param>
        /// <param name="groupMembershipAttribute"></param>
        /// <param name="groupMembershipAttributeTypeHint"></param>
        /// <param name="idpUrl"></param>
        /// <param name="idpUrlTypeHint"></param>
        /// <param name="logoutUrl"></param>
        /// <param name="logoutUrlTypeHint"></param>
        /// <param name="serviceProviderEntityId"></param>
        /// <param name="serviceProviderEntityIdTypeHint"></param>
        /// <param name="assertionConsumerServiceURL"></param>
        /// <param name="assertionConsumerServiceURLTypeHint"></param>
        /// <param name="handleLogout"></param>
        /// <param name="handleLogoutTypeHint"></param>
        /// <param name="spPrivateKeyAlias"></param>
        /// <param name="spPrivateKeyAliasTypeHint"></param>
        /// <param name="useEncryption"></param>
        /// <param name="useEncryptionTypeHint"></param>
        /// <param name="nameIdFormat"></param>
        /// <param name="nameIdFormatTypeHint"></param>
        /// <param name="digestMethod"></param>
        /// <param name="digestMethodTypeHint"></param>
        /// <param name="signatureMethod"></param>
        /// <param name="signatureMethodTypeHint"></param>
        /// <param name="userIntermediatePath"></param>
        /// <param name="userIntermediatePathTypeHint"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config")]
        [ValidateModelState]
        [SwaggerOperation("PostConfigAdobeGraniteSamlAuthenticationHandler")]
        public virtual IActionResult PostConfigAdobeGraniteSamlAuthenticationHandler([FromQuery (Name = "keyStorePassword")]string keyStorePassword, [FromQuery (Name = "keyStorePassword@TypeHint")]string keyStorePasswordTypeHint, [FromQuery (Name = "service.ranking")]int? serviceRanking, [FromQuery (Name = "service.ranking@TypeHint")]string serviceRankingTypeHint, [FromQuery (Name = "idpHttpRedirect")]bool? idpHttpRedirect, [FromQuery (Name = "idpHttpRedirect@TypeHint")]string idpHttpRedirectTypeHint, [FromQuery (Name = "createUser")]bool? createUser, [FromQuery (Name = "createUser@TypeHint")]string createUserTypeHint, [FromQuery (Name = "defaultRedirectUrl")]string defaultRedirectUrl, [FromQuery (Name = "defaultRedirectUrl@TypeHint")]string defaultRedirectUrlTypeHint, [FromQuery (Name = "userIDAttribute")]string userIDAttribute, [FromQuery (Name = "userIDAttribute@TypeHint")]string userIDAttributeTypeHint, [FromQuery (Name = "defaultGroups")]List<string> defaultGroups, [FromQuery (Name = "defaultGroups@TypeHint")]string defaultGroupsTypeHint, [FromQuery (Name = "idpCertAlias")]string idpCertAlias, [FromQuery (Name = "idpCertAlias@TypeHint")]string idpCertAliasTypeHint, [FromQuery (Name = "addGroupMemberships")]bool? addGroupMemberships, [FromQuery (Name = "addGroupMemberships@TypeHint")]string addGroupMembershipsTypeHint, [FromQuery (Name = "path")]List<string> path, [FromQuery (Name = "path@TypeHint")]string pathTypeHint, [FromQuery (Name = "synchronizeAttributes")]List<string> synchronizeAttributes, [FromQuery (Name = "synchronizeAttributes@TypeHint")]string synchronizeAttributesTypeHint, [FromQuery (Name = "clockTolerance")]int? clockTolerance, [FromQuery (Name = "clockTolerance@TypeHint")]string clockToleranceTypeHint, [FromQuery (Name = "groupMembershipAttribute")]string groupMembershipAttribute, [FromQuery (Name = "groupMembershipAttribute@TypeHint")]string groupMembershipAttributeTypeHint, [FromQuery (Name = "idpUrl")]string idpUrl, [FromQuery (Name = "idpUrl@TypeHint")]string idpUrlTypeHint, [FromQuery (Name = "logoutUrl")]string logoutUrl, [FromQuery (Name = "logoutUrl@TypeHint")]string logoutUrlTypeHint, [FromQuery (Name = "serviceProviderEntityId")]string serviceProviderEntityId, [FromQuery (Name = "serviceProviderEntityId@TypeHint")]string serviceProviderEntityIdTypeHint, [FromQuery (Name = "assertionConsumerServiceURL")]string assertionConsumerServiceURL, [FromQuery (Name = "assertionConsumerServiceURL@TypeHint")]string assertionConsumerServiceURLTypeHint, [FromQuery (Name = "handleLogout")]bool? handleLogout, [FromQuery (Name = "handleLogout@TypeHint")]string handleLogoutTypeHint, [FromQuery (Name = "spPrivateKeyAlias")]string spPrivateKeyAlias, [FromQuery (Name = "spPrivateKeyAlias@TypeHint")]string spPrivateKeyAliasTypeHint, [FromQuery (Name = "useEncryption")]bool? useEncryption, [FromQuery (Name = "useEncryption@TypeHint")]string useEncryptionTypeHint, [FromQuery (Name = "nameIdFormat")]string nameIdFormat, [FromQuery (Name = "nameIdFormat@TypeHint")]string nameIdFormatTypeHint, [FromQuery (Name = "digestMethod")]string digestMethod, [FromQuery (Name = "digestMethod@TypeHint")]string digestMethodTypeHint, [FromQuery (Name = "signatureMethod")]string signatureMethod, [FromQuery (Name = "signatureMethod@TypeHint")]string signatureMethodTypeHint, [FromQuery (Name = "userIntermediatePath")]string userIntermediatePath, [FromQuery (Name = "userIntermediatePath@TypeHint")]string userIntermediatePathTypeHint)
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="orgApacheFelixHttpsNio"></param>
        /// <param name="orgApacheFelixHttpsNioTypeHint"></param>
        /// <param name="orgApacheFelixHttpsKeystore"></param>
        /// <param name="orgApacheFelixHttpsKeystoreTypeHint"></param>
        /// <param name="orgApacheFelixHttpsKeystorePassword"></param>
        /// <param name="orgApacheFelixHttpsKeystorePasswordTypeHint"></param>
        /// <param name="orgApacheFelixHttpsKeystoreKey"></param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyTypeHint"></param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyPassword"></param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyPasswordTypeHint"></param>
        /// <param name="orgApacheFelixHttpsTruststore"></param>
        /// <param name="orgApacheFelixHttpsTruststoreTypeHint"></param>
        /// <param name="orgApacheFelixHttpsTruststorePassword"></param>
        /// <param name="orgApacheFelixHttpsTruststorePasswordTypeHint"></param>
        /// <param name="orgApacheFelixHttpsClientcertificate"></param>
        /// <param name="orgApacheFelixHttpsClientcertificateTypeHint"></param>
        /// <param name="orgApacheFelixHttpsEnable"></param>
        /// <param name="orgApacheFelixHttpsEnableTypeHint"></param>
        /// <param name="orgOsgiServiceHttpPortSecure"></param>
        /// <param name="orgOsgiServiceHttpPortSecureTypeHint"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("/apps/system/config/org.apache.felix.http")]
        [ValidateModelState]
        [SwaggerOperation("PostConfigApacheFelixJettyBasedHttpService")]
        public virtual IActionResult PostConfigApacheFelixJettyBasedHttpService([FromQuery (Name = "org.apache.felix.https.nio")]bool? orgApacheFelixHttpsNio, [FromQuery (Name = "org.apache.felix.https.nio@TypeHint")]string orgApacheFelixHttpsNioTypeHint, [FromQuery (Name = "org.apache.felix.https.keystore")]string orgApacheFelixHttpsKeystore, [FromQuery (Name = "org.apache.felix.https.keystore@TypeHint")]string orgApacheFelixHttpsKeystoreTypeHint, [FromQuery (Name = "org.apache.felix.https.keystore.password")]string orgApacheFelixHttpsKeystorePassword, [FromQuery (Name = "org.apache.felix.https.keystore.password@TypeHint")]string orgApacheFelixHttpsKeystorePasswordTypeHint, [FromQuery (Name = "org.apache.felix.https.keystore.key")]string orgApacheFelixHttpsKeystoreKey, [FromQuery (Name = "org.apache.felix.https.keystore.key@TypeHint")]string orgApacheFelixHttpsKeystoreKeyTypeHint, [FromQuery (Name = "org.apache.felix.https.keystore.key.password")]string orgApacheFelixHttpsKeystoreKeyPassword, [FromQuery (Name = "org.apache.felix.https.keystore.key.password@TypeHint")]string orgApacheFelixHttpsKeystoreKeyPasswordTypeHint, [FromQuery (Name = "org.apache.felix.https.truststore")]string orgApacheFelixHttpsTruststore, [FromQuery (Name = "org.apache.felix.https.truststore@TypeHint")]string orgApacheFelixHttpsTruststoreTypeHint, [FromQuery (Name = "org.apache.felix.https.truststore.password")]string orgApacheFelixHttpsTruststorePassword, [FromQuery (Name = "org.apache.felix.https.truststore.password@TypeHint")]string orgApacheFelixHttpsTruststorePasswordTypeHint, [FromQuery (Name = "org.apache.felix.https.clientcertificate")]string orgApacheFelixHttpsClientcertificate, [FromQuery (Name = "org.apache.felix.https.clientcertificate@TypeHint")]string orgApacheFelixHttpsClientcertificateTypeHint, [FromQuery (Name = "org.apache.felix.https.enable")]bool? orgApacheFelixHttpsEnable, [FromQuery (Name = "org.apache.felix.https.enable@TypeHint")]string orgApacheFelixHttpsEnableTypeHint, [FromQuery (Name = "org.osgi.service.http.port.secure")]string orgOsgiServiceHttpPortSecure, [FromQuery (Name = "org.osgi.service.http.port.secure@TypeHint")]string orgOsgiServiceHttpPortSecureTypeHint)
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="proxyHost"></param>
        /// <param name="proxyHostTypeHint"></param>
        /// <param name="proxyPort"></param>
        /// <param name="proxyPortTypeHint"></param>
        /// <param name="proxyExceptions"></param>
        /// <param name="proxyExceptionsTypeHint"></param>
        /// <param name="proxyEnabled"></param>
        /// <param name="proxyEnabledTypeHint"></param>
        /// <param name="proxyUser"></param>
        /// <param name="proxyUserTypeHint"></param>
        /// <param name="proxyPassword"></param>
        /// <param name="proxyPasswordTypeHint"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("/apps/system/config/org.apache.http.proxyconfigurator.config")]
        [ValidateModelState]
        [SwaggerOperation("PostConfigApacheHttpComponentsProxyConfiguration")]
        public virtual IActionResult PostConfigApacheHttpComponentsProxyConfiguration([FromQuery (Name = "proxy.host")]string proxyHost, [FromQuery (Name = "proxy.host@TypeHint")]string proxyHostTypeHint, [FromQuery (Name = "proxy.port")]int? proxyPort, [FromQuery (Name = "proxy.port@TypeHint")]string proxyPortTypeHint, [FromQuery (Name = "proxy.exceptions")]List<string> proxyExceptions, [FromQuery (Name = "proxy.exceptions@TypeHint")]string proxyExceptionsTypeHint, [FromQuery (Name = "proxy.enabled")]bool? proxyEnabled, [FromQuery (Name = "proxy.enabled@TypeHint")]string proxyEnabledTypeHint, [FromQuery (Name = "proxy.user")]string proxyUser, [FromQuery (Name = "proxy.user@TypeHint")]string proxyUserTypeHint, [FromQuery (Name = "proxy.password")]string proxyPassword, [FromQuery (Name = "proxy.password@TypeHint")]string proxyPasswordTypeHint)
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="alias"></param>
        /// <param name="aliasTypeHint"></param>
        /// <param name="davCreateAbsoluteUri"></param>
        /// <param name="davCreateAbsoluteUriTypeHint"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet")]
        [ValidateModelState]
        [SwaggerOperation("PostConfigApacheSlingDavExServlet")]
        public virtual IActionResult PostConfigApacheSlingDavExServlet([FromQuery (Name = "alias")]string alias, [FromQuery (Name = "alias@TypeHint")]string aliasTypeHint, [FromQuery (Name = "dav.create-absolute-uri")]bool? davCreateAbsoluteUri, [FromQuery (Name = "dav.create-absolute-uri@TypeHint")]string davCreateAbsoluteUriTypeHint)
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="jsonMaximumresults"></param>
        /// <param name="jsonMaximumresultsTypeHint"></param>
        /// <param name="enableHtml"></param>
        /// <param name="enableHtmlTypeHint"></param>
        /// <param name="enableTxt"></param>
        /// <param name="enableTxtTypeHint"></param>
        /// <param name="enableXml"></param>
        /// <param name="enableXmlTypeHint"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet")]
        [ValidateModelState]
        [SwaggerOperation("PostConfigApacheSlingGetServlet")]
        public virtual IActionResult PostConfigApacheSlingGetServlet([FromQuery (Name = "json.maximumresults")]string jsonMaximumresults, [FromQuery (Name = "json.maximumresults@TypeHint")]string jsonMaximumresultsTypeHint, [FromQuery (Name = "enable.html")]bool? enableHtml, [FromQuery (Name = "enable.html@TypeHint")]string enableHtmlTypeHint, [FromQuery (Name = "enable.txt")]bool? enableTxt, [FromQuery (Name = "enable.txt@TypeHint")]string enableTxtTypeHint, [FromQuery (Name = "enable.xml")]bool? enableXml, [FromQuery (Name = "enable.xml@TypeHint")]string enableXmlTypeHint)
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="allowEmpty"></param>
        /// <param name="allowEmptyTypeHint"></param>
        /// <param name="allowHosts"></param>
        /// <param name="allowHostsTypeHint"></param>
        /// <param name="allowHostsRegexp"></param>
        /// <param name="allowHostsRegexpTypeHint"></param>
        /// <param name="filterMethods"></param>
        /// <param name="filterMethodsTypeHint"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("/apps/system/config/org.apache.sling.security.impl.ReferrerFilter")]
        [ValidateModelState]
        [SwaggerOperation("PostConfigApacheSlingReferrerFilter")]
        public virtual IActionResult PostConfigApacheSlingReferrerFilter([FromQuery (Name = "allow.empty")]bool? allowEmpty, [FromQuery (Name = "allow.empty@TypeHint")]string allowEmptyTypeHint, [FromQuery (Name = "allow.hosts")]string allowHosts, [FromQuery (Name = "allow.hosts@TypeHint")]string allowHostsTypeHint, [FromQuery (Name = "allow.hosts.regexp")]string allowHostsRegexp, [FromQuery (Name = "allow.hosts.regexp@TypeHint")]string allowHostsRegexpTypeHint, [FromQuery (Name = "filter.methods")]string filterMethods, [FromQuery (Name = "filter.methods@TypeHint")]string filterMethodsTypeHint)
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="configNodeName"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("/apps/system/config/{configNodeName}")]
        [ValidateModelState]
        [SwaggerOperation("PostConfigProperty")]
        public virtual IActionResult PostConfigProperty([FromRoute (Name = "configNodeName")][Required]string configNodeName)
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <param name="operation"></param>
        /// <param name="deleteAuthorizable"></param>
        /// <param name="file"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("/{path}/{name}")]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [SwaggerOperation("PostNode")]
        public virtual IActionResult PostNode([FromRoute (Name = "path")][Required]string path, [FromRoute (Name = "name")][Required]string name, [FromQuery (Name = ":operation")]string operation, [FromQuery (Name = "deleteAuthorizable")]string deleteAuthorizable, IFormFile file)
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <param name="addMembers"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("/{path}/{name}.rw.html")]
        [ValidateModelState]
        [SwaggerOperation("PostNodeRw")]
        public virtual IActionResult PostNodeRw([FromRoute (Name = "path")][Required]string path, [FromRoute (Name = "name")][Required]string name, [FromQuery (Name = "addMembers")]string addMembers)
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="path"></param>
        /// <param name="jcrprimaryType"></param>
        /// <param name="name"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("/{path}/")]
        [ValidateModelState]
        [SwaggerOperation("PostPath")]
        public virtual IActionResult PostPath([FromRoute (Name = "path")][Required]string path, [FromQuery (Name = "jcr:primaryType")][Required()]string jcrprimaryType, [FromQuery (Name = ":name")][Required()]string name)
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="path"></param>
        /// <param name="pLimit"></param>
        /// <param name="_1property"></param>
        /// <param name="_1propertyValue"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("/bin/querybuilder.json")]
        [ValidateModelState]
        [SwaggerOperation("PostQuery")]
        [SwaggerResponse(statusCode: 0, type: typeof(string), description: "Default response")]
        public virtual IActionResult PostQuery([FromQuery (Name = "path")][Required()]string path, [FromQuery (Name = "p.limit")][Required()]decimal pLimit, [FromQuery (Name = "1_property")][Required()]string _1property, [FromQuery (Name = "1_property.value")][Required()]string _1propertyValue)
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(string));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ignoredeactivated"></param>
        /// <param name="onlymodified"></param>
        /// <param name="path"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("/etc/replication/treeactivation.html")]
        [ValidateModelState]
        [SwaggerOperation("PostTreeActivation")]
        public virtual IActionResult PostTreeActivation([FromQuery (Name = "ignoredeactivated")][Required()]bool ignoredeactivated, [FromQuery (Name = "onlymodified")][Required()]bool onlymodified, [FromQuery (Name = "path")][Required()]string path)
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="operation"></param>
        /// <param name="newPassword"></param>
        /// <param name="rePassword"></param>
        /// <param name="keyStoreType"></param>
        /// <param name="removeAlias"></param>
        /// <param name="certificate"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("/libs/granite/security/post/truststore")]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [SwaggerOperation("PostTruststore")]
        [SwaggerResponse(statusCode: 0, type: typeof(string), description: "Default response")]
        public virtual IActionResult PostTruststore([FromQuery (Name = ":operation")]string operation, [FromQuery (Name = "newPassword")]string newPassword, [FromQuery (Name = "rePassword")]string rePassword, [FromQuery (Name = "keyStoreType")]string keyStoreType, [FromQuery (Name = "removeAlias")]string removeAlias, IFormFile certificate)
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(string));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="truststoreP12"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("/etc/truststore")]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [SwaggerOperation("PostTruststorePKCS12")]
        [SwaggerResponse(statusCode: 0, type: typeof(string), description: "Default response")]
        public virtual IActionResult PostTruststorePKCS12(IFormFile truststoreP12)
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(string));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
