/*
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CrxApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <response code="200">CRXDE is enabled</response>
        /// <response code="404">CRXDE is disabled</response>
        [HttpGet]
        [Route("/crx/server/crx.default/jcr:root/.1.json")]
        [ValidateModelState]
        [SwaggerOperation("GetCrxdeStatus")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "CRXDE is enabled")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "CRXDE is disabled")]
        public virtual IActionResult GetCrxdeStatus()
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(string));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <response code="200">Retrieved CRX package manager install status</response>
        /// <response code="0">Default response</response>
        [HttpGet]
        [Route("/crx/packmgr/installstatus.jsp")]
        [ValidateModelState]
        [SwaggerOperation("GetInstallStatus")]
        [SwaggerResponse(statusCode: 200, type: typeof(InstallStatus), description: "Retrieved CRX package manager install status")]
        [SwaggerResponse(statusCode: 0, type: typeof(string), description: "Default response")]
        public virtual IActionResult GetInstallStatus()
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InstallStatus));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(string));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : {\n    \"finished\" : true,\n    \"itemCount\" : 0\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InstallStatus>(exampleJson)
            : default(InstallStatus);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <response code="404">Package Manager Servlet is disabled</response>
        /// <response code="405">Package Manager Servlet is active</response>
        [HttpGet]
        [Route("/crx/packmgr/service/script.html")]
        [ValidateModelState]
        [SwaggerOperation("GetPackageManagerServlet")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "Package Manager Servlet is disabled")]
        [SwaggerResponse(statusCode: 405, type: typeof(string), description: "Package Manager Servlet is active")]
        public virtual IActionResult GetPackageManagerServlet()
        { 

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(string));
            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(string));

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="cmd"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("/crx/packmgr/service.jsp")]
        [ValidateModelState]
        [SwaggerOperation("PostPackageService")]
        [SwaggerResponse(statusCode: 0, type: typeof(string), description: "Default response")]
        public virtual IActionResult PostPackageService([FromQuery (Name = "cmd")][Required()]string cmd)
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(string));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="path"></param>
        /// <param name="cmd"></param>
        /// <param name="groupName"></param>
        /// <param name="packageName"></param>
        /// <param name="packageVersion"></param>
        /// <param name="charset"></param>
        /// <param name="force"></param>
        /// <param name="recursive"></param>
        /// <param name="package"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("/crx/packmgr/service/.json/{path}")]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [SwaggerOperation("PostPackageServiceJson")]
        [SwaggerResponse(statusCode: 0, type: typeof(string), description: "Default response")]
        public virtual IActionResult PostPackageServiceJson([FromRoute (Name = "path")][Required]string path, [FromQuery (Name = "cmd")][Required()]string cmd, [FromQuery (Name = "groupName")]string groupName, [FromQuery (Name = "packageName")]string packageName, [FromQuery (Name = "packageVersion")]string packageVersion, [FromQuery (Name = "_charset_")]string charset, [FromQuery (Name = "force")]bool? force, [FromQuery (Name = "recursive")]bool? recursive, IFormFile package)
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(string));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="groupName"></param>
        /// <param name="packageName"></param>
        /// <param name="version"></param>
        /// <param name="path"></param>
        /// <param name="filter"></param>
        /// <param name="charset"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("/crx/packmgr/update.jsp")]
        [ValidateModelState]
        [SwaggerOperation("PostPackageUpdate")]
        [SwaggerResponse(statusCode: 0, type: typeof(string), description: "Default response")]
        public virtual IActionResult PostPackageUpdate([FromQuery (Name = "groupName")][Required()]string groupName, [FromQuery (Name = "packageName")][Required()]string packageName, [FromQuery (Name = "version")][Required()]string version, [FromQuery (Name = "path")][Required()]string path, [FromQuery (Name = "filter")]string filter, [FromQuery (Name = "_charset_")]string charset)
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(string));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="old"></param>
        /// <param name="plain"></param>
        /// <param name="verify"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("/crx/explorer/ui/setpassword.jsp")]
        [ValidateModelState]
        [SwaggerOperation("PostSetPassword")]
        [SwaggerResponse(statusCode: 0, type: typeof(string), description: "Default response")]
        public virtual IActionResult PostSetPassword([FromQuery (Name = "old")][Required()]string old, [FromQuery (Name = "plain")][Required()]string plain, [FromQuery (Name = "verify")][Required()]string verify)
        { 

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(string));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
