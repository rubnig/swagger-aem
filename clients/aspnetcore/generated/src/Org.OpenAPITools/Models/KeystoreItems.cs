/*
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class KeystoreItems : IEquatable<KeystoreItems>
    {
        /// <summary>
        /// Keystore alias name
        /// </summary>
        /// <value>Keystore alias name</value>
        [DataMember(Name="alias", EmitDefaultValue=false)]
        public string Alias { get; set; }

        /// <summary>
        /// e.g. \&quot;privateKey\&quot;
        /// </summary>
        /// <value>e.g. \&quot;privateKey\&quot;</value>
        [DataMember(Name="entryType", EmitDefaultValue=false)]
        public string EntryType { get; set; }

        /// <summary>
        /// e.g. \&quot;RSA\&quot;
        /// </summary>
        /// <value>e.g. \&quot;RSA\&quot;</value>
        [DataMember(Name="algorithm", EmitDefaultValue=false)]
        public string Algorithm { get; set; }

        /// <summary>
        /// e.g. \&quot;PKCS#8\&quot;
        /// </summary>
        /// <value>e.g. \&quot;PKCS#8\&quot;</value>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public string Format { get; set; }

        /// <summary>
        /// Gets or Sets Chain
        /// </summary>
        [DataMember(Name="chain", EmitDefaultValue=false)]
        public List<KeystoreChainItems> Chain { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KeystoreItems {\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  EntryType: ").Append(EntryType).Append("\n");
            sb.Append("  Algorithm: ").Append(Algorithm).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Chain: ").Append(Chain).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((KeystoreItems)obj);
        }

        /// <summary>
        /// Returns true if KeystoreItems instances are equal
        /// </summary>
        /// <param name="other">Instance of KeystoreItems to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KeystoreItems other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Alias == other.Alias ||
                    Alias != null &&
                    Alias.Equals(other.Alias)
                ) && 
                (
                    EntryType == other.EntryType ||
                    EntryType != null &&
                    EntryType.Equals(other.EntryType)
                ) && 
                (
                    Algorithm == other.Algorithm ||
                    Algorithm != null &&
                    Algorithm.Equals(other.Algorithm)
                ) && 
                (
                    Format == other.Format ||
                    Format != null &&
                    Format.Equals(other.Format)
                ) && 
                (
                    Chain == other.Chain ||
                    Chain != null &&
                    other.Chain != null &&
                    Chain.SequenceEqual(other.Chain)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Alias != null)
                    hashCode = hashCode * 59 + Alias.GetHashCode();
                    if (EntryType != null)
                    hashCode = hashCode * 59 + EntryType.GetHashCode();
                    if (Algorithm != null)
                    hashCode = hashCode * 59 + Algorithm.GetHashCode();
                    if (Format != null)
                    hashCode = hashCode * 59 + Format.GetHashCode();
                    if (Chain != null)
                    hashCode = hashCode * 59 + Chain.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(KeystoreItems left, KeystoreItems right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(KeystoreItems left, KeystoreItems right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
