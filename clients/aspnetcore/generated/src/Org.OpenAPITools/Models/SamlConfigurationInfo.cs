/*
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SamlConfigurationInfo : IEquatable<SamlConfigurationInfo>
    {
        /// <summary>
        /// Persistent Identity (PID)
        /// </summary>
        /// <value>Persistent Identity (PID)</value>
        [DataMember(Name="pid", EmitDefaultValue=false)]
        public string Pid { get; set; }

        /// <summary>
        /// Title
        /// </summary>
        /// <value>Title</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Title
        /// </summary>
        /// <value>Title</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// needed for configuration binding
        /// </summary>
        /// <value>needed for configuration binding</value>
        [DataMember(Name="bundle_location", EmitDefaultValue=false)]
        public string BundleLocation { get; set; }

        /// <summary>
        /// needed for configuraiton binding
        /// </summary>
        /// <value>needed for configuraiton binding</value>
        [DataMember(Name="service_location", EmitDefaultValue=false)]
        public string ServiceLocation { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public SamlConfigurationProperties Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SamlConfigurationInfo {\n");
            sb.Append("  Pid: ").Append(Pid).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  BundleLocation: ").Append(BundleLocation).Append("\n");
            sb.Append("  ServiceLocation: ").Append(ServiceLocation).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SamlConfigurationInfo)obj);
        }

        /// <summary>
        /// Returns true if SamlConfigurationInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of SamlConfigurationInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SamlConfigurationInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Pid == other.Pid ||
                    Pid != null &&
                    Pid.Equals(other.Pid)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    BundleLocation == other.BundleLocation ||
                    BundleLocation != null &&
                    BundleLocation.Equals(other.BundleLocation)
                ) && 
                (
                    ServiceLocation == other.ServiceLocation ||
                    ServiceLocation != null &&
                    ServiceLocation.Equals(other.ServiceLocation)
                ) && 
                (
                    Properties == other.Properties ||
                    Properties != null &&
                    Properties.Equals(other.Properties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Pid != null)
                    hashCode = hashCode * 59 + Pid.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (BundleLocation != null)
                    hashCode = hashCode * 59 + BundleLocation.GetHashCode();
                    if (ServiceLocation != null)
                    hashCode = hashCode * 59 + ServiceLocation.GetHashCode();
                    if (Properties != null)
                    hashCode = hashCode * 59 + Properties.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SamlConfigurationInfo left, SamlConfigurationInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SamlConfigurationInfo left, SamlConfigurationInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
