note
 description:"[
		Adobe Experience Manager (AEM) API
 		Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
  		The version of the OpenAPI document: 3.5.0-pre.0
 	    Contact: opensource@shinesolutions.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	GRANITE_API

inherit

    API_I


feature -- API Access


	ssl_setup (keystore_password: STRING_32; keystore_password_confirm: STRING_32; truststore_password: STRING_32; truststore_password_confirm: STRING_32; https_hostname: STRING_32; https_port: STRING_32; privatekey_file: FILE; certificate_file: FILE): detachable STRING_32
			-- 
			-- 
			-- 
			-- argument: keystore_password  (required)
			-- 
			-- argument: keystore_password_confirm  (required)
			-- 
			-- argument: truststore_password  (required)
			-- 
			-- argument: truststore_password_confirm  (required)
			-- 
			-- argument: https_hostname  (required)
			-- 
			-- argument: https_port  (required)
			-- 
			-- argument: privatekey_file  (optional, default to null)
			-- 
			-- argument: certificate_file  (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/libs/granite/security/post/sslSetup.html"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "keystorePassword", keystore_password));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "keystorePasswordConfirm", keystore_password_confirm));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "truststorePassword", truststore_password));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "truststorePasswordConfirm", truststore_password_confirm));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "httpsHostname", https_hostname));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "httpsPort", https_port));

			if attached privatekey_file as l_privatekey_file then
				l_request.add_form(l_privatekey_file,"privatekeyFile");
			end
			if attached certificate_file as l_certificate_file then
				l_request.add_form(l_certificate_file,"certificateFile");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"multipart/form-data">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	


end
