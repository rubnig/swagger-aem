note
 description:"[
		Adobe Experience Manager (AEM) API
 		Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
  		The version of the OpenAPI document: 3.5.0-pre.0
 	    Contact: opensource@shinesolutions.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	CRX_API

inherit

    API_I


feature -- API Access


	crxde_status : detachable STRING_32
			-- 
			-- 
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/crx/server/crx.default/jcr:root/.1.json"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"plain/text">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	install_status : detachable INSTALL_STATUS
			-- 
			-- 
			-- 
			-- 
			-- Result INSTALL_STATUS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/crx/packmgr/installstatus.jsp"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { INSTALL_STATUS } l_response.data ({ INSTALL_STATUS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	package_manager_servlet 
			-- 
			-- 
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/crx/packmgr/service/script.html"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/html">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end	

	post_package_service (cmd: STRING_32): detachable STRING_32
			-- 
			-- 
			-- 
			-- argument: cmd  (required)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/crx/packmgr/service.jsp"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "cmd", cmd));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	post_package_service_json (path: STRING_32; cmd: STRING_32; group_name: STRING_32; package_name: STRING_32; package_version: STRING_32; var_charset_: STRING_32; force: BOOLEAN; recursive: BOOLEAN; package: FILE): detachable STRING_32
			-- 
			-- 
			-- 
			-- argument: path  (required)
			-- 
			-- argument: cmd  (required)
			-- 
			-- argument: group_name  (optional, default to null)
			-- 
			-- argument: package_name  (optional, default to null)
			-- 
			-- argument: package_version  (optional, default to null)
			-- 
			-- argument: var_charset_  (optional, default to null)
			-- 
			-- argument: force  (optional, default to null)
			-- 
			-- argument: recursive  (optional, default to null)
			-- 
			-- argument: package  (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/crx/packmgr/service/.json/{path}"
			l_path.replace_substring_all ("{"+"path"+"}", api_client.url_encode (path.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "cmd", cmd));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "groupName", group_name));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "packageName", package_name));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "packageVersion", package_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "_charset_", var_charset_));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "force", force));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "recursive", recursive));

			if attached package as l_package then
				l_request.add_form(l_package,"package");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"multipart/form-data">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	post_package_update (group_name: STRING_32; package_name: STRING_32; version: STRING_32; path: STRING_32; filter: STRING_32; var_charset_: STRING_32): detachable STRING_32
			-- 
			-- 
			-- 
			-- argument: group_name  (required)
			-- 
			-- argument: package_name  (required)
			-- 
			-- argument: version  (required)
			-- 
			-- argument: path  (required)
			-- 
			-- argument: filter  (optional, default to null)
			-- 
			-- argument: var_charset_  (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/crx/packmgr/update.jsp"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "groupName", group_name));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "packageName", package_name));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "version", version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "filter", filter));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "_charset_", var_charset_));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	post_set_password (var_old: STRING_32; plain: STRING_32; verify: STRING_32): detachable STRING_32
			-- 
			-- 
			-- 
			-- argument: var_old  (required)
			-- 
			-- argument: plain  (required)
			-- 
			-- argument: verify  (required)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/crx/explorer/ui/setpassword.jsp"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "old", var_old));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "plain", plain));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "verify", verify));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	


end
