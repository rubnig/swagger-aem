note
 description:"[
		Adobe Experience Manager (AEM) API
 		Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
  		The version of the OpenAPI document: 3.5.0-pre.0
 	    Contact: opensource@shinesolutions.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class BUNDLE_DATA 




feature --Access

 	id: INTEGER_32 
    	 -- Bundle ID
    name: detachable STRING_32 
      -- Bundle name
 	fragment: BOOLEAN 
    	 -- Is bundle a fragment
 	state_raw: INTEGER_32 
    	 -- Numeric raw bundle state value
    state: detachable STRING_32 
      -- Bundle state value
    version: detachable STRING_32 
      -- Bundle version
    symbolic_name: detachable STRING_32 
      -- Bundle symbolic name
    category: detachable STRING_32 
      -- Bundle category
    props: detachable LIST [BUNDLE_DATA_PROP] 
      

feature -- Change Element  
 
    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name		
      end

    set_name (a_name: like name)
        -- Set 'name' with 'a_name'.
      do
        name := a_name
      ensure
        name_set: name = a_name		
      end

    set_fragment (a_name: like fragment)
        -- Set 'fragment' with 'a_name'.
      do
        fragment := a_name
      ensure
        fragment_set: fragment = a_name		
      end

    set_state_raw (a_name: like state_raw)
        -- Set 'state_raw' with 'a_name'.
      do
        state_raw := a_name
      ensure
        state_raw_set: state_raw = a_name		
      end

    set_state (a_name: like state)
        -- Set 'state' with 'a_name'.
      do
        state := a_name
      ensure
        state_set: state = a_name		
      end

    set_version (a_name: like version)
        -- Set 'version' with 'a_name'.
      do
        version := a_name
      ensure
        version_set: version = a_name		
      end

    set_symbolic_name (a_name: like symbolic_name)
        -- Set 'symbolic_name' with 'a_name'.
      do
        symbolic_name := a_name
      ensure
        symbolic_name_set: symbolic_name = a_name		
      end

    set_category (a_name: like category)
        -- Set 'category' with 'a_name'.
      do
        category := a_name
      ensure
        category_set: category = a_name		
      end

    set_props (a_name: like props)
        -- Set 'props' with 'a_name'.
      do
        props := a_name
      ensure
        props_set: props = a_name		
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass BUNDLE_DATA%N")
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")    
        end  
        if attached name as l_name then
          Result.append ("%Nname:")
          Result.append (l_name.out)
          Result.append ("%N")    
        end  
        if attached fragment as l_fragment then
          Result.append ("%Nfragment:")
          Result.append (l_fragment.out)
          Result.append ("%N")    
        end  
        if attached state_raw as l_state_raw then
          Result.append ("%Nstate_raw:")
          Result.append (l_state_raw.out)
          Result.append ("%N")    
        end  
        if attached state as l_state then
          Result.append ("%Nstate:")
          Result.append (l_state.out)
          Result.append ("%N")    
        end  
        if attached version as l_version then
          Result.append ("%Nversion:")
          Result.append (l_version.out)
          Result.append ("%N")    
        end  
        if attached symbolic_name as l_symbolic_name then
          Result.append ("%Nsymbolic_name:")
          Result.append (l_symbolic_name.out)
          Result.append ("%N")    
        end  
        if attached category as l_category then
          Result.append ("%Ncategory:")
          Result.append (l_category.out)
          Result.append ("%N")    
        end  
        if attached props as l_props then
          across l_props as ic loop
            Result.append ("%N props:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
      end
end


