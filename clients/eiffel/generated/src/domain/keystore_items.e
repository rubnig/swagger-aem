note
 description:"[
		Adobe Experience Manager (AEM) API
 		Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
  		The version of the OpenAPI document: 3.5.0-pre.0
 	    Contact: opensource@shinesolutions.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class KEYSTORE_ITEMS 




feature --Access

    var_alias: detachable STRING_32 
      -- Keystore alias name
    entry_type: detachable STRING_32 
      -- e.g. \"privateKey\"
    algorithm: detachable STRING_32 
      -- e.g. \"RSA\"
    format: detachable STRING_32 
      -- e.g. \"PKCS#8\"
    chain: detachable LIST [KEYSTORE_CHAIN_ITEMS] 
      

feature -- Change Element  
 
    set_var_alias (a_name: like var_alias)
        -- Set 'var_alias' with 'a_name'.
      do
        var_alias := a_name
      ensure
        var_alias_set: var_alias = a_name		
      end

    set_entry_type (a_name: like entry_type)
        -- Set 'entry_type' with 'a_name'.
      do
        entry_type := a_name
      ensure
        entry_type_set: entry_type = a_name		
      end

    set_algorithm (a_name: like algorithm)
        -- Set 'algorithm' with 'a_name'.
      do
        algorithm := a_name
      ensure
        algorithm_set: algorithm = a_name		
      end

    set_format (a_name: like format)
        -- Set 'format' with 'a_name'.
      do
        format := a_name
      ensure
        format_set: format = a_name		
      end

    set_chain (a_name: like chain)
        -- Set 'chain' with 'a_name'.
      do
        chain := a_name
      ensure
        chain_set: chain = a_name		
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass KEYSTORE_ITEMS%N")
        if attached var_alias as l_var_alias then
          Result.append ("%Nvar_alias:")
          Result.append (l_var_alias.out)
          Result.append ("%N")    
        end  
        if attached entry_type as l_entry_type then
          Result.append ("%Nentry_type:")
          Result.append (l_entry_type.out)
          Result.append ("%N")    
        end  
        if attached algorithm as l_algorithm then
          Result.append ("%Nalgorithm:")
          Result.append (l_algorithm.out)
          Result.append ("%N")    
        end  
        if attached format as l_format then
          Result.append ("%Nformat:")
          Result.append (l_format.out)
          Result.append ("%N")    
        end  
        if attached chain as l_chain then
          across l_chain as ic loop
            Result.append ("%N chain:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
      end
end


