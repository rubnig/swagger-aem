/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'http://localhost';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum GraniteApiApiKeys {
}

export class GraniteApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'aemAuth': new HttpBasicAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            this.username = basePathOrUsername;
            this.password = password
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: GraniteApiApiKeys, value: string) {
        (this.authentications as any)[GraniteApiApiKeys[key]].apiKey = value;
    }

    set username(username: string) {
        this.authentications.aemAuth.username = username;
    }

    set password(password: string) {
        this.authentications.aemAuth.password = password;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * 
     * @param keystorePassword 
     * @param keystorePasswordConfirm 
     * @param truststorePassword 
     * @param truststorePasswordConfirm 
     * @param httpsHostname 
     * @param httpsPort 
     * @param privatekeyFile 
     * @param certificateFile 
     */
    public async sslSetup (keystorePassword: string, keystorePasswordConfirm: string, truststorePassword: string, truststorePasswordConfirm: string, httpsHostname: string, httpsPort: string, privatekeyFile?: RequestFile, certificateFile?: RequestFile, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: string;  }> {
        const localVarPath = this.basePath + '/libs/granite/security/post/sslSetup.html';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/plain'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'keystorePassword' is not null or undefined
        if (keystorePassword === null || keystorePassword === undefined) {
            throw new Error('Required parameter keystorePassword was null or undefined when calling sslSetup.');
        }

        // verify required parameter 'keystorePasswordConfirm' is not null or undefined
        if (keystorePasswordConfirm === null || keystorePasswordConfirm === undefined) {
            throw new Error('Required parameter keystorePasswordConfirm was null or undefined when calling sslSetup.');
        }

        // verify required parameter 'truststorePassword' is not null or undefined
        if (truststorePassword === null || truststorePassword === undefined) {
            throw new Error('Required parameter truststorePassword was null or undefined when calling sslSetup.');
        }

        // verify required parameter 'truststorePasswordConfirm' is not null or undefined
        if (truststorePasswordConfirm === null || truststorePasswordConfirm === undefined) {
            throw new Error('Required parameter truststorePasswordConfirm was null or undefined when calling sslSetup.');
        }

        // verify required parameter 'httpsHostname' is not null or undefined
        if (httpsHostname === null || httpsHostname === undefined) {
            throw new Error('Required parameter httpsHostname was null or undefined when calling sslSetup.');
        }

        // verify required parameter 'httpsPort' is not null or undefined
        if (httpsPort === null || httpsPort === undefined) {
            throw new Error('Required parameter httpsPort was null or undefined when calling sslSetup.');
        }

        if (keystorePassword !== undefined) {
            localVarQueryParameters['keystorePassword'] = ObjectSerializer.serialize(keystorePassword, "string");
        }

        if (keystorePasswordConfirm !== undefined) {
            localVarQueryParameters['keystorePasswordConfirm'] = ObjectSerializer.serialize(keystorePasswordConfirm, "string");
        }

        if (truststorePassword !== undefined) {
            localVarQueryParameters['truststorePassword'] = ObjectSerializer.serialize(truststorePassword, "string");
        }

        if (truststorePasswordConfirm !== undefined) {
            localVarQueryParameters['truststorePasswordConfirm'] = ObjectSerializer.serialize(truststorePasswordConfirm, "string");
        }

        if (httpsHostname !== undefined) {
            localVarQueryParameters['httpsHostname'] = ObjectSerializer.serialize(httpsHostname, "string");
        }

        if (httpsPort !== undefined) {
            localVarQueryParameters['httpsPort'] = ObjectSerializer.serialize(httpsPort, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (privatekeyFile !== undefined) {
            localVarFormParams['privatekeyFile'] = privatekeyFile;
        }
        localVarUseFormData = true;

        if (certificateFile !== undefined) {
            localVarFormParams['certificateFile'] = certificateFile;
        }
        localVarUseFormData = true;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.aemAuth.username && this.authentications.aemAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.aemAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: string;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "string");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
