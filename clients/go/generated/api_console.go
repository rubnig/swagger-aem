/*
Adobe Experience Manager (AEM) API

Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API

API version: 3.5.0-pre.0
Contact: opensource@shinesolutions.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// ConsoleApiService ConsoleApi service
type ConsoleApiService service

type ApiGetAemProductInfoRequest struct {
	ctx _context.Context
	ApiService *ConsoleApiService
}


func (r ApiGetAemProductInfoRequest) Execute() ([]string, *_nethttp.Response, error) {
	return r.ApiService.GetAemProductInfoExecute(r)
}

/*
GetAemProductInfo Method for GetAemProductInfo

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAemProductInfoRequest
*/
func (a *ConsoleApiService) GetAemProductInfo(ctx _context.Context) ApiGetAemProductInfoRequest {
	return ApiGetAemProductInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []string
func (a *ConsoleApiService) GetAemProductInfoExecute(r ApiGetAemProductInfoRequest) ([]string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConsoleApiService.GetAemProductInfo")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/console/status-productinfo.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBundleInfoRequest struct {
	ctx _context.Context
	ApiService *ConsoleApiService
	name string
}


func (r ApiGetBundleInfoRequest) Execute() (BundleInfo, *_nethttp.Response, error) {
	return r.ApiService.GetBundleInfoExecute(r)
}

/*
GetBundleInfo Method for GetBundleInfo

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiGetBundleInfoRequest
*/
func (a *ConsoleApiService) GetBundleInfo(ctx _context.Context, name string) ApiGetBundleInfoRequest {
	return ApiGetBundleInfoRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return BundleInfo
func (a *ConsoleApiService) GetBundleInfoExecute(r ApiGetBundleInfoRequest) (BundleInfo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BundleInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConsoleApiService.GetBundleInfo")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/console/bundles/{name}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetConfigMgrRequest struct {
	ctx _context.Context
	ApiService *ConsoleApiService
}


func (r ApiGetConfigMgrRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.GetConfigMgrExecute(r)
}

/*
GetConfigMgr Method for GetConfigMgr

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetConfigMgrRequest
*/
func (a *ConsoleApiService) GetConfigMgr(ctx _context.Context) ApiGetConfigMgrRequest {
	return ApiGetConfigMgrRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ConsoleApiService) GetConfigMgrExecute(r ApiGetConfigMgrRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConsoleApiService.GetConfigMgr")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/console/configMgr"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostBundleRequest struct {
	ctx _context.Context
	ApiService *ConsoleApiService
	name string
	action *string
}

func (r ApiPostBundleRequest) Action(action string) ApiPostBundleRequest {
	r.action = &action
	return r
}

func (r ApiPostBundleRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PostBundleExecute(r)
}

/*
PostBundle Method for PostBundle

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiPostBundleRequest
*/
func (a *ConsoleApiService) PostBundle(ctx _context.Context, name string) ApiPostBundleRequest {
	return ApiPostBundleRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
func (a *ConsoleApiService) PostBundleExecute(r ApiPostBundleRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConsoleApiService.PostBundle")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/console/bundles/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.action == nil {
		return nil, reportError("action is required and must be specified")
	}

	localVarQueryParams.Add("action", parameterToString(*r.action, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostJmxRepositoryRequest struct {
	ctx _context.Context
	ApiService *ConsoleApiService
	action string
}


func (r ApiPostJmxRepositoryRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PostJmxRepositoryExecute(r)
}

/*
PostJmxRepository Method for PostJmxRepository

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param action
 @return ApiPostJmxRepositoryRequest
*/
func (a *ConsoleApiService) PostJmxRepository(ctx _context.Context, action string) ApiPostJmxRepositoryRequest {
	return ApiPostJmxRepositoryRequest{
		ApiService: a,
		ctx: ctx,
		action: action,
	}
}

// Execute executes the request
func (a *ConsoleApiService) PostJmxRepositoryExecute(r ApiPostJmxRepositoryRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConsoleApiService.PostJmxRepository")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/console/jmx/com.adobe.granite:type=Repository/op/{action}"
	localVarPath = strings.Replace(localVarPath, "{"+"action"+"}", _neturl.PathEscape(parameterToString(r.action, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostSamlConfigurationRequest struct {
	ctx _context.Context
	ApiService *ConsoleApiService
	post *bool
	apply *bool
	delete *bool
	action *string
	location *string
	path *[]string
	serviceRanking *int32
	idpUrl *string
	idpCertAlias *string
	idpHttpRedirect *bool
	serviceProviderEntityId *string
	assertionConsumerServiceURL *string
	spPrivateKeyAlias *string
	keyStorePassword *string
	defaultRedirectUrl *string
	userIDAttribute *string
	useEncryption *bool
	createUser *bool
	addGroupMemberships *bool
	groupMembershipAttribute *string
	defaultGroups *[]string
	nameIdFormat *string
	synchronizeAttributes *[]string
	handleLogout *bool
	logoutUrl *string
	clockTolerance *int32
	digestMethod *string
	signatureMethod *string
	userIntermediatePath *string
	propertylist *[]string
}

func (r ApiPostSamlConfigurationRequest) Post(post bool) ApiPostSamlConfigurationRequest {
	r.post = &post
	return r
}
func (r ApiPostSamlConfigurationRequest) Apply(apply bool) ApiPostSamlConfigurationRequest {
	r.apply = &apply
	return r
}
func (r ApiPostSamlConfigurationRequest) Delete(delete bool) ApiPostSamlConfigurationRequest {
	r.delete = &delete
	return r
}
func (r ApiPostSamlConfigurationRequest) Action(action string) ApiPostSamlConfigurationRequest {
	r.action = &action
	return r
}
func (r ApiPostSamlConfigurationRequest) Location(location string) ApiPostSamlConfigurationRequest {
	r.location = &location
	return r
}
func (r ApiPostSamlConfigurationRequest) Path(path []string) ApiPostSamlConfigurationRequest {
	r.path = &path
	return r
}
func (r ApiPostSamlConfigurationRequest) ServiceRanking(serviceRanking int32) ApiPostSamlConfigurationRequest {
	r.serviceRanking = &serviceRanking
	return r
}
func (r ApiPostSamlConfigurationRequest) IdpUrl(idpUrl string) ApiPostSamlConfigurationRequest {
	r.idpUrl = &idpUrl
	return r
}
func (r ApiPostSamlConfigurationRequest) IdpCertAlias(idpCertAlias string) ApiPostSamlConfigurationRequest {
	r.idpCertAlias = &idpCertAlias
	return r
}
func (r ApiPostSamlConfigurationRequest) IdpHttpRedirect(idpHttpRedirect bool) ApiPostSamlConfigurationRequest {
	r.idpHttpRedirect = &idpHttpRedirect
	return r
}
func (r ApiPostSamlConfigurationRequest) ServiceProviderEntityId(serviceProviderEntityId string) ApiPostSamlConfigurationRequest {
	r.serviceProviderEntityId = &serviceProviderEntityId
	return r
}
func (r ApiPostSamlConfigurationRequest) AssertionConsumerServiceURL(assertionConsumerServiceURL string) ApiPostSamlConfigurationRequest {
	r.assertionConsumerServiceURL = &assertionConsumerServiceURL
	return r
}
func (r ApiPostSamlConfigurationRequest) SpPrivateKeyAlias(spPrivateKeyAlias string) ApiPostSamlConfigurationRequest {
	r.spPrivateKeyAlias = &spPrivateKeyAlias
	return r
}
func (r ApiPostSamlConfigurationRequest) KeyStorePassword(keyStorePassword string) ApiPostSamlConfigurationRequest {
	r.keyStorePassword = &keyStorePassword
	return r
}
func (r ApiPostSamlConfigurationRequest) DefaultRedirectUrl(defaultRedirectUrl string) ApiPostSamlConfigurationRequest {
	r.defaultRedirectUrl = &defaultRedirectUrl
	return r
}
func (r ApiPostSamlConfigurationRequest) UserIDAttribute(userIDAttribute string) ApiPostSamlConfigurationRequest {
	r.userIDAttribute = &userIDAttribute
	return r
}
func (r ApiPostSamlConfigurationRequest) UseEncryption(useEncryption bool) ApiPostSamlConfigurationRequest {
	r.useEncryption = &useEncryption
	return r
}
func (r ApiPostSamlConfigurationRequest) CreateUser(createUser bool) ApiPostSamlConfigurationRequest {
	r.createUser = &createUser
	return r
}
func (r ApiPostSamlConfigurationRequest) AddGroupMemberships(addGroupMemberships bool) ApiPostSamlConfigurationRequest {
	r.addGroupMemberships = &addGroupMemberships
	return r
}
func (r ApiPostSamlConfigurationRequest) GroupMembershipAttribute(groupMembershipAttribute string) ApiPostSamlConfigurationRequest {
	r.groupMembershipAttribute = &groupMembershipAttribute
	return r
}
func (r ApiPostSamlConfigurationRequest) DefaultGroups(defaultGroups []string) ApiPostSamlConfigurationRequest {
	r.defaultGroups = &defaultGroups
	return r
}
func (r ApiPostSamlConfigurationRequest) NameIdFormat(nameIdFormat string) ApiPostSamlConfigurationRequest {
	r.nameIdFormat = &nameIdFormat
	return r
}
func (r ApiPostSamlConfigurationRequest) SynchronizeAttributes(synchronizeAttributes []string) ApiPostSamlConfigurationRequest {
	r.synchronizeAttributes = &synchronizeAttributes
	return r
}
func (r ApiPostSamlConfigurationRequest) HandleLogout(handleLogout bool) ApiPostSamlConfigurationRequest {
	r.handleLogout = &handleLogout
	return r
}
func (r ApiPostSamlConfigurationRequest) LogoutUrl(logoutUrl string) ApiPostSamlConfigurationRequest {
	r.logoutUrl = &logoutUrl
	return r
}
func (r ApiPostSamlConfigurationRequest) ClockTolerance(clockTolerance int32) ApiPostSamlConfigurationRequest {
	r.clockTolerance = &clockTolerance
	return r
}
func (r ApiPostSamlConfigurationRequest) DigestMethod(digestMethod string) ApiPostSamlConfigurationRequest {
	r.digestMethod = &digestMethod
	return r
}
func (r ApiPostSamlConfigurationRequest) SignatureMethod(signatureMethod string) ApiPostSamlConfigurationRequest {
	r.signatureMethod = &signatureMethod
	return r
}
func (r ApiPostSamlConfigurationRequest) UserIntermediatePath(userIntermediatePath string) ApiPostSamlConfigurationRequest {
	r.userIntermediatePath = &userIntermediatePath
	return r
}
func (r ApiPostSamlConfigurationRequest) Propertylist(propertylist []string) ApiPostSamlConfigurationRequest {
	r.propertylist = &propertylist
	return r
}

func (r ApiPostSamlConfigurationRequest) Execute() (SamlConfigurationInfo, *_nethttp.Response, error) {
	return r.ApiService.PostSamlConfigurationExecute(r)
}

/*
PostSamlConfiguration Method for PostSamlConfiguration

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSamlConfigurationRequest
*/
func (a *ConsoleApiService) PostSamlConfiguration(ctx _context.Context) ApiPostSamlConfigurationRequest {
	return ApiPostSamlConfigurationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SamlConfigurationInfo
func (a *ConsoleApiService) PostSamlConfigurationExecute(r ApiPostSamlConfigurationRequest) (SamlConfigurationInfo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SamlConfigurationInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConsoleApiService.PostSamlConfiguration")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.post != nil {
		localVarQueryParams.Add("post", parameterToString(*r.post, ""))
	}
	if r.apply != nil {
		localVarQueryParams.Add("apply", parameterToString(*r.apply, ""))
	}
	if r.delete != nil {
		localVarQueryParams.Add("delete", parameterToString(*r.delete, ""))
	}
	if r.action != nil {
		localVarQueryParams.Add("action", parameterToString(*r.action, ""))
	}
	if r.location != nil {
		localVarQueryParams.Add("$location", parameterToString(*r.location, ""))
	}
	if r.path != nil {
		t := *r.path
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("path", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("path", parameterToString(t, "multi"))
		}
	}
	if r.serviceRanking != nil {
		localVarQueryParams.Add("service.ranking", parameterToString(*r.serviceRanking, ""))
	}
	if r.idpUrl != nil {
		localVarQueryParams.Add("idpUrl", parameterToString(*r.idpUrl, ""))
	}
	if r.idpCertAlias != nil {
		localVarQueryParams.Add("idpCertAlias", parameterToString(*r.idpCertAlias, ""))
	}
	if r.idpHttpRedirect != nil {
		localVarQueryParams.Add("idpHttpRedirect", parameterToString(*r.idpHttpRedirect, ""))
	}
	if r.serviceProviderEntityId != nil {
		localVarQueryParams.Add("serviceProviderEntityId", parameterToString(*r.serviceProviderEntityId, ""))
	}
	if r.assertionConsumerServiceURL != nil {
		localVarQueryParams.Add("assertionConsumerServiceURL", parameterToString(*r.assertionConsumerServiceURL, ""))
	}
	if r.spPrivateKeyAlias != nil {
		localVarQueryParams.Add("spPrivateKeyAlias", parameterToString(*r.spPrivateKeyAlias, ""))
	}
	if r.keyStorePassword != nil {
		localVarQueryParams.Add("keyStorePassword", parameterToString(*r.keyStorePassword, ""))
	}
	if r.defaultRedirectUrl != nil {
		localVarQueryParams.Add("defaultRedirectUrl", parameterToString(*r.defaultRedirectUrl, ""))
	}
	if r.userIDAttribute != nil {
		localVarQueryParams.Add("userIDAttribute", parameterToString(*r.userIDAttribute, ""))
	}
	if r.useEncryption != nil {
		localVarQueryParams.Add("useEncryption", parameterToString(*r.useEncryption, ""))
	}
	if r.createUser != nil {
		localVarQueryParams.Add("createUser", parameterToString(*r.createUser, ""))
	}
	if r.addGroupMemberships != nil {
		localVarQueryParams.Add("addGroupMemberships", parameterToString(*r.addGroupMemberships, ""))
	}
	if r.groupMembershipAttribute != nil {
		localVarQueryParams.Add("groupMembershipAttribute", parameterToString(*r.groupMembershipAttribute, ""))
	}
	if r.defaultGroups != nil {
		t := *r.defaultGroups
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("defaultGroups", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("defaultGroups", parameterToString(t, "multi"))
		}
	}
	if r.nameIdFormat != nil {
		localVarQueryParams.Add("nameIdFormat", parameterToString(*r.nameIdFormat, ""))
	}
	if r.synchronizeAttributes != nil {
		t := *r.synchronizeAttributes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("synchronizeAttributes", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("synchronizeAttributes", parameterToString(t, "multi"))
		}
	}
	if r.handleLogout != nil {
		localVarQueryParams.Add("handleLogout", parameterToString(*r.handleLogout, ""))
	}
	if r.logoutUrl != nil {
		localVarQueryParams.Add("logoutUrl", parameterToString(*r.logoutUrl, ""))
	}
	if r.clockTolerance != nil {
		localVarQueryParams.Add("clockTolerance", parameterToString(*r.clockTolerance, ""))
	}
	if r.digestMethod != nil {
		localVarQueryParams.Add("digestMethod", parameterToString(*r.digestMethod, ""))
	}
	if r.signatureMethod != nil {
		localVarQueryParams.Add("signatureMethod", parameterToString(*r.signatureMethod, ""))
	}
	if r.userIntermediatePath != nil {
		localVarQueryParams.Add("userIntermediatePath", parameterToString(*r.userIntermediatePath, ""))
	}
	if r.propertylist != nil {
		localVarQueryParams.Add("propertylist", parameterToString(*r.propertylist, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 302 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
