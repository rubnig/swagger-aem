/*
Adobe Experience Manager (AEM) API

Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API

API version: 3.5.0-pre.0
Contact: opensource@shinesolutions.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// CustomApiService CustomApi service
type CustomApiService service

type ApiGetAemHealthCheckRequest struct {
	ctx _context.Context
	ApiService *CustomApiService
	tags *string
	combineTagsOr *bool
}

func (r ApiGetAemHealthCheckRequest) Tags(tags string) ApiGetAemHealthCheckRequest {
	r.tags = &tags
	return r
}
func (r ApiGetAemHealthCheckRequest) CombineTagsOr(combineTagsOr bool) ApiGetAemHealthCheckRequest {
	r.combineTagsOr = &combineTagsOr
	return r
}

func (r ApiGetAemHealthCheckRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.GetAemHealthCheckExecute(r)
}

/*
GetAemHealthCheck Method for GetAemHealthCheck

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAemHealthCheckRequest
*/
func (a *CustomApiService) GetAemHealthCheck(ctx _context.Context) ApiGetAemHealthCheckRequest {
	return ApiGetAemHealthCheckRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *CustomApiService) GetAemHealthCheckExecute(r ApiGetAemHealthCheckRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomApiService.GetAemHealthCheck")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/health"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tags != nil {
		localVarQueryParams.Add("tags", parameterToString(*r.tags, ""))
	}
	if r.combineTagsOr != nil {
		localVarQueryParams.Add("combineTagsOr", parameterToString(*r.combineTagsOr, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostConfigAemHealthCheckServletRequest struct {
	ctx _context.Context
	ApiService *CustomApiService
	bundlesIgnored *[]string
	bundlesIgnoredTypeHint *string
}

func (r ApiPostConfigAemHealthCheckServletRequest) BundlesIgnored(bundlesIgnored []string) ApiPostConfigAemHealthCheckServletRequest {
	r.bundlesIgnored = &bundlesIgnored
	return r
}
func (r ApiPostConfigAemHealthCheckServletRequest) BundlesIgnoredTypeHint(bundlesIgnoredTypeHint string) ApiPostConfigAemHealthCheckServletRequest {
	r.bundlesIgnoredTypeHint = &bundlesIgnoredTypeHint
	return r
}

func (r ApiPostConfigAemHealthCheckServletRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PostConfigAemHealthCheckServletExecute(r)
}

/*
PostConfigAemHealthCheckServlet Method for PostConfigAemHealthCheckServlet

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostConfigAemHealthCheckServletRequest
*/
func (a *CustomApiService) PostConfigAemHealthCheckServlet(ctx _context.Context) ApiPostConfigAemHealthCheckServletRequest {
	return ApiPostConfigAemHealthCheckServletRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CustomApiService) PostConfigAemHealthCheckServletExecute(r ApiPostConfigAemHealthCheckServletRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomApiService.PostConfigAemHealthCheckServlet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.bundlesIgnored != nil {
		t := *r.bundlesIgnored
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("bundles.ignored", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("bundles.ignored", parameterToString(t, "multi"))
		}
	}
	if r.bundlesIgnoredTypeHint != nil {
		localVarQueryParams.Add("bundles.ignored@TypeHint", parameterToString(*r.bundlesIgnoredTypeHint, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostConfigAemPasswordResetRequest struct {
	ctx _context.Context
	ApiService *CustomApiService
	pwdresetAuthorizables *[]string
	pwdresetAuthorizablesTypeHint *string
}

func (r ApiPostConfigAemPasswordResetRequest) PwdresetAuthorizables(pwdresetAuthorizables []string) ApiPostConfigAemPasswordResetRequest {
	r.pwdresetAuthorizables = &pwdresetAuthorizables
	return r
}
func (r ApiPostConfigAemPasswordResetRequest) PwdresetAuthorizablesTypeHint(pwdresetAuthorizablesTypeHint string) ApiPostConfigAemPasswordResetRequest {
	r.pwdresetAuthorizablesTypeHint = &pwdresetAuthorizablesTypeHint
	return r
}

func (r ApiPostConfigAemPasswordResetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PostConfigAemPasswordResetExecute(r)
}

/*
PostConfigAemPasswordReset Method for PostConfigAemPasswordReset

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostConfigAemPasswordResetRequest
*/
func (a *CustomApiService) PostConfigAemPasswordReset(ctx _context.Context) ApiPostConfigAemPasswordResetRequest {
	return ApiPostConfigAemPasswordResetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CustomApiService) PostConfigAemPasswordResetExecute(r ApiPostConfigAemPasswordResetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomApiService.PostConfigAemPasswordReset")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apps/system/config/com.shinesolutions.aem.passwordreset.Activator"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.pwdresetAuthorizables != nil {
		t := *r.pwdresetAuthorizables
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("pwdreset.authorizables", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("pwdreset.authorizables", parameterToString(t, "multi"))
		}
	}
	if r.pwdresetAuthorizablesTypeHint != nil {
		localVarQueryParams.Add("pwdreset.authorizables@TypeHint", parameterToString(*r.pwdresetAuthorizablesTypeHint, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
