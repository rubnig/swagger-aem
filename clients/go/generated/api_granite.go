/*
Adobe Experience Manager (AEM) API

Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API

API version: 3.5.0-pre.0
Contact: opensource@shinesolutions.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"os"
)

// Linger please
var (
	_ _context.Context
)

// GraniteApiService GraniteApi service
type GraniteApiService service

type ApiSslSetupRequest struct {
	ctx _context.Context
	ApiService *GraniteApiService
	keystorePassword *string
	keystorePasswordConfirm *string
	truststorePassword *string
	truststorePasswordConfirm *string
	httpsHostname *string
	httpsPort *string
	privatekeyFile **os.File
	certificateFile **os.File
}

func (r ApiSslSetupRequest) KeystorePassword(keystorePassword string) ApiSslSetupRequest {
	r.keystorePassword = &keystorePassword
	return r
}
func (r ApiSslSetupRequest) KeystorePasswordConfirm(keystorePasswordConfirm string) ApiSslSetupRequest {
	r.keystorePasswordConfirm = &keystorePasswordConfirm
	return r
}
func (r ApiSslSetupRequest) TruststorePassword(truststorePassword string) ApiSslSetupRequest {
	r.truststorePassword = &truststorePassword
	return r
}
func (r ApiSslSetupRequest) TruststorePasswordConfirm(truststorePasswordConfirm string) ApiSslSetupRequest {
	r.truststorePasswordConfirm = &truststorePasswordConfirm
	return r
}
func (r ApiSslSetupRequest) HttpsHostname(httpsHostname string) ApiSslSetupRequest {
	r.httpsHostname = &httpsHostname
	return r
}
func (r ApiSslSetupRequest) HttpsPort(httpsPort string) ApiSslSetupRequest {
	r.httpsPort = &httpsPort
	return r
}
func (r ApiSslSetupRequest) PrivatekeyFile(privatekeyFile *os.File) ApiSslSetupRequest {
	r.privatekeyFile = &privatekeyFile
	return r
}
func (r ApiSslSetupRequest) CertificateFile(certificateFile *os.File) ApiSslSetupRequest {
	r.certificateFile = &certificateFile
	return r
}

func (r ApiSslSetupRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.SslSetupExecute(r)
}

/*
SslSetup Method for SslSetup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSslSetupRequest
*/
func (a *GraniteApiService) SslSetup(ctx _context.Context) ApiSslSetupRequest {
	return ApiSslSetupRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *GraniteApiService) SslSetupExecute(r ApiSslSetupRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GraniteApiService.SslSetup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/libs/granite/security/post/sslSetup.html"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.keystorePassword == nil {
		return localVarReturnValue, nil, reportError("keystorePassword is required and must be specified")
	}
	if r.keystorePasswordConfirm == nil {
		return localVarReturnValue, nil, reportError("keystorePasswordConfirm is required and must be specified")
	}
	if r.truststorePassword == nil {
		return localVarReturnValue, nil, reportError("truststorePassword is required and must be specified")
	}
	if r.truststorePasswordConfirm == nil {
		return localVarReturnValue, nil, reportError("truststorePasswordConfirm is required and must be specified")
	}
	if r.httpsHostname == nil {
		return localVarReturnValue, nil, reportError("httpsHostname is required and must be specified")
	}
	if r.httpsPort == nil {
		return localVarReturnValue, nil, reportError("httpsPort is required and must be specified")
	}

	localVarQueryParams.Add("keystorePassword", parameterToString(*r.keystorePassword, ""))
	localVarQueryParams.Add("keystorePasswordConfirm", parameterToString(*r.keystorePasswordConfirm, ""))
	localVarQueryParams.Add("truststorePassword", parameterToString(*r.truststorePassword, ""))
	localVarQueryParams.Add("truststorePasswordConfirm", parameterToString(*r.truststorePasswordConfirm, ""))
	localVarQueryParams.Add("httpsHostname", parameterToString(*r.httpsHostname, ""))
	localVarQueryParams.Add("httpsPort", parameterToString(*r.httpsPort, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormFileName = "privatekeyFile"
	var localVarFile *os.File
	if r.privatekeyFile != nil {
		localVarFile = *r.privatekeyFile
	}
	if localVarFile != nil {
		fbs, _ := _ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	localVarFormFileName = "certificateFile"
	var localVarFile *os.File
	if r.certificateFile != nil {
		localVarFile = *r.certificateFile
	}
	if localVarFile != nil {
		fbs, _ := _ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
