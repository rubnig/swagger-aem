/*
Adobe Experience Manager (AEM) API

Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API

API version: 3.5.0-pre.0
Contact: opensource@shinesolutions.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BundleInfo struct for BundleInfo
type BundleInfo struct {
	// Status description of all bundles
	Status *string `json:"status,omitempty"`
	S *[]int32 `json:"s,omitempty"`
	Data *[]BundleData `json:"data,omitempty"`
}

// NewBundleInfo instantiates a new BundleInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBundleInfo() *BundleInfo {
	this := BundleInfo{}
	return &this
}

// NewBundleInfoWithDefaults instantiates a new BundleInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBundleInfoWithDefaults() *BundleInfo {
	this := BundleInfo{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *BundleInfo) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleInfo) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *BundleInfo) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *BundleInfo) SetStatus(v string) {
	o.Status = &v
}

// GetS returns the S field value if set, zero value otherwise.
func (o *BundleInfo) GetS() []int32 {
	if o == nil || o.S == nil {
		var ret []int32
		return ret
	}
	return *o.S
}

// GetSOk returns a tuple with the S field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleInfo) GetSOk() (*[]int32, bool) {
	if o == nil || o.S == nil {
		return nil, false
	}
	return o.S, true
}

// HasS returns a boolean if a field has been set.
func (o *BundleInfo) HasS() bool {
	if o != nil && o.S != nil {
		return true
	}

	return false
}

// SetS gets a reference to the given []int32 and assigns it to the S field.
func (o *BundleInfo) SetS(v []int32) {
	o.S = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *BundleInfo) GetData() []BundleData {
	if o == nil || o.Data == nil {
		var ret []BundleData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleInfo) GetDataOk() (*[]BundleData, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *BundleInfo) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []BundleData and assigns it to the Data field.
func (o *BundleInfo) SetData(v []BundleData) {
	o.Data = &v
}

func (o BundleInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.S != nil {
		toSerialize["s"] = o.S
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableBundleInfo struct {
	value *BundleInfo
	isSet bool
}

func (v NullableBundleInfo) Get() *BundleInfo {
	return v.value
}

func (v *NullableBundleInfo) Set(val *BundleInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBundleInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBundleInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBundleInfo(val *BundleInfo) *NullableBundleInfo {
	return &NullableBundleInfo{value: val, isSet: true}
}

func (v NullableBundleInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBundleInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


