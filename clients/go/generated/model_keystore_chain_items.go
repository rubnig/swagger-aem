/*
Adobe Experience Manager (AEM) API

Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API

API version: 3.5.0-pre.0
Contact: opensource@shinesolutions.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KeystoreChainItems struct for KeystoreChainItems
type KeystoreChainItems struct {
	// e.g. \"CN=localhost\"
	Subject *string `json:"subject,omitempty"`
	// e.g. \"CN=Admin\"
	Issuer *string `json:"issuer,omitempty"`
	// e.g. \"Sun Jul 01 12:00:00 AEST 2018\"
	NotBefore *string `json:"notBefore,omitempty"`
	// e.g. \"Sun Jun 30 23:59:50 AEST 2019\"
	NotAfter *string `json:"notAfter,omitempty"`
	// 18165099476682912368
	SerialNumber *int32 `json:"serialNumber,omitempty"`
}

// NewKeystoreChainItems instantiates a new KeystoreChainItems object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeystoreChainItems() *KeystoreChainItems {
	this := KeystoreChainItems{}
	return &this
}

// NewKeystoreChainItemsWithDefaults instantiates a new KeystoreChainItems object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeystoreChainItemsWithDefaults() *KeystoreChainItems {
	this := KeystoreChainItems{}
	return &this
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *KeystoreChainItems) GetSubject() string {
	if o == nil || o.Subject == nil {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeystoreChainItems) GetSubjectOk() (*string, bool) {
	if o == nil || o.Subject == nil {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *KeystoreChainItems) HasSubject() bool {
	if o != nil && o.Subject != nil {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *KeystoreChainItems) SetSubject(v string) {
	o.Subject = &v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *KeystoreChainItems) GetIssuer() string {
	if o == nil || o.Issuer == nil {
		var ret string
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeystoreChainItems) GetIssuerOk() (*string, bool) {
	if o == nil || o.Issuer == nil {
		return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *KeystoreChainItems) HasIssuer() bool {
	if o != nil && o.Issuer != nil {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given string and assigns it to the Issuer field.
func (o *KeystoreChainItems) SetIssuer(v string) {
	o.Issuer = &v
}

// GetNotBefore returns the NotBefore field value if set, zero value otherwise.
func (o *KeystoreChainItems) GetNotBefore() string {
	if o == nil || o.NotBefore == nil {
		var ret string
		return ret
	}
	return *o.NotBefore
}

// GetNotBeforeOk returns a tuple with the NotBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeystoreChainItems) GetNotBeforeOk() (*string, bool) {
	if o == nil || o.NotBefore == nil {
		return nil, false
	}
	return o.NotBefore, true
}

// HasNotBefore returns a boolean if a field has been set.
func (o *KeystoreChainItems) HasNotBefore() bool {
	if o != nil && o.NotBefore != nil {
		return true
	}

	return false
}

// SetNotBefore gets a reference to the given string and assigns it to the NotBefore field.
func (o *KeystoreChainItems) SetNotBefore(v string) {
	o.NotBefore = &v
}

// GetNotAfter returns the NotAfter field value if set, zero value otherwise.
func (o *KeystoreChainItems) GetNotAfter() string {
	if o == nil || o.NotAfter == nil {
		var ret string
		return ret
	}
	return *o.NotAfter
}

// GetNotAfterOk returns a tuple with the NotAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeystoreChainItems) GetNotAfterOk() (*string, bool) {
	if o == nil || o.NotAfter == nil {
		return nil, false
	}
	return o.NotAfter, true
}

// HasNotAfter returns a boolean if a field has been set.
func (o *KeystoreChainItems) HasNotAfter() bool {
	if o != nil && o.NotAfter != nil {
		return true
	}

	return false
}

// SetNotAfter gets a reference to the given string and assigns it to the NotAfter field.
func (o *KeystoreChainItems) SetNotAfter(v string) {
	o.NotAfter = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *KeystoreChainItems) GetSerialNumber() int32 {
	if o == nil || o.SerialNumber == nil {
		var ret int32
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeystoreChainItems) GetSerialNumberOk() (*int32, bool) {
	if o == nil || o.SerialNumber == nil {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *KeystoreChainItems) HasSerialNumber() bool {
	if o != nil && o.SerialNumber != nil {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given int32 and assigns it to the SerialNumber field.
func (o *KeystoreChainItems) SetSerialNumber(v int32) {
	o.SerialNumber = &v
}

func (o KeystoreChainItems) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Subject != nil {
		toSerialize["subject"] = o.Subject
	}
	if o.Issuer != nil {
		toSerialize["issuer"] = o.Issuer
	}
	if o.NotBefore != nil {
		toSerialize["notBefore"] = o.NotBefore
	}
	if o.NotAfter != nil {
		toSerialize["notAfter"] = o.NotAfter
	}
	if o.SerialNumber != nil {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	return json.Marshal(toSerialize)
}

type NullableKeystoreChainItems struct {
	value *KeystoreChainItems
	isSet bool
}

func (v NullableKeystoreChainItems) Get() *KeystoreChainItems {
	return v.value
}

func (v *NullableKeystoreChainItems) Set(val *KeystoreChainItems) {
	v.value = val
	v.isSet = true
}

func (v NullableKeystoreChainItems) IsSet() bool {
	return v.isSet
}

func (v *NullableKeystoreChainItems) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeystoreChainItems(val *KeystoreChainItems) *NullableKeystoreChainItems {
	return &NullableKeystoreChainItems{value: val, isSet: true}
}

func (v NullableKeystoreChainItems) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeystoreChainItems) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


