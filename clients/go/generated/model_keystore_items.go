/*
Adobe Experience Manager (AEM) API

Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API

API version: 3.5.0-pre.0
Contact: opensource@shinesolutions.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KeystoreItems struct for KeystoreItems
type KeystoreItems struct {
	// Keystore alias name
	Alias *string `json:"alias,omitempty"`
	// e.g. \"privateKey\"
	EntryType *string `json:"entryType,omitempty"`
	// e.g. \"RSA\"
	Algorithm *string `json:"algorithm,omitempty"`
	// e.g. \"PKCS#8\"
	Format *string `json:"format,omitempty"`
	Chain *[]KeystoreChainItems `json:"chain,omitempty"`
}

// NewKeystoreItems instantiates a new KeystoreItems object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeystoreItems() *KeystoreItems {
	this := KeystoreItems{}
	return &this
}

// NewKeystoreItemsWithDefaults instantiates a new KeystoreItems object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeystoreItemsWithDefaults() *KeystoreItems {
	this := KeystoreItems{}
	return &this
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *KeystoreItems) GetAlias() string {
	if o == nil || o.Alias == nil {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeystoreItems) GetAliasOk() (*string, bool) {
	if o == nil || o.Alias == nil {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *KeystoreItems) HasAlias() bool {
	if o != nil && o.Alias != nil {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *KeystoreItems) SetAlias(v string) {
	o.Alias = &v
}

// GetEntryType returns the EntryType field value if set, zero value otherwise.
func (o *KeystoreItems) GetEntryType() string {
	if o == nil || o.EntryType == nil {
		var ret string
		return ret
	}
	return *o.EntryType
}

// GetEntryTypeOk returns a tuple with the EntryType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeystoreItems) GetEntryTypeOk() (*string, bool) {
	if o == nil || o.EntryType == nil {
		return nil, false
	}
	return o.EntryType, true
}

// HasEntryType returns a boolean if a field has been set.
func (o *KeystoreItems) HasEntryType() bool {
	if o != nil && o.EntryType != nil {
		return true
	}

	return false
}

// SetEntryType gets a reference to the given string and assigns it to the EntryType field.
func (o *KeystoreItems) SetEntryType(v string) {
	o.EntryType = &v
}

// GetAlgorithm returns the Algorithm field value if set, zero value otherwise.
func (o *KeystoreItems) GetAlgorithm() string {
	if o == nil || o.Algorithm == nil {
		var ret string
		return ret
	}
	return *o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeystoreItems) GetAlgorithmOk() (*string, bool) {
	if o == nil || o.Algorithm == nil {
		return nil, false
	}
	return o.Algorithm, true
}

// HasAlgorithm returns a boolean if a field has been set.
func (o *KeystoreItems) HasAlgorithm() bool {
	if o != nil && o.Algorithm != nil {
		return true
	}

	return false
}

// SetAlgorithm gets a reference to the given string and assigns it to the Algorithm field.
func (o *KeystoreItems) SetAlgorithm(v string) {
	o.Algorithm = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *KeystoreItems) GetFormat() string {
	if o == nil || o.Format == nil {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeystoreItems) GetFormatOk() (*string, bool) {
	if o == nil || o.Format == nil {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *KeystoreItems) HasFormat() bool {
	if o != nil && o.Format != nil {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *KeystoreItems) SetFormat(v string) {
	o.Format = &v
}

// GetChain returns the Chain field value if set, zero value otherwise.
func (o *KeystoreItems) GetChain() []KeystoreChainItems {
	if o == nil || o.Chain == nil {
		var ret []KeystoreChainItems
		return ret
	}
	return *o.Chain
}

// GetChainOk returns a tuple with the Chain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeystoreItems) GetChainOk() (*[]KeystoreChainItems, bool) {
	if o == nil || o.Chain == nil {
		return nil, false
	}
	return o.Chain, true
}

// HasChain returns a boolean if a field has been set.
func (o *KeystoreItems) HasChain() bool {
	if o != nil && o.Chain != nil {
		return true
	}

	return false
}

// SetChain gets a reference to the given []KeystoreChainItems and assigns it to the Chain field.
func (o *KeystoreItems) SetChain(v []KeystoreChainItems) {
	o.Chain = &v
}

func (o KeystoreItems) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Alias != nil {
		toSerialize["alias"] = o.Alias
	}
	if o.EntryType != nil {
		toSerialize["entryType"] = o.EntryType
	}
	if o.Algorithm != nil {
		toSerialize["algorithm"] = o.Algorithm
	}
	if o.Format != nil {
		toSerialize["format"] = o.Format
	}
	if o.Chain != nil {
		toSerialize["chain"] = o.Chain
	}
	return json.Marshal(toSerialize)
}

type NullableKeystoreItems struct {
	value *KeystoreItems
	isSet bool
}

func (v NullableKeystoreItems) Get() *KeystoreItems {
	return v.value
}

func (v *NullableKeystoreItems) Set(val *KeystoreItems) {
	v.value = val
	v.isSet = true
}

func (v NullableKeystoreItems) IsSet() bool {
	return v.isSet
}

func (v *NullableKeystoreItems) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeystoreItems(val *KeystoreItems) *NullableKeystoreItems {
	return &NullableKeystoreItems{value: val, isSet: true}
}

func (v NullableKeystoreItems) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeystoreItems) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


