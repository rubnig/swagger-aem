/*
Adobe Experience Manager (AEM) API

Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API

API version: 3.5.0-pre.0
Contact: opensource@shinesolutions.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KeystoreInfo struct for KeystoreInfo
type KeystoreInfo struct {
	Aliases *[]KeystoreItems `json:"aliases,omitempty"`
	// False if truststore don't exist
	Exists *bool `json:"exists,omitempty"`
}

// NewKeystoreInfo instantiates a new KeystoreInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeystoreInfo() *KeystoreInfo {
	this := KeystoreInfo{}
	return &this
}

// NewKeystoreInfoWithDefaults instantiates a new KeystoreInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeystoreInfoWithDefaults() *KeystoreInfo {
	this := KeystoreInfo{}
	return &this
}

// GetAliases returns the Aliases field value if set, zero value otherwise.
func (o *KeystoreInfo) GetAliases() []KeystoreItems {
	if o == nil || o.Aliases == nil {
		var ret []KeystoreItems
		return ret
	}
	return *o.Aliases
}

// GetAliasesOk returns a tuple with the Aliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeystoreInfo) GetAliasesOk() (*[]KeystoreItems, bool) {
	if o == nil || o.Aliases == nil {
		return nil, false
	}
	return o.Aliases, true
}

// HasAliases returns a boolean if a field has been set.
func (o *KeystoreInfo) HasAliases() bool {
	if o != nil && o.Aliases != nil {
		return true
	}

	return false
}

// SetAliases gets a reference to the given []KeystoreItems and assigns it to the Aliases field.
func (o *KeystoreInfo) SetAliases(v []KeystoreItems) {
	o.Aliases = &v
}

// GetExists returns the Exists field value if set, zero value otherwise.
func (o *KeystoreInfo) GetExists() bool {
	if o == nil || o.Exists == nil {
		var ret bool
		return ret
	}
	return *o.Exists
}

// GetExistsOk returns a tuple with the Exists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeystoreInfo) GetExistsOk() (*bool, bool) {
	if o == nil || o.Exists == nil {
		return nil, false
	}
	return o.Exists, true
}

// HasExists returns a boolean if a field has been set.
func (o *KeystoreInfo) HasExists() bool {
	if o != nil && o.Exists != nil {
		return true
	}

	return false
}

// SetExists gets a reference to the given bool and assigns it to the Exists field.
func (o *KeystoreInfo) SetExists(v bool) {
	o.Exists = &v
}

func (o KeystoreInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Aliases != nil {
		toSerialize["aliases"] = o.Aliases
	}
	if o.Exists != nil {
		toSerialize["exists"] = o.Exists
	}
	return json.Marshal(toSerialize)
}

type NullableKeystoreInfo struct {
	value *KeystoreInfo
	isSet bool
}

func (v NullableKeystoreInfo) Get() *KeystoreInfo {
	return v.value
}

func (v *NullableKeystoreInfo) Set(val *KeystoreInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableKeystoreInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableKeystoreInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeystoreInfo(val *KeystoreInfo) *NullableKeystoreInfo {
	return &NullableKeystoreInfo{value: val, isSet: true}
}

func (v NullableKeystoreInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeystoreInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


