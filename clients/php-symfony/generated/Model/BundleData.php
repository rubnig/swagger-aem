<?php
/**
 * BundleData
 *
 * PHP version 7.1.3
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the BundleData model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class BundleData 
{
        /**
     * Bundle ID
     *
     * @var int|null
     * @SerializedName("id")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $id;

    /**
     * Bundle name
     *
     * @var string|null
     * @SerializedName("name")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $name;

    /**
     * Is bundle a fragment
     *
     * @var bool|null
     * @SerializedName("fragment")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $fragment;

    /**
     * Numeric raw bundle state value
     *
     * @var int|null
     * @SerializedName("stateRaw")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $stateRaw;

    /**
     * Bundle state value
     *
     * @var string|null
     * @SerializedName("state")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $state;

    /**
     * Bundle version
     *
     * @var string|null
     * @SerializedName("version")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $version;

    /**
     * Bundle symbolic name
     *
     * @var string|null
     * @SerializedName("symbolicName")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $symbolicName;

    /**
     * Bundle category
     *
     * @var string|null
     * @SerializedName("category")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $category;

    /**
     * @var OpenAPI\Server\Model\BundleDataProp[]|null
     * @SerializedName("props")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\BundleDataProp")
     * })
     * @Type("array<OpenAPI\Server\Model\BundleDataProp>")
     */
    protected $props;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->id = isset($data['id']) ? $data['id'] : null;
        $this->name = isset($data['name']) ? $data['name'] : null;
        $this->fragment = isset($data['fragment']) ? $data['fragment'] : null;
        $this->stateRaw = isset($data['stateRaw']) ? $data['stateRaw'] : null;
        $this->state = isset($data['state']) ? $data['state'] : null;
        $this->version = isset($data['version']) ? $data['version'] : null;
        $this->symbolicName = isset($data['symbolicName']) ? $data['symbolicName'] : null;
        $this->category = isset($data['category']) ? $data['category'] : null;
        $this->props = isset($data['props']) ? $data['props'] : null;
    }

    /**
     * Gets id.
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Sets id.
     *
     * @param int|null $id  Bundle ID
     *
     * @return $this
     */
    public function setId($id = null)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Sets name.
     *
     * @param string|null $name  Bundle name
     *
     * @return $this
     */
    public function setName($name = null)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Gets fragment.
     *
     * @return bool|null
     */
    public function isFragment()
    {
        return $this->fragment;
    }

    /**
     * Sets fragment.
     *
     * @param bool|null $fragment  Is bundle a fragment
     *
     * @return $this
     */
    public function setFragment($fragment = null)
    {
        $this->fragment = $fragment;

        return $this;
    }

    /**
     * Gets stateRaw.
     *
     * @return int|null
     */
    public function getStateRaw()
    {
        return $this->stateRaw;
    }

    /**
     * Sets stateRaw.
     *
     * @param int|null $stateRaw  Numeric raw bundle state value
     *
     * @return $this
     */
    public function setStateRaw($stateRaw = null)
    {
        $this->stateRaw = $stateRaw;

        return $this;
    }

    /**
     * Gets state.
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->state;
    }

    /**
     * Sets state.
     *
     * @param string|null $state  Bundle state value
     *
     * @return $this
     */
    public function setState($state = null)
    {
        $this->state = $state;

        return $this;
    }

    /**
     * Gets version.
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->version;
    }

    /**
     * Sets version.
     *
     * @param string|null $version  Bundle version
     *
     * @return $this
     */
    public function setVersion($version = null)
    {
        $this->version = $version;

        return $this;
    }

    /**
     * Gets symbolicName.
     *
     * @return string|null
     */
    public function getSymbolicName()
    {
        return $this->symbolicName;
    }

    /**
     * Sets symbolicName.
     *
     * @param string|null $symbolicName  Bundle symbolic name
     *
     * @return $this
     */
    public function setSymbolicName($symbolicName = null)
    {
        $this->symbolicName = $symbolicName;

        return $this;
    }

    /**
     * Gets category.
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->category;
    }

    /**
     * Sets category.
     *
     * @param string|null $category  Bundle category
     *
     * @return $this
     */
    public function setCategory($category = null)
    {
        $this->category = $category;

        return $this;
    }

    /**
     * Gets props.
     *
     * @return OpenAPI\Server\Model\BundleDataProp[]|null
     */
    public function getProps(): ?array
    {
        return $this->props;
    }

    /**
     * Sets props.
     *
     * @param OpenAPI\Server\Model\BundleDataProp[]|null $props
     *
     * @return $this
     */
    public function setProps(array $props = null)
    {
        $this->props = $props;

        return $this;
    }
}


