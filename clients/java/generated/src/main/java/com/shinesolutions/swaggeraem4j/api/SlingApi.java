/*
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.shinesolutions.swaggeraem4j.api;

import com.shinesolutions.swaggeraem4j.ApiCallback;
import com.shinesolutions.swaggeraem4j.ApiClient;
import com.shinesolutions.swaggeraem4j.ApiException;
import com.shinesolutions.swaggeraem4j.ApiResponse;
import com.shinesolutions.swaggeraem4j.Configuration;
import com.shinesolutions.swaggeraem4j.Pair;
import com.shinesolutions.swaggeraem4j.ProgressRequestBody;
import com.shinesolutions.swaggeraem4j.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import java.io.File;
import com.shinesolutions.swaggeraem4j.model.KeystoreInfo;
import com.shinesolutions.swaggeraem4j.model.TruststoreInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SlingApi {
    private ApiClient localVarApiClient;

    public SlingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SlingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteAgent
     * @param runmode  (required)
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAgentCall(String runmode, String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etc/replication/agents.{runmode}/{name}"
            .replaceAll("\\{" + "runmode" + "\\}", localVarApiClient.escapeString(runmode.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAgentValidateBeforeCall(String runmode, String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'runmode' is set
        if (runmode == null) {
            throw new ApiException("Missing the required parameter 'runmode' when calling deleteAgent(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteAgent(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAgentCall(runmode, name, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAgent(String runmode, String name) throws ApiException {
        deleteAgentWithHttpInfo(runmode, name);
    }

    /**
     * 
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAgentWithHttpInfo(String runmode, String name) throws ApiException {
        okhttp3.Call localVarCall = deleteAgentValidateBeforeCall(runmode, name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAgentAsync(String runmode, String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAgentValidateBeforeCall(runmode, name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNode
     * @param path  (required)
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNodeCall(String path, String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{path}/{name}"
            .replaceAll("\\{" + "path" + "\\}", localVarApiClient.escapeString(path.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNodeValidateBeforeCall(String path, String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling deleteNode(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteNode(Async)");
        }
        

        okhttp3.Call localVarCall = deleteNodeCall(path, name, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param path  (required)
     * @param name  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNode(String path, String name) throws ApiException {
        deleteNodeWithHttpInfo(path, name);
    }

    /**
     * 
     * 
     * @param path  (required)
     * @param name  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNodeWithHttpInfo(String path, String name) throws ApiException {
        okhttp3.Call localVarCall = deleteNodeValidateBeforeCall(path, name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param path  (required)
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNodeAsync(String path, String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNodeValidateBeforeCall(path, name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAgent
     * @param runmode  (required)
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAgentCall(String runmode, String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etc/replication/agents.{runmode}/{name}"
            .replaceAll("\\{" + "runmode" + "\\}", localVarApiClient.escapeString(runmode.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAgentValidateBeforeCall(String runmode, String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'runmode' is set
        if (runmode == null) {
            throw new ApiException("Missing the required parameter 'runmode' when calling getAgent(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getAgent(Async)");
        }
        

        okhttp3.Call localVarCall = getAgentCall(runmode, name, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public void getAgent(String runmode, String name) throws ApiException {
        getAgentWithHttpInfo(runmode, name);
    }

    /**
     * 
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getAgentWithHttpInfo(String runmode, String name) throws ApiException {
        okhttp3.Call localVarCall = getAgentValidateBeforeCall(runmode, name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAgentAsync(String runmode, String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAgentValidateBeforeCall(runmode, name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAgents
     * @param runmode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAgentsCall(String runmode, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etc/replication/agents.{runmode}.-1.json"
            .replaceAll("\\{" + "runmode" + "\\}", localVarApiClient.escapeString(runmode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAgentsValidateBeforeCall(String runmode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'runmode' is set
        if (runmode == null) {
            throw new ApiException("Missing the required parameter 'runmode' when calling getAgents(Async)");
        }
        

        okhttp3.Call localVarCall = getAgentsCall(runmode, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param runmode  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public String getAgents(String runmode) throws ApiException {
        ApiResponse<String> localVarResp = getAgentsWithHttpInfo(runmode);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param runmode  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getAgentsWithHttpInfo(String runmode) throws ApiException {
        okhttp3.Call localVarCall = getAgentsValidateBeforeCall(runmode, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param runmode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAgentsAsync(String runmode, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAgentsValidateBeforeCall(runmode, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAuthorizableKeystore
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved Authorizable Keystore info </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthorizableKeystoreCall(String intermediatePath, String authorizableId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{intermediatePath}/{authorizableId}.ks.json"
            .replaceAll("\\{" + "intermediatePath" + "\\}", localVarApiClient.escapeString(intermediatePath.toString()))
            .replaceAll("\\{" + "authorizableId" + "\\}", localVarApiClient.escapeString(authorizableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuthorizableKeystoreValidateBeforeCall(String intermediatePath, String authorizableId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'intermediatePath' is set
        if (intermediatePath == null) {
            throw new ApiException("Missing the required parameter 'intermediatePath' when calling getAuthorizableKeystore(Async)");
        }
        
        // verify the required parameter 'authorizableId' is set
        if (authorizableId == null) {
            throw new ApiException("Missing the required parameter 'authorizableId' when calling getAuthorizableKeystore(Async)");
        }
        

        okhttp3.Call localVarCall = getAuthorizableKeystoreCall(intermediatePath, authorizableId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @return KeystoreInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved Authorizable Keystore info </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public KeystoreInfo getAuthorizableKeystore(String intermediatePath, String authorizableId) throws ApiException {
        ApiResponse<KeystoreInfo> localVarResp = getAuthorizableKeystoreWithHttpInfo(intermediatePath, authorizableId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @return ApiResponse&lt;KeystoreInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved Authorizable Keystore info </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeystoreInfo> getAuthorizableKeystoreWithHttpInfo(String intermediatePath, String authorizableId) throws ApiException {
        okhttp3.Call localVarCall = getAuthorizableKeystoreValidateBeforeCall(intermediatePath, authorizableId, null);
        Type localVarReturnType = new TypeToken<KeystoreInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved Authorizable Keystore info </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthorizableKeystoreAsync(String intermediatePath, String authorizableId, final ApiCallback<KeystoreInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuthorizableKeystoreValidateBeforeCall(intermediatePath, authorizableId, _callback);
        Type localVarReturnType = new TypeToken<KeystoreInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getKeystore
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKeystoreCall(String intermediatePath, String authorizableId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{intermediatePath}/{authorizableId}/keystore/store.p12"
            .replaceAll("\\{" + "intermediatePath" + "\\}", localVarApiClient.escapeString(intermediatePath.toString()))
            .replaceAll("\\{" + "authorizableId" + "\\}", localVarApiClient.escapeString(authorizableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getKeystoreValidateBeforeCall(String intermediatePath, String authorizableId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'intermediatePath' is set
        if (intermediatePath == null) {
            throw new ApiException("Missing the required parameter 'intermediatePath' when calling getKeystore(Async)");
        }
        
        // verify the required parameter 'authorizableId' is set
        if (authorizableId == null) {
            throw new ApiException("Missing the required parameter 'authorizableId' when calling getKeystore(Async)");
        }
        

        okhttp3.Call localVarCall = getKeystoreCall(intermediatePath, authorizableId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public File getKeystore(String intermediatePath, String authorizableId) throws ApiException {
        ApiResponse<File> localVarResp = getKeystoreWithHttpInfo(intermediatePath, authorizableId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getKeystoreWithHttpInfo(String intermediatePath, String authorizableId) throws ApiException {
        okhttp3.Call localVarCall = getKeystoreValidateBeforeCall(intermediatePath, authorizableId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKeystoreAsync(String intermediatePath, String authorizableId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getKeystoreValidateBeforeCall(intermediatePath, authorizableId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNode
     * @param path  (required)
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNodeCall(String path, String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{path}/{name}"
            .replaceAll("\\{" + "path" + "\\}", localVarApiClient.escapeString(path.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNodeValidateBeforeCall(String path, String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getNode(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getNode(Async)");
        }
        

        okhttp3.Call localVarCall = getNodeCall(path, name, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param path  (required)
     * @param name  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public void getNode(String path, String name) throws ApiException {
        getNodeWithHttpInfo(path, name);
    }

    /**
     * 
     * 
     * @param path  (required)
     * @param name  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getNodeWithHttpInfo(String path, String name) throws ApiException {
        okhttp3.Call localVarCall = getNodeValidateBeforeCall(path, name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param path  (required)
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNodeAsync(String path, String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNodeValidateBeforeCall(path, name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPackage
     * @param group  (required)
     * @param name  (required)
     * @param version  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPackageCall(String group, String name, String version, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etc/packages/{group}/{name}-{version}.zip"
            .replaceAll("\\{" + "group" + "\\}", localVarApiClient.escapeString(group.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPackageValidateBeforeCall(String group, String name, String version, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling getPackage(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPackage(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getPackage(Async)");
        }
        

        okhttp3.Call localVarCall = getPackageCall(group, name, version, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param group  (required)
     * @param name  (required)
     * @param version  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public File getPackage(String group, String name, String version) throws ApiException {
        ApiResponse<File> localVarResp = getPackageWithHttpInfo(group, name, version);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param group  (required)
     * @param name  (required)
     * @param version  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getPackageWithHttpInfo(String group, String name, String version) throws ApiException {
        okhttp3.Call localVarCall = getPackageValidateBeforeCall(group, name, version, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param group  (required)
     * @param name  (required)
     * @param version  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPackageAsync(String group, String name, String version, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPackageValidateBeforeCall(group, name, version, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPackageFilter
     * @param group  (required)
     * @param name  (required)
     * @param version  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPackageFilterCall(String group, String name, String version, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json"
            .replaceAll("\\{" + "group" + "\\}", localVarApiClient.escapeString(group.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPackageFilterValidateBeforeCall(String group, String name, String version, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling getPackageFilter(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPackageFilter(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getPackageFilter(Async)");
        }
        

        okhttp3.Call localVarCall = getPackageFilterCall(group, name, version, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param group  (required)
     * @param name  (required)
     * @param version  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public String getPackageFilter(String group, String name, String version) throws ApiException {
        ApiResponse<String> localVarResp = getPackageFilterWithHttpInfo(group, name, version);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param group  (required)
     * @param name  (required)
     * @param version  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getPackageFilterWithHttpInfo(String group, String name, String version) throws ApiException {
        okhttp3.Call localVarCall = getPackageFilterValidateBeforeCall(group, name, version, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param group  (required)
     * @param name  (required)
     * @param version  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPackageFilterAsync(String group, String name, String version, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPackageFilterValidateBeforeCall(group, name, version, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuery
     * @param path  (required)
     * @param pLimit  (required)
     * @param _1property  (required)
     * @param _1propertyValue  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQueryCall(String path, BigDecimal pLimit, String _1property, String _1propertyValue, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bin/querybuilder.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (pLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p.limit", pLimit));
        }

        if (_1property != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("1_property", _1property));
        }

        if (_1propertyValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("1_property.value", _1propertyValue));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQueryValidateBeforeCall(String path, BigDecimal pLimit, String _1property, String _1propertyValue, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getQuery(Async)");
        }
        
        // verify the required parameter 'pLimit' is set
        if (pLimit == null) {
            throw new ApiException("Missing the required parameter 'pLimit' when calling getQuery(Async)");
        }
        
        // verify the required parameter '_1property' is set
        if (_1property == null) {
            throw new ApiException("Missing the required parameter '_1property' when calling getQuery(Async)");
        }
        
        // verify the required parameter '_1propertyValue' is set
        if (_1propertyValue == null) {
            throw new ApiException("Missing the required parameter '_1propertyValue' when calling getQuery(Async)");
        }
        

        okhttp3.Call localVarCall = getQueryCall(path, pLimit, _1property, _1propertyValue, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param path  (required)
     * @param pLimit  (required)
     * @param _1property  (required)
     * @param _1propertyValue  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public String getQuery(String path, BigDecimal pLimit, String _1property, String _1propertyValue) throws ApiException {
        ApiResponse<String> localVarResp = getQueryWithHttpInfo(path, pLimit, _1property, _1propertyValue);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param path  (required)
     * @param pLimit  (required)
     * @param _1property  (required)
     * @param _1propertyValue  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getQueryWithHttpInfo(String path, BigDecimal pLimit, String _1property, String _1propertyValue) throws ApiException {
        okhttp3.Call localVarCall = getQueryValidateBeforeCall(path, pLimit, _1property, _1propertyValue, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param path  (required)
     * @param pLimit  (required)
     * @param _1property  (required)
     * @param _1propertyValue  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQueryAsync(String path, BigDecimal pLimit, String _1property, String _1propertyValue, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQueryValidateBeforeCall(path, pLimit, _1property, _1propertyValue, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTruststore
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTruststoreCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etc/truststore/truststore.p12";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTruststoreValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getTruststoreCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public File getTruststore() throws ApiException {
        ApiResponse<File> localVarResp = getTruststoreWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getTruststoreWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTruststoreValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTruststoreAsync(final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTruststoreValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTruststoreInfo
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved AEM Truststore info </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTruststoreInfoCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/libs/granite/security/truststore.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTruststoreInfoValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getTruststoreInfoCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return TruststoreInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved AEM Truststore info </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public TruststoreInfo getTruststoreInfo() throws ApiException {
        ApiResponse<TruststoreInfo> localVarResp = getTruststoreInfoWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;TruststoreInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved AEM Truststore info </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TruststoreInfo> getTruststoreInfoWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTruststoreInfoValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TruststoreInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved AEM Truststore info </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTruststoreInfoAsync(final ApiCallback<TruststoreInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTruststoreInfoValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TruststoreInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postAgent
     * @param runmode  (required)
     * @param name  (required)
     * @param jcrColonContentCqColonDistribute  (optional)
     * @param jcrColonContentCqColonDistributeAtTypeHint  (optional)
     * @param jcrColonContentCqColonName  (optional)
     * @param jcrColonContentCqColonTemplate  (optional)
     * @param jcrColonContentEnabled  (optional)
     * @param jcrColonContentJcrColonDescription  (optional)
     * @param jcrColonContentJcrColonLastModified  (optional)
     * @param jcrColonContentJcrColonLastModifiedBy  (optional)
     * @param jcrColonContentJcrColonMixinTypes  (optional)
     * @param jcrColonContentJcrColonTitle  (optional)
     * @param jcrColonContentLogLevel  (optional)
     * @param jcrColonContentNoStatusUpdate  (optional)
     * @param jcrColonContentNoVersioning  (optional)
     * @param jcrColonContentProtocolConnectTimeout  (optional)
     * @param jcrColonContentProtocolHTTPConnectionClosed  (optional)
     * @param jcrColonContentProtocolHTTPExpired  (optional)
     * @param jcrColonContentProtocolHTTPHeaders  (optional)
     * @param jcrColonContentProtocolHTTPHeadersAtTypeHint  (optional)
     * @param jcrColonContentProtocolHTTPMethod  (optional)
     * @param jcrColonContentProtocolHTTPSRelaxed  (optional)
     * @param jcrColonContentProtocolInterface  (optional)
     * @param jcrColonContentProtocolSocketTimeout  (optional)
     * @param jcrColonContentProtocolVersion  (optional)
     * @param jcrColonContentProxyNTLMDomain  (optional)
     * @param jcrColonContentProxyNTLMHost  (optional)
     * @param jcrColonContentProxyHost  (optional)
     * @param jcrColonContentProxyPassword  (optional)
     * @param jcrColonContentProxyPort  (optional)
     * @param jcrColonContentProxyUser  (optional)
     * @param jcrColonContentQueueBatchMaxSize  (optional)
     * @param jcrColonContentQueueBatchMode  (optional)
     * @param jcrColonContentQueueBatchWaitTime  (optional)
     * @param jcrColonContentRetryDelay  (optional)
     * @param jcrColonContentReverseReplication  (optional)
     * @param jcrColonContentSerializationType  (optional)
     * @param jcrColonContentSlingColonResourceType  (optional)
     * @param jcrColonContentSsl  (optional)
     * @param jcrColonContentTransportNTLMDomain  (optional)
     * @param jcrColonContentTransportNTLMHost  (optional)
     * @param jcrColonContentTransportPassword  (optional)
     * @param jcrColonContentTransportUri  (optional)
     * @param jcrColonContentTransportUser  (optional)
     * @param jcrColonContentTriggerDistribute  (optional)
     * @param jcrColonContentTriggerModified  (optional)
     * @param jcrColonContentTriggerOnOffTime  (optional)
     * @param jcrColonContentTriggerReceive  (optional)
     * @param jcrColonContentTriggerSpecific  (optional)
     * @param jcrColonContentUserId  (optional)
     * @param jcrColonPrimaryType  (optional)
     * @param colonOperation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAgentCall(String runmode, String name, Boolean jcrColonContentCqColonDistribute, String jcrColonContentCqColonDistributeAtTypeHint, String jcrColonContentCqColonName, String jcrColonContentCqColonTemplate, Boolean jcrColonContentEnabled, String jcrColonContentJcrColonDescription, String jcrColonContentJcrColonLastModified, String jcrColonContentJcrColonLastModifiedBy, String jcrColonContentJcrColonMixinTypes, String jcrColonContentJcrColonTitle, String jcrColonContentLogLevel, Boolean jcrColonContentNoStatusUpdate, Boolean jcrColonContentNoVersioning, BigDecimal jcrColonContentProtocolConnectTimeout, Boolean jcrColonContentProtocolHTTPConnectionClosed, String jcrColonContentProtocolHTTPExpired, List<String> jcrColonContentProtocolHTTPHeaders, String jcrColonContentProtocolHTTPHeadersAtTypeHint, String jcrColonContentProtocolHTTPMethod, Boolean jcrColonContentProtocolHTTPSRelaxed, String jcrColonContentProtocolInterface, BigDecimal jcrColonContentProtocolSocketTimeout, String jcrColonContentProtocolVersion, String jcrColonContentProxyNTLMDomain, String jcrColonContentProxyNTLMHost, String jcrColonContentProxyHost, String jcrColonContentProxyPassword, BigDecimal jcrColonContentProxyPort, String jcrColonContentProxyUser, BigDecimal jcrColonContentQueueBatchMaxSize, String jcrColonContentQueueBatchMode, BigDecimal jcrColonContentQueueBatchWaitTime, String jcrColonContentRetryDelay, Boolean jcrColonContentReverseReplication, String jcrColonContentSerializationType, String jcrColonContentSlingColonResourceType, String jcrColonContentSsl, String jcrColonContentTransportNTLMDomain, String jcrColonContentTransportNTLMHost, String jcrColonContentTransportPassword, String jcrColonContentTransportUri, String jcrColonContentTransportUser, Boolean jcrColonContentTriggerDistribute, Boolean jcrColonContentTriggerModified, Boolean jcrColonContentTriggerOnOffTime, Boolean jcrColonContentTriggerReceive, Boolean jcrColonContentTriggerSpecific, String jcrColonContentUserId, String jcrColonPrimaryType, String colonOperation, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etc/replication/agents.{runmode}/{name}"
            .replaceAll("\\{" + "runmode" + "\\}", localVarApiClient.escapeString(runmode.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (jcrColonContentCqColonDistribute != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/cq:distribute", jcrColonContentCqColonDistribute));
        }

        if (jcrColonContentCqColonDistributeAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/cq:distribute@TypeHint", jcrColonContentCqColonDistributeAtTypeHint));
        }

        if (jcrColonContentCqColonName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/cq:name", jcrColonContentCqColonName));
        }

        if (jcrColonContentCqColonTemplate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/cq:template", jcrColonContentCqColonTemplate));
        }

        if (jcrColonContentEnabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/enabled", jcrColonContentEnabled));
        }

        if (jcrColonContentJcrColonDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/jcr:description", jcrColonContentJcrColonDescription));
        }

        if (jcrColonContentJcrColonLastModified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/jcr:lastModified", jcrColonContentJcrColonLastModified));
        }

        if (jcrColonContentJcrColonLastModifiedBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/jcr:lastModifiedBy", jcrColonContentJcrColonLastModifiedBy));
        }

        if (jcrColonContentJcrColonMixinTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/jcr:mixinTypes", jcrColonContentJcrColonMixinTypes));
        }

        if (jcrColonContentJcrColonTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/jcr:title", jcrColonContentJcrColonTitle));
        }

        if (jcrColonContentLogLevel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/logLevel", jcrColonContentLogLevel));
        }

        if (jcrColonContentNoStatusUpdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/noStatusUpdate", jcrColonContentNoStatusUpdate));
        }

        if (jcrColonContentNoVersioning != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/noVersioning", jcrColonContentNoVersioning));
        }

        if (jcrColonContentProtocolConnectTimeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/protocolConnectTimeout", jcrColonContentProtocolConnectTimeout));
        }

        if (jcrColonContentProtocolHTTPConnectionClosed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/protocolHTTPConnectionClosed", jcrColonContentProtocolHTTPConnectionClosed));
        }

        if (jcrColonContentProtocolHTTPExpired != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/protocolHTTPExpired", jcrColonContentProtocolHTTPExpired));
        }

        if (jcrColonContentProtocolHTTPHeaders != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "jcr:content/protocolHTTPHeaders", jcrColonContentProtocolHTTPHeaders));
        }

        if (jcrColonContentProtocolHTTPHeadersAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/protocolHTTPHeaders@TypeHint", jcrColonContentProtocolHTTPHeadersAtTypeHint));
        }

        if (jcrColonContentProtocolHTTPMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/protocolHTTPMethod", jcrColonContentProtocolHTTPMethod));
        }

        if (jcrColonContentProtocolHTTPSRelaxed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/protocolHTTPSRelaxed", jcrColonContentProtocolHTTPSRelaxed));
        }

        if (jcrColonContentProtocolInterface != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/protocolInterface", jcrColonContentProtocolInterface));
        }

        if (jcrColonContentProtocolSocketTimeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/protocolSocketTimeout", jcrColonContentProtocolSocketTimeout));
        }

        if (jcrColonContentProtocolVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/protocolVersion", jcrColonContentProtocolVersion));
        }

        if (jcrColonContentProxyNTLMDomain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/proxyNTLMDomain", jcrColonContentProxyNTLMDomain));
        }

        if (jcrColonContentProxyNTLMHost != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/proxyNTLMHost", jcrColonContentProxyNTLMHost));
        }

        if (jcrColonContentProxyHost != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/proxyHost", jcrColonContentProxyHost));
        }

        if (jcrColonContentProxyPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/proxyPassword", jcrColonContentProxyPassword));
        }

        if (jcrColonContentProxyPort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/proxyPort", jcrColonContentProxyPort));
        }

        if (jcrColonContentProxyUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/proxyUser", jcrColonContentProxyUser));
        }

        if (jcrColonContentQueueBatchMaxSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/queueBatchMaxSize", jcrColonContentQueueBatchMaxSize));
        }

        if (jcrColonContentQueueBatchMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/queueBatchMode", jcrColonContentQueueBatchMode));
        }

        if (jcrColonContentQueueBatchWaitTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/queueBatchWaitTime", jcrColonContentQueueBatchWaitTime));
        }

        if (jcrColonContentRetryDelay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/retryDelay", jcrColonContentRetryDelay));
        }

        if (jcrColonContentReverseReplication != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/reverseReplication", jcrColonContentReverseReplication));
        }

        if (jcrColonContentSerializationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/serializationType", jcrColonContentSerializationType));
        }

        if (jcrColonContentSlingColonResourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/sling:resourceType", jcrColonContentSlingColonResourceType));
        }

        if (jcrColonContentSsl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/ssl", jcrColonContentSsl));
        }

        if (jcrColonContentTransportNTLMDomain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/transportNTLMDomain", jcrColonContentTransportNTLMDomain));
        }

        if (jcrColonContentTransportNTLMHost != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/transportNTLMHost", jcrColonContentTransportNTLMHost));
        }

        if (jcrColonContentTransportPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/transportPassword", jcrColonContentTransportPassword));
        }

        if (jcrColonContentTransportUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/transportUri", jcrColonContentTransportUri));
        }

        if (jcrColonContentTransportUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/transportUser", jcrColonContentTransportUser));
        }

        if (jcrColonContentTriggerDistribute != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/triggerDistribute", jcrColonContentTriggerDistribute));
        }

        if (jcrColonContentTriggerModified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/triggerModified", jcrColonContentTriggerModified));
        }

        if (jcrColonContentTriggerOnOffTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/triggerOnOffTime", jcrColonContentTriggerOnOffTime));
        }

        if (jcrColonContentTriggerReceive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/triggerReceive", jcrColonContentTriggerReceive));
        }

        if (jcrColonContentTriggerSpecific != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/triggerSpecific", jcrColonContentTriggerSpecific));
        }

        if (jcrColonContentUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:content/userId", jcrColonContentUserId));
        }

        if (jcrColonPrimaryType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:primaryType", jcrColonPrimaryType));
        }

        if (colonOperation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair(":operation", colonOperation));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postAgentValidateBeforeCall(String runmode, String name, Boolean jcrColonContentCqColonDistribute, String jcrColonContentCqColonDistributeAtTypeHint, String jcrColonContentCqColonName, String jcrColonContentCqColonTemplate, Boolean jcrColonContentEnabled, String jcrColonContentJcrColonDescription, String jcrColonContentJcrColonLastModified, String jcrColonContentJcrColonLastModifiedBy, String jcrColonContentJcrColonMixinTypes, String jcrColonContentJcrColonTitle, String jcrColonContentLogLevel, Boolean jcrColonContentNoStatusUpdate, Boolean jcrColonContentNoVersioning, BigDecimal jcrColonContentProtocolConnectTimeout, Boolean jcrColonContentProtocolHTTPConnectionClosed, String jcrColonContentProtocolHTTPExpired, List<String> jcrColonContentProtocolHTTPHeaders, String jcrColonContentProtocolHTTPHeadersAtTypeHint, String jcrColonContentProtocolHTTPMethod, Boolean jcrColonContentProtocolHTTPSRelaxed, String jcrColonContentProtocolInterface, BigDecimal jcrColonContentProtocolSocketTimeout, String jcrColonContentProtocolVersion, String jcrColonContentProxyNTLMDomain, String jcrColonContentProxyNTLMHost, String jcrColonContentProxyHost, String jcrColonContentProxyPassword, BigDecimal jcrColonContentProxyPort, String jcrColonContentProxyUser, BigDecimal jcrColonContentQueueBatchMaxSize, String jcrColonContentQueueBatchMode, BigDecimal jcrColonContentQueueBatchWaitTime, String jcrColonContentRetryDelay, Boolean jcrColonContentReverseReplication, String jcrColonContentSerializationType, String jcrColonContentSlingColonResourceType, String jcrColonContentSsl, String jcrColonContentTransportNTLMDomain, String jcrColonContentTransportNTLMHost, String jcrColonContentTransportPassword, String jcrColonContentTransportUri, String jcrColonContentTransportUser, Boolean jcrColonContentTriggerDistribute, Boolean jcrColonContentTriggerModified, Boolean jcrColonContentTriggerOnOffTime, Boolean jcrColonContentTriggerReceive, Boolean jcrColonContentTriggerSpecific, String jcrColonContentUserId, String jcrColonPrimaryType, String colonOperation, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'runmode' is set
        if (runmode == null) {
            throw new ApiException("Missing the required parameter 'runmode' when calling postAgent(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postAgent(Async)");
        }
        

        okhttp3.Call localVarCall = postAgentCall(runmode, name, jcrColonContentCqColonDistribute, jcrColonContentCqColonDistributeAtTypeHint, jcrColonContentCqColonName, jcrColonContentCqColonTemplate, jcrColonContentEnabled, jcrColonContentJcrColonDescription, jcrColonContentJcrColonLastModified, jcrColonContentJcrColonLastModifiedBy, jcrColonContentJcrColonMixinTypes, jcrColonContentJcrColonTitle, jcrColonContentLogLevel, jcrColonContentNoStatusUpdate, jcrColonContentNoVersioning, jcrColonContentProtocolConnectTimeout, jcrColonContentProtocolHTTPConnectionClosed, jcrColonContentProtocolHTTPExpired, jcrColonContentProtocolHTTPHeaders, jcrColonContentProtocolHTTPHeadersAtTypeHint, jcrColonContentProtocolHTTPMethod, jcrColonContentProtocolHTTPSRelaxed, jcrColonContentProtocolInterface, jcrColonContentProtocolSocketTimeout, jcrColonContentProtocolVersion, jcrColonContentProxyNTLMDomain, jcrColonContentProxyNTLMHost, jcrColonContentProxyHost, jcrColonContentProxyPassword, jcrColonContentProxyPort, jcrColonContentProxyUser, jcrColonContentQueueBatchMaxSize, jcrColonContentQueueBatchMode, jcrColonContentQueueBatchWaitTime, jcrColonContentRetryDelay, jcrColonContentReverseReplication, jcrColonContentSerializationType, jcrColonContentSlingColonResourceType, jcrColonContentSsl, jcrColonContentTransportNTLMDomain, jcrColonContentTransportNTLMHost, jcrColonContentTransportPassword, jcrColonContentTransportUri, jcrColonContentTransportUser, jcrColonContentTriggerDistribute, jcrColonContentTriggerModified, jcrColonContentTriggerOnOffTime, jcrColonContentTriggerReceive, jcrColonContentTriggerSpecific, jcrColonContentUserId, jcrColonPrimaryType, colonOperation, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @param jcrColonContentCqColonDistribute  (optional)
     * @param jcrColonContentCqColonDistributeAtTypeHint  (optional)
     * @param jcrColonContentCqColonName  (optional)
     * @param jcrColonContentCqColonTemplate  (optional)
     * @param jcrColonContentEnabled  (optional)
     * @param jcrColonContentJcrColonDescription  (optional)
     * @param jcrColonContentJcrColonLastModified  (optional)
     * @param jcrColonContentJcrColonLastModifiedBy  (optional)
     * @param jcrColonContentJcrColonMixinTypes  (optional)
     * @param jcrColonContentJcrColonTitle  (optional)
     * @param jcrColonContentLogLevel  (optional)
     * @param jcrColonContentNoStatusUpdate  (optional)
     * @param jcrColonContentNoVersioning  (optional)
     * @param jcrColonContentProtocolConnectTimeout  (optional)
     * @param jcrColonContentProtocolHTTPConnectionClosed  (optional)
     * @param jcrColonContentProtocolHTTPExpired  (optional)
     * @param jcrColonContentProtocolHTTPHeaders  (optional)
     * @param jcrColonContentProtocolHTTPHeadersAtTypeHint  (optional)
     * @param jcrColonContentProtocolHTTPMethod  (optional)
     * @param jcrColonContentProtocolHTTPSRelaxed  (optional)
     * @param jcrColonContentProtocolInterface  (optional)
     * @param jcrColonContentProtocolSocketTimeout  (optional)
     * @param jcrColonContentProtocolVersion  (optional)
     * @param jcrColonContentProxyNTLMDomain  (optional)
     * @param jcrColonContentProxyNTLMHost  (optional)
     * @param jcrColonContentProxyHost  (optional)
     * @param jcrColonContentProxyPassword  (optional)
     * @param jcrColonContentProxyPort  (optional)
     * @param jcrColonContentProxyUser  (optional)
     * @param jcrColonContentQueueBatchMaxSize  (optional)
     * @param jcrColonContentQueueBatchMode  (optional)
     * @param jcrColonContentQueueBatchWaitTime  (optional)
     * @param jcrColonContentRetryDelay  (optional)
     * @param jcrColonContentReverseReplication  (optional)
     * @param jcrColonContentSerializationType  (optional)
     * @param jcrColonContentSlingColonResourceType  (optional)
     * @param jcrColonContentSsl  (optional)
     * @param jcrColonContentTransportNTLMDomain  (optional)
     * @param jcrColonContentTransportNTLMHost  (optional)
     * @param jcrColonContentTransportPassword  (optional)
     * @param jcrColonContentTransportUri  (optional)
     * @param jcrColonContentTransportUser  (optional)
     * @param jcrColonContentTriggerDistribute  (optional)
     * @param jcrColonContentTriggerModified  (optional)
     * @param jcrColonContentTriggerOnOffTime  (optional)
     * @param jcrColonContentTriggerReceive  (optional)
     * @param jcrColonContentTriggerSpecific  (optional)
     * @param jcrColonContentUserId  (optional)
     * @param jcrColonPrimaryType  (optional)
     * @param colonOperation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public void postAgent(String runmode, String name, Boolean jcrColonContentCqColonDistribute, String jcrColonContentCqColonDistributeAtTypeHint, String jcrColonContentCqColonName, String jcrColonContentCqColonTemplate, Boolean jcrColonContentEnabled, String jcrColonContentJcrColonDescription, String jcrColonContentJcrColonLastModified, String jcrColonContentJcrColonLastModifiedBy, String jcrColonContentJcrColonMixinTypes, String jcrColonContentJcrColonTitle, String jcrColonContentLogLevel, Boolean jcrColonContentNoStatusUpdate, Boolean jcrColonContentNoVersioning, BigDecimal jcrColonContentProtocolConnectTimeout, Boolean jcrColonContentProtocolHTTPConnectionClosed, String jcrColonContentProtocolHTTPExpired, List<String> jcrColonContentProtocolHTTPHeaders, String jcrColonContentProtocolHTTPHeadersAtTypeHint, String jcrColonContentProtocolHTTPMethod, Boolean jcrColonContentProtocolHTTPSRelaxed, String jcrColonContentProtocolInterface, BigDecimal jcrColonContentProtocolSocketTimeout, String jcrColonContentProtocolVersion, String jcrColonContentProxyNTLMDomain, String jcrColonContentProxyNTLMHost, String jcrColonContentProxyHost, String jcrColonContentProxyPassword, BigDecimal jcrColonContentProxyPort, String jcrColonContentProxyUser, BigDecimal jcrColonContentQueueBatchMaxSize, String jcrColonContentQueueBatchMode, BigDecimal jcrColonContentQueueBatchWaitTime, String jcrColonContentRetryDelay, Boolean jcrColonContentReverseReplication, String jcrColonContentSerializationType, String jcrColonContentSlingColonResourceType, String jcrColonContentSsl, String jcrColonContentTransportNTLMDomain, String jcrColonContentTransportNTLMHost, String jcrColonContentTransportPassword, String jcrColonContentTransportUri, String jcrColonContentTransportUser, Boolean jcrColonContentTriggerDistribute, Boolean jcrColonContentTriggerModified, Boolean jcrColonContentTriggerOnOffTime, Boolean jcrColonContentTriggerReceive, Boolean jcrColonContentTriggerSpecific, String jcrColonContentUserId, String jcrColonPrimaryType, String colonOperation) throws ApiException {
        postAgentWithHttpInfo(runmode, name, jcrColonContentCqColonDistribute, jcrColonContentCqColonDistributeAtTypeHint, jcrColonContentCqColonName, jcrColonContentCqColonTemplate, jcrColonContentEnabled, jcrColonContentJcrColonDescription, jcrColonContentJcrColonLastModified, jcrColonContentJcrColonLastModifiedBy, jcrColonContentJcrColonMixinTypes, jcrColonContentJcrColonTitle, jcrColonContentLogLevel, jcrColonContentNoStatusUpdate, jcrColonContentNoVersioning, jcrColonContentProtocolConnectTimeout, jcrColonContentProtocolHTTPConnectionClosed, jcrColonContentProtocolHTTPExpired, jcrColonContentProtocolHTTPHeaders, jcrColonContentProtocolHTTPHeadersAtTypeHint, jcrColonContentProtocolHTTPMethod, jcrColonContentProtocolHTTPSRelaxed, jcrColonContentProtocolInterface, jcrColonContentProtocolSocketTimeout, jcrColonContentProtocolVersion, jcrColonContentProxyNTLMDomain, jcrColonContentProxyNTLMHost, jcrColonContentProxyHost, jcrColonContentProxyPassword, jcrColonContentProxyPort, jcrColonContentProxyUser, jcrColonContentQueueBatchMaxSize, jcrColonContentQueueBatchMode, jcrColonContentQueueBatchWaitTime, jcrColonContentRetryDelay, jcrColonContentReverseReplication, jcrColonContentSerializationType, jcrColonContentSlingColonResourceType, jcrColonContentSsl, jcrColonContentTransportNTLMDomain, jcrColonContentTransportNTLMHost, jcrColonContentTransportPassword, jcrColonContentTransportUri, jcrColonContentTransportUser, jcrColonContentTriggerDistribute, jcrColonContentTriggerModified, jcrColonContentTriggerOnOffTime, jcrColonContentTriggerReceive, jcrColonContentTriggerSpecific, jcrColonContentUserId, jcrColonPrimaryType, colonOperation);
    }

    /**
     * 
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @param jcrColonContentCqColonDistribute  (optional)
     * @param jcrColonContentCqColonDistributeAtTypeHint  (optional)
     * @param jcrColonContentCqColonName  (optional)
     * @param jcrColonContentCqColonTemplate  (optional)
     * @param jcrColonContentEnabled  (optional)
     * @param jcrColonContentJcrColonDescription  (optional)
     * @param jcrColonContentJcrColonLastModified  (optional)
     * @param jcrColonContentJcrColonLastModifiedBy  (optional)
     * @param jcrColonContentJcrColonMixinTypes  (optional)
     * @param jcrColonContentJcrColonTitle  (optional)
     * @param jcrColonContentLogLevel  (optional)
     * @param jcrColonContentNoStatusUpdate  (optional)
     * @param jcrColonContentNoVersioning  (optional)
     * @param jcrColonContentProtocolConnectTimeout  (optional)
     * @param jcrColonContentProtocolHTTPConnectionClosed  (optional)
     * @param jcrColonContentProtocolHTTPExpired  (optional)
     * @param jcrColonContentProtocolHTTPHeaders  (optional)
     * @param jcrColonContentProtocolHTTPHeadersAtTypeHint  (optional)
     * @param jcrColonContentProtocolHTTPMethod  (optional)
     * @param jcrColonContentProtocolHTTPSRelaxed  (optional)
     * @param jcrColonContentProtocolInterface  (optional)
     * @param jcrColonContentProtocolSocketTimeout  (optional)
     * @param jcrColonContentProtocolVersion  (optional)
     * @param jcrColonContentProxyNTLMDomain  (optional)
     * @param jcrColonContentProxyNTLMHost  (optional)
     * @param jcrColonContentProxyHost  (optional)
     * @param jcrColonContentProxyPassword  (optional)
     * @param jcrColonContentProxyPort  (optional)
     * @param jcrColonContentProxyUser  (optional)
     * @param jcrColonContentQueueBatchMaxSize  (optional)
     * @param jcrColonContentQueueBatchMode  (optional)
     * @param jcrColonContentQueueBatchWaitTime  (optional)
     * @param jcrColonContentRetryDelay  (optional)
     * @param jcrColonContentReverseReplication  (optional)
     * @param jcrColonContentSerializationType  (optional)
     * @param jcrColonContentSlingColonResourceType  (optional)
     * @param jcrColonContentSsl  (optional)
     * @param jcrColonContentTransportNTLMDomain  (optional)
     * @param jcrColonContentTransportNTLMHost  (optional)
     * @param jcrColonContentTransportPassword  (optional)
     * @param jcrColonContentTransportUri  (optional)
     * @param jcrColonContentTransportUser  (optional)
     * @param jcrColonContentTriggerDistribute  (optional)
     * @param jcrColonContentTriggerModified  (optional)
     * @param jcrColonContentTriggerOnOffTime  (optional)
     * @param jcrColonContentTriggerReceive  (optional)
     * @param jcrColonContentTriggerSpecific  (optional)
     * @param jcrColonContentUserId  (optional)
     * @param jcrColonPrimaryType  (optional)
     * @param colonOperation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postAgentWithHttpInfo(String runmode, String name, Boolean jcrColonContentCqColonDistribute, String jcrColonContentCqColonDistributeAtTypeHint, String jcrColonContentCqColonName, String jcrColonContentCqColonTemplate, Boolean jcrColonContentEnabled, String jcrColonContentJcrColonDescription, String jcrColonContentJcrColonLastModified, String jcrColonContentJcrColonLastModifiedBy, String jcrColonContentJcrColonMixinTypes, String jcrColonContentJcrColonTitle, String jcrColonContentLogLevel, Boolean jcrColonContentNoStatusUpdate, Boolean jcrColonContentNoVersioning, BigDecimal jcrColonContentProtocolConnectTimeout, Boolean jcrColonContentProtocolHTTPConnectionClosed, String jcrColonContentProtocolHTTPExpired, List<String> jcrColonContentProtocolHTTPHeaders, String jcrColonContentProtocolHTTPHeadersAtTypeHint, String jcrColonContentProtocolHTTPMethod, Boolean jcrColonContentProtocolHTTPSRelaxed, String jcrColonContentProtocolInterface, BigDecimal jcrColonContentProtocolSocketTimeout, String jcrColonContentProtocolVersion, String jcrColonContentProxyNTLMDomain, String jcrColonContentProxyNTLMHost, String jcrColonContentProxyHost, String jcrColonContentProxyPassword, BigDecimal jcrColonContentProxyPort, String jcrColonContentProxyUser, BigDecimal jcrColonContentQueueBatchMaxSize, String jcrColonContentQueueBatchMode, BigDecimal jcrColonContentQueueBatchWaitTime, String jcrColonContentRetryDelay, Boolean jcrColonContentReverseReplication, String jcrColonContentSerializationType, String jcrColonContentSlingColonResourceType, String jcrColonContentSsl, String jcrColonContentTransportNTLMDomain, String jcrColonContentTransportNTLMHost, String jcrColonContentTransportPassword, String jcrColonContentTransportUri, String jcrColonContentTransportUser, Boolean jcrColonContentTriggerDistribute, Boolean jcrColonContentTriggerModified, Boolean jcrColonContentTriggerOnOffTime, Boolean jcrColonContentTriggerReceive, Boolean jcrColonContentTriggerSpecific, String jcrColonContentUserId, String jcrColonPrimaryType, String colonOperation) throws ApiException {
        okhttp3.Call localVarCall = postAgentValidateBeforeCall(runmode, name, jcrColonContentCqColonDistribute, jcrColonContentCqColonDistributeAtTypeHint, jcrColonContentCqColonName, jcrColonContentCqColonTemplate, jcrColonContentEnabled, jcrColonContentJcrColonDescription, jcrColonContentJcrColonLastModified, jcrColonContentJcrColonLastModifiedBy, jcrColonContentJcrColonMixinTypes, jcrColonContentJcrColonTitle, jcrColonContentLogLevel, jcrColonContentNoStatusUpdate, jcrColonContentNoVersioning, jcrColonContentProtocolConnectTimeout, jcrColonContentProtocolHTTPConnectionClosed, jcrColonContentProtocolHTTPExpired, jcrColonContentProtocolHTTPHeaders, jcrColonContentProtocolHTTPHeadersAtTypeHint, jcrColonContentProtocolHTTPMethod, jcrColonContentProtocolHTTPSRelaxed, jcrColonContentProtocolInterface, jcrColonContentProtocolSocketTimeout, jcrColonContentProtocolVersion, jcrColonContentProxyNTLMDomain, jcrColonContentProxyNTLMHost, jcrColonContentProxyHost, jcrColonContentProxyPassword, jcrColonContentProxyPort, jcrColonContentProxyUser, jcrColonContentQueueBatchMaxSize, jcrColonContentQueueBatchMode, jcrColonContentQueueBatchWaitTime, jcrColonContentRetryDelay, jcrColonContentReverseReplication, jcrColonContentSerializationType, jcrColonContentSlingColonResourceType, jcrColonContentSsl, jcrColonContentTransportNTLMDomain, jcrColonContentTransportNTLMHost, jcrColonContentTransportPassword, jcrColonContentTransportUri, jcrColonContentTransportUser, jcrColonContentTriggerDistribute, jcrColonContentTriggerModified, jcrColonContentTriggerOnOffTime, jcrColonContentTriggerReceive, jcrColonContentTriggerSpecific, jcrColonContentUserId, jcrColonPrimaryType, colonOperation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @param jcrColonContentCqColonDistribute  (optional)
     * @param jcrColonContentCqColonDistributeAtTypeHint  (optional)
     * @param jcrColonContentCqColonName  (optional)
     * @param jcrColonContentCqColonTemplate  (optional)
     * @param jcrColonContentEnabled  (optional)
     * @param jcrColonContentJcrColonDescription  (optional)
     * @param jcrColonContentJcrColonLastModified  (optional)
     * @param jcrColonContentJcrColonLastModifiedBy  (optional)
     * @param jcrColonContentJcrColonMixinTypes  (optional)
     * @param jcrColonContentJcrColonTitle  (optional)
     * @param jcrColonContentLogLevel  (optional)
     * @param jcrColonContentNoStatusUpdate  (optional)
     * @param jcrColonContentNoVersioning  (optional)
     * @param jcrColonContentProtocolConnectTimeout  (optional)
     * @param jcrColonContentProtocolHTTPConnectionClosed  (optional)
     * @param jcrColonContentProtocolHTTPExpired  (optional)
     * @param jcrColonContentProtocolHTTPHeaders  (optional)
     * @param jcrColonContentProtocolHTTPHeadersAtTypeHint  (optional)
     * @param jcrColonContentProtocolHTTPMethod  (optional)
     * @param jcrColonContentProtocolHTTPSRelaxed  (optional)
     * @param jcrColonContentProtocolInterface  (optional)
     * @param jcrColonContentProtocolSocketTimeout  (optional)
     * @param jcrColonContentProtocolVersion  (optional)
     * @param jcrColonContentProxyNTLMDomain  (optional)
     * @param jcrColonContentProxyNTLMHost  (optional)
     * @param jcrColonContentProxyHost  (optional)
     * @param jcrColonContentProxyPassword  (optional)
     * @param jcrColonContentProxyPort  (optional)
     * @param jcrColonContentProxyUser  (optional)
     * @param jcrColonContentQueueBatchMaxSize  (optional)
     * @param jcrColonContentQueueBatchMode  (optional)
     * @param jcrColonContentQueueBatchWaitTime  (optional)
     * @param jcrColonContentRetryDelay  (optional)
     * @param jcrColonContentReverseReplication  (optional)
     * @param jcrColonContentSerializationType  (optional)
     * @param jcrColonContentSlingColonResourceType  (optional)
     * @param jcrColonContentSsl  (optional)
     * @param jcrColonContentTransportNTLMDomain  (optional)
     * @param jcrColonContentTransportNTLMHost  (optional)
     * @param jcrColonContentTransportPassword  (optional)
     * @param jcrColonContentTransportUri  (optional)
     * @param jcrColonContentTransportUser  (optional)
     * @param jcrColonContentTriggerDistribute  (optional)
     * @param jcrColonContentTriggerModified  (optional)
     * @param jcrColonContentTriggerOnOffTime  (optional)
     * @param jcrColonContentTriggerReceive  (optional)
     * @param jcrColonContentTriggerSpecific  (optional)
     * @param jcrColonContentUserId  (optional)
     * @param jcrColonPrimaryType  (optional)
     * @param colonOperation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAgentAsync(String runmode, String name, Boolean jcrColonContentCqColonDistribute, String jcrColonContentCqColonDistributeAtTypeHint, String jcrColonContentCqColonName, String jcrColonContentCqColonTemplate, Boolean jcrColonContentEnabled, String jcrColonContentJcrColonDescription, String jcrColonContentJcrColonLastModified, String jcrColonContentJcrColonLastModifiedBy, String jcrColonContentJcrColonMixinTypes, String jcrColonContentJcrColonTitle, String jcrColonContentLogLevel, Boolean jcrColonContentNoStatusUpdate, Boolean jcrColonContentNoVersioning, BigDecimal jcrColonContentProtocolConnectTimeout, Boolean jcrColonContentProtocolHTTPConnectionClosed, String jcrColonContentProtocolHTTPExpired, List<String> jcrColonContentProtocolHTTPHeaders, String jcrColonContentProtocolHTTPHeadersAtTypeHint, String jcrColonContentProtocolHTTPMethod, Boolean jcrColonContentProtocolHTTPSRelaxed, String jcrColonContentProtocolInterface, BigDecimal jcrColonContentProtocolSocketTimeout, String jcrColonContentProtocolVersion, String jcrColonContentProxyNTLMDomain, String jcrColonContentProxyNTLMHost, String jcrColonContentProxyHost, String jcrColonContentProxyPassword, BigDecimal jcrColonContentProxyPort, String jcrColonContentProxyUser, BigDecimal jcrColonContentQueueBatchMaxSize, String jcrColonContentQueueBatchMode, BigDecimal jcrColonContentQueueBatchWaitTime, String jcrColonContentRetryDelay, Boolean jcrColonContentReverseReplication, String jcrColonContentSerializationType, String jcrColonContentSlingColonResourceType, String jcrColonContentSsl, String jcrColonContentTransportNTLMDomain, String jcrColonContentTransportNTLMHost, String jcrColonContentTransportPassword, String jcrColonContentTransportUri, String jcrColonContentTransportUser, Boolean jcrColonContentTriggerDistribute, Boolean jcrColonContentTriggerModified, Boolean jcrColonContentTriggerOnOffTime, Boolean jcrColonContentTriggerReceive, Boolean jcrColonContentTriggerSpecific, String jcrColonContentUserId, String jcrColonPrimaryType, String colonOperation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postAgentValidateBeforeCall(runmode, name, jcrColonContentCqColonDistribute, jcrColonContentCqColonDistributeAtTypeHint, jcrColonContentCqColonName, jcrColonContentCqColonTemplate, jcrColonContentEnabled, jcrColonContentJcrColonDescription, jcrColonContentJcrColonLastModified, jcrColonContentJcrColonLastModifiedBy, jcrColonContentJcrColonMixinTypes, jcrColonContentJcrColonTitle, jcrColonContentLogLevel, jcrColonContentNoStatusUpdate, jcrColonContentNoVersioning, jcrColonContentProtocolConnectTimeout, jcrColonContentProtocolHTTPConnectionClosed, jcrColonContentProtocolHTTPExpired, jcrColonContentProtocolHTTPHeaders, jcrColonContentProtocolHTTPHeadersAtTypeHint, jcrColonContentProtocolHTTPMethod, jcrColonContentProtocolHTTPSRelaxed, jcrColonContentProtocolInterface, jcrColonContentProtocolSocketTimeout, jcrColonContentProtocolVersion, jcrColonContentProxyNTLMDomain, jcrColonContentProxyNTLMHost, jcrColonContentProxyHost, jcrColonContentProxyPassword, jcrColonContentProxyPort, jcrColonContentProxyUser, jcrColonContentQueueBatchMaxSize, jcrColonContentQueueBatchMode, jcrColonContentQueueBatchWaitTime, jcrColonContentRetryDelay, jcrColonContentReverseReplication, jcrColonContentSerializationType, jcrColonContentSlingColonResourceType, jcrColonContentSsl, jcrColonContentTransportNTLMDomain, jcrColonContentTransportNTLMHost, jcrColonContentTransportPassword, jcrColonContentTransportUri, jcrColonContentTransportUser, jcrColonContentTriggerDistribute, jcrColonContentTriggerModified, jcrColonContentTriggerOnOffTime, jcrColonContentTriggerReceive, jcrColonContentTriggerSpecific, jcrColonContentUserId, jcrColonPrimaryType, colonOperation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postAuthorizableKeystore
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @param colonOperation  (optional)
     * @param currentPassword  (optional)
     * @param newPassword  (optional)
     * @param rePassword  (optional)
     * @param keyPassword  (optional)
     * @param keyStorePass  (optional)
     * @param alias  (optional)
     * @param newAlias  (optional)
     * @param removeAlias  (optional)
     * @param certChain  (optional)
     * @param pk  (optional)
     * @param keyStore  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved Authorizable Keystore info </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAuthorizableKeystoreCall(String intermediatePath, String authorizableId, String colonOperation, String currentPassword, String newPassword, String rePassword, String keyPassword, String keyStorePass, String alias, String newAlias, String removeAlias, File certChain, File pk, File keyStore, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{intermediatePath}/{authorizableId}.ks.html"
            .replaceAll("\\{" + "intermediatePath" + "\\}", localVarApiClient.escapeString(intermediatePath.toString()))
            .replaceAll("\\{" + "authorizableId" + "\\}", localVarApiClient.escapeString(authorizableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (certChain != null) {
            localVarFormParams.put("cert-chain", certChain);
        }

        if (pk != null) {
            localVarFormParams.put("pk", pk);
        }

        if (keyStore != null) {
            localVarFormParams.put("keyStore", keyStore);
        }

        if (colonOperation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair(":operation", colonOperation));
        }

        if (currentPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentPassword", currentPassword));
        }

        if (newPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newPassword", newPassword));
        }

        if (rePassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rePassword", rePassword));
        }

        if (keyPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyPassword", keyPassword));
        }

        if (keyStorePass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyStorePass", keyStorePass));
        }

        if (alias != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alias", alias));
        }

        if (newAlias != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newAlias", newAlias));
        }

        if (removeAlias != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("removeAlias", removeAlias));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postAuthorizableKeystoreValidateBeforeCall(String intermediatePath, String authorizableId, String colonOperation, String currentPassword, String newPassword, String rePassword, String keyPassword, String keyStorePass, String alias, String newAlias, String removeAlias, File certChain, File pk, File keyStore, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'intermediatePath' is set
        if (intermediatePath == null) {
            throw new ApiException("Missing the required parameter 'intermediatePath' when calling postAuthorizableKeystore(Async)");
        }
        
        // verify the required parameter 'authorizableId' is set
        if (authorizableId == null) {
            throw new ApiException("Missing the required parameter 'authorizableId' when calling postAuthorizableKeystore(Async)");
        }
        

        okhttp3.Call localVarCall = postAuthorizableKeystoreCall(intermediatePath, authorizableId, colonOperation, currentPassword, newPassword, rePassword, keyPassword, keyStorePass, alias, newAlias, removeAlias, certChain, pk, keyStore, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @param colonOperation  (optional)
     * @param currentPassword  (optional)
     * @param newPassword  (optional)
     * @param rePassword  (optional)
     * @param keyPassword  (optional)
     * @param keyStorePass  (optional)
     * @param alias  (optional)
     * @param newAlias  (optional)
     * @param removeAlias  (optional)
     * @param certChain  (optional)
     * @param pk  (optional)
     * @param keyStore  (optional)
     * @return KeystoreInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved Authorizable Keystore info </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public KeystoreInfo postAuthorizableKeystore(String intermediatePath, String authorizableId, String colonOperation, String currentPassword, String newPassword, String rePassword, String keyPassword, String keyStorePass, String alias, String newAlias, String removeAlias, File certChain, File pk, File keyStore) throws ApiException {
        ApiResponse<KeystoreInfo> localVarResp = postAuthorizableKeystoreWithHttpInfo(intermediatePath, authorizableId, colonOperation, currentPassword, newPassword, rePassword, keyPassword, keyStorePass, alias, newAlias, removeAlias, certChain, pk, keyStore);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @param colonOperation  (optional)
     * @param currentPassword  (optional)
     * @param newPassword  (optional)
     * @param rePassword  (optional)
     * @param keyPassword  (optional)
     * @param keyStorePass  (optional)
     * @param alias  (optional)
     * @param newAlias  (optional)
     * @param removeAlias  (optional)
     * @param certChain  (optional)
     * @param pk  (optional)
     * @param keyStore  (optional)
     * @return ApiResponse&lt;KeystoreInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved Authorizable Keystore info </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeystoreInfo> postAuthorizableKeystoreWithHttpInfo(String intermediatePath, String authorizableId, String colonOperation, String currentPassword, String newPassword, String rePassword, String keyPassword, String keyStorePass, String alias, String newAlias, String removeAlias, File certChain, File pk, File keyStore) throws ApiException {
        okhttp3.Call localVarCall = postAuthorizableKeystoreValidateBeforeCall(intermediatePath, authorizableId, colonOperation, currentPassword, newPassword, rePassword, keyPassword, keyStorePass, alias, newAlias, removeAlias, certChain, pk, keyStore, null);
        Type localVarReturnType = new TypeToken<KeystoreInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @param colonOperation  (optional)
     * @param currentPassword  (optional)
     * @param newPassword  (optional)
     * @param rePassword  (optional)
     * @param keyPassword  (optional)
     * @param keyStorePass  (optional)
     * @param alias  (optional)
     * @param newAlias  (optional)
     * @param removeAlias  (optional)
     * @param certChain  (optional)
     * @param pk  (optional)
     * @param keyStore  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved Authorizable Keystore info </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAuthorizableKeystoreAsync(String intermediatePath, String authorizableId, String colonOperation, String currentPassword, String newPassword, String rePassword, String keyPassword, String keyStorePass, String alias, String newAlias, String removeAlias, File certChain, File pk, File keyStore, final ApiCallback<KeystoreInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = postAuthorizableKeystoreValidateBeforeCall(intermediatePath, authorizableId, colonOperation, currentPassword, newPassword, rePassword, keyPassword, keyStorePass, alias, newAlias, removeAlias, certChain, pk, keyStore, _callback);
        Type localVarReturnType = new TypeToken<KeystoreInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postAuthorizables
     * @param authorizableId  (required)
     * @param intermediatePath  (required)
     * @param createUser  (optional)
     * @param createGroup  (optional)
     * @param repColonPassword  (optional)
     * @param profileGivenName  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAuthorizablesCall(String authorizableId, String intermediatePath, String createUser, String createGroup, String repColonPassword, String profileGivenName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/libs/granite/security/post/authorizables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorizableId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authorizableId", authorizableId));
        }

        if (intermediatePath != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("intermediatePath", intermediatePath));
        }

        if (createUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createUser", createUser));
        }

        if (createGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createGroup", createGroup));
        }

        if (repColonPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rep:password", repColonPassword));
        }

        if (profileGivenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("profile/givenName", profileGivenName));
        }

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postAuthorizablesValidateBeforeCall(String authorizableId, String intermediatePath, String createUser, String createGroup, String repColonPassword, String profileGivenName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorizableId' is set
        if (authorizableId == null) {
            throw new ApiException("Missing the required parameter 'authorizableId' when calling postAuthorizables(Async)");
        }
        
        // verify the required parameter 'intermediatePath' is set
        if (intermediatePath == null) {
            throw new ApiException("Missing the required parameter 'intermediatePath' when calling postAuthorizables(Async)");
        }
        

        okhttp3.Call localVarCall = postAuthorizablesCall(authorizableId, intermediatePath, createUser, createGroup, repColonPassword, profileGivenName, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorizableId  (required)
     * @param intermediatePath  (required)
     * @param createUser  (optional)
     * @param createGroup  (optional)
     * @param repColonPassword  (optional)
     * @param profileGivenName  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public String postAuthorizables(String authorizableId, String intermediatePath, String createUser, String createGroup, String repColonPassword, String profileGivenName) throws ApiException {
        ApiResponse<String> localVarResp = postAuthorizablesWithHttpInfo(authorizableId, intermediatePath, createUser, createGroup, repColonPassword, profileGivenName);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorizableId  (required)
     * @param intermediatePath  (required)
     * @param createUser  (optional)
     * @param createGroup  (optional)
     * @param repColonPassword  (optional)
     * @param profileGivenName  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> postAuthorizablesWithHttpInfo(String authorizableId, String intermediatePath, String createUser, String createGroup, String repColonPassword, String profileGivenName) throws ApiException {
        okhttp3.Call localVarCall = postAuthorizablesValidateBeforeCall(authorizableId, intermediatePath, createUser, createGroup, repColonPassword, profileGivenName, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorizableId  (required)
     * @param intermediatePath  (required)
     * @param createUser  (optional)
     * @param createGroup  (optional)
     * @param repColonPassword  (optional)
     * @param profileGivenName  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAuthorizablesAsync(String authorizableId, String intermediatePath, String createUser, String createGroup, String repColonPassword, String profileGivenName, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = postAuthorizablesValidateBeforeCall(authorizableId, intermediatePath, createUser, createGroup, repColonPassword, profileGivenName, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postConfigAdobeGraniteSamlAuthenticationHandler
     * @param keyStorePassword  (optional)
     * @param keyStorePasswordAtTypeHint  (optional)
     * @param serviceRanking  (optional)
     * @param serviceRankingAtTypeHint  (optional)
     * @param idpHttpRedirect  (optional)
     * @param idpHttpRedirectAtTypeHint  (optional)
     * @param createUser  (optional)
     * @param createUserAtTypeHint  (optional)
     * @param defaultRedirectUrl  (optional)
     * @param defaultRedirectUrlAtTypeHint  (optional)
     * @param userIDAttribute  (optional)
     * @param userIDAttributeAtTypeHint  (optional)
     * @param defaultGroups  (optional)
     * @param defaultGroupsAtTypeHint  (optional)
     * @param idpCertAlias  (optional)
     * @param idpCertAliasAtTypeHint  (optional)
     * @param addGroupMemberships  (optional)
     * @param addGroupMembershipsAtTypeHint  (optional)
     * @param path  (optional)
     * @param pathAtTypeHint  (optional)
     * @param synchronizeAttributes  (optional)
     * @param synchronizeAttributesAtTypeHint  (optional)
     * @param clockTolerance  (optional)
     * @param clockToleranceAtTypeHint  (optional)
     * @param groupMembershipAttribute  (optional)
     * @param groupMembershipAttributeAtTypeHint  (optional)
     * @param idpUrl  (optional)
     * @param idpUrlAtTypeHint  (optional)
     * @param logoutUrl  (optional)
     * @param logoutUrlAtTypeHint  (optional)
     * @param serviceProviderEntityId  (optional)
     * @param serviceProviderEntityIdAtTypeHint  (optional)
     * @param assertionConsumerServiceURL  (optional)
     * @param assertionConsumerServiceURLAtTypeHint  (optional)
     * @param handleLogout  (optional)
     * @param handleLogoutAtTypeHint  (optional)
     * @param spPrivateKeyAlias  (optional)
     * @param spPrivateKeyAliasAtTypeHint  (optional)
     * @param useEncryption  (optional)
     * @param useEncryptionAtTypeHint  (optional)
     * @param nameIdFormat  (optional)
     * @param nameIdFormatAtTypeHint  (optional)
     * @param digestMethod  (optional)
     * @param digestMethodAtTypeHint  (optional)
     * @param signatureMethod  (optional)
     * @param signatureMethodAtTypeHint  (optional)
     * @param userIntermediatePath  (optional)
     * @param userIntermediatePathAtTypeHint  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postConfigAdobeGraniteSamlAuthenticationHandlerCall(String keyStorePassword, String keyStorePasswordAtTypeHint, Integer serviceRanking, String serviceRankingAtTypeHint, Boolean idpHttpRedirect, String idpHttpRedirectAtTypeHint, Boolean createUser, String createUserAtTypeHint, String defaultRedirectUrl, String defaultRedirectUrlAtTypeHint, String userIDAttribute, String userIDAttributeAtTypeHint, List<String> defaultGroups, String defaultGroupsAtTypeHint, String idpCertAlias, String idpCertAliasAtTypeHint, Boolean addGroupMemberships, String addGroupMembershipsAtTypeHint, List<String> path, String pathAtTypeHint, List<String> synchronizeAttributes, String synchronizeAttributesAtTypeHint, Integer clockTolerance, String clockToleranceAtTypeHint, String groupMembershipAttribute, String groupMembershipAttributeAtTypeHint, String idpUrl, String idpUrlAtTypeHint, String logoutUrl, String logoutUrlAtTypeHint, String serviceProviderEntityId, String serviceProviderEntityIdAtTypeHint, String assertionConsumerServiceURL, String assertionConsumerServiceURLAtTypeHint, Boolean handleLogout, String handleLogoutAtTypeHint, String spPrivateKeyAlias, String spPrivateKeyAliasAtTypeHint, Boolean useEncryption, String useEncryptionAtTypeHint, String nameIdFormat, String nameIdFormatAtTypeHint, String digestMethod, String digestMethodAtTypeHint, String signatureMethod, String signatureMethodAtTypeHint, String userIntermediatePath, String userIntermediatePathAtTypeHint, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (keyStorePassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyStorePassword", keyStorePassword));
        }

        if (keyStorePasswordAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyStorePassword@TypeHint", keyStorePasswordAtTypeHint));
        }

        if (serviceRanking != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service.ranking", serviceRanking));
        }

        if (serviceRankingAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service.ranking@TypeHint", serviceRankingAtTypeHint));
        }

        if (idpHttpRedirect != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idpHttpRedirect", idpHttpRedirect));
        }

        if (idpHttpRedirectAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idpHttpRedirect@TypeHint", idpHttpRedirectAtTypeHint));
        }

        if (createUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createUser", createUser));
        }

        if (createUserAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createUser@TypeHint", createUserAtTypeHint));
        }

        if (defaultRedirectUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("defaultRedirectUrl", defaultRedirectUrl));
        }

        if (defaultRedirectUrlAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("defaultRedirectUrl@TypeHint", defaultRedirectUrlAtTypeHint));
        }

        if (userIDAttribute != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIDAttribute", userIDAttribute));
        }

        if (userIDAttributeAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIDAttribute@TypeHint", userIDAttributeAtTypeHint));
        }

        if (defaultGroups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "defaultGroups", defaultGroups));
        }

        if (defaultGroupsAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("defaultGroups@TypeHint", defaultGroupsAtTypeHint));
        }

        if (idpCertAlias != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idpCertAlias", idpCertAlias));
        }

        if (idpCertAliasAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idpCertAlias@TypeHint", idpCertAliasAtTypeHint));
        }

        if (addGroupMemberships != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addGroupMemberships", addGroupMemberships));
        }

        if (addGroupMembershipsAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addGroupMemberships@TypeHint", addGroupMembershipsAtTypeHint));
        }

        if (path != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "path", path));
        }

        if (pathAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path@TypeHint", pathAtTypeHint));
        }

        if (synchronizeAttributes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "synchronizeAttributes", synchronizeAttributes));
        }

        if (synchronizeAttributesAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("synchronizeAttributes@TypeHint", synchronizeAttributesAtTypeHint));
        }

        if (clockTolerance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clockTolerance", clockTolerance));
        }

        if (clockToleranceAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clockTolerance@TypeHint", clockToleranceAtTypeHint));
        }

        if (groupMembershipAttribute != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupMembershipAttribute", groupMembershipAttribute));
        }

        if (groupMembershipAttributeAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupMembershipAttribute@TypeHint", groupMembershipAttributeAtTypeHint));
        }

        if (idpUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idpUrl", idpUrl));
        }

        if (idpUrlAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idpUrl@TypeHint", idpUrlAtTypeHint));
        }

        if (logoutUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("logoutUrl", logoutUrl));
        }

        if (logoutUrlAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("logoutUrl@TypeHint", logoutUrlAtTypeHint));
        }

        if (serviceProviderEntityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceProviderEntityId", serviceProviderEntityId));
        }

        if (serviceProviderEntityIdAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceProviderEntityId@TypeHint", serviceProviderEntityIdAtTypeHint));
        }

        if (assertionConsumerServiceURL != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assertionConsumerServiceURL", assertionConsumerServiceURL));
        }

        if (assertionConsumerServiceURLAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assertionConsumerServiceURL@TypeHint", assertionConsumerServiceURLAtTypeHint));
        }

        if (handleLogout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("handleLogout", handleLogout));
        }

        if (handleLogoutAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("handleLogout@TypeHint", handleLogoutAtTypeHint));
        }

        if (spPrivateKeyAlias != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("spPrivateKeyAlias", spPrivateKeyAlias));
        }

        if (spPrivateKeyAliasAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("spPrivateKeyAlias@TypeHint", spPrivateKeyAliasAtTypeHint));
        }

        if (useEncryption != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useEncryption", useEncryption));
        }

        if (useEncryptionAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useEncryption@TypeHint", useEncryptionAtTypeHint));
        }

        if (nameIdFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameIdFormat", nameIdFormat));
        }

        if (nameIdFormatAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameIdFormat@TypeHint", nameIdFormatAtTypeHint));
        }

        if (digestMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("digestMethod", digestMethod));
        }

        if (digestMethodAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("digestMethod@TypeHint", digestMethodAtTypeHint));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signatureMethod", signatureMethod));
        }

        if (signatureMethodAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signatureMethod@TypeHint", signatureMethodAtTypeHint));
        }

        if (userIntermediatePath != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIntermediatePath", userIntermediatePath));
        }

        if (userIntermediatePathAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIntermediatePath@TypeHint", userIntermediatePathAtTypeHint));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postConfigAdobeGraniteSamlAuthenticationHandlerValidateBeforeCall(String keyStorePassword, String keyStorePasswordAtTypeHint, Integer serviceRanking, String serviceRankingAtTypeHint, Boolean idpHttpRedirect, String idpHttpRedirectAtTypeHint, Boolean createUser, String createUserAtTypeHint, String defaultRedirectUrl, String defaultRedirectUrlAtTypeHint, String userIDAttribute, String userIDAttributeAtTypeHint, List<String> defaultGroups, String defaultGroupsAtTypeHint, String idpCertAlias, String idpCertAliasAtTypeHint, Boolean addGroupMemberships, String addGroupMembershipsAtTypeHint, List<String> path, String pathAtTypeHint, List<String> synchronizeAttributes, String synchronizeAttributesAtTypeHint, Integer clockTolerance, String clockToleranceAtTypeHint, String groupMembershipAttribute, String groupMembershipAttributeAtTypeHint, String idpUrl, String idpUrlAtTypeHint, String logoutUrl, String logoutUrlAtTypeHint, String serviceProviderEntityId, String serviceProviderEntityIdAtTypeHint, String assertionConsumerServiceURL, String assertionConsumerServiceURLAtTypeHint, Boolean handleLogout, String handleLogoutAtTypeHint, String spPrivateKeyAlias, String spPrivateKeyAliasAtTypeHint, Boolean useEncryption, String useEncryptionAtTypeHint, String nameIdFormat, String nameIdFormatAtTypeHint, String digestMethod, String digestMethodAtTypeHint, String signatureMethod, String signatureMethodAtTypeHint, String userIntermediatePath, String userIntermediatePathAtTypeHint, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = postConfigAdobeGraniteSamlAuthenticationHandlerCall(keyStorePassword, keyStorePasswordAtTypeHint, serviceRanking, serviceRankingAtTypeHint, idpHttpRedirect, idpHttpRedirectAtTypeHint, createUser, createUserAtTypeHint, defaultRedirectUrl, defaultRedirectUrlAtTypeHint, userIDAttribute, userIDAttributeAtTypeHint, defaultGroups, defaultGroupsAtTypeHint, idpCertAlias, idpCertAliasAtTypeHint, addGroupMemberships, addGroupMembershipsAtTypeHint, path, pathAtTypeHint, synchronizeAttributes, synchronizeAttributesAtTypeHint, clockTolerance, clockToleranceAtTypeHint, groupMembershipAttribute, groupMembershipAttributeAtTypeHint, idpUrl, idpUrlAtTypeHint, logoutUrl, logoutUrlAtTypeHint, serviceProviderEntityId, serviceProviderEntityIdAtTypeHint, assertionConsumerServiceURL, assertionConsumerServiceURLAtTypeHint, handleLogout, handleLogoutAtTypeHint, spPrivateKeyAlias, spPrivateKeyAliasAtTypeHint, useEncryption, useEncryptionAtTypeHint, nameIdFormat, nameIdFormatAtTypeHint, digestMethod, digestMethodAtTypeHint, signatureMethod, signatureMethodAtTypeHint, userIntermediatePath, userIntermediatePathAtTypeHint, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param keyStorePassword  (optional)
     * @param keyStorePasswordAtTypeHint  (optional)
     * @param serviceRanking  (optional)
     * @param serviceRankingAtTypeHint  (optional)
     * @param idpHttpRedirect  (optional)
     * @param idpHttpRedirectAtTypeHint  (optional)
     * @param createUser  (optional)
     * @param createUserAtTypeHint  (optional)
     * @param defaultRedirectUrl  (optional)
     * @param defaultRedirectUrlAtTypeHint  (optional)
     * @param userIDAttribute  (optional)
     * @param userIDAttributeAtTypeHint  (optional)
     * @param defaultGroups  (optional)
     * @param defaultGroupsAtTypeHint  (optional)
     * @param idpCertAlias  (optional)
     * @param idpCertAliasAtTypeHint  (optional)
     * @param addGroupMemberships  (optional)
     * @param addGroupMembershipsAtTypeHint  (optional)
     * @param path  (optional)
     * @param pathAtTypeHint  (optional)
     * @param synchronizeAttributes  (optional)
     * @param synchronizeAttributesAtTypeHint  (optional)
     * @param clockTolerance  (optional)
     * @param clockToleranceAtTypeHint  (optional)
     * @param groupMembershipAttribute  (optional)
     * @param groupMembershipAttributeAtTypeHint  (optional)
     * @param idpUrl  (optional)
     * @param idpUrlAtTypeHint  (optional)
     * @param logoutUrl  (optional)
     * @param logoutUrlAtTypeHint  (optional)
     * @param serviceProviderEntityId  (optional)
     * @param serviceProviderEntityIdAtTypeHint  (optional)
     * @param assertionConsumerServiceURL  (optional)
     * @param assertionConsumerServiceURLAtTypeHint  (optional)
     * @param handleLogout  (optional)
     * @param handleLogoutAtTypeHint  (optional)
     * @param spPrivateKeyAlias  (optional)
     * @param spPrivateKeyAliasAtTypeHint  (optional)
     * @param useEncryption  (optional)
     * @param useEncryptionAtTypeHint  (optional)
     * @param nameIdFormat  (optional)
     * @param nameIdFormatAtTypeHint  (optional)
     * @param digestMethod  (optional)
     * @param digestMethodAtTypeHint  (optional)
     * @param signatureMethod  (optional)
     * @param signatureMethodAtTypeHint  (optional)
     * @param userIntermediatePath  (optional)
     * @param userIntermediatePathAtTypeHint  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public void postConfigAdobeGraniteSamlAuthenticationHandler(String keyStorePassword, String keyStorePasswordAtTypeHint, Integer serviceRanking, String serviceRankingAtTypeHint, Boolean idpHttpRedirect, String idpHttpRedirectAtTypeHint, Boolean createUser, String createUserAtTypeHint, String defaultRedirectUrl, String defaultRedirectUrlAtTypeHint, String userIDAttribute, String userIDAttributeAtTypeHint, List<String> defaultGroups, String defaultGroupsAtTypeHint, String idpCertAlias, String idpCertAliasAtTypeHint, Boolean addGroupMemberships, String addGroupMembershipsAtTypeHint, List<String> path, String pathAtTypeHint, List<String> synchronizeAttributes, String synchronizeAttributesAtTypeHint, Integer clockTolerance, String clockToleranceAtTypeHint, String groupMembershipAttribute, String groupMembershipAttributeAtTypeHint, String idpUrl, String idpUrlAtTypeHint, String logoutUrl, String logoutUrlAtTypeHint, String serviceProviderEntityId, String serviceProviderEntityIdAtTypeHint, String assertionConsumerServiceURL, String assertionConsumerServiceURLAtTypeHint, Boolean handleLogout, String handleLogoutAtTypeHint, String spPrivateKeyAlias, String spPrivateKeyAliasAtTypeHint, Boolean useEncryption, String useEncryptionAtTypeHint, String nameIdFormat, String nameIdFormatAtTypeHint, String digestMethod, String digestMethodAtTypeHint, String signatureMethod, String signatureMethodAtTypeHint, String userIntermediatePath, String userIntermediatePathAtTypeHint) throws ApiException {
        postConfigAdobeGraniteSamlAuthenticationHandlerWithHttpInfo(keyStorePassword, keyStorePasswordAtTypeHint, serviceRanking, serviceRankingAtTypeHint, idpHttpRedirect, idpHttpRedirectAtTypeHint, createUser, createUserAtTypeHint, defaultRedirectUrl, defaultRedirectUrlAtTypeHint, userIDAttribute, userIDAttributeAtTypeHint, defaultGroups, defaultGroupsAtTypeHint, idpCertAlias, idpCertAliasAtTypeHint, addGroupMemberships, addGroupMembershipsAtTypeHint, path, pathAtTypeHint, synchronizeAttributes, synchronizeAttributesAtTypeHint, clockTolerance, clockToleranceAtTypeHint, groupMembershipAttribute, groupMembershipAttributeAtTypeHint, idpUrl, idpUrlAtTypeHint, logoutUrl, logoutUrlAtTypeHint, serviceProviderEntityId, serviceProviderEntityIdAtTypeHint, assertionConsumerServiceURL, assertionConsumerServiceURLAtTypeHint, handleLogout, handleLogoutAtTypeHint, spPrivateKeyAlias, spPrivateKeyAliasAtTypeHint, useEncryption, useEncryptionAtTypeHint, nameIdFormat, nameIdFormatAtTypeHint, digestMethod, digestMethodAtTypeHint, signatureMethod, signatureMethodAtTypeHint, userIntermediatePath, userIntermediatePathAtTypeHint);
    }

    /**
     * 
     * 
     * @param keyStorePassword  (optional)
     * @param keyStorePasswordAtTypeHint  (optional)
     * @param serviceRanking  (optional)
     * @param serviceRankingAtTypeHint  (optional)
     * @param idpHttpRedirect  (optional)
     * @param idpHttpRedirectAtTypeHint  (optional)
     * @param createUser  (optional)
     * @param createUserAtTypeHint  (optional)
     * @param defaultRedirectUrl  (optional)
     * @param defaultRedirectUrlAtTypeHint  (optional)
     * @param userIDAttribute  (optional)
     * @param userIDAttributeAtTypeHint  (optional)
     * @param defaultGroups  (optional)
     * @param defaultGroupsAtTypeHint  (optional)
     * @param idpCertAlias  (optional)
     * @param idpCertAliasAtTypeHint  (optional)
     * @param addGroupMemberships  (optional)
     * @param addGroupMembershipsAtTypeHint  (optional)
     * @param path  (optional)
     * @param pathAtTypeHint  (optional)
     * @param synchronizeAttributes  (optional)
     * @param synchronizeAttributesAtTypeHint  (optional)
     * @param clockTolerance  (optional)
     * @param clockToleranceAtTypeHint  (optional)
     * @param groupMembershipAttribute  (optional)
     * @param groupMembershipAttributeAtTypeHint  (optional)
     * @param idpUrl  (optional)
     * @param idpUrlAtTypeHint  (optional)
     * @param logoutUrl  (optional)
     * @param logoutUrlAtTypeHint  (optional)
     * @param serviceProviderEntityId  (optional)
     * @param serviceProviderEntityIdAtTypeHint  (optional)
     * @param assertionConsumerServiceURL  (optional)
     * @param assertionConsumerServiceURLAtTypeHint  (optional)
     * @param handleLogout  (optional)
     * @param handleLogoutAtTypeHint  (optional)
     * @param spPrivateKeyAlias  (optional)
     * @param spPrivateKeyAliasAtTypeHint  (optional)
     * @param useEncryption  (optional)
     * @param useEncryptionAtTypeHint  (optional)
     * @param nameIdFormat  (optional)
     * @param nameIdFormatAtTypeHint  (optional)
     * @param digestMethod  (optional)
     * @param digestMethodAtTypeHint  (optional)
     * @param signatureMethod  (optional)
     * @param signatureMethodAtTypeHint  (optional)
     * @param userIntermediatePath  (optional)
     * @param userIntermediatePathAtTypeHint  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postConfigAdobeGraniteSamlAuthenticationHandlerWithHttpInfo(String keyStorePassword, String keyStorePasswordAtTypeHint, Integer serviceRanking, String serviceRankingAtTypeHint, Boolean idpHttpRedirect, String idpHttpRedirectAtTypeHint, Boolean createUser, String createUserAtTypeHint, String defaultRedirectUrl, String defaultRedirectUrlAtTypeHint, String userIDAttribute, String userIDAttributeAtTypeHint, List<String> defaultGroups, String defaultGroupsAtTypeHint, String idpCertAlias, String idpCertAliasAtTypeHint, Boolean addGroupMemberships, String addGroupMembershipsAtTypeHint, List<String> path, String pathAtTypeHint, List<String> synchronizeAttributes, String synchronizeAttributesAtTypeHint, Integer clockTolerance, String clockToleranceAtTypeHint, String groupMembershipAttribute, String groupMembershipAttributeAtTypeHint, String idpUrl, String idpUrlAtTypeHint, String logoutUrl, String logoutUrlAtTypeHint, String serviceProviderEntityId, String serviceProviderEntityIdAtTypeHint, String assertionConsumerServiceURL, String assertionConsumerServiceURLAtTypeHint, Boolean handleLogout, String handleLogoutAtTypeHint, String spPrivateKeyAlias, String spPrivateKeyAliasAtTypeHint, Boolean useEncryption, String useEncryptionAtTypeHint, String nameIdFormat, String nameIdFormatAtTypeHint, String digestMethod, String digestMethodAtTypeHint, String signatureMethod, String signatureMethodAtTypeHint, String userIntermediatePath, String userIntermediatePathAtTypeHint) throws ApiException {
        okhttp3.Call localVarCall = postConfigAdobeGraniteSamlAuthenticationHandlerValidateBeforeCall(keyStorePassword, keyStorePasswordAtTypeHint, serviceRanking, serviceRankingAtTypeHint, idpHttpRedirect, idpHttpRedirectAtTypeHint, createUser, createUserAtTypeHint, defaultRedirectUrl, defaultRedirectUrlAtTypeHint, userIDAttribute, userIDAttributeAtTypeHint, defaultGroups, defaultGroupsAtTypeHint, idpCertAlias, idpCertAliasAtTypeHint, addGroupMemberships, addGroupMembershipsAtTypeHint, path, pathAtTypeHint, synchronizeAttributes, synchronizeAttributesAtTypeHint, clockTolerance, clockToleranceAtTypeHint, groupMembershipAttribute, groupMembershipAttributeAtTypeHint, idpUrl, idpUrlAtTypeHint, logoutUrl, logoutUrlAtTypeHint, serviceProviderEntityId, serviceProviderEntityIdAtTypeHint, assertionConsumerServiceURL, assertionConsumerServiceURLAtTypeHint, handleLogout, handleLogoutAtTypeHint, spPrivateKeyAlias, spPrivateKeyAliasAtTypeHint, useEncryption, useEncryptionAtTypeHint, nameIdFormat, nameIdFormatAtTypeHint, digestMethod, digestMethodAtTypeHint, signatureMethod, signatureMethodAtTypeHint, userIntermediatePath, userIntermediatePathAtTypeHint, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param keyStorePassword  (optional)
     * @param keyStorePasswordAtTypeHint  (optional)
     * @param serviceRanking  (optional)
     * @param serviceRankingAtTypeHint  (optional)
     * @param idpHttpRedirect  (optional)
     * @param idpHttpRedirectAtTypeHint  (optional)
     * @param createUser  (optional)
     * @param createUserAtTypeHint  (optional)
     * @param defaultRedirectUrl  (optional)
     * @param defaultRedirectUrlAtTypeHint  (optional)
     * @param userIDAttribute  (optional)
     * @param userIDAttributeAtTypeHint  (optional)
     * @param defaultGroups  (optional)
     * @param defaultGroupsAtTypeHint  (optional)
     * @param idpCertAlias  (optional)
     * @param idpCertAliasAtTypeHint  (optional)
     * @param addGroupMemberships  (optional)
     * @param addGroupMembershipsAtTypeHint  (optional)
     * @param path  (optional)
     * @param pathAtTypeHint  (optional)
     * @param synchronizeAttributes  (optional)
     * @param synchronizeAttributesAtTypeHint  (optional)
     * @param clockTolerance  (optional)
     * @param clockToleranceAtTypeHint  (optional)
     * @param groupMembershipAttribute  (optional)
     * @param groupMembershipAttributeAtTypeHint  (optional)
     * @param idpUrl  (optional)
     * @param idpUrlAtTypeHint  (optional)
     * @param logoutUrl  (optional)
     * @param logoutUrlAtTypeHint  (optional)
     * @param serviceProviderEntityId  (optional)
     * @param serviceProviderEntityIdAtTypeHint  (optional)
     * @param assertionConsumerServiceURL  (optional)
     * @param assertionConsumerServiceURLAtTypeHint  (optional)
     * @param handleLogout  (optional)
     * @param handleLogoutAtTypeHint  (optional)
     * @param spPrivateKeyAlias  (optional)
     * @param spPrivateKeyAliasAtTypeHint  (optional)
     * @param useEncryption  (optional)
     * @param useEncryptionAtTypeHint  (optional)
     * @param nameIdFormat  (optional)
     * @param nameIdFormatAtTypeHint  (optional)
     * @param digestMethod  (optional)
     * @param digestMethodAtTypeHint  (optional)
     * @param signatureMethod  (optional)
     * @param signatureMethodAtTypeHint  (optional)
     * @param userIntermediatePath  (optional)
     * @param userIntermediatePathAtTypeHint  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postConfigAdobeGraniteSamlAuthenticationHandlerAsync(String keyStorePassword, String keyStorePasswordAtTypeHint, Integer serviceRanking, String serviceRankingAtTypeHint, Boolean idpHttpRedirect, String idpHttpRedirectAtTypeHint, Boolean createUser, String createUserAtTypeHint, String defaultRedirectUrl, String defaultRedirectUrlAtTypeHint, String userIDAttribute, String userIDAttributeAtTypeHint, List<String> defaultGroups, String defaultGroupsAtTypeHint, String idpCertAlias, String idpCertAliasAtTypeHint, Boolean addGroupMemberships, String addGroupMembershipsAtTypeHint, List<String> path, String pathAtTypeHint, List<String> synchronizeAttributes, String synchronizeAttributesAtTypeHint, Integer clockTolerance, String clockToleranceAtTypeHint, String groupMembershipAttribute, String groupMembershipAttributeAtTypeHint, String idpUrl, String idpUrlAtTypeHint, String logoutUrl, String logoutUrlAtTypeHint, String serviceProviderEntityId, String serviceProviderEntityIdAtTypeHint, String assertionConsumerServiceURL, String assertionConsumerServiceURLAtTypeHint, Boolean handleLogout, String handleLogoutAtTypeHint, String spPrivateKeyAlias, String spPrivateKeyAliasAtTypeHint, Boolean useEncryption, String useEncryptionAtTypeHint, String nameIdFormat, String nameIdFormatAtTypeHint, String digestMethod, String digestMethodAtTypeHint, String signatureMethod, String signatureMethodAtTypeHint, String userIntermediatePath, String userIntermediatePathAtTypeHint, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postConfigAdobeGraniteSamlAuthenticationHandlerValidateBeforeCall(keyStorePassword, keyStorePasswordAtTypeHint, serviceRanking, serviceRankingAtTypeHint, idpHttpRedirect, idpHttpRedirectAtTypeHint, createUser, createUserAtTypeHint, defaultRedirectUrl, defaultRedirectUrlAtTypeHint, userIDAttribute, userIDAttributeAtTypeHint, defaultGroups, defaultGroupsAtTypeHint, idpCertAlias, idpCertAliasAtTypeHint, addGroupMemberships, addGroupMembershipsAtTypeHint, path, pathAtTypeHint, synchronizeAttributes, synchronizeAttributesAtTypeHint, clockTolerance, clockToleranceAtTypeHint, groupMembershipAttribute, groupMembershipAttributeAtTypeHint, idpUrl, idpUrlAtTypeHint, logoutUrl, logoutUrlAtTypeHint, serviceProviderEntityId, serviceProviderEntityIdAtTypeHint, assertionConsumerServiceURL, assertionConsumerServiceURLAtTypeHint, handleLogout, handleLogoutAtTypeHint, spPrivateKeyAlias, spPrivateKeyAliasAtTypeHint, useEncryption, useEncryptionAtTypeHint, nameIdFormat, nameIdFormatAtTypeHint, digestMethod, digestMethodAtTypeHint, signatureMethod, signatureMethodAtTypeHint, userIntermediatePath, userIntermediatePathAtTypeHint, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postConfigApacheFelixJettyBasedHttpService
     * @param orgApacheFelixHttpsNio  (optional)
     * @param orgApacheFelixHttpsNioAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystore  (optional)
     * @param orgApacheFelixHttpsKeystoreAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystorePassword  (optional)
     * @param orgApacheFelixHttpsKeystorePasswordAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystoreKey  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyPassword  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint  (optional)
     * @param orgApacheFelixHttpsTruststore  (optional)
     * @param orgApacheFelixHttpsTruststoreAtTypeHint  (optional)
     * @param orgApacheFelixHttpsTruststorePassword  (optional)
     * @param orgApacheFelixHttpsTruststorePasswordAtTypeHint  (optional)
     * @param orgApacheFelixHttpsClientcertificate  (optional)
     * @param orgApacheFelixHttpsClientcertificateAtTypeHint  (optional)
     * @param orgApacheFelixHttpsEnable  (optional)
     * @param orgApacheFelixHttpsEnableAtTypeHint  (optional)
     * @param orgOsgiServiceHttpPortSecure  (optional)
     * @param orgOsgiServiceHttpPortSecureAtTypeHint  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postConfigApacheFelixJettyBasedHttpServiceCall(Boolean orgApacheFelixHttpsNio, String orgApacheFelixHttpsNioAtTypeHint, String orgApacheFelixHttpsKeystore, String orgApacheFelixHttpsKeystoreAtTypeHint, String orgApacheFelixHttpsKeystorePassword, String orgApacheFelixHttpsKeystorePasswordAtTypeHint, String orgApacheFelixHttpsKeystoreKey, String orgApacheFelixHttpsKeystoreKeyAtTypeHint, String orgApacheFelixHttpsKeystoreKeyPassword, String orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint, String orgApacheFelixHttpsTruststore, String orgApacheFelixHttpsTruststoreAtTypeHint, String orgApacheFelixHttpsTruststorePassword, String orgApacheFelixHttpsTruststorePasswordAtTypeHint, String orgApacheFelixHttpsClientcertificate, String orgApacheFelixHttpsClientcertificateAtTypeHint, Boolean orgApacheFelixHttpsEnable, String orgApacheFelixHttpsEnableAtTypeHint, String orgOsgiServiceHttpPortSecure, String orgOsgiServiceHttpPortSecureAtTypeHint, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/system/config/org.apache.felix.http";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orgApacheFelixHttpsNio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org.apache.felix.https.nio", orgApacheFelixHttpsNio));
        }

        if (orgApacheFelixHttpsNioAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org.apache.felix.https.nio@TypeHint", orgApacheFelixHttpsNioAtTypeHint));
        }

        if (orgApacheFelixHttpsKeystore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org.apache.felix.https.keystore", orgApacheFelixHttpsKeystore));
        }

        if (orgApacheFelixHttpsKeystoreAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org.apache.felix.https.keystore@TypeHint", orgApacheFelixHttpsKeystoreAtTypeHint));
        }

        if (orgApacheFelixHttpsKeystorePassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org.apache.felix.https.keystore.password", orgApacheFelixHttpsKeystorePassword));
        }

        if (orgApacheFelixHttpsKeystorePasswordAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org.apache.felix.https.keystore.password@TypeHint", orgApacheFelixHttpsKeystorePasswordAtTypeHint));
        }

        if (orgApacheFelixHttpsKeystoreKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org.apache.felix.https.keystore.key", orgApacheFelixHttpsKeystoreKey));
        }

        if (orgApacheFelixHttpsKeystoreKeyAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org.apache.felix.https.keystore.key@TypeHint", orgApacheFelixHttpsKeystoreKeyAtTypeHint));
        }

        if (orgApacheFelixHttpsKeystoreKeyPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org.apache.felix.https.keystore.key.password", orgApacheFelixHttpsKeystoreKeyPassword));
        }

        if (orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org.apache.felix.https.keystore.key.password@TypeHint", orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint));
        }

        if (orgApacheFelixHttpsTruststore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org.apache.felix.https.truststore", orgApacheFelixHttpsTruststore));
        }

        if (orgApacheFelixHttpsTruststoreAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org.apache.felix.https.truststore@TypeHint", orgApacheFelixHttpsTruststoreAtTypeHint));
        }

        if (orgApacheFelixHttpsTruststorePassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org.apache.felix.https.truststore.password", orgApacheFelixHttpsTruststorePassword));
        }

        if (orgApacheFelixHttpsTruststorePasswordAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org.apache.felix.https.truststore.password@TypeHint", orgApacheFelixHttpsTruststorePasswordAtTypeHint));
        }

        if (orgApacheFelixHttpsClientcertificate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org.apache.felix.https.clientcertificate", orgApacheFelixHttpsClientcertificate));
        }

        if (orgApacheFelixHttpsClientcertificateAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org.apache.felix.https.clientcertificate@TypeHint", orgApacheFelixHttpsClientcertificateAtTypeHint));
        }

        if (orgApacheFelixHttpsEnable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org.apache.felix.https.enable", orgApacheFelixHttpsEnable));
        }

        if (orgApacheFelixHttpsEnableAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org.apache.felix.https.enable@TypeHint", orgApacheFelixHttpsEnableAtTypeHint));
        }

        if (orgOsgiServiceHttpPortSecure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org.osgi.service.http.port.secure", orgOsgiServiceHttpPortSecure));
        }

        if (orgOsgiServiceHttpPortSecureAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org.osgi.service.http.port.secure@TypeHint", orgOsgiServiceHttpPortSecureAtTypeHint));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postConfigApacheFelixJettyBasedHttpServiceValidateBeforeCall(Boolean orgApacheFelixHttpsNio, String orgApacheFelixHttpsNioAtTypeHint, String orgApacheFelixHttpsKeystore, String orgApacheFelixHttpsKeystoreAtTypeHint, String orgApacheFelixHttpsKeystorePassword, String orgApacheFelixHttpsKeystorePasswordAtTypeHint, String orgApacheFelixHttpsKeystoreKey, String orgApacheFelixHttpsKeystoreKeyAtTypeHint, String orgApacheFelixHttpsKeystoreKeyPassword, String orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint, String orgApacheFelixHttpsTruststore, String orgApacheFelixHttpsTruststoreAtTypeHint, String orgApacheFelixHttpsTruststorePassword, String orgApacheFelixHttpsTruststorePasswordAtTypeHint, String orgApacheFelixHttpsClientcertificate, String orgApacheFelixHttpsClientcertificateAtTypeHint, Boolean orgApacheFelixHttpsEnable, String orgApacheFelixHttpsEnableAtTypeHint, String orgOsgiServiceHttpPortSecure, String orgOsgiServiceHttpPortSecureAtTypeHint, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = postConfigApacheFelixJettyBasedHttpServiceCall(orgApacheFelixHttpsNio, orgApacheFelixHttpsNioAtTypeHint, orgApacheFelixHttpsKeystore, orgApacheFelixHttpsKeystoreAtTypeHint, orgApacheFelixHttpsKeystorePassword, orgApacheFelixHttpsKeystorePasswordAtTypeHint, orgApacheFelixHttpsKeystoreKey, orgApacheFelixHttpsKeystoreKeyAtTypeHint, orgApacheFelixHttpsKeystoreKeyPassword, orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint, orgApacheFelixHttpsTruststore, orgApacheFelixHttpsTruststoreAtTypeHint, orgApacheFelixHttpsTruststorePassword, orgApacheFelixHttpsTruststorePasswordAtTypeHint, orgApacheFelixHttpsClientcertificate, orgApacheFelixHttpsClientcertificateAtTypeHint, orgApacheFelixHttpsEnable, orgApacheFelixHttpsEnableAtTypeHint, orgOsgiServiceHttpPortSecure, orgOsgiServiceHttpPortSecureAtTypeHint, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param orgApacheFelixHttpsNio  (optional)
     * @param orgApacheFelixHttpsNioAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystore  (optional)
     * @param orgApacheFelixHttpsKeystoreAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystorePassword  (optional)
     * @param orgApacheFelixHttpsKeystorePasswordAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystoreKey  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyPassword  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint  (optional)
     * @param orgApacheFelixHttpsTruststore  (optional)
     * @param orgApacheFelixHttpsTruststoreAtTypeHint  (optional)
     * @param orgApacheFelixHttpsTruststorePassword  (optional)
     * @param orgApacheFelixHttpsTruststorePasswordAtTypeHint  (optional)
     * @param orgApacheFelixHttpsClientcertificate  (optional)
     * @param orgApacheFelixHttpsClientcertificateAtTypeHint  (optional)
     * @param orgApacheFelixHttpsEnable  (optional)
     * @param orgApacheFelixHttpsEnableAtTypeHint  (optional)
     * @param orgOsgiServiceHttpPortSecure  (optional)
     * @param orgOsgiServiceHttpPortSecureAtTypeHint  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public void postConfigApacheFelixJettyBasedHttpService(Boolean orgApacheFelixHttpsNio, String orgApacheFelixHttpsNioAtTypeHint, String orgApacheFelixHttpsKeystore, String orgApacheFelixHttpsKeystoreAtTypeHint, String orgApacheFelixHttpsKeystorePassword, String orgApacheFelixHttpsKeystorePasswordAtTypeHint, String orgApacheFelixHttpsKeystoreKey, String orgApacheFelixHttpsKeystoreKeyAtTypeHint, String orgApacheFelixHttpsKeystoreKeyPassword, String orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint, String orgApacheFelixHttpsTruststore, String orgApacheFelixHttpsTruststoreAtTypeHint, String orgApacheFelixHttpsTruststorePassword, String orgApacheFelixHttpsTruststorePasswordAtTypeHint, String orgApacheFelixHttpsClientcertificate, String orgApacheFelixHttpsClientcertificateAtTypeHint, Boolean orgApacheFelixHttpsEnable, String orgApacheFelixHttpsEnableAtTypeHint, String orgOsgiServiceHttpPortSecure, String orgOsgiServiceHttpPortSecureAtTypeHint) throws ApiException {
        postConfigApacheFelixJettyBasedHttpServiceWithHttpInfo(orgApacheFelixHttpsNio, orgApacheFelixHttpsNioAtTypeHint, orgApacheFelixHttpsKeystore, orgApacheFelixHttpsKeystoreAtTypeHint, orgApacheFelixHttpsKeystorePassword, orgApacheFelixHttpsKeystorePasswordAtTypeHint, orgApacheFelixHttpsKeystoreKey, orgApacheFelixHttpsKeystoreKeyAtTypeHint, orgApacheFelixHttpsKeystoreKeyPassword, orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint, orgApacheFelixHttpsTruststore, orgApacheFelixHttpsTruststoreAtTypeHint, orgApacheFelixHttpsTruststorePassword, orgApacheFelixHttpsTruststorePasswordAtTypeHint, orgApacheFelixHttpsClientcertificate, orgApacheFelixHttpsClientcertificateAtTypeHint, orgApacheFelixHttpsEnable, orgApacheFelixHttpsEnableAtTypeHint, orgOsgiServiceHttpPortSecure, orgOsgiServiceHttpPortSecureAtTypeHint);
    }

    /**
     * 
     * 
     * @param orgApacheFelixHttpsNio  (optional)
     * @param orgApacheFelixHttpsNioAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystore  (optional)
     * @param orgApacheFelixHttpsKeystoreAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystorePassword  (optional)
     * @param orgApacheFelixHttpsKeystorePasswordAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystoreKey  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyPassword  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint  (optional)
     * @param orgApacheFelixHttpsTruststore  (optional)
     * @param orgApacheFelixHttpsTruststoreAtTypeHint  (optional)
     * @param orgApacheFelixHttpsTruststorePassword  (optional)
     * @param orgApacheFelixHttpsTruststorePasswordAtTypeHint  (optional)
     * @param orgApacheFelixHttpsClientcertificate  (optional)
     * @param orgApacheFelixHttpsClientcertificateAtTypeHint  (optional)
     * @param orgApacheFelixHttpsEnable  (optional)
     * @param orgApacheFelixHttpsEnableAtTypeHint  (optional)
     * @param orgOsgiServiceHttpPortSecure  (optional)
     * @param orgOsgiServiceHttpPortSecureAtTypeHint  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postConfigApacheFelixJettyBasedHttpServiceWithHttpInfo(Boolean orgApacheFelixHttpsNio, String orgApacheFelixHttpsNioAtTypeHint, String orgApacheFelixHttpsKeystore, String orgApacheFelixHttpsKeystoreAtTypeHint, String orgApacheFelixHttpsKeystorePassword, String orgApacheFelixHttpsKeystorePasswordAtTypeHint, String orgApacheFelixHttpsKeystoreKey, String orgApacheFelixHttpsKeystoreKeyAtTypeHint, String orgApacheFelixHttpsKeystoreKeyPassword, String orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint, String orgApacheFelixHttpsTruststore, String orgApacheFelixHttpsTruststoreAtTypeHint, String orgApacheFelixHttpsTruststorePassword, String orgApacheFelixHttpsTruststorePasswordAtTypeHint, String orgApacheFelixHttpsClientcertificate, String orgApacheFelixHttpsClientcertificateAtTypeHint, Boolean orgApacheFelixHttpsEnable, String orgApacheFelixHttpsEnableAtTypeHint, String orgOsgiServiceHttpPortSecure, String orgOsgiServiceHttpPortSecureAtTypeHint) throws ApiException {
        okhttp3.Call localVarCall = postConfigApacheFelixJettyBasedHttpServiceValidateBeforeCall(orgApacheFelixHttpsNio, orgApacheFelixHttpsNioAtTypeHint, orgApacheFelixHttpsKeystore, orgApacheFelixHttpsKeystoreAtTypeHint, orgApacheFelixHttpsKeystorePassword, orgApacheFelixHttpsKeystorePasswordAtTypeHint, orgApacheFelixHttpsKeystoreKey, orgApacheFelixHttpsKeystoreKeyAtTypeHint, orgApacheFelixHttpsKeystoreKeyPassword, orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint, orgApacheFelixHttpsTruststore, orgApacheFelixHttpsTruststoreAtTypeHint, orgApacheFelixHttpsTruststorePassword, orgApacheFelixHttpsTruststorePasswordAtTypeHint, orgApacheFelixHttpsClientcertificate, orgApacheFelixHttpsClientcertificateAtTypeHint, orgApacheFelixHttpsEnable, orgApacheFelixHttpsEnableAtTypeHint, orgOsgiServiceHttpPortSecure, orgOsgiServiceHttpPortSecureAtTypeHint, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param orgApacheFelixHttpsNio  (optional)
     * @param orgApacheFelixHttpsNioAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystore  (optional)
     * @param orgApacheFelixHttpsKeystoreAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystorePassword  (optional)
     * @param orgApacheFelixHttpsKeystorePasswordAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystoreKey  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyPassword  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint  (optional)
     * @param orgApacheFelixHttpsTruststore  (optional)
     * @param orgApacheFelixHttpsTruststoreAtTypeHint  (optional)
     * @param orgApacheFelixHttpsTruststorePassword  (optional)
     * @param orgApacheFelixHttpsTruststorePasswordAtTypeHint  (optional)
     * @param orgApacheFelixHttpsClientcertificate  (optional)
     * @param orgApacheFelixHttpsClientcertificateAtTypeHint  (optional)
     * @param orgApacheFelixHttpsEnable  (optional)
     * @param orgApacheFelixHttpsEnableAtTypeHint  (optional)
     * @param orgOsgiServiceHttpPortSecure  (optional)
     * @param orgOsgiServiceHttpPortSecureAtTypeHint  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postConfigApacheFelixJettyBasedHttpServiceAsync(Boolean orgApacheFelixHttpsNio, String orgApacheFelixHttpsNioAtTypeHint, String orgApacheFelixHttpsKeystore, String orgApacheFelixHttpsKeystoreAtTypeHint, String orgApacheFelixHttpsKeystorePassword, String orgApacheFelixHttpsKeystorePasswordAtTypeHint, String orgApacheFelixHttpsKeystoreKey, String orgApacheFelixHttpsKeystoreKeyAtTypeHint, String orgApacheFelixHttpsKeystoreKeyPassword, String orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint, String orgApacheFelixHttpsTruststore, String orgApacheFelixHttpsTruststoreAtTypeHint, String orgApacheFelixHttpsTruststorePassword, String orgApacheFelixHttpsTruststorePasswordAtTypeHint, String orgApacheFelixHttpsClientcertificate, String orgApacheFelixHttpsClientcertificateAtTypeHint, Boolean orgApacheFelixHttpsEnable, String orgApacheFelixHttpsEnableAtTypeHint, String orgOsgiServiceHttpPortSecure, String orgOsgiServiceHttpPortSecureAtTypeHint, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postConfigApacheFelixJettyBasedHttpServiceValidateBeforeCall(orgApacheFelixHttpsNio, orgApacheFelixHttpsNioAtTypeHint, orgApacheFelixHttpsKeystore, orgApacheFelixHttpsKeystoreAtTypeHint, orgApacheFelixHttpsKeystorePassword, orgApacheFelixHttpsKeystorePasswordAtTypeHint, orgApacheFelixHttpsKeystoreKey, orgApacheFelixHttpsKeystoreKeyAtTypeHint, orgApacheFelixHttpsKeystoreKeyPassword, orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint, orgApacheFelixHttpsTruststore, orgApacheFelixHttpsTruststoreAtTypeHint, orgApacheFelixHttpsTruststorePassword, orgApacheFelixHttpsTruststorePasswordAtTypeHint, orgApacheFelixHttpsClientcertificate, orgApacheFelixHttpsClientcertificateAtTypeHint, orgApacheFelixHttpsEnable, orgApacheFelixHttpsEnableAtTypeHint, orgOsgiServiceHttpPortSecure, orgOsgiServiceHttpPortSecureAtTypeHint, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postConfigApacheHttpComponentsProxyConfiguration
     * @param proxyHost  (optional)
     * @param proxyHostAtTypeHint  (optional)
     * @param proxyPort  (optional)
     * @param proxyPortAtTypeHint  (optional)
     * @param proxyExceptions  (optional)
     * @param proxyExceptionsAtTypeHint  (optional)
     * @param proxyEnabled  (optional)
     * @param proxyEnabledAtTypeHint  (optional)
     * @param proxyUser  (optional)
     * @param proxyUserAtTypeHint  (optional)
     * @param proxyPassword  (optional)
     * @param proxyPasswordAtTypeHint  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postConfigApacheHttpComponentsProxyConfigurationCall(String proxyHost, String proxyHostAtTypeHint, Integer proxyPort, String proxyPortAtTypeHint, List<String> proxyExceptions, String proxyExceptionsAtTypeHint, Boolean proxyEnabled, String proxyEnabledAtTypeHint, String proxyUser, String proxyUserAtTypeHint, String proxyPassword, String proxyPasswordAtTypeHint, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/system/config/org.apache.http.proxyconfigurator.config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (proxyHost != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proxy.host", proxyHost));
        }

        if (proxyHostAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proxy.host@TypeHint", proxyHostAtTypeHint));
        }

        if (proxyPort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proxy.port", proxyPort));
        }

        if (proxyPortAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proxy.port@TypeHint", proxyPortAtTypeHint));
        }

        if (proxyExceptions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "proxy.exceptions", proxyExceptions));
        }

        if (proxyExceptionsAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proxy.exceptions@TypeHint", proxyExceptionsAtTypeHint));
        }

        if (proxyEnabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proxy.enabled", proxyEnabled));
        }

        if (proxyEnabledAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proxy.enabled@TypeHint", proxyEnabledAtTypeHint));
        }

        if (proxyUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proxy.user", proxyUser));
        }

        if (proxyUserAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proxy.user@TypeHint", proxyUserAtTypeHint));
        }

        if (proxyPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proxy.password", proxyPassword));
        }

        if (proxyPasswordAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proxy.password@TypeHint", proxyPasswordAtTypeHint));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postConfigApacheHttpComponentsProxyConfigurationValidateBeforeCall(String proxyHost, String proxyHostAtTypeHint, Integer proxyPort, String proxyPortAtTypeHint, List<String> proxyExceptions, String proxyExceptionsAtTypeHint, Boolean proxyEnabled, String proxyEnabledAtTypeHint, String proxyUser, String proxyUserAtTypeHint, String proxyPassword, String proxyPasswordAtTypeHint, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = postConfigApacheHttpComponentsProxyConfigurationCall(proxyHost, proxyHostAtTypeHint, proxyPort, proxyPortAtTypeHint, proxyExceptions, proxyExceptionsAtTypeHint, proxyEnabled, proxyEnabledAtTypeHint, proxyUser, proxyUserAtTypeHint, proxyPassword, proxyPasswordAtTypeHint, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param proxyHost  (optional)
     * @param proxyHostAtTypeHint  (optional)
     * @param proxyPort  (optional)
     * @param proxyPortAtTypeHint  (optional)
     * @param proxyExceptions  (optional)
     * @param proxyExceptionsAtTypeHint  (optional)
     * @param proxyEnabled  (optional)
     * @param proxyEnabledAtTypeHint  (optional)
     * @param proxyUser  (optional)
     * @param proxyUserAtTypeHint  (optional)
     * @param proxyPassword  (optional)
     * @param proxyPasswordAtTypeHint  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public void postConfigApacheHttpComponentsProxyConfiguration(String proxyHost, String proxyHostAtTypeHint, Integer proxyPort, String proxyPortAtTypeHint, List<String> proxyExceptions, String proxyExceptionsAtTypeHint, Boolean proxyEnabled, String proxyEnabledAtTypeHint, String proxyUser, String proxyUserAtTypeHint, String proxyPassword, String proxyPasswordAtTypeHint) throws ApiException {
        postConfigApacheHttpComponentsProxyConfigurationWithHttpInfo(proxyHost, proxyHostAtTypeHint, proxyPort, proxyPortAtTypeHint, proxyExceptions, proxyExceptionsAtTypeHint, proxyEnabled, proxyEnabledAtTypeHint, proxyUser, proxyUserAtTypeHint, proxyPassword, proxyPasswordAtTypeHint);
    }

    /**
     * 
     * 
     * @param proxyHost  (optional)
     * @param proxyHostAtTypeHint  (optional)
     * @param proxyPort  (optional)
     * @param proxyPortAtTypeHint  (optional)
     * @param proxyExceptions  (optional)
     * @param proxyExceptionsAtTypeHint  (optional)
     * @param proxyEnabled  (optional)
     * @param proxyEnabledAtTypeHint  (optional)
     * @param proxyUser  (optional)
     * @param proxyUserAtTypeHint  (optional)
     * @param proxyPassword  (optional)
     * @param proxyPasswordAtTypeHint  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postConfigApacheHttpComponentsProxyConfigurationWithHttpInfo(String proxyHost, String proxyHostAtTypeHint, Integer proxyPort, String proxyPortAtTypeHint, List<String> proxyExceptions, String proxyExceptionsAtTypeHint, Boolean proxyEnabled, String proxyEnabledAtTypeHint, String proxyUser, String proxyUserAtTypeHint, String proxyPassword, String proxyPasswordAtTypeHint) throws ApiException {
        okhttp3.Call localVarCall = postConfigApacheHttpComponentsProxyConfigurationValidateBeforeCall(proxyHost, proxyHostAtTypeHint, proxyPort, proxyPortAtTypeHint, proxyExceptions, proxyExceptionsAtTypeHint, proxyEnabled, proxyEnabledAtTypeHint, proxyUser, proxyUserAtTypeHint, proxyPassword, proxyPasswordAtTypeHint, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param proxyHost  (optional)
     * @param proxyHostAtTypeHint  (optional)
     * @param proxyPort  (optional)
     * @param proxyPortAtTypeHint  (optional)
     * @param proxyExceptions  (optional)
     * @param proxyExceptionsAtTypeHint  (optional)
     * @param proxyEnabled  (optional)
     * @param proxyEnabledAtTypeHint  (optional)
     * @param proxyUser  (optional)
     * @param proxyUserAtTypeHint  (optional)
     * @param proxyPassword  (optional)
     * @param proxyPasswordAtTypeHint  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postConfigApacheHttpComponentsProxyConfigurationAsync(String proxyHost, String proxyHostAtTypeHint, Integer proxyPort, String proxyPortAtTypeHint, List<String> proxyExceptions, String proxyExceptionsAtTypeHint, Boolean proxyEnabled, String proxyEnabledAtTypeHint, String proxyUser, String proxyUserAtTypeHint, String proxyPassword, String proxyPasswordAtTypeHint, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postConfigApacheHttpComponentsProxyConfigurationValidateBeforeCall(proxyHost, proxyHostAtTypeHint, proxyPort, proxyPortAtTypeHint, proxyExceptions, proxyExceptionsAtTypeHint, proxyEnabled, proxyEnabledAtTypeHint, proxyUser, proxyUserAtTypeHint, proxyPassword, proxyPasswordAtTypeHint, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postConfigApacheSlingDavExServlet
     * @param alias  (optional)
     * @param aliasAtTypeHint  (optional)
     * @param davCreateAbsoluteUri  (optional)
     * @param davCreateAbsoluteUriAtTypeHint  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postConfigApacheSlingDavExServletCall(String alias, String aliasAtTypeHint, Boolean davCreateAbsoluteUri, String davCreateAbsoluteUriAtTypeHint, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alias != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alias", alias));
        }

        if (aliasAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alias@TypeHint", aliasAtTypeHint));
        }

        if (davCreateAbsoluteUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dav.create-absolute-uri", davCreateAbsoluteUri));
        }

        if (davCreateAbsoluteUriAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dav.create-absolute-uri@TypeHint", davCreateAbsoluteUriAtTypeHint));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postConfigApacheSlingDavExServletValidateBeforeCall(String alias, String aliasAtTypeHint, Boolean davCreateAbsoluteUri, String davCreateAbsoluteUriAtTypeHint, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = postConfigApacheSlingDavExServletCall(alias, aliasAtTypeHint, davCreateAbsoluteUri, davCreateAbsoluteUriAtTypeHint, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param alias  (optional)
     * @param aliasAtTypeHint  (optional)
     * @param davCreateAbsoluteUri  (optional)
     * @param davCreateAbsoluteUriAtTypeHint  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public void postConfigApacheSlingDavExServlet(String alias, String aliasAtTypeHint, Boolean davCreateAbsoluteUri, String davCreateAbsoluteUriAtTypeHint) throws ApiException {
        postConfigApacheSlingDavExServletWithHttpInfo(alias, aliasAtTypeHint, davCreateAbsoluteUri, davCreateAbsoluteUriAtTypeHint);
    }

    /**
     * 
     * 
     * @param alias  (optional)
     * @param aliasAtTypeHint  (optional)
     * @param davCreateAbsoluteUri  (optional)
     * @param davCreateAbsoluteUriAtTypeHint  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postConfigApacheSlingDavExServletWithHttpInfo(String alias, String aliasAtTypeHint, Boolean davCreateAbsoluteUri, String davCreateAbsoluteUriAtTypeHint) throws ApiException {
        okhttp3.Call localVarCall = postConfigApacheSlingDavExServletValidateBeforeCall(alias, aliasAtTypeHint, davCreateAbsoluteUri, davCreateAbsoluteUriAtTypeHint, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param alias  (optional)
     * @param aliasAtTypeHint  (optional)
     * @param davCreateAbsoluteUri  (optional)
     * @param davCreateAbsoluteUriAtTypeHint  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postConfigApacheSlingDavExServletAsync(String alias, String aliasAtTypeHint, Boolean davCreateAbsoluteUri, String davCreateAbsoluteUriAtTypeHint, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postConfigApacheSlingDavExServletValidateBeforeCall(alias, aliasAtTypeHint, davCreateAbsoluteUri, davCreateAbsoluteUriAtTypeHint, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postConfigApacheSlingGetServlet
     * @param jsonMaximumresults  (optional)
     * @param jsonMaximumresultsAtTypeHint  (optional)
     * @param enableHtml  (optional)
     * @param enableHtmlAtTypeHint  (optional)
     * @param enableTxt  (optional)
     * @param enableTxtAtTypeHint  (optional)
     * @param enableXml  (optional)
     * @param enableXmlAtTypeHint  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postConfigApacheSlingGetServletCall(String jsonMaximumresults, String jsonMaximumresultsAtTypeHint, Boolean enableHtml, String enableHtmlAtTypeHint, Boolean enableTxt, String enableTxtAtTypeHint, Boolean enableXml, String enableXmlAtTypeHint, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (jsonMaximumresults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("json.maximumresults", jsonMaximumresults));
        }

        if (jsonMaximumresultsAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("json.maximumresults@TypeHint", jsonMaximumresultsAtTypeHint));
        }

        if (enableHtml != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enable.html", enableHtml));
        }

        if (enableHtmlAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enable.html@TypeHint", enableHtmlAtTypeHint));
        }

        if (enableTxt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enable.txt", enableTxt));
        }

        if (enableTxtAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enable.txt@TypeHint", enableTxtAtTypeHint));
        }

        if (enableXml != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enable.xml", enableXml));
        }

        if (enableXmlAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enable.xml@TypeHint", enableXmlAtTypeHint));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postConfigApacheSlingGetServletValidateBeforeCall(String jsonMaximumresults, String jsonMaximumresultsAtTypeHint, Boolean enableHtml, String enableHtmlAtTypeHint, Boolean enableTxt, String enableTxtAtTypeHint, Boolean enableXml, String enableXmlAtTypeHint, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = postConfigApacheSlingGetServletCall(jsonMaximumresults, jsonMaximumresultsAtTypeHint, enableHtml, enableHtmlAtTypeHint, enableTxt, enableTxtAtTypeHint, enableXml, enableXmlAtTypeHint, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param jsonMaximumresults  (optional)
     * @param jsonMaximumresultsAtTypeHint  (optional)
     * @param enableHtml  (optional)
     * @param enableHtmlAtTypeHint  (optional)
     * @param enableTxt  (optional)
     * @param enableTxtAtTypeHint  (optional)
     * @param enableXml  (optional)
     * @param enableXmlAtTypeHint  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public void postConfigApacheSlingGetServlet(String jsonMaximumresults, String jsonMaximumresultsAtTypeHint, Boolean enableHtml, String enableHtmlAtTypeHint, Boolean enableTxt, String enableTxtAtTypeHint, Boolean enableXml, String enableXmlAtTypeHint) throws ApiException {
        postConfigApacheSlingGetServletWithHttpInfo(jsonMaximumresults, jsonMaximumresultsAtTypeHint, enableHtml, enableHtmlAtTypeHint, enableTxt, enableTxtAtTypeHint, enableXml, enableXmlAtTypeHint);
    }

    /**
     * 
     * 
     * @param jsonMaximumresults  (optional)
     * @param jsonMaximumresultsAtTypeHint  (optional)
     * @param enableHtml  (optional)
     * @param enableHtmlAtTypeHint  (optional)
     * @param enableTxt  (optional)
     * @param enableTxtAtTypeHint  (optional)
     * @param enableXml  (optional)
     * @param enableXmlAtTypeHint  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postConfigApacheSlingGetServletWithHttpInfo(String jsonMaximumresults, String jsonMaximumresultsAtTypeHint, Boolean enableHtml, String enableHtmlAtTypeHint, Boolean enableTxt, String enableTxtAtTypeHint, Boolean enableXml, String enableXmlAtTypeHint) throws ApiException {
        okhttp3.Call localVarCall = postConfigApacheSlingGetServletValidateBeforeCall(jsonMaximumresults, jsonMaximumresultsAtTypeHint, enableHtml, enableHtmlAtTypeHint, enableTxt, enableTxtAtTypeHint, enableXml, enableXmlAtTypeHint, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param jsonMaximumresults  (optional)
     * @param jsonMaximumresultsAtTypeHint  (optional)
     * @param enableHtml  (optional)
     * @param enableHtmlAtTypeHint  (optional)
     * @param enableTxt  (optional)
     * @param enableTxtAtTypeHint  (optional)
     * @param enableXml  (optional)
     * @param enableXmlAtTypeHint  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postConfigApacheSlingGetServletAsync(String jsonMaximumresults, String jsonMaximumresultsAtTypeHint, Boolean enableHtml, String enableHtmlAtTypeHint, Boolean enableTxt, String enableTxtAtTypeHint, Boolean enableXml, String enableXmlAtTypeHint, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postConfigApacheSlingGetServletValidateBeforeCall(jsonMaximumresults, jsonMaximumresultsAtTypeHint, enableHtml, enableHtmlAtTypeHint, enableTxt, enableTxtAtTypeHint, enableXml, enableXmlAtTypeHint, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postConfigApacheSlingReferrerFilter
     * @param allowEmpty  (optional)
     * @param allowEmptyAtTypeHint  (optional)
     * @param allowHosts  (optional)
     * @param allowHostsAtTypeHint  (optional)
     * @param allowHostsRegexp  (optional)
     * @param allowHostsRegexpAtTypeHint  (optional)
     * @param filterMethods  (optional)
     * @param filterMethodsAtTypeHint  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postConfigApacheSlingReferrerFilterCall(Boolean allowEmpty, String allowEmptyAtTypeHint, String allowHosts, String allowHostsAtTypeHint, String allowHostsRegexp, String allowHostsRegexpAtTypeHint, String filterMethods, String filterMethodsAtTypeHint, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/system/config/org.apache.sling.security.impl.ReferrerFilter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (allowEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allow.empty", allowEmpty));
        }

        if (allowEmptyAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allow.empty@TypeHint", allowEmptyAtTypeHint));
        }

        if (allowHosts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allow.hosts", allowHosts));
        }

        if (allowHostsAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allow.hosts@TypeHint", allowHostsAtTypeHint));
        }

        if (allowHostsRegexp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allow.hosts.regexp", allowHostsRegexp));
        }

        if (allowHostsRegexpAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allow.hosts.regexp@TypeHint", allowHostsRegexpAtTypeHint));
        }

        if (filterMethods != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.methods", filterMethods));
        }

        if (filterMethodsAtTypeHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.methods@TypeHint", filterMethodsAtTypeHint));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postConfigApacheSlingReferrerFilterValidateBeforeCall(Boolean allowEmpty, String allowEmptyAtTypeHint, String allowHosts, String allowHostsAtTypeHint, String allowHostsRegexp, String allowHostsRegexpAtTypeHint, String filterMethods, String filterMethodsAtTypeHint, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = postConfigApacheSlingReferrerFilterCall(allowEmpty, allowEmptyAtTypeHint, allowHosts, allowHostsAtTypeHint, allowHostsRegexp, allowHostsRegexpAtTypeHint, filterMethods, filterMethodsAtTypeHint, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param allowEmpty  (optional)
     * @param allowEmptyAtTypeHint  (optional)
     * @param allowHosts  (optional)
     * @param allowHostsAtTypeHint  (optional)
     * @param allowHostsRegexp  (optional)
     * @param allowHostsRegexpAtTypeHint  (optional)
     * @param filterMethods  (optional)
     * @param filterMethodsAtTypeHint  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public void postConfigApacheSlingReferrerFilter(Boolean allowEmpty, String allowEmptyAtTypeHint, String allowHosts, String allowHostsAtTypeHint, String allowHostsRegexp, String allowHostsRegexpAtTypeHint, String filterMethods, String filterMethodsAtTypeHint) throws ApiException {
        postConfigApacheSlingReferrerFilterWithHttpInfo(allowEmpty, allowEmptyAtTypeHint, allowHosts, allowHostsAtTypeHint, allowHostsRegexp, allowHostsRegexpAtTypeHint, filterMethods, filterMethodsAtTypeHint);
    }

    /**
     * 
     * 
     * @param allowEmpty  (optional)
     * @param allowEmptyAtTypeHint  (optional)
     * @param allowHosts  (optional)
     * @param allowHostsAtTypeHint  (optional)
     * @param allowHostsRegexp  (optional)
     * @param allowHostsRegexpAtTypeHint  (optional)
     * @param filterMethods  (optional)
     * @param filterMethodsAtTypeHint  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postConfigApacheSlingReferrerFilterWithHttpInfo(Boolean allowEmpty, String allowEmptyAtTypeHint, String allowHosts, String allowHostsAtTypeHint, String allowHostsRegexp, String allowHostsRegexpAtTypeHint, String filterMethods, String filterMethodsAtTypeHint) throws ApiException {
        okhttp3.Call localVarCall = postConfigApacheSlingReferrerFilterValidateBeforeCall(allowEmpty, allowEmptyAtTypeHint, allowHosts, allowHostsAtTypeHint, allowHostsRegexp, allowHostsRegexpAtTypeHint, filterMethods, filterMethodsAtTypeHint, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param allowEmpty  (optional)
     * @param allowEmptyAtTypeHint  (optional)
     * @param allowHosts  (optional)
     * @param allowHostsAtTypeHint  (optional)
     * @param allowHostsRegexp  (optional)
     * @param allowHostsRegexpAtTypeHint  (optional)
     * @param filterMethods  (optional)
     * @param filterMethodsAtTypeHint  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postConfigApacheSlingReferrerFilterAsync(Boolean allowEmpty, String allowEmptyAtTypeHint, String allowHosts, String allowHostsAtTypeHint, String allowHostsRegexp, String allowHostsRegexpAtTypeHint, String filterMethods, String filterMethodsAtTypeHint, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postConfigApacheSlingReferrerFilterValidateBeforeCall(allowEmpty, allowEmptyAtTypeHint, allowHosts, allowHostsAtTypeHint, allowHostsRegexp, allowHostsRegexpAtTypeHint, filterMethods, filterMethodsAtTypeHint, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postConfigProperty
     * @param configNodeName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postConfigPropertyCall(String configNodeName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/system/config/{configNodeName}"
            .replaceAll("\\{" + "configNodeName" + "\\}", localVarApiClient.escapeString(configNodeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postConfigPropertyValidateBeforeCall(String configNodeName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'configNodeName' is set
        if (configNodeName == null) {
            throw new ApiException("Missing the required parameter 'configNodeName' when calling postConfigProperty(Async)");
        }
        

        okhttp3.Call localVarCall = postConfigPropertyCall(configNodeName, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param configNodeName  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public void postConfigProperty(String configNodeName) throws ApiException {
        postConfigPropertyWithHttpInfo(configNodeName);
    }

    /**
     * 
     * 
     * @param configNodeName  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postConfigPropertyWithHttpInfo(String configNodeName) throws ApiException {
        okhttp3.Call localVarCall = postConfigPropertyValidateBeforeCall(configNodeName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param configNodeName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postConfigPropertyAsync(String configNodeName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postConfigPropertyValidateBeforeCall(configNodeName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postNode
     * @param path  (required)
     * @param name  (required)
     * @param colonOperation  (optional)
     * @param deleteAuthorizable  (optional)
     * @param file  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postNodeCall(String path, String name, String colonOperation, String deleteAuthorizable, File file, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{path}/{name}"
            .replaceAll("\\{" + "path" + "\\}", localVarApiClient.escapeString(path.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (file != null) {
            localVarFormParams.put("file", file);
        }

        if (colonOperation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair(":operation", colonOperation));
        }

        if (deleteAuthorizable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleteAuthorizable", deleteAuthorizable));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postNodeValidateBeforeCall(String path, String name, String colonOperation, String deleteAuthorizable, File file, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling postNode(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postNode(Async)");
        }
        

        okhttp3.Call localVarCall = postNodeCall(path, name, colonOperation, deleteAuthorizable, file, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param path  (required)
     * @param name  (required)
     * @param colonOperation  (optional)
     * @param deleteAuthorizable  (optional)
     * @param file  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public void postNode(String path, String name, String colonOperation, String deleteAuthorizable, File file) throws ApiException {
        postNodeWithHttpInfo(path, name, colonOperation, deleteAuthorizable, file);
    }

    /**
     * 
     * 
     * @param path  (required)
     * @param name  (required)
     * @param colonOperation  (optional)
     * @param deleteAuthorizable  (optional)
     * @param file  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postNodeWithHttpInfo(String path, String name, String colonOperation, String deleteAuthorizable, File file) throws ApiException {
        okhttp3.Call localVarCall = postNodeValidateBeforeCall(path, name, colonOperation, deleteAuthorizable, file, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param path  (required)
     * @param name  (required)
     * @param colonOperation  (optional)
     * @param deleteAuthorizable  (optional)
     * @param file  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postNodeAsync(String path, String name, String colonOperation, String deleteAuthorizable, File file, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postNodeValidateBeforeCall(path, name, colonOperation, deleteAuthorizable, file, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postNodeRw
     * @param path  (required)
     * @param name  (required)
     * @param addMembers  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postNodeRwCall(String path, String name, String addMembers, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{path}/{name}.rw.html"
            .replaceAll("\\{" + "path" + "\\}", localVarApiClient.escapeString(path.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (addMembers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addMembers", addMembers));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postNodeRwValidateBeforeCall(String path, String name, String addMembers, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling postNodeRw(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postNodeRw(Async)");
        }
        

        okhttp3.Call localVarCall = postNodeRwCall(path, name, addMembers, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param path  (required)
     * @param name  (required)
     * @param addMembers  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public void postNodeRw(String path, String name, String addMembers) throws ApiException {
        postNodeRwWithHttpInfo(path, name, addMembers);
    }

    /**
     * 
     * 
     * @param path  (required)
     * @param name  (required)
     * @param addMembers  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postNodeRwWithHttpInfo(String path, String name, String addMembers) throws ApiException {
        okhttp3.Call localVarCall = postNodeRwValidateBeforeCall(path, name, addMembers, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param path  (required)
     * @param name  (required)
     * @param addMembers  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postNodeRwAsync(String path, String name, String addMembers, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postNodeRwValidateBeforeCall(path, name, addMembers, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPath
     * @param path  (required)
     * @param jcrColonPrimaryType  (required)
     * @param colonName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPathCall(String path, String jcrColonPrimaryType, String colonName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{path}/"
            .replaceAll("\\{" + "path" + "\\}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (jcrColonPrimaryType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jcr:primaryType", jcrColonPrimaryType));
        }

        if (colonName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair(":name", colonName));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPathValidateBeforeCall(String path, String jcrColonPrimaryType, String colonName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling postPath(Async)");
        }
        
        // verify the required parameter 'jcrColonPrimaryType' is set
        if (jcrColonPrimaryType == null) {
            throw new ApiException("Missing the required parameter 'jcrColonPrimaryType' when calling postPath(Async)");
        }
        
        // verify the required parameter 'colonName' is set
        if (colonName == null) {
            throw new ApiException("Missing the required parameter 'colonName' when calling postPath(Async)");
        }
        

        okhttp3.Call localVarCall = postPathCall(path, jcrColonPrimaryType, colonName, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param path  (required)
     * @param jcrColonPrimaryType  (required)
     * @param colonName  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public void postPath(String path, String jcrColonPrimaryType, String colonName) throws ApiException {
        postPathWithHttpInfo(path, jcrColonPrimaryType, colonName);
    }

    /**
     * 
     * 
     * @param path  (required)
     * @param jcrColonPrimaryType  (required)
     * @param colonName  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postPathWithHttpInfo(String path, String jcrColonPrimaryType, String colonName) throws ApiException {
        okhttp3.Call localVarCall = postPathValidateBeforeCall(path, jcrColonPrimaryType, colonName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param path  (required)
     * @param jcrColonPrimaryType  (required)
     * @param colonName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPathAsync(String path, String jcrColonPrimaryType, String colonName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPathValidateBeforeCall(path, jcrColonPrimaryType, colonName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postQuery
     * @param path  (required)
     * @param pLimit  (required)
     * @param _1property  (required)
     * @param _1propertyValue  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postQueryCall(String path, BigDecimal pLimit, String _1property, String _1propertyValue, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bin/querybuilder.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (pLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p.limit", pLimit));
        }

        if (_1property != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("1_property", _1property));
        }

        if (_1propertyValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("1_property.value", _1propertyValue));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postQueryValidateBeforeCall(String path, BigDecimal pLimit, String _1property, String _1propertyValue, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling postQuery(Async)");
        }
        
        // verify the required parameter 'pLimit' is set
        if (pLimit == null) {
            throw new ApiException("Missing the required parameter 'pLimit' when calling postQuery(Async)");
        }
        
        // verify the required parameter '_1property' is set
        if (_1property == null) {
            throw new ApiException("Missing the required parameter '_1property' when calling postQuery(Async)");
        }
        
        // verify the required parameter '_1propertyValue' is set
        if (_1propertyValue == null) {
            throw new ApiException("Missing the required parameter '_1propertyValue' when calling postQuery(Async)");
        }
        

        okhttp3.Call localVarCall = postQueryCall(path, pLimit, _1property, _1propertyValue, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param path  (required)
     * @param pLimit  (required)
     * @param _1property  (required)
     * @param _1propertyValue  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public String postQuery(String path, BigDecimal pLimit, String _1property, String _1propertyValue) throws ApiException {
        ApiResponse<String> localVarResp = postQueryWithHttpInfo(path, pLimit, _1property, _1propertyValue);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param path  (required)
     * @param pLimit  (required)
     * @param _1property  (required)
     * @param _1propertyValue  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> postQueryWithHttpInfo(String path, BigDecimal pLimit, String _1property, String _1propertyValue) throws ApiException {
        okhttp3.Call localVarCall = postQueryValidateBeforeCall(path, pLimit, _1property, _1propertyValue, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param path  (required)
     * @param pLimit  (required)
     * @param _1property  (required)
     * @param _1propertyValue  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postQueryAsync(String path, BigDecimal pLimit, String _1property, String _1propertyValue, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = postQueryValidateBeforeCall(path, pLimit, _1property, _1propertyValue, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postTreeActivation
     * @param ignoredeactivated  (required)
     * @param onlymodified  (required)
     * @param path  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTreeActivationCall(Boolean ignoredeactivated, Boolean onlymodified, String path, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etc/replication/treeactivation.html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ignoredeactivated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignoredeactivated", ignoredeactivated));
        }

        if (onlymodified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlymodified", onlymodified));
        }

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postTreeActivationValidateBeforeCall(Boolean ignoredeactivated, Boolean onlymodified, String path, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ignoredeactivated' is set
        if (ignoredeactivated == null) {
            throw new ApiException("Missing the required parameter 'ignoredeactivated' when calling postTreeActivation(Async)");
        }
        
        // verify the required parameter 'onlymodified' is set
        if (onlymodified == null) {
            throw new ApiException("Missing the required parameter 'onlymodified' when calling postTreeActivation(Async)");
        }
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling postTreeActivation(Async)");
        }
        

        okhttp3.Call localVarCall = postTreeActivationCall(ignoredeactivated, onlymodified, path, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param ignoredeactivated  (required)
     * @param onlymodified  (required)
     * @param path  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public void postTreeActivation(Boolean ignoredeactivated, Boolean onlymodified, String path) throws ApiException {
        postTreeActivationWithHttpInfo(ignoredeactivated, onlymodified, path);
    }

    /**
     * 
     * 
     * @param ignoredeactivated  (required)
     * @param onlymodified  (required)
     * @param path  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postTreeActivationWithHttpInfo(Boolean ignoredeactivated, Boolean onlymodified, String path) throws ApiException {
        okhttp3.Call localVarCall = postTreeActivationValidateBeforeCall(ignoredeactivated, onlymodified, path, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param ignoredeactivated  (required)
     * @param onlymodified  (required)
     * @param path  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTreeActivationAsync(Boolean ignoredeactivated, Boolean onlymodified, String path, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postTreeActivationValidateBeforeCall(ignoredeactivated, onlymodified, path, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postTruststore
     * @param colonOperation  (optional)
     * @param newPassword  (optional)
     * @param rePassword  (optional)
     * @param keyStoreType  (optional)
     * @param removeAlias  (optional)
     * @param certificate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTruststoreCall(String colonOperation, String newPassword, String rePassword, String keyStoreType, String removeAlias, File certificate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/libs/granite/security/post/truststore";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (certificate != null) {
            localVarFormParams.put("certificate", certificate);
        }

        if (colonOperation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair(":operation", colonOperation));
        }

        if (newPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newPassword", newPassword));
        }

        if (rePassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rePassword", rePassword));
        }

        if (keyStoreType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyStoreType", keyStoreType));
        }

        if (removeAlias != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("removeAlias", removeAlias));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postTruststoreValidateBeforeCall(String colonOperation, String newPassword, String rePassword, String keyStoreType, String removeAlias, File certificate, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = postTruststoreCall(colonOperation, newPassword, rePassword, keyStoreType, removeAlias, certificate, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param colonOperation  (optional)
     * @param newPassword  (optional)
     * @param rePassword  (optional)
     * @param keyStoreType  (optional)
     * @param removeAlias  (optional)
     * @param certificate  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public String postTruststore(String colonOperation, String newPassword, String rePassword, String keyStoreType, String removeAlias, File certificate) throws ApiException {
        ApiResponse<String> localVarResp = postTruststoreWithHttpInfo(colonOperation, newPassword, rePassword, keyStoreType, removeAlias, certificate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param colonOperation  (optional)
     * @param newPassword  (optional)
     * @param rePassword  (optional)
     * @param keyStoreType  (optional)
     * @param removeAlias  (optional)
     * @param certificate  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> postTruststoreWithHttpInfo(String colonOperation, String newPassword, String rePassword, String keyStoreType, String removeAlias, File certificate) throws ApiException {
        okhttp3.Call localVarCall = postTruststoreValidateBeforeCall(colonOperation, newPassword, rePassword, keyStoreType, removeAlias, certificate, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param colonOperation  (optional)
     * @param newPassword  (optional)
     * @param rePassword  (optional)
     * @param keyStoreType  (optional)
     * @param removeAlias  (optional)
     * @param certificate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTruststoreAsync(String colonOperation, String newPassword, String rePassword, String keyStoreType, String removeAlias, File certificate, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = postTruststoreValidateBeforeCall(colonOperation, newPassword, rePassword, keyStoreType, removeAlias, certificate, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postTruststorePKCS12
     * @param truststoreP12  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTruststorePKCS12Call(File truststoreP12, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etc/truststore";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (truststoreP12 != null) {
            localVarFormParams.put("truststore.p12", truststoreP12);
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postTruststorePKCS12ValidateBeforeCall(File truststoreP12, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = postTruststorePKCS12Call(truststoreP12, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param truststoreP12  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public String postTruststorePKCS12(File truststoreP12) throws ApiException {
        ApiResponse<String> localVarResp = postTruststorePKCS12WithHttpInfo(truststoreP12);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param truststoreP12  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> postTruststorePKCS12WithHttpInfo(File truststoreP12) throws ApiException {
        okhttp3.Call localVarCall = postTruststorePKCS12ValidateBeforeCall(truststoreP12, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param truststoreP12  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTruststorePKCS12Async(File truststoreP12, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = postTruststorePKCS12ValidateBeforeCall(truststoreP12, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
