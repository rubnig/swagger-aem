/*
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.shinesolutions.swaggeraem4j.api;

import com.shinesolutions.swaggeraem4j.ApiCallback;
import com.shinesolutions.swaggeraem4j.ApiClient;
import com.shinesolutions.swaggeraem4j.ApiException;
import com.shinesolutions.swaggeraem4j.ApiResponse;
import com.shinesolutions.swaggeraem4j.Configuration;
import com.shinesolutions.swaggeraem4j.Pair;
import com.shinesolutions.swaggeraem4j.ProgressRequestBody;
import com.shinesolutions.swaggeraem4j.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.shinesolutions.swaggeraem4j.model.InstallStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CrxApi {
    private ApiClient localVarApiClient;

    public CrxApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CrxApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getCrxdeStatus
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CRXDE is enabled </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> CRXDE is disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCrxdeStatusCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/crx/server/crx.default/jcr:root/.1.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "plain/text"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCrxdeStatusValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCrxdeStatusCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CRXDE is enabled </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> CRXDE is disabled </td><td>  -  </td></tr>
     </table>
     */
    public String getCrxdeStatus() throws ApiException {
        ApiResponse<String> localVarResp = getCrxdeStatusWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CRXDE is enabled </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> CRXDE is disabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getCrxdeStatusWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCrxdeStatusValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CRXDE is enabled </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> CRXDE is disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCrxdeStatusAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCrxdeStatusValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInstallStatus
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved CRX package manager install status </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInstallStatusCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/crx/packmgr/installstatus.jsp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstallStatusValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getInstallStatusCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return InstallStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved CRX package manager install status </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public InstallStatus getInstallStatus() throws ApiException {
        ApiResponse<InstallStatus> localVarResp = getInstallStatusWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;InstallStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved CRX package manager install status </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstallStatus> getInstallStatusWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getInstallStatusValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InstallStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved CRX package manager install status </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInstallStatusAsync(final ApiCallback<InstallStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstallStatusValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InstallStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPackageManagerServlet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Package Manager Servlet is disabled </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Package Manager Servlet is active </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPackageManagerServletCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/crx/packmgr/service/script.html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPackageManagerServletValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getPackageManagerServletCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Package Manager Servlet is disabled </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Package Manager Servlet is active </td><td>  -  </td></tr>
     </table>
     */
    public void getPackageManagerServlet() throws ApiException {
        getPackageManagerServletWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Package Manager Servlet is disabled </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Package Manager Servlet is active </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getPackageManagerServletWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getPackageManagerServletValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Package Manager Servlet is disabled </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Package Manager Servlet is active </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPackageManagerServletAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPackageManagerServletValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPackageService
     * @param cmd  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPackageServiceCall(String cmd, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/crx/packmgr/service.jsp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cmd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cmd", cmd));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPackageServiceValidateBeforeCall(String cmd, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cmd' is set
        if (cmd == null) {
            throw new ApiException("Missing the required parameter 'cmd' when calling postPackageService(Async)");
        }
        

        okhttp3.Call localVarCall = postPackageServiceCall(cmd, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param cmd  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public String postPackageService(String cmd) throws ApiException {
        ApiResponse<String> localVarResp = postPackageServiceWithHttpInfo(cmd);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param cmd  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> postPackageServiceWithHttpInfo(String cmd) throws ApiException {
        okhttp3.Call localVarCall = postPackageServiceValidateBeforeCall(cmd, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param cmd  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPackageServiceAsync(String cmd, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPackageServiceValidateBeforeCall(cmd, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPackageServiceJson
     * @param path  (required)
     * @param cmd  (required)
     * @param groupName  (optional)
     * @param packageName  (optional)
     * @param packageVersion  (optional)
     * @param charset  (optional)
     * @param force  (optional)
     * @param recursive  (optional)
     * @param _package  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPackageServiceJsonCall(String path, String cmd, String groupName, String packageName, String packageVersion, String charset, Boolean force, Boolean recursive, File _package, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/crx/packmgr/service/.json/{path}"
            .replaceAll("\\{" + "path" + "\\}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_package != null) {
            localVarFormParams.put("package", _package);
        }

        if (cmd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cmd", cmd));
        }

        if (groupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupName", groupName));
        }

        if (packageName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("packageName", packageName));
        }

        if (packageVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("packageVersion", packageVersion));
        }

        if (charset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_charset_", charset));
        }

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        if (recursive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursive", recursive));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPackageServiceJsonValidateBeforeCall(String path, String cmd, String groupName, String packageName, String packageVersion, String charset, Boolean force, Boolean recursive, File _package, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling postPackageServiceJson(Async)");
        }
        
        // verify the required parameter 'cmd' is set
        if (cmd == null) {
            throw new ApiException("Missing the required parameter 'cmd' when calling postPackageServiceJson(Async)");
        }
        

        okhttp3.Call localVarCall = postPackageServiceJsonCall(path, cmd, groupName, packageName, packageVersion, charset, force, recursive, _package, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param path  (required)
     * @param cmd  (required)
     * @param groupName  (optional)
     * @param packageName  (optional)
     * @param packageVersion  (optional)
     * @param charset  (optional)
     * @param force  (optional)
     * @param recursive  (optional)
     * @param _package  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public String postPackageServiceJson(String path, String cmd, String groupName, String packageName, String packageVersion, String charset, Boolean force, Boolean recursive, File _package) throws ApiException {
        ApiResponse<String> localVarResp = postPackageServiceJsonWithHttpInfo(path, cmd, groupName, packageName, packageVersion, charset, force, recursive, _package);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param path  (required)
     * @param cmd  (required)
     * @param groupName  (optional)
     * @param packageName  (optional)
     * @param packageVersion  (optional)
     * @param charset  (optional)
     * @param force  (optional)
     * @param recursive  (optional)
     * @param _package  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> postPackageServiceJsonWithHttpInfo(String path, String cmd, String groupName, String packageName, String packageVersion, String charset, Boolean force, Boolean recursive, File _package) throws ApiException {
        okhttp3.Call localVarCall = postPackageServiceJsonValidateBeforeCall(path, cmd, groupName, packageName, packageVersion, charset, force, recursive, _package, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param path  (required)
     * @param cmd  (required)
     * @param groupName  (optional)
     * @param packageName  (optional)
     * @param packageVersion  (optional)
     * @param charset  (optional)
     * @param force  (optional)
     * @param recursive  (optional)
     * @param _package  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPackageServiceJsonAsync(String path, String cmd, String groupName, String packageName, String packageVersion, String charset, Boolean force, Boolean recursive, File _package, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPackageServiceJsonValidateBeforeCall(path, cmd, groupName, packageName, packageVersion, charset, force, recursive, _package, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPackageUpdate
     * @param groupName  (required)
     * @param packageName  (required)
     * @param version  (required)
     * @param path  (required)
     * @param filter  (optional)
     * @param charset  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPackageUpdateCall(String groupName, String packageName, String version, String path, String filter, String charset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/crx/packmgr/update.jsp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupName", groupName));
        }

        if (packageName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("packageName", packageName));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (charset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_charset_", charset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPackageUpdateValidateBeforeCall(String groupName, String packageName, String version, String path, String filter, String charset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling postPackageUpdate(Async)");
        }
        
        // verify the required parameter 'packageName' is set
        if (packageName == null) {
            throw new ApiException("Missing the required parameter 'packageName' when calling postPackageUpdate(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling postPackageUpdate(Async)");
        }
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling postPackageUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = postPackageUpdateCall(groupName, packageName, version, path, filter, charset, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param groupName  (required)
     * @param packageName  (required)
     * @param version  (required)
     * @param path  (required)
     * @param filter  (optional)
     * @param charset  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public String postPackageUpdate(String groupName, String packageName, String version, String path, String filter, String charset) throws ApiException {
        ApiResponse<String> localVarResp = postPackageUpdateWithHttpInfo(groupName, packageName, version, path, filter, charset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param groupName  (required)
     * @param packageName  (required)
     * @param version  (required)
     * @param path  (required)
     * @param filter  (optional)
     * @param charset  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> postPackageUpdateWithHttpInfo(String groupName, String packageName, String version, String path, String filter, String charset) throws ApiException {
        okhttp3.Call localVarCall = postPackageUpdateValidateBeforeCall(groupName, packageName, version, path, filter, charset, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param groupName  (required)
     * @param packageName  (required)
     * @param version  (required)
     * @param path  (required)
     * @param filter  (optional)
     * @param charset  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPackageUpdateAsync(String groupName, String packageName, String version, String path, String filter, String charset, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPackageUpdateValidateBeforeCall(groupName, packageName, version, path, filter, charset, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSetPassword
     * @param old  (required)
     * @param plain  (required)
     * @param verify  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSetPasswordCall(String old, String plain, String verify, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/crx/explorer/ui/setpassword.jsp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (old != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("old", old));
        }

        if (plain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("plain", plain));
        }

        if (verify != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("verify", verify));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSetPasswordValidateBeforeCall(String old, String plain, String verify, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'old' is set
        if (old == null) {
            throw new ApiException("Missing the required parameter 'old' when calling postSetPassword(Async)");
        }
        
        // verify the required parameter 'plain' is set
        if (plain == null) {
            throw new ApiException("Missing the required parameter 'plain' when calling postSetPassword(Async)");
        }
        
        // verify the required parameter 'verify' is set
        if (verify == null) {
            throw new ApiException("Missing the required parameter 'verify' when calling postSetPassword(Async)");
        }
        

        okhttp3.Call localVarCall = postSetPasswordCall(old, plain, verify, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param old  (required)
     * @param plain  (required)
     * @param verify  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public String postSetPassword(String old, String plain, String verify) throws ApiException {
        ApiResponse<String> localVarResp = postSetPasswordWithHttpInfo(old, plain, verify);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param old  (required)
     * @param plain  (required)
     * @param verify  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> postSetPasswordWithHttpInfo(String old, String plain, String verify) throws ApiException {
        okhttp3.Call localVarCall = postSetPasswordValidateBeforeCall(old, plain, verify, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param old  (required)
     * @param plain  (required)
     * @param verify  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSetPasswordAsync(String old, String plain, String verify, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSetPasswordValidateBeforeCall(old, plain, verify, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
