/*
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.shinesolutions.swaggeraem4j.api;

import com.shinesolutions.swaggeraem4j.ApiCallback;
import com.shinesolutions.swaggeraem4j.ApiClient;
import com.shinesolutions.swaggeraem4j.ApiException;
import com.shinesolutions.swaggeraem4j.ApiResponse;
import com.shinesolutions.swaggeraem4j.Configuration;
import com.shinesolutions.swaggeraem4j.Pair;
import com.shinesolutions.swaggeraem4j.ProgressRequestBody;
import com.shinesolutions.swaggeraem4j.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.shinesolutions.swaggeraem4j.model.BundleInfo;
import com.shinesolutions.swaggeraem4j.model.SamlConfigurationInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConsoleApi {
    private ApiClient localVarApiClient;

    public ConsoleApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConsoleApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getAemProductInfo
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAemProductInfoCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/console/status-productinfo.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAemProductInfoValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAemProductInfoCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getAemProductInfo() throws ApiException {
        ApiResponse<List<String>> localVarResp = getAemProductInfoWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getAemProductInfoWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAemProductInfoValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAemProductInfoAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAemProductInfoValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBundleInfo
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved bundle info </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBundleInfoCall(String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/console/bundles/{name}.json"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBundleInfoValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getBundleInfo(Async)");
        }
        

        okhttp3.Call localVarCall = getBundleInfoCall(name, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param name  (required)
     * @return BundleInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved bundle info </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public BundleInfo getBundleInfo(String name) throws ApiException {
        ApiResponse<BundleInfo> localVarResp = getBundleInfoWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @return ApiResponse&lt;BundleInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved bundle info </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BundleInfo> getBundleInfoWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = getBundleInfoValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<BundleInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved bundle info </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBundleInfoAsync(String name, final ApiCallback<BundleInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBundleInfoValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<BundleInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConfigMgr
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigMgrCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/console/configMgr";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConfigMgrValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getConfigMgrCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public String getConfigMgr() throws ApiException {
        ApiResponse<String> localVarResp = getConfigMgrWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getConfigMgrWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getConfigMgrValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigMgrAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConfigMgrValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postBundle
     * @param name  (required)
     * @param action  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postBundleCall(String name, String action, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/console/bundles/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postBundleValidateBeforeCall(String name, String action, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postBundle(Async)");
        }
        
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling postBundle(Async)");
        }
        

        okhttp3.Call localVarCall = postBundleCall(name, action, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param name  (required)
     * @param action  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public void postBundle(String name, String action) throws ApiException {
        postBundleWithHttpInfo(name, action);
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param action  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postBundleWithHttpInfo(String name, String action) throws ApiException {
        okhttp3.Call localVarCall = postBundleValidateBeforeCall(name, action, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param action  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postBundleAsync(String name, String action, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postBundleValidateBeforeCall(name, action, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postJmxRepository
     * @param action  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJmxRepositoryCall(String action, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/console/jmx/com.adobe.granite:type=Repository/op/{action}"
            .replaceAll("\\{" + "action" + "\\}", localVarApiClient.escapeString(action.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postJmxRepositoryValidateBeforeCall(String action, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling postJmxRepository(Async)");
        }
        

        okhttp3.Call localVarCall = postJmxRepositoryCall(action, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param action  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public void postJmxRepository(String action) throws ApiException {
        postJmxRepositoryWithHttpInfo(action);
    }

    /**
     * 
     * 
     * @param action  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postJmxRepositoryWithHttpInfo(String action) throws ApiException {
        okhttp3.Call localVarCall = postJmxRepositoryValidateBeforeCall(action, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param action  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJmxRepositoryAsync(String action, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postJmxRepositoryValidateBeforeCall(action, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSamlConfiguration
     * @param post  (optional)
     * @param apply  (optional)
     * @param delete  (optional)
     * @param action  (optional)
     * @param $location  (optional)
     * @param path  (optional)
     * @param serviceRanking  (optional)
     * @param idpUrl  (optional)
     * @param idpCertAlias  (optional)
     * @param idpHttpRedirect  (optional)
     * @param serviceProviderEntityId  (optional)
     * @param assertionConsumerServiceURL  (optional)
     * @param spPrivateKeyAlias  (optional)
     * @param keyStorePassword  (optional)
     * @param defaultRedirectUrl  (optional)
     * @param userIDAttribute  (optional)
     * @param useEncryption  (optional)
     * @param createUser  (optional)
     * @param addGroupMemberships  (optional)
     * @param groupMembershipAttribute  (optional)
     * @param defaultGroups  (optional)
     * @param nameIdFormat  (optional)
     * @param synchronizeAttributes  (optional)
     * @param handleLogout  (optional)
     * @param logoutUrl  (optional)
     * @param clockTolerance  (optional)
     * @param digestMethod  (optional)
     * @param signatureMethod  (optional)
     * @param userIntermediatePath  (optional)
     * @param propertylist  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved AEM SAML Configuration </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Default response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSamlConfigurationCall(Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> path, Integer serviceRanking, String idpUrl, String idpCertAlias, Boolean idpHttpRedirect, String serviceProviderEntityId, String assertionConsumerServiceURL, String spPrivateKeyAlias, String keyStorePassword, String defaultRedirectUrl, String userIDAttribute, Boolean useEncryption, Boolean createUser, Boolean addGroupMemberships, String groupMembershipAttribute, List<String> defaultGroups, String nameIdFormat, List<String> synchronizeAttributes, Boolean handleLogout, String logoutUrl, Integer clockTolerance, String digestMethod, String signatureMethod, String userIntermediatePath, List<String> propertylist, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (post != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("post", post));
        }

        if (apply != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apply", apply));
        }

        if (delete != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delete", delete));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        if ($location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$location", $location));
        }

        if (path != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "path", path));
        }

        if (serviceRanking != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service.ranking", serviceRanking));
        }

        if (idpUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idpUrl", idpUrl));
        }

        if (idpCertAlias != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idpCertAlias", idpCertAlias));
        }

        if (idpHttpRedirect != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idpHttpRedirect", idpHttpRedirect));
        }

        if (serviceProviderEntityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceProviderEntityId", serviceProviderEntityId));
        }

        if (assertionConsumerServiceURL != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assertionConsumerServiceURL", assertionConsumerServiceURL));
        }

        if (spPrivateKeyAlias != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("spPrivateKeyAlias", spPrivateKeyAlias));
        }

        if (keyStorePassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyStorePassword", keyStorePassword));
        }

        if (defaultRedirectUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("defaultRedirectUrl", defaultRedirectUrl));
        }

        if (userIDAttribute != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIDAttribute", userIDAttribute));
        }

        if (useEncryption != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useEncryption", useEncryption));
        }

        if (createUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createUser", createUser));
        }

        if (addGroupMemberships != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addGroupMemberships", addGroupMemberships));
        }

        if (groupMembershipAttribute != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupMembershipAttribute", groupMembershipAttribute));
        }

        if (defaultGroups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "defaultGroups", defaultGroups));
        }

        if (nameIdFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameIdFormat", nameIdFormat));
        }

        if (synchronizeAttributes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "synchronizeAttributes", synchronizeAttributes));
        }

        if (handleLogout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("handleLogout", handleLogout));
        }

        if (logoutUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("logoutUrl", logoutUrl));
        }

        if (clockTolerance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clockTolerance", clockTolerance));
        }

        if (digestMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("digestMethod", digestMethod));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signatureMethod", signatureMethod));
        }

        if (userIntermediatePath != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIntermediatePath", userIntermediatePath));
        }

        if (propertylist != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "propertylist", propertylist));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSamlConfigurationValidateBeforeCall(Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> path, Integer serviceRanking, String idpUrl, String idpCertAlias, Boolean idpHttpRedirect, String serviceProviderEntityId, String assertionConsumerServiceURL, String spPrivateKeyAlias, String keyStorePassword, String defaultRedirectUrl, String userIDAttribute, Boolean useEncryption, Boolean createUser, Boolean addGroupMemberships, String groupMembershipAttribute, List<String> defaultGroups, String nameIdFormat, List<String> synchronizeAttributes, Boolean handleLogout, String logoutUrl, Integer clockTolerance, String digestMethod, String signatureMethod, String userIntermediatePath, List<String> propertylist, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = postSamlConfigurationCall(post, apply, delete, action, $location, path, serviceRanking, idpUrl, idpCertAlias, idpHttpRedirect, serviceProviderEntityId, assertionConsumerServiceURL, spPrivateKeyAlias, keyStorePassword, defaultRedirectUrl, userIDAttribute, useEncryption, createUser, addGroupMemberships, groupMembershipAttribute, defaultGroups, nameIdFormat, synchronizeAttributes, handleLogout, logoutUrl, clockTolerance, digestMethod, signatureMethod, userIntermediatePath, propertylist, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param delete  (optional)
     * @param action  (optional)
     * @param $location  (optional)
     * @param path  (optional)
     * @param serviceRanking  (optional)
     * @param idpUrl  (optional)
     * @param idpCertAlias  (optional)
     * @param idpHttpRedirect  (optional)
     * @param serviceProviderEntityId  (optional)
     * @param assertionConsumerServiceURL  (optional)
     * @param spPrivateKeyAlias  (optional)
     * @param keyStorePassword  (optional)
     * @param defaultRedirectUrl  (optional)
     * @param userIDAttribute  (optional)
     * @param useEncryption  (optional)
     * @param createUser  (optional)
     * @param addGroupMemberships  (optional)
     * @param groupMembershipAttribute  (optional)
     * @param defaultGroups  (optional)
     * @param nameIdFormat  (optional)
     * @param synchronizeAttributes  (optional)
     * @param handleLogout  (optional)
     * @param logoutUrl  (optional)
     * @param clockTolerance  (optional)
     * @param digestMethod  (optional)
     * @param signatureMethod  (optional)
     * @param userIntermediatePath  (optional)
     * @param propertylist  (optional)
     * @return SamlConfigurationInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved AEM SAML Configuration </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Default response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public SamlConfigurationInfo postSamlConfiguration(Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> path, Integer serviceRanking, String idpUrl, String idpCertAlias, Boolean idpHttpRedirect, String serviceProviderEntityId, String assertionConsumerServiceURL, String spPrivateKeyAlias, String keyStorePassword, String defaultRedirectUrl, String userIDAttribute, Boolean useEncryption, Boolean createUser, Boolean addGroupMemberships, String groupMembershipAttribute, List<String> defaultGroups, String nameIdFormat, List<String> synchronizeAttributes, Boolean handleLogout, String logoutUrl, Integer clockTolerance, String digestMethod, String signatureMethod, String userIntermediatePath, List<String> propertylist) throws ApiException {
        ApiResponse<SamlConfigurationInfo> localVarResp = postSamlConfigurationWithHttpInfo(post, apply, delete, action, $location, path, serviceRanking, idpUrl, idpCertAlias, idpHttpRedirect, serviceProviderEntityId, assertionConsumerServiceURL, spPrivateKeyAlias, keyStorePassword, defaultRedirectUrl, userIDAttribute, useEncryption, createUser, addGroupMemberships, groupMembershipAttribute, defaultGroups, nameIdFormat, synchronizeAttributes, handleLogout, logoutUrl, clockTolerance, digestMethod, signatureMethod, userIntermediatePath, propertylist);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param delete  (optional)
     * @param action  (optional)
     * @param $location  (optional)
     * @param path  (optional)
     * @param serviceRanking  (optional)
     * @param idpUrl  (optional)
     * @param idpCertAlias  (optional)
     * @param idpHttpRedirect  (optional)
     * @param serviceProviderEntityId  (optional)
     * @param assertionConsumerServiceURL  (optional)
     * @param spPrivateKeyAlias  (optional)
     * @param keyStorePassword  (optional)
     * @param defaultRedirectUrl  (optional)
     * @param userIDAttribute  (optional)
     * @param useEncryption  (optional)
     * @param createUser  (optional)
     * @param addGroupMemberships  (optional)
     * @param groupMembershipAttribute  (optional)
     * @param defaultGroups  (optional)
     * @param nameIdFormat  (optional)
     * @param synchronizeAttributes  (optional)
     * @param handleLogout  (optional)
     * @param logoutUrl  (optional)
     * @param clockTolerance  (optional)
     * @param digestMethod  (optional)
     * @param signatureMethod  (optional)
     * @param userIntermediatePath  (optional)
     * @param propertylist  (optional)
     * @return ApiResponse&lt;SamlConfigurationInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved AEM SAML Configuration </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Default response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SamlConfigurationInfo> postSamlConfigurationWithHttpInfo(Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> path, Integer serviceRanking, String idpUrl, String idpCertAlias, Boolean idpHttpRedirect, String serviceProviderEntityId, String assertionConsumerServiceURL, String spPrivateKeyAlias, String keyStorePassword, String defaultRedirectUrl, String userIDAttribute, Boolean useEncryption, Boolean createUser, Boolean addGroupMemberships, String groupMembershipAttribute, List<String> defaultGroups, String nameIdFormat, List<String> synchronizeAttributes, Boolean handleLogout, String logoutUrl, Integer clockTolerance, String digestMethod, String signatureMethod, String userIntermediatePath, List<String> propertylist) throws ApiException {
        okhttp3.Call localVarCall = postSamlConfigurationValidateBeforeCall(post, apply, delete, action, $location, path, serviceRanking, idpUrl, idpCertAlias, idpHttpRedirect, serviceProviderEntityId, assertionConsumerServiceURL, spPrivateKeyAlias, keyStorePassword, defaultRedirectUrl, userIDAttribute, useEncryption, createUser, addGroupMemberships, groupMembershipAttribute, defaultGroups, nameIdFormat, synchronizeAttributes, handleLogout, logoutUrl, clockTolerance, digestMethod, signatureMethod, userIntermediatePath, propertylist, null);
        Type localVarReturnType = new TypeToken<SamlConfigurationInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param delete  (optional)
     * @param action  (optional)
     * @param $location  (optional)
     * @param path  (optional)
     * @param serviceRanking  (optional)
     * @param idpUrl  (optional)
     * @param idpCertAlias  (optional)
     * @param idpHttpRedirect  (optional)
     * @param serviceProviderEntityId  (optional)
     * @param assertionConsumerServiceURL  (optional)
     * @param spPrivateKeyAlias  (optional)
     * @param keyStorePassword  (optional)
     * @param defaultRedirectUrl  (optional)
     * @param userIDAttribute  (optional)
     * @param useEncryption  (optional)
     * @param createUser  (optional)
     * @param addGroupMemberships  (optional)
     * @param groupMembershipAttribute  (optional)
     * @param defaultGroups  (optional)
     * @param nameIdFormat  (optional)
     * @param synchronizeAttributes  (optional)
     * @param handleLogout  (optional)
     * @param logoutUrl  (optional)
     * @param clockTolerance  (optional)
     * @param digestMethod  (optional)
     * @param signatureMethod  (optional)
     * @param userIntermediatePath  (optional)
     * @param propertylist  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved AEM SAML Configuration </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Default response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSamlConfigurationAsync(Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> path, Integer serviceRanking, String idpUrl, String idpCertAlias, Boolean idpHttpRedirect, String serviceProviderEntityId, String assertionConsumerServiceURL, String spPrivateKeyAlias, String keyStorePassword, String defaultRedirectUrl, String userIDAttribute, Boolean useEncryption, Boolean createUser, Boolean addGroupMemberships, String groupMembershipAttribute, List<String> defaultGroups, String nameIdFormat, List<String> synchronizeAttributes, Boolean handleLogout, String logoutUrl, Integer clockTolerance, String digestMethod, String signatureMethod, String userIntermediatePath, List<String> propertylist, final ApiCallback<SamlConfigurationInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSamlConfigurationValidateBeforeCall(post, apply, delete, action, $location, path, serviceRanking, idpUrl, idpCertAlias, idpHttpRedirect, serviceProviderEntityId, assertionConsumerServiceURL, spPrivateKeyAlias, keyStorePassword, defaultRedirectUrl, userIDAttribute, useEncryption, createUser, addGroupMemberships, groupMembershipAttribute, defaultGroups, nameIdFormat, synchronizeAttributes, handleLogout, logoutUrl, clockTolerance, digestMethod, signatureMethod, userIntermediatePath, propertylist, _callback);
        Type localVarReturnType = new TypeToken<SamlConfigurationInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
