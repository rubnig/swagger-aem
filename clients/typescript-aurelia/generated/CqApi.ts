/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
} from './models';

/**
 * getLoginPage - parameters interface
 */
export interface IGetLoginPageParams {
}

/**
 * postCqActions - parameters interface
 */
export interface IPostCqActionsParams {
  authorizableId: string;
  changelog: string;
}

/**
 * CqApi - API class
 */
@autoinject()
export class CqApi extends Api {

  /**
   * Creates a new CqApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   */
  async getLoginPage(): Promise<string> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/libs/granite/core/content/login.html`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * @param params.authorizableId 
   * @param params.changelog 
   */
  async postCqActions(params: IPostCqActionsParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('postCqActions', params, 'authorizableId');
    this.ensureParamIsSet('postCqActions', params, 'changelog');

    // Create URL to call
    const url = `${this.basePath}/.cqactions.html`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'authorizableId': params['authorizableId'],
        'changelog': params['changelog'],
      })

      // Authentication 'aemAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

