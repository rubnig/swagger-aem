/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  InstallStatus,
} from './models';

/**
 * getCrxdeStatus - parameters interface
 */
export interface IGetCrxdeStatusParams {
}

/**
 * getInstallStatus - parameters interface
 */
export interface IGetInstallStatusParams {
}

/**
 * getPackageManagerServlet - parameters interface
 */
export interface IGetPackageManagerServletParams {
}

/**
 * postPackageService - parameters interface
 */
export interface IPostPackageServiceParams {
  cmd: string;
}

/**
 * postPackageServiceJson - parameters interface
 */
export interface IPostPackageServiceJsonParams {
  path: string;
  cmd: string;
  groupName?: string;
  packageName?: string;
  packageVersion?: string;
  charset?: string;
  force?: boolean;
  recursive?: boolean;
  _package?: any;
}

/**
 * postPackageUpdate - parameters interface
 */
export interface IPostPackageUpdateParams {
  groupName: string;
  packageName: string;
  version: string;
  path: string;
  filter?: string;
  charset?: string;
}

/**
 * postSetPassword - parameters interface
 */
export interface IPostSetPasswordParams {
  old: string;
  plain: string;
  verify: string;
}

/**
 * CrxApi - API class
 */
@autoinject()
export class CrxApi extends Api {

  /**
   * Creates a new CrxApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   */
  async getCrxdeStatus(): Promise<string> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/crx/server/crx.default/jcr:root/.1.json`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'aemAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   */
  async getInstallStatus(): Promise<InstallStatus> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/crx/packmgr/installstatus.jsp`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'aemAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   */
  async getPackageManagerServlet(): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/crx/packmgr/service/script.html`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'aemAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * @param params.cmd 
   */
  async postPackageService(params: IPostPackageServiceParams): Promise<string> {
    // Verify required parameters are set
    this.ensureParamIsSet('postPackageService', params, 'cmd');

    // Create URL to call
    const url = `${this.basePath}/crx/packmgr/service.jsp`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'cmd': params['cmd'],
      })

      // Authentication 'aemAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * @param params.path 
   * @param params.cmd 
   * @param params.groupName 
   * @param params.packageName 
   * @param params.packageVersion 
   * @param params.charset 
   * @param params.force 
   * @param params.recursive 
   * @param params._package 
   */
  async postPackageServiceJson(params: IPostPackageServiceJsonParams): Promise<string> {
    // Verify required parameters are set
    this.ensureParamIsSet('postPackageServiceJson', params, 'path');
    this.ensureParamIsSet('postPackageServiceJson', params, 'cmd');

    // Create URL to call
    const url = `${this.basePath}/crx/packmgr/service/.json/{path}`
      .replace(`{${'path'}}`, encodeURIComponent(`${params['path']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'cmd': params['cmd'],
        'groupName': params['groupName'],
        'packageName': params['packageName'],
        'packageVersion': params['packageVersion'],
        '_charset_': params['charset'],
        'force': params['force'],
        'recursive': params['recursive'],
      })
      // Encode form parameters
      .withHeader('content-type', 'application/x-www-form-urlencoded')
      .withContent(this.queryString({ 
        'package': params['_package'],
      }))

      // Authentication 'aemAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * @param params.groupName 
   * @param params.packageName 
   * @param params.version 
   * @param params.path 
   * @param params.filter 
   * @param params.charset 
   */
  async postPackageUpdate(params: IPostPackageUpdateParams): Promise<string> {
    // Verify required parameters are set
    this.ensureParamIsSet('postPackageUpdate', params, 'groupName');
    this.ensureParamIsSet('postPackageUpdate', params, 'packageName');
    this.ensureParamIsSet('postPackageUpdate', params, 'version');
    this.ensureParamIsSet('postPackageUpdate', params, 'path');

    // Create URL to call
    const url = `${this.basePath}/crx/packmgr/update.jsp`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'groupName': params['groupName'],
        'packageName': params['packageName'],
        'version': params['version'],
        'path': params['path'],
        'filter': params['filter'],
        '_charset_': params['charset'],
      })

      // Authentication 'aemAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * @param params.old 
   * @param params.plain 
   * @param params.verify 
   */
  async postSetPassword(params: IPostSetPasswordParams): Promise<string> {
    // Verify required parameters are set
    this.ensureParamIsSet('postSetPassword', params, 'old');
    this.ensureParamIsSet('postSetPassword', params, 'plain');
    this.ensureParamIsSet('postSetPassword', params, 'verify');

    // Create URL to call
    const url = `${this.basePath}/crx/explorer/ui/setpassword.jsp`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'old': params['old'],
        'plain': params['plain'],
        'verify': params['verify'],
      })

      // Authentication 'aemAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

