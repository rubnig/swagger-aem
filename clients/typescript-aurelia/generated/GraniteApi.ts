/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
} from './models';

/**
 * sslSetup - parameters interface
 */
export interface ISslSetupParams {
  keystorePassword: string;
  keystorePasswordConfirm: string;
  truststorePassword: string;
  truststorePasswordConfirm: string;
  httpsHostname: string;
  httpsPort: string;
  privatekeyFile?: any;
  certificateFile?: any;
}

/**
 * GraniteApi - API class
 */
@autoinject()
export class GraniteApi extends Api {

  /**
   * Creates a new GraniteApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * @param params.keystorePassword 
   * @param params.keystorePasswordConfirm 
   * @param params.truststorePassword 
   * @param params.truststorePasswordConfirm 
   * @param params.httpsHostname 
   * @param params.httpsPort 
   * @param params.privatekeyFile 
   * @param params.certificateFile 
   */
  async sslSetup(params: ISslSetupParams): Promise<string> {
    // Verify required parameters are set
    this.ensureParamIsSet('sslSetup', params, 'keystorePassword');
    this.ensureParamIsSet('sslSetup', params, 'keystorePasswordConfirm');
    this.ensureParamIsSet('sslSetup', params, 'truststorePassword');
    this.ensureParamIsSet('sslSetup', params, 'truststorePasswordConfirm');
    this.ensureParamIsSet('sslSetup', params, 'httpsHostname');
    this.ensureParamIsSet('sslSetup', params, 'httpsPort');

    // Create URL to call
    const url = `${this.basePath}/libs/granite/security/post/sslSetup.html`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'keystorePassword': params['keystorePassword'],
        'keystorePasswordConfirm': params['keystorePasswordConfirm'],
        'truststorePassword': params['truststorePassword'],
        'truststorePasswordConfirm': params['truststorePasswordConfirm'],
        'httpsHostname': params['httpsHostname'],
        'httpsPort': params['httpsPort'],
      })
      // Encode form parameters
      .withHeader('content-type', 'application/x-www-form-urlencoded')
      .withContent(this.queryString({ 
        'privatekeyFile': params['privatekeyFile'],
        'certificateFile': params['certificateFile'],
      }))

      // Authentication 'aemAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

