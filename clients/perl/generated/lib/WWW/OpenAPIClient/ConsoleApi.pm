=begin comment

Adobe Experience Manager (AEM) API

Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API

The version of the OpenAPI document: 3.5.0-pre.0
Contact: opensource@shinesolutions.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::ConsoleApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# get_aem_product_info
#
# 
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_aem_product_info' } = { 
        summary => '',
        params => $params,
        returns => 'ARRAY[string]',
        };
}
# @return ARRAY[string]
#
sub get_aem_product_info {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/status-productinfo.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[string]', $response);
    return $_response_object;
}

#
# get_bundle_info
#
# 
# 
# @param string $name  (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_bundle_info' } = { 
        summary => '',
        params => $params,
        returns => 'BundleInfo',
        };
}
# @return BundleInfo
#
sub get_bundle_info {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling get_bundle_info");
    }

    # parse inputs
    my $_resource_path = '/system/console/bundles/{name}.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('BundleInfo', $response);
    return $_response_object;
}

#
# get_config_mgr
#
# 
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_config_mgr' } = { 
        summary => '',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub get_config_mgr {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# post_bundle
#
# 
# 
# @param string $name  (required)
# @param string $action  (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'post_bundle' } = { 
        summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub post_bundle {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling post_bundle");
    }

    # verify the required parameter 'action' is set
    unless (exists $args{'action'}) {
      croak("Missing the required parameter 'action' when calling post_bundle");
    }

    # parse inputs
    my $_resource_path = '/system/console/bundles/{name}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# post_jmx_repository
#
# 
# 
# @param string $action  (required)
{
    my $params = {
    'action' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'post_jmx_repository' } = { 
        summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub post_jmx_repository {
    my ($self, %args) = @_;

    # verify the required parameter 'action' is set
    unless (exists $args{'action'}) {
      croak("Missing the required parameter 'action' when calling post_jmx_repository");
    }

    # parse inputs
    my $_resource_path = '/system/console/jmx/com.adobe.granite:type=Repository/op/{action}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'action'}) {
        my $_base_variable = "{" . "action" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'action'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# post_saml_configuration
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $path  (optional)
# @param int $service/ranking  (optional)
# @param string $idp_url  (optional)
# @param string $idp_cert_alias  (optional)
# @param boolean $idp_http_redirect  (optional)
# @param string $service_provider_entity_id  (optional)
# @param string $assertion_consumer_service_url  (optional)
# @param string $sp_private_key_alias  (optional)
# @param string $key_store_password  (optional)
# @param string $default_redirect_url  (optional)
# @param string $user_id_attribute  (optional)
# @param boolean $use_encryption  (optional)
# @param boolean $create_user  (optional)
# @param boolean $add_group_memberships  (optional)
# @param string $group_membership_attribute  (optional)
# @param ARRAY[string] $default_groups  (optional)
# @param string $name_id_format  (optional)
# @param ARRAY[string] $synchronize_attributes  (optional)
# @param boolean $handle_logout  (optional)
# @param string $logout_url  (optional)
# @param int $clock_tolerance  (optional)
# @param string $digest_method  (optional)
# @param string $signature_method  (optional)
# @param string $user_intermediate_path  (optional)
# @param ARRAY[string] $propertylist  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'path' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'idp_url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'idp_cert_alias' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'idp_http_redirect' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'service_provider_entity_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'assertion_consumer_service_url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sp_private_key_alias' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'key_store_password' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'default_redirect_url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'user_id_attribute' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'use_encryption' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'create_user' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'add_group_memberships' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'group_membership_attribute' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'default_groups' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name_id_format' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'synchronize_attributes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'handle_logout' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'logout_url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'clock_tolerance' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'digest_method' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'signature_method' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'user_intermediate_path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'post_saml_configuration' } = { 
        summary => '',
        params => $params,
        returns => 'SamlConfigurationInfo',
        };
}
# @return SamlConfigurationInfo
#
sub post_saml_configuration {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'path'}) {
        $query_params->{'path'} = $self->{api_client}->to_query_value($args{'path'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'idp_url'}) {
        $query_params->{'idpUrl'} = $self->{api_client}->to_query_value($args{'idp_url'});
    }

    # query params
    if ( exists $args{'idp_cert_alias'}) {
        $query_params->{'idpCertAlias'} = $self->{api_client}->to_query_value($args{'idp_cert_alias'});
    }

    # query params
    if ( exists $args{'idp_http_redirect'}) {
        $query_params->{'idpHttpRedirect'} = $self->{api_client}->to_query_value($args{'idp_http_redirect'});
    }

    # query params
    if ( exists $args{'service_provider_entity_id'}) {
        $query_params->{'serviceProviderEntityId'} = $self->{api_client}->to_query_value($args{'service_provider_entity_id'});
    }

    # query params
    if ( exists $args{'assertion_consumer_service_url'}) {
        $query_params->{'assertionConsumerServiceURL'} = $self->{api_client}->to_query_value($args{'assertion_consumer_service_url'});
    }

    # query params
    if ( exists $args{'sp_private_key_alias'}) {
        $query_params->{'spPrivateKeyAlias'} = $self->{api_client}->to_query_value($args{'sp_private_key_alias'});
    }

    # query params
    if ( exists $args{'key_store_password'}) {
        $query_params->{'keyStorePassword'} = $self->{api_client}->to_query_value($args{'key_store_password'});
    }

    # query params
    if ( exists $args{'default_redirect_url'}) {
        $query_params->{'defaultRedirectUrl'} = $self->{api_client}->to_query_value($args{'default_redirect_url'});
    }

    # query params
    if ( exists $args{'user_id_attribute'}) {
        $query_params->{'userIDAttribute'} = $self->{api_client}->to_query_value($args{'user_id_attribute'});
    }

    # query params
    if ( exists $args{'use_encryption'}) {
        $query_params->{'useEncryption'} = $self->{api_client}->to_query_value($args{'use_encryption'});
    }

    # query params
    if ( exists $args{'create_user'}) {
        $query_params->{'createUser'} = $self->{api_client}->to_query_value($args{'create_user'});
    }

    # query params
    if ( exists $args{'add_group_memberships'}) {
        $query_params->{'addGroupMemberships'} = $self->{api_client}->to_query_value($args{'add_group_memberships'});
    }

    # query params
    if ( exists $args{'group_membership_attribute'}) {
        $query_params->{'groupMembershipAttribute'} = $self->{api_client}->to_query_value($args{'group_membership_attribute'});
    }

    # query params
    if ( exists $args{'default_groups'}) {
        $query_params->{'defaultGroups'} = $self->{api_client}->to_query_value($args{'default_groups'});
    }

    # query params
    if ( exists $args{'name_id_format'}) {
        $query_params->{'nameIdFormat'} = $self->{api_client}->to_query_value($args{'name_id_format'});
    }

    # query params
    if ( exists $args{'synchronize_attributes'}) {
        $query_params->{'synchronizeAttributes'} = $self->{api_client}->to_query_value($args{'synchronize_attributes'});
    }

    # query params
    if ( exists $args{'handle_logout'}) {
        $query_params->{'handleLogout'} = $self->{api_client}->to_query_value($args{'handle_logout'});
    }

    # query params
    if ( exists $args{'logout_url'}) {
        $query_params->{'logoutUrl'} = $self->{api_client}->to_query_value($args{'logout_url'});
    }

    # query params
    if ( exists $args{'clock_tolerance'}) {
        $query_params->{'clockTolerance'} = $self->{api_client}->to_query_value($args{'clock_tolerance'});
    }

    # query params
    if ( exists $args{'digest_method'}) {
        $query_params->{'digestMethod'} = $self->{api_client}->to_query_value($args{'digest_method'});
    }

    # query params
    if ( exists $args{'signature_method'}) {
        $query_params->{'signatureMethod'} = $self->{api_client}->to_query_value($args{'signature_method'});
    }

    # query params
    if ( exists $args{'user_intermediate_path'}) {
        $query_params->{'userIntermediatePath'} = $self->{api_client}->to_query_value($args{'user_intermediate_path'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SamlConfigurationInfo', $response);
    return $_response_object;
}

1;
