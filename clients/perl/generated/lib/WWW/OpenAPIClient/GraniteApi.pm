=begin comment

Adobe Experience Manager (AEM) API

Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API

The version of the OpenAPI document: 3.5.0-pre.0
Contact: opensource@shinesolutions.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::GraniteApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# ssl_setup
#
# 
# 
# @param string $keystore_password  (required)
# @param string $keystore_password_confirm  (required)
# @param string $truststore_password  (required)
# @param string $truststore_password_confirm  (required)
# @param string $https_hostname  (required)
# @param string $https_port  (required)
# @param string $privatekey_file  (optional)
# @param string $certificate_file  (optional)
{
    my $params = {
    'keystore_password' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'keystore_password_confirm' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'truststore_password' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'truststore_password_confirm' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'https_hostname' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'https_port' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'privatekey_file' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'certificate_file' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'ssl_setup' } = { 
        summary => '',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub ssl_setup {
    my ($self, %args) = @_;

    # verify the required parameter 'keystore_password' is set
    unless (exists $args{'keystore_password'}) {
      croak("Missing the required parameter 'keystore_password' when calling ssl_setup");
    }

    # verify the required parameter 'keystore_password_confirm' is set
    unless (exists $args{'keystore_password_confirm'}) {
      croak("Missing the required parameter 'keystore_password_confirm' when calling ssl_setup");
    }

    # verify the required parameter 'truststore_password' is set
    unless (exists $args{'truststore_password'}) {
      croak("Missing the required parameter 'truststore_password' when calling ssl_setup");
    }

    # verify the required parameter 'truststore_password_confirm' is set
    unless (exists $args{'truststore_password_confirm'}) {
      croak("Missing the required parameter 'truststore_password_confirm' when calling ssl_setup");
    }

    # verify the required parameter 'https_hostname' is set
    unless (exists $args{'https_hostname'}) {
      croak("Missing the required parameter 'https_hostname' when calling ssl_setup");
    }

    # verify the required parameter 'https_port' is set
    unless (exists $args{'https_port'}) {
      croak("Missing the required parameter 'https_port' when calling ssl_setup");
    }

    # parse inputs
    my $_resource_path = '/libs/granite/security/post/sslSetup.html';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('multipart/form-data');

    # query params
    if ( exists $args{'keystore_password'}) {
        $query_params->{'keystorePassword'} = $self->{api_client}->to_query_value($args{'keystore_password'});
    }

    # query params
    if ( exists $args{'keystore_password_confirm'}) {
        $query_params->{'keystorePasswordConfirm'} = $self->{api_client}->to_query_value($args{'keystore_password_confirm'});
    }

    # query params
    if ( exists $args{'truststore_password'}) {
        $query_params->{'truststorePassword'} = $self->{api_client}->to_query_value($args{'truststore_password'});
    }

    # query params
    if ( exists $args{'truststore_password_confirm'}) {
        $query_params->{'truststorePasswordConfirm'} = $self->{api_client}->to_query_value($args{'truststore_password_confirm'});
    }

    # query params
    if ( exists $args{'https_hostname'}) {
        $query_params->{'httpsHostname'} = $self->{api_client}->to_query_value($args{'https_hostname'});
    }

    # query params
    if ( exists $args{'https_port'}) {
        $query_params->{'httpsPort'} = $self->{api_client}->to_query_value($args{'https_port'});
    }

    # form params
    if ( exists $args{'privatekey_file'} ) {
        $form_params->{'privatekeyFile'} = [] unless defined $form_params->{'privatekeyFile'};
        push @{$form_params->{'privatekeyFile'}}, $args{'privatekey_file'};
            }
    
    # form params
    if ( exists $args{'certificate_file'} ) {
        $form_params->{'certificateFile'} = [] unless defined $form_params->{'certificateFile'};
        push @{$form_params->{'certificateFile'}}, $args{'certificate_file'};
            }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

1;
