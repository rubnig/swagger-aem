=begin comment

Adobe Experience Manager (AEM) API

Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API

The version of the OpenAPI document: 3.5.0-pre.0
Contact: opensource@shinesolutions.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::CrxApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# get_crxde_status
#
# 
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_crxde_status' } = { 
        summary => '',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub get_crxde_status {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/crx/server/crx.default/jcr:root/.1.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('plain/text');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# get_install_status
#
# 
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_install_status' } = { 
        summary => '',
        params => $params,
        returns => 'InstallStatus',
        };
}
# @return InstallStatus
#
sub get_install_status {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/crx/packmgr/installstatus.jsp';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InstallStatus', $response);
    return $_response_object;
}

#
# get_package_manager_servlet
#
# 
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_package_manager_servlet' } = { 
        summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub get_package_manager_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/crx/packmgr/service/script.html';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/html');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# post_package_service
#
# 
# 
# @param string $cmd  (required)
{
    my $params = {
    'cmd' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'post_package_service' } = { 
        summary => '',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub post_package_service {
    my ($self, %args) = @_;

    # verify the required parameter 'cmd' is set
    unless (exists $args{'cmd'}) {
      croak("Missing the required parameter 'cmd' when calling post_package_service");
    }

    # parse inputs
    my $_resource_path = '/crx/packmgr/service.jsp';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'cmd'}) {
        $query_params->{'cmd'} = $self->{api_client}->to_query_value($args{'cmd'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# post_package_service_json
#
# 
# 
# @param string $path  (required)
# @param string $cmd  (required)
# @param string $group_name  (optional)
# @param string $package_name  (optional)
# @param string $package_version  (optional)
# @param string $_charset_  (optional)
# @param boolean $force  (optional)
# @param boolean $recursive  (optional)
# @param string $package  (optional)
{
    my $params = {
    'path' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'cmd' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'group_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'package_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'package_version' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '_charset_' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'force' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'recursive' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'package' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'post_package_service_json' } = { 
        summary => '',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub post_package_service_json {
    my ($self, %args) = @_;

    # verify the required parameter 'path' is set
    unless (exists $args{'path'}) {
      croak("Missing the required parameter 'path' when calling post_package_service_json");
    }

    # verify the required parameter 'cmd' is set
    unless (exists $args{'cmd'}) {
      croak("Missing the required parameter 'cmd' when calling post_package_service_json");
    }

    # parse inputs
    my $_resource_path = '/crx/packmgr/service/.json/{path}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('multipart/form-data');

    # query params
    if ( exists $args{'cmd'}) {
        $query_params->{'cmd'} = $self->{api_client}->to_query_value($args{'cmd'});
    }

    # query params
    if ( exists $args{'group_name'}) {
        $query_params->{'groupName'} = $self->{api_client}->to_query_value($args{'group_name'});
    }

    # query params
    if ( exists $args{'package_name'}) {
        $query_params->{'packageName'} = $self->{api_client}->to_query_value($args{'package_name'});
    }

    # query params
    if ( exists $args{'package_version'}) {
        $query_params->{'packageVersion'} = $self->{api_client}->to_query_value($args{'package_version'});
    }

    # query params
    if ( exists $args{'_charset_'}) {
        $query_params->{'_charset_'} = $self->{api_client}->to_query_value($args{'_charset_'});
    }

    # query params
    if ( exists $args{'force'}) {
        $query_params->{'force'} = $self->{api_client}->to_query_value($args{'force'});
    }

    # query params
    if ( exists $args{'recursive'}) {
        $query_params->{'recursive'} = $self->{api_client}->to_query_value($args{'recursive'});
    }

    # path params
    if ( exists $args{'path'}) {
        my $_base_variable = "{" . "path" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'path'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'package'} ) {
        $form_params->{'package'} = [] unless defined $form_params->{'package'};
        push @{$form_params->{'package'}}, $args{'package'};
            }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# post_package_update
#
# 
# 
# @param string $group_name  (required)
# @param string $package_name  (required)
# @param string $version  (required)
# @param string $path  (required)
# @param string $filter  (optional)
# @param string $_charset_  (optional)
{
    my $params = {
    'group_name' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'package_name' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'version' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'path' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'filter' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '_charset_' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'post_package_update' } = { 
        summary => '',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub post_package_update {
    my ($self, %args) = @_;

    # verify the required parameter 'group_name' is set
    unless (exists $args{'group_name'}) {
      croak("Missing the required parameter 'group_name' when calling post_package_update");
    }

    # verify the required parameter 'package_name' is set
    unless (exists $args{'package_name'}) {
      croak("Missing the required parameter 'package_name' when calling post_package_update");
    }

    # verify the required parameter 'version' is set
    unless (exists $args{'version'}) {
      croak("Missing the required parameter 'version' when calling post_package_update");
    }

    # verify the required parameter 'path' is set
    unless (exists $args{'path'}) {
      croak("Missing the required parameter 'path' when calling post_package_update");
    }

    # parse inputs
    my $_resource_path = '/crx/packmgr/update.jsp';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'group_name'}) {
        $query_params->{'groupName'} = $self->{api_client}->to_query_value($args{'group_name'});
    }

    # query params
    if ( exists $args{'package_name'}) {
        $query_params->{'packageName'} = $self->{api_client}->to_query_value($args{'package_name'});
    }

    # query params
    if ( exists $args{'version'}) {
        $query_params->{'version'} = $self->{api_client}->to_query_value($args{'version'});
    }

    # query params
    if ( exists $args{'path'}) {
        $query_params->{'path'} = $self->{api_client}->to_query_value($args{'path'});
    }

    # query params
    if ( exists $args{'filter'}) {
        $query_params->{'filter'} = $self->{api_client}->to_query_value($args{'filter'});
    }

    # query params
    if ( exists $args{'_charset_'}) {
        $query_params->{'_charset_'} = $self->{api_client}->to_query_value($args{'_charset_'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# post_set_password
#
# 
# 
# @param string $old  (required)
# @param string $plain  (required)
# @param string $verify  (required)
{
    my $params = {
    'old' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'plain' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'verify' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'post_set_password' } = { 
        summary => '',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub post_set_password {
    my ($self, %args) = @_;

    # verify the required parameter 'old' is set
    unless (exists $args{'old'}) {
      croak("Missing the required parameter 'old' when calling post_set_password");
    }

    # verify the required parameter 'plain' is set
    unless (exists $args{'plain'}) {
      croak("Missing the required parameter 'plain' when calling post_set_password");
    }

    # verify the required parameter 'verify' is set
    unless (exists $args{'verify'}) {
      croak("Missing the required parameter 'verify' when calling post_set_password");
    }

    # parse inputs
    my $_resource_path = '/crx/explorer/ui/setpassword.jsp';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'old'}) {
        $query_params->{'old'} = $self->{api_client}->to_query_value($args{'old'});
    }

    # query params
    if ( exists $args{'plain'}) {
        $query_params->{'plain'} = $self->{api_client}->to_query_value($args{'plain'});
    }

    # query params
    if ( exists $args{'verify'}) {
        $query_params->{'verify'} = $self->{api_client}->to_query_value($args{'verify'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

1;
