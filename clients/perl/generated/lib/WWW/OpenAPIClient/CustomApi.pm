=begin comment

Adobe Experience Manager (AEM) API

Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API

The version of the OpenAPI document: 3.5.0-pre.0
Contact: opensource@shinesolutions.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::CustomApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# get_aem_health_check
#
# 
# 
# @param string $tags  (optional)
# @param boolean $combine_tags_or  (optional)
{
    my $params = {
    'tags' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'combine_tags_or' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_aem_health_check' } = { 
        summary => '',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub get_aem_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/health';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'tags'}) {
        $query_params->{'tags'} = $self->{api_client}->to_query_value($args{'tags'});
    }

    # query params
    if ( exists $args{'combine_tags_or'}) {
        $query_params->{'combineTagsOr'} = $self->{api_client}->to_query_value($args{'combine_tags_or'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# post_config_aem_health_check_servlet
#
# 
# 
# @param ARRAY[string] $bundles/ignored  (optional)
# @param string $bundles/ignored@type_hint  (optional)
{
    my $params = {
    'bundles/ignored' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'bundles/ignored@type_hint' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'post_config_aem_health_check_servlet' } = { 
        summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub post_config_aem_health_check_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'bundles/ignored'}) {
        $query_params->{'bundles.ignored'} = $self->{api_client}->to_query_value($args{'bundles/ignored'});
    }

    # query params
    if ( exists $args{'bundles/ignored@type_hint'}) {
        $query_params->{'bundles.ignored@TypeHint'} = $self->{api_client}->to_query_value($args{'bundles/ignored@type_hint'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# post_config_aem_password_reset
#
# 
# 
# @param ARRAY[string] $pwdreset/authorizables  (optional)
# @param string $pwdreset/authorizables@type_hint  (optional)
{
    my $params = {
    'pwdreset/authorizables' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'pwdreset/authorizables@type_hint' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'post_config_aem_password_reset' } = { 
        summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub post_config_aem_password_reset {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/apps/system/config/com.shinesolutions.aem.passwordreset.Activator';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'pwdreset/authorizables'}) {
        $query_params->{'pwdreset.authorizables'} = $self->{api_client}->to_query_value($args{'pwdreset/authorizables'});
    }

    # query params
    if ( exists $args{'pwdreset/authorizables@type_hint'}) {
        $query_params->{'pwdreset.authorizables@TypeHint'} = $self->{api_client}->to_query_value($args{'pwdreset/authorizables@type_hint'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
