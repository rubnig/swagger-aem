/**
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis


import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class CustomApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("org.openapitools.client.baseUrl", "http://localhost")
        }
    }

    /**
    * 
    * 
    * @param tags  (optional)
    * @param combineTagsOr  (optional)
    * @return kotlin.String
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getAemHealthCheck(tags: kotlin.String?, combineTagsOr: kotlin.Boolean?) : kotlin.String {
        val localVariableConfig = getAemHealthCheckRequestConfig(tags = tags, combineTagsOr = combineTagsOr)

        val localVarResponse = request<Unit, kotlin.String>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getAemHealthCheck
    *
    * @param tags  (optional)
    * @param combineTagsOr  (optional)
    * @return RequestConfig
    */
    fun getAemHealthCheckRequestConfig(tags: kotlin.String?, combineTagsOr: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (tags != null) {
                    put("tags", listOf(tags.toString()))
                }
                if (combineTagsOr != null) {
                    put("combineTagsOr", listOf(combineTagsOr.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/system/health",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param bundlesIgnored  (optional)
    * @param bundlesIgnoredAtTypeHint  (optional)
    * @return void
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postConfigAemHealthCheckServlet(bundlesIgnored: kotlin.collections.List<kotlin.String>?, bundlesIgnoredAtTypeHint: kotlin.String?) : Unit {
        val localVariableConfig = postConfigAemHealthCheckServletRequestConfig(bundlesIgnored = bundlesIgnored, bundlesIgnoredAtTypeHint = bundlesIgnoredAtTypeHint)

        val localVarResponse = request<Unit, Unit>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation postConfigAemHealthCheckServlet
    *
    * @param bundlesIgnored  (optional)
    * @param bundlesIgnoredAtTypeHint  (optional)
    * @return RequestConfig
    */
    fun postConfigAemHealthCheckServletRequestConfig(bundlesIgnored: kotlin.collections.List<kotlin.String>?, bundlesIgnoredAtTypeHint: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (bundlesIgnored != null) {
                    put("bundles.ignored", toMultiValue(bundlesIgnored.toList(), "multi"))
                }
                if (bundlesIgnoredAtTypeHint != null) {
                    put("bundles.ignored@TypeHint", listOf(bundlesIgnoredAtTypeHint.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param pwdresetAuthorizables  (optional)
    * @param pwdresetAuthorizablesAtTypeHint  (optional)
    * @return void
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postConfigAemPasswordReset(pwdresetAuthorizables: kotlin.collections.List<kotlin.String>?, pwdresetAuthorizablesAtTypeHint: kotlin.String?) : Unit {
        val localVariableConfig = postConfigAemPasswordResetRequestConfig(pwdresetAuthorizables = pwdresetAuthorizables, pwdresetAuthorizablesAtTypeHint = pwdresetAuthorizablesAtTypeHint)

        val localVarResponse = request<Unit, Unit>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation postConfigAemPasswordReset
    *
    * @param pwdresetAuthorizables  (optional)
    * @param pwdresetAuthorizablesAtTypeHint  (optional)
    * @return RequestConfig
    */
    fun postConfigAemPasswordResetRequestConfig(pwdresetAuthorizables: kotlin.collections.List<kotlin.String>?, pwdresetAuthorizablesAtTypeHint: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (pwdresetAuthorizables != null) {
                    put("pwdreset.authorizables", toMultiValue(pwdresetAuthorizables.toList(), "multi"))
                }
                if (pwdresetAuthorizablesAtTypeHint != null) {
                    put("pwdreset.authorizables@TypeHint", listOf(pwdresetAuthorizablesAtTypeHint.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/apps/system/config/com.shinesolutions.aem.passwordreset.Activator",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
