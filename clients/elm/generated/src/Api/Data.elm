{-
   Adobe Experience Manager (AEM) API
   Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API

   The version of the OpenAPI document: 3.5.0-pre.0
   Contact: opensource@shinesolutions.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( BundleData
    , BundleDataProp
    , BundleInfo
    , InstallStatus
    , InstallStatusStatus
    , KeystoreChainItems
    , KeystoreInfo
    , KeystoreItems
    , SamlConfigurationInfo
    , SamlConfigurationProperties
    , SamlConfigurationPropertyItemsArray
    , SamlConfigurationPropertyItemsBoolean
    , SamlConfigurationPropertyItemsLong
    , SamlConfigurationPropertyItemsString
    , TruststoreInfo
    , TruststoreItems
    , encodeBundleData
    , encodeBundleDataProp
    , encodeBundleInfo
    , encodeInstallStatus
    , encodeInstallStatusStatus
    , encodeKeystoreChainItems
    , encodeKeystoreInfo
    , encodeKeystoreItems
    , encodeSamlConfigurationInfo
    , encodeSamlConfigurationProperties
    , encodeSamlConfigurationPropertyItemsArray
    , encodeSamlConfigurationPropertyItemsBoolean
    , encodeSamlConfigurationPropertyItemsLong
    , encodeSamlConfigurationPropertyItemsString
    , encodeTruststoreInfo
    , encodeTruststoreItems
    , bundleDataDecoder
    , bundleDataPropDecoder
    , bundleInfoDecoder
    , installStatusDecoder
    , installStatusStatusDecoder
    , keystoreChainItemsDecoder
    , keystoreInfoDecoder
    , keystoreItemsDecoder
    , samlConfigurationInfoDecoder
    , samlConfigurationPropertiesDecoder
    , samlConfigurationPropertyItemsArrayDecoder
    , samlConfigurationPropertyItemsBooleanDecoder
    , samlConfigurationPropertyItemsLongDecoder
    , samlConfigurationPropertyItemsStringDecoder
    , truststoreInfoDecoder
    , truststoreItemsDecoder
    )

import Api
import Dict
import Json.Decode
import Json.Encode


-- MODEL


type alias BundleData =
    { id : Maybe Int
    , name : Maybe String
    , fragment : Maybe Bool
    , stateRaw : Maybe Int
    , state : Maybe String
    , version : Maybe String
    , symbolicName : Maybe String
    , category : Maybe String
    , props : Maybe (List (BundleDataProp))
    }


type alias BundleDataProp =
    { key : Maybe String
    , value : Maybe String
    }


type alias BundleInfo =
    { status : Maybe String
    , s : Maybe (List (Int))
    , data : Maybe (List (BundleData))
    }


type alias InstallStatus =
    { status : Maybe InstallStatusStatus
    }


type alias InstallStatusStatus =
    { finished : Maybe Bool
    , itemCount : Maybe Int
    }


type alias KeystoreChainItems =
    { subject : Maybe String
    , issuer : Maybe String
    , notBefore : Maybe String
    , notAfter : Maybe String
    , serialNumber : Maybe Int
    }


type alias KeystoreInfo =
    { aliases : Maybe (List (KeystoreItems))
    , exists : Maybe Bool
    }


type alias KeystoreItems =
    { alias : Maybe String
    , entryType : Maybe String
    , algorithm : Maybe String
    , format : Maybe String
    , chain : Maybe (List (KeystoreChainItems))
    }


type alias SamlConfigurationInfo =
    { pid : Maybe String
    , title : Maybe String
    , description : Maybe String
    , bundleLocation : Maybe String
    , serviceLocation : Maybe String
    , properties : Maybe SamlConfigurationProperties
    }


type alias SamlConfigurationProperties =
    { path : Maybe SamlConfigurationPropertyItemsArray
    , serviceranking : Maybe SamlConfigurationPropertyItemsLong
    , idpUrl : Maybe SamlConfigurationPropertyItemsString
    , idpCertAlias : Maybe SamlConfigurationPropertyItemsString
    , idpHttpRedirect : Maybe SamlConfigurationPropertyItemsBoolean
    , serviceProviderEntityId : Maybe SamlConfigurationPropertyItemsString
    , assertionConsumerServiceURL : Maybe SamlConfigurationPropertyItemsString
    , spPrivateKeyAlias : Maybe SamlConfigurationPropertyItemsString
    , keyStorePassword : Maybe SamlConfigurationPropertyItemsString
    , defaultRedirectUrl : Maybe SamlConfigurationPropertyItemsString
    , userIDAttribute : Maybe SamlConfigurationPropertyItemsString
    , useEncryption : Maybe SamlConfigurationPropertyItemsBoolean
    , createUser : Maybe SamlConfigurationPropertyItemsBoolean
    , addGroupMemberships : Maybe SamlConfigurationPropertyItemsBoolean
    , groupMembershipAttribute : Maybe SamlConfigurationPropertyItemsString
    , defaultGroups : Maybe SamlConfigurationPropertyItemsArray
    , nameIdFormat : Maybe SamlConfigurationPropertyItemsString
    , synchronizeAttributes : Maybe SamlConfigurationPropertyItemsArray
    , handleLogout : Maybe SamlConfigurationPropertyItemsBoolean
    , logoutUrl : Maybe SamlConfigurationPropertyItemsString
    , clockTolerance : Maybe SamlConfigurationPropertyItemsLong
    , digestMethod : Maybe SamlConfigurationPropertyItemsString
    , signatureMethod : Maybe SamlConfigurationPropertyItemsString
    , userIntermediatePath : Maybe SamlConfigurationPropertyItemsString
    }


type alias SamlConfigurationPropertyItemsArray =
    { name : Maybe String
    , optional : Maybe Bool
    , isSet : Maybe Bool
    , type_ : Maybe Int
    , values : Maybe (List (String))
    , description : Maybe String
    }


type alias SamlConfigurationPropertyItemsBoolean =
    { name : Maybe String
    , optional : Maybe Bool
    , isSet : Maybe Bool
    , type_ : Maybe Int
    , value : Maybe Bool
    , description : Maybe String
    }


type alias SamlConfigurationPropertyItemsLong =
    { name : Maybe String
    , optional : Maybe Bool
    , isSet : Maybe Bool
    , type_ : Maybe Int
    , value : Maybe Int
    , description : Maybe String
    }


type alias SamlConfigurationPropertyItemsString =
    { name : Maybe String
    , optional : Maybe Bool
    , isSet : Maybe Bool
    , type_ : Maybe Int
    , value : Maybe String
    , description : Maybe String
    }


type alias TruststoreInfo =
    { aliases : Maybe (List (TruststoreItems))
    , exists : Maybe Bool
    }


type alias TruststoreItems =
    { alias : Maybe String
    , entryType : Maybe String
    , subject : Maybe String
    , issuer : Maybe String
    , notBefore : Maybe String
    , notAfter : Maybe String
    , serialNumber : Maybe Int
    }


-- ENCODER


encodeBundleData : BundleData -> Json.Encode.Value
encodeBundleData =
    encodeObject << encodeBundleDataPairs


encodeBundleDataWithTag : ( String, String ) -> BundleData -> Json.Encode.Value
encodeBundleDataWithTag (tagField, tag) model =
    encodeObject (encodeBundleDataPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeBundleDataPairs : BundleData -> List EncodedField
encodeBundleDataPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "fragment" Json.Encode.bool model.fragment
            , maybeEncode "stateRaw" Json.Encode.int model.stateRaw
            , maybeEncode "state" Json.Encode.string model.state
            , maybeEncode "version" Json.Encode.string model.version
            , maybeEncode "symbolicName" Json.Encode.string model.symbolicName
            , maybeEncode "category" Json.Encode.string model.category
            , maybeEncode "props" (Json.Encode.list encodeBundleDataProp) model.props
            ]
    in
    pairs


encodeBundleDataProp : BundleDataProp -> Json.Encode.Value
encodeBundleDataProp =
    encodeObject << encodeBundleDataPropPairs


encodeBundleDataPropWithTag : ( String, String ) -> BundleDataProp -> Json.Encode.Value
encodeBundleDataPropWithTag (tagField, tag) model =
    encodeObject (encodeBundleDataPropPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeBundleDataPropPairs : BundleDataProp -> List EncodedField
encodeBundleDataPropPairs model =
    let
        pairs =
            [ maybeEncode "key" Json.Encode.string model.key
            , maybeEncode "value" Json.Encode.string model.value
            ]
    in
    pairs


encodeBundleInfo : BundleInfo -> Json.Encode.Value
encodeBundleInfo =
    encodeObject << encodeBundleInfoPairs


encodeBundleInfoWithTag : ( String, String ) -> BundleInfo -> Json.Encode.Value
encodeBundleInfoWithTag (tagField, tag) model =
    encodeObject (encodeBundleInfoPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeBundleInfoPairs : BundleInfo -> List EncodedField
encodeBundleInfoPairs model =
    let
        pairs =
            [ maybeEncode "status" Json.Encode.string model.status
            , maybeEncode "s" (Json.Encode.list Json.Encode.int) model.s
            , maybeEncode "data" (Json.Encode.list encodeBundleData) model.data
            ]
    in
    pairs


encodeInstallStatus : InstallStatus -> Json.Encode.Value
encodeInstallStatus =
    encodeObject << encodeInstallStatusPairs


encodeInstallStatusWithTag : ( String, String ) -> InstallStatus -> Json.Encode.Value
encodeInstallStatusWithTag (tagField, tag) model =
    encodeObject (encodeInstallStatusPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInstallStatusPairs : InstallStatus -> List EncodedField
encodeInstallStatusPairs model =
    let
        pairs =
            [ maybeEncode "status" encodeInstallStatusStatus model.status
            ]
    in
    pairs


encodeInstallStatusStatus : InstallStatusStatus -> Json.Encode.Value
encodeInstallStatusStatus =
    encodeObject << encodeInstallStatusStatusPairs


encodeInstallStatusStatusWithTag : ( String, String ) -> InstallStatusStatus -> Json.Encode.Value
encodeInstallStatusStatusWithTag (tagField, tag) model =
    encodeObject (encodeInstallStatusStatusPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInstallStatusStatusPairs : InstallStatusStatus -> List EncodedField
encodeInstallStatusStatusPairs model =
    let
        pairs =
            [ maybeEncode "finished" Json.Encode.bool model.finished
            , maybeEncode "itemCount" Json.Encode.int model.itemCount
            ]
    in
    pairs


encodeKeystoreChainItems : KeystoreChainItems -> Json.Encode.Value
encodeKeystoreChainItems =
    encodeObject << encodeKeystoreChainItemsPairs


encodeKeystoreChainItemsWithTag : ( String, String ) -> KeystoreChainItems -> Json.Encode.Value
encodeKeystoreChainItemsWithTag (tagField, tag) model =
    encodeObject (encodeKeystoreChainItemsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeKeystoreChainItemsPairs : KeystoreChainItems -> List EncodedField
encodeKeystoreChainItemsPairs model =
    let
        pairs =
            [ maybeEncode "subject" Json.Encode.string model.subject
            , maybeEncode "issuer" Json.Encode.string model.issuer
            , maybeEncode "notBefore" Json.Encode.string model.notBefore
            , maybeEncode "notAfter" Json.Encode.string model.notAfter
            , maybeEncode "serialNumber" Json.Encode.int model.serialNumber
            ]
    in
    pairs


encodeKeystoreInfo : KeystoreInfo -> Json.Encode.Value
encodeKeystoreInfo =
    encodeObject << encodeKeystoreInfoPairs


encodeKeystoreInfoWithTag : ( String, String ) -> KeystoreInfo -> Json.Encode.Value
encodeKeystoreInfoWithTag (tagField, tag) model =
    encodeObject (encodeKeystoreInfoPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeKeystoreInfoPairs : KeystoreInfo -> List EncodedField
encodeKeystoreInfoPairs model =
    let
        pairs =
            [ maybeEncode "aliases" (Json.Encode.list encodeKeystoreItems) model.aliases
            , maybeEncode "exists" Json.Encode.bool model.exists
            ]
    in
    pairs


encodeKeystoreItems : KeystoreItems -> Json.Encode.Value
encodeKeystoreItems =
    encodeObject << encodeKeystoreItemsPairs


encodeKeystoreItemsWithTag : ( String, String ) -> KeystoreItems -> Json.Encode.Value
encodeKeystoreItemsWithTag (tagField, tag) model =
    encodeObject (encodeKeystoreItemsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeKeystoreItemsPairs : KeystoreItems -> List EncodedField
encodeKeystoreItemsPairs model =
    let
        pairs =
            [ maybeEncode "alias" Json.Encode.string model.alias
            , maybeEncode "entryType" Json.Encode.string model.entryType
            , maybeEncode "algorithm" Json.Encode.string model.algorithm
            , maybeEncode "format" Json.Encode.string model.format
            , maybeEncode "chain" (Json.Encode.list encodeKeystoreChainItems) model.chain
            ]
    in
    pairs


encodeSamlConfigurationInfo : SamlConfigurationInfo -> Json.Encode.Value
encodeSamlConfigurationInfo =
    encodeObject << encodeSamlConfigurationInfoPairs


encodeSamlConfigurationInfoWithTag : ( String, String ) -> SamlConfigurationInfo -> Json.Encode.Value
encodeSamlConfigurationInfoWithTag (tagField, tag) model =
    encodeObject (encodeSamlConfigurationInfoPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSamlConfigurationInfoPairs : SamlConfigurationInfo -> List EncodedField
encodeSamlConfigurationInfoPairs model =
    let
        pairs =
            [ maybeEncode "pid" Json.Encode.string model.pid
            , maybeEncode "title" Json.Encode.string model.title
            , maybeEncode "description" Json.Encode.string model.description
            , maybeEncode "bundle_location" Json.Encode.string model.bundleLocation
            , maybeEncode "service_location" Json.Encode.string model.serviceLocation
            , maybeEncode "properties" encodeSamlConfigurationProperties model.properties
            ]
    in
    pairs


encodeSamlConfigurationProperties : SamlConfigurationProperties -> Json.Encode.Value
encodeSamlConfigurationProperties =
    encodeObject << encodeSamlConfigurationPropertiesPairs


encodeSamlConfigurationPropertiesWithTag : ( String, String ) -> SamlConfigurationProperties -> Json.Encode.Value
encodeSamlConfigurationPropertiesWithTag (tagField, tag) model =
    encodeObject (encodeSamlConfigurationPropertiesPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSamlConfigurationPropertiesPairs : SamlConfigurationProperties -> List EncodedField
encodeSamlConfigurationPropertiesPairs model =
    let
        pairs =
            [ maybeEncode "path" encodeSamlConfigurationPropertyItemsArray model.path
            , maybeEncode "service.ranking" encodeSamlConfigurationPropertyItemsLong model.serviceranking
            , maybeEncode "idpUrl" encodeSamlConfigurationPropertyItemsString model.idpUrl
            , maybeEncode "idpCertAlias" encodeSamlConfigurationPropertyItemsString model.idpCertAlias
            , maybeEncode "idpHttpRedirect" encodeSamlConfigurationPropertyItemsBoolean model.idpHttpRedirect
            , maybeEncode "serviceProviderEntityId" encodeSamlConfigurationPropertyItemsString model.serviceProviderEntityId
            , maybeEncode "assertionConsumerServiceURL" encodeSamlConfigurationPropertyItemsString model.assertionConsumerServiceURL
            , maybeEncode "spPrivateKeyAlias" encodeSamlConfigurationPropertyItemsString model.spPrivateKeyAlias
            , maybeEncode "keyStorePassword" encodeSamlConfigurationPropertyItemsString model.keyStorePassword
            , maybeEncode "defaultRedirectUrl" encodeSamlConfigurationPropertyItemsString model.defaultRedirectUrl
            , maybeEncode "userIDAttribute" encodeSamlConfigurationPropertyItemsString model.userIDAttribute
            , maybeEncode "useEncryption" encodeSamlConfigurationPropertyItemsBoolean model.useEncryption
            , maybeEncode "createUser" encodeSamlConfigurationPropertyItemsBoolean model.createUser
            , maybeEncode "addGroupMemberships" encodeSamlConfigurationPropertyItemsBoolean model.addGroupMemberships
            , maybeEncode "groupMembershipAttribute" encodeSamlConfigurationPropertyItemsString model.groupMembershipAttribute
            , maybeEncode "defaultGroups" encodeSamlConfigurationPropertyItemsArray model.defaultGroups
            , maybeEncode "nameIdFormat" encodeSamlConfigurationPropertyItemsString model.nameIdFormat
            , maybeEncode "synchronizeAttributes" encodeSamlConfigurationPropertyItemsArray model.synchronizeAttributes
            , maybeEncode "handleLogout" encodeSamlConfigurationPropertyItemsBoolean model.handleLogout
            , maybeEncode "logoutUrl" encodeSamlConfigurationPropertyItemsString model.logoutUrl
            , maybeEncode "clockTolerance" encodeSamlConfigurationPropertyItemsLong model.clockTolerance
            , maybeEncode "digestMethod" encodeSamlConfigurationPropertyItemsString model.digestMethod
            , maybeEncode "signatureMethod" encodeSamlConfigurationPropertyItemsString model.signatureMethod
            , maybeEncode "userIntermediatePath" encodeSamlConfigurationPropertyItemsString model.userIntermediatePath
            ]
    in
    pairs


encodeSamlConfigurationPropertyItemsArray : SamlConfigurationPropertyItemsArray -> Json.Encode.Value
encodeSamlConfigurationPropertyItemsArray =
    encodeObject << encodeSamlConfigurationPropertyItemsArrayPairs


encodeSamlConfigurationPropertyItemsArrayWithTag : ( String, String ) -> SamlConfigurationPropertyItemsArray -> Json.Encode.Value
encodeSamlConfigurationPropertyItemsArrayWithTag (tagField, tag) model =
    encodeObject (encodeSamlConfigurationPropertyItemsArrayPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSamlConfigurationPropertyItemsArrayPairs : SamlConfigurationPropertyItemsArray -> List EncodedField
encodeSamlConfigurationPropertyItemsArrayPairs model =
    let
        pairs =
            [ maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "optional" Json.Encode.bool model.optional
            , maybeEncode "is_set" Json.Encode.bool model.isSet
            , maybeEncode "type" Json.Encode.int model.type_
            , maybeEncode "values" (Json.Encode.list Json.Encode.string) model.values
            , maybeEncode "description" Json.Encode.string model.description
            ]
    in
    pairs


encodeSamlConfigurationPropertyItemsBoolean : SamlConfigurationPropertyItemsBoolean -> Json.Encode.Value
encodeSamlConfigurationPropertyItemsBoolean =
    encodeObject << encodeSamlConfigurationPropertyItemsBooleanPairs


encodeSamlConfigurationPropertyItemsBooleanWithTag : ( String, String ) -> SamlConfigurationPropertyItemsBoolean -> Json.Encode.Value
encodeSamlConfigurationPropertyItemsBooleanWithTag (tagField, tag) model =
    encodeObject (encodeSamlConfigurationPropertyItemsBooleanPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSamlConfigurationPropertyItemsBooleanPairs : SamlConfigurationPropertyItemsBoolean -> List EncodedField
encodeSamlConfigurationPropertyItemsBooleanPairs model =
    let
        pairs =
            [ maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "optional" Json.Encode.bool model.optional
            , maybeEncode "is_set" Json.Encode.bool model.isSet
            , maybeEncode "type" Json.Encode.int model.type_
            , maybeEncode "value" Json.Encode.bool model.value
            , maybeEncode "description" Json.Encode.string model.description
            ]
    in
    pairs


encodeSamlConfigurationPropertyItemsLong : SamlConfigurationPropertyItemsLong -> Json.Encode.Value
encodeSamlConfigurationPropertyItemsLong =
    encodeObject << encodeSamlConfigurationPropertyItemsLongPairs


encodeSamlConfigurationPropertyItemsLongWithTag : ( String, String ) -> SamlConfigurationPropertyItemsLong -> Json.Encode.Value
encodeSamlConfigurationPropertyItemsLongWithTag (tagField, tag) model =
    encodeObject (encodeSamlConfigurationPropertyItemsLongPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSamlConfigurationPropertyItemsLongPairs : SamlConfigurationPropertyItemsLong -> List EncodedField
encodeSamlConfigurationPropertyItemsLongPairs model =
    let
        pairs =
            [ maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "optional" Json.Encode.bool model.optional
            , maybeEncode "is_set" Json.Encode.bool model.isSet
            , maybeEncode "type" Json.Encode.int model.type_
            , maybeEncode "value" Json.Encode.int model.value
            , maybeEncode "description" Json.Encode.string model.description
            ]
    in
    pairs


encodeSamlConfigurationPropertyItemsString : SamlConfigurationPropertyItemsString -> Json.Encode.Value
encodeSamlConfigurationPropertyItemsString =
    encodeObject << encodeSamlConfigurationPropertyItemsStringPairs


encodeSamlConfigurationPropertyItemsStringWithTag : ( String, String ) -> SamlConfigurationPropertyItemsString -> Json.Encode.Value
encodeSamlConfigurationPropertyItemsStringWithTag (tagField, tag) model =
    encodeObject (encodeSamlConfigurationPropertyItemsStringPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSamlConfigurationPropertyItemsStringPairs : SamlConfigurationPropertyItemsString -> List EncodedField
encodeSamlConfigurationPropertyItemsStringPairs model =
    let
        pairs =
            [ maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "optional" Json.Encode.bool model.optional
            , maybeEncode "is_set" Json.Encode.bool model.isSet
            , maybeEncode "type" Json.Encode.int model.type_
            , maybeEncode "value" Json.Encode.string model.value
            , maybeEncode "description" Json.Encode.string model.description
            ]
    in
    pairs


encodeTruststoreInfo : TruststoreInfo -> Json.Encode.Value
encodeTruststoreInfo =
    encodeObject << encodeTruststoreInfoPairs


encodeTruststoreInfoWithTag : ( String, String ) -> TruststoreInfo -> Json.Encode.Value
encodeTruststoreInfoWithTag (tagField, tag) model =
    encodeObject (encodeTruststoreInfoPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTruststoreInfoPairs : TruststoreInfo -> List EncodedField
encodeTruststoreInfoPairs model =
    let
        pairs =
            [ maybeEncode "aliases" (Json.Encode.list encodeTruststoreItems) model.aliases
            , maybeEncode "exists" Json.Encode.bool model.exists
            ]
    in
    pairs


encodeTruststoreItems : TruststoreItems -> Json.Encode.Value
encodeTruststoreItems =
    encodeObject << encodeTruststoreItemsPairs


encodeTruststoreItemsWithTag : ( String, String ) -> TruststoreItems -> Json.Encode.Value
encodeTruststoreItemsWithTag (tagField, tag) model =
    encodeObject (encodeTruststoreItemsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTruststoreItemsPairs : TruststoreItems -> List EncodedField
encodeTruststoreItemsPairs model =
    let
        pairs =
            [ maybeEncode "alias" Json.Encode.string model.alias
            , maybeEncode "entryType" Json.Encode.string model.entryType
            , maybeEncode "subject" Json.Encode.string model.subject
            , maybeEncode "issuer" Json.Encode.string model.issuer
            , maybeEncode "notBefore" Json.Encode.string model.notBefore
            , maybeEncode "notAfter" Json.Encode.string model.notAfter
            , maybeEncode "serialNumber" Json.Encode.int model.serialNumber
            ]
    in
    pairs


-- DECODER


bundleDataDecoder : Json.Decode.Decoder BundleData
bundleDataDecoder =
    Json.Decode.succeed BundleData
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "fragment" Json.Decode.bool Nothing
        |> maybeDecode "stateRaw" Json.Decode.int Nothing
        |> maybeDecode "state" Json.Decode.string Nothing
        |> maybeDecode "version" Json.Decode.string Nothing
        |> maybeDecode "symbolicName" Json.Decode.string Nothing
        |> maybeDecode "category" Json.Decode.string Nothing
        |> maybeDecode "props" (Json.Decode.list bundleDataPropDecoder) Nothing


bundleDataPropDecoder : Json.Decode.Decoder BundleDataProp
bundleDataPropDecoder =
    Json.Decode.succeed BundleDataProp
        |> maybeDecode "key" Json.Decode.string Nothing
        |> maybeDecode "value" Json.Decode.string Nothing


bundleInfoDecoder : Json.Decode.Decoder BundleInfo
bundleInfoDecoder =
    Json.Decode.succeed BundleInfo
        |> maybeDecode "status" Json.Decode.string Nothing
        |> maybeDecode "s" (Json.Decode.list Json.Decode.int) Nothing
        |> maybeDecode "data" (Json.Decode.list bundleDataDecoder) Nothing


installStatusDecoder : Json.Decode.Decoder InstallStatus
installStatusDecoder =
    Json.Decode.succeed InstallStatus
        |> maybeDecode "status" installStatusStatusDecoder Nothing


installStatusStatusDecoder : Json.Decode.Decoder InstallStatusStatus
installStatusStatusDecoder =
    Json.Decode.succeed InstallStatusStatus
        |> maybeDecode "finished" Json.Decode.bool Nothing
        |> maybeDecode "itemCount" Json.Decode.int Nothing


keystoreChainItemsDecoder : Json.Decode.Decoder KeystoreChainItems
keystoreChainItemsDecoder =
    Json.Decode.succeed KeystoreChainItems
        |> maybeDecode "subject" Json.Decode.string Nothing
        |> maybeDecode "issuer" Json.Decode.string Nothing
        |> maybeDecode "notBefore" Json.Decode.string Nothing
        |> maybeDecode "notAfter" Json.Decode.string Nothing
        |> maybeDecode "serialNumber" Json.Decode.int Nothing


keystoreInfoDecoder : Json.Decode.Decoder KeystoreInfo
keystoreInfoDecoder =
    Json.Decode.succeed KeystoreInfo
        |> maybeDecode "aliases" (Json.Decode.list keystoreItemsDecoder) Nothing
        |> maybeDecode "exists" Json.Decode.bool Nothing


keystoreItemsDecoder : Json.Decode.Decoder KeystoreItems
keystoreItemsDecoder =
    Json.Decode.succeed KeystoreItems
        |> maybeDecode "alias" Json.Decode.string Nothing
        |> maybeDecode "entryType" Json.Decode.string Nothing
        |> maybeDecode "algorithm" Json.Decode.string Nothing
        |> maybeDecode "format" Json.Decode.string Nothing
        |> maybeDecode "chain" (Json.Decode.list keystoreChainItemsDecoder) Nothing


samlConfigurationInfoDecoder : Json.Decode.Decoder SamlConfigurationInfo
samlConfigurationInfoDecoder =
    Json.Decode.succeed SamlConfigurationInfo
        |> maybeDecode "pid" Json.Decode.string Nothing
        |> maybeDecode "title" Json.Decode.string Nothing
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecode "bundle_location" Json.Decode.string Nothing
        |> maybeDecode "service_location" Json.Decode.string Nothing
        |> maybeDecode "properties" samlConfigurationPropertiesDecoder Nothing


samlConfigurationPropertiesDecoder : Json.Decode.Decoder SamlConfigurationProperties
samlConfigurationPropertiesDecoder =
    Json.Decode.succeed SamlConfigurationProperties
        |> maybeDecode "path" samlConfigurationPropertyItemsArrayDecoder Nothing
        |> maybeDecode "service.ranking" samlConfigurationPropertyItemsLongDecoder Nothing
        |> maybeDecode "idpUrl" samlConfigurationPropertyItemsStringDecoder Nothing
        |> maybeDecode "idpCertAlias" samlConfigurationPropertyItemsStringDecoder Nothing
        |> maybeDecode "idpHttpRedirect" samlConfigurationPropertyItemsBooleanDecoder Nothing
        |> maybeDecode "serviceProviderEntityId" samlConfigurationPropertyItemsStringDecoder Nothing
        |> maybeDecode "assertionConsumerServiceURL" samlConfigurationPropertyItemsStringDecoder Nothing
        |> maybeDecode "spPrivateKeyAlias" samlConfigurationPropertyItemsStringDecoder Nothing
        |> maybeDecode "keyStorePassword" samlConfigurationPropertyItemsStringDecoder Nothing
        |> maybeDecode "defaultRedirectUrl" samlConfigurationPropertyItemsStringDecoder Nothing
        |> maybeDecode "userIDAttribute" samlConfigurationPropertyItemsStringDecoder Nothing
        |> maybeDecode "useEncryption" samlConfigurationPropertyItemsBooleanDecoder Nothing
        |> maybeDecode "createUser" samlConfigurationPropertyItemsBooleanDecoder Nothing
        |> maybeDecode "addGroupMemberships" samlConfigurationPropertyItemsBooleanDecoder Nothing
        |> maybeDecode "groupMembershipAttribute" samlConfigurationPropertyItemsStringDecoder Nothing
        |> maybeDecode "defaultGroups" samlConfigurationPropertyItemsArrayDecoder Nothing
        |> maybeDecode "nameIdFormat" samlConfigurationPropertyItemsStringDecoder Nothing
        |> maybeDecode "synchronizeAttributes" samlConfigurationPropertyItemsArrayDecoder Nothing
        |> maybeDecode "handleLogout" samlConfigurationPropertyItemsBooleanDecoder Nothing
        |> maybeDecode "logoutUrl" samlConfigurationPropertyItemsStringDecoder Nothing
        |> maybeDecode "clockTolerance" samlConfigurationPropertyItemsLongDecoder Nothing
        |> maybeDecode "digestMethod" samlConfigurationPropertyItemsStringDecoder Nothing
        |> maybeDecode "signatureMethod" samlConfigurationPropertyItemsStringDecoder Nothing
        |> maybeDecode "userIntermediatePath" samlConfigurationPropertyItemsStringDecoder Nothing


samlConfigurationPropertyItemsArrayDecoder : Json.Decode.Decoder SamlConfigurationPropertyItemsArray
samlConfigurationPropertyItemsArrayDecoder =
    Json.Decode.succeed SamlConfigurationPropertyItemsArray
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "optional" Json.Decode.bool Nothing
        |> maybeDecode "is_set" Json.Decode.bool Nothing
        |> maybeDecode "type" Json.Decode.int Nothing
        |> maybeDecode "values" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "description" Json.Decode.string Nothing


samlConfigurationPropertyItemsBooleanDecoder : Json.Decode.Decoder SamlConfigurationPropertyItemsBoolean
samlConfigurationPropertyItemsBooleanDecoder =
    Json.Decode.succeed SamlConfigurationPropertyItemsBoolean
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "optional" Json.Decode.bool Nothing
        |> maybeDecode "is_set" Json.Decode.bool Nothing
        |> maybeDecode "type" Json.Decode.int Nothing
        |> maybeDecode "value" Json.Decode.bool Nothing
        |> maybeDecode "description" Json.Decode.string Nothing


samlConfigurationPropertyItemsLongDecoder : Json.Decode.Decoder SamlConfigurationPropertyItemsLong
samlConfigurationPropertyItemsLongDecoder =
    Json.Decode.succeed SamlConfigurationPropertyItemsLong
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "optional" Json.Decode.bool Nothing
        |> maybeDecode "is_set" Json.Decode.bool Nothing
        |> maybeDecode "type" Json.Decode.int Nothing
        |> maybeDecode "value" Json.Decode.int Nothing
        |> maybeDecode "description" Json.Decode.string Nothing


samlConfigurationPropertyItemsStringDecoder : Json.Decode.Decoder SamlConfigurationPropertyItemsString
samlConfigurationPropertyItemsStringDecoder =
    Json.Decode.succeed SamlConfigurationPropertyItemsString
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "optional" Json.Decode.bool Nothing
        |> maybeDecode "is_set" Json.Decode.bool Nothing
        |> maybeDecode "type" Json.Decode.int Nothing
        |> maybeDecode "value" Json.Decode.string Nothing
        |> maybeDecode "description" Json.Decode.string Nothing


truststoreInfoDecoder : Json.Decode.Decoder TruststoreInfo
truststoreInfoDecoder =
    Json.Decode.succeed TruststoreInfo
        |> maybeDecode "aliases" (Json.Decode.list truststoreItemsDecoder) Nothing
        |> maybeDecode "exists" Json.Decode.bool Nothing


truststoreItemsDecoder : Json.Decode.Decoder TruststoreItems
truststoreItemsDecoder =
    Json.Decode.succeed TruststoreItems
        |> maybeDecode "alias" Json.Decode.string Nothing
        |> maybeDecode "entryType" Json.Decode.string Nothing
        |> maybeDecode "subject" Json.Decode.string Nothing
        |> maybeDecode "issuer" Json.Decode.string Nothing
        |> maybeDecode "notBefore" Json.Decode.string Nothing
        |> maybeDecode "notAfter" Json.Decode.string Nothing
        |> maybeDecode "serialNumber" Json.Decode.int Nothing




-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f