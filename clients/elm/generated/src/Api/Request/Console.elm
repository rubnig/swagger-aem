{-
   Adobe Experience Manager (AEM) API
   Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API

   The version of the OpenAPI document: 3.5.0-pre.0
   Contact: opensource@shinesolutions.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Request.Console exposing
    ( getAemProductInfo
    , getBundleInfo
    , getConfigMgr
    , postBundle
    , postJmxRepository
    , postSamlConfiguration
    )

import Api
import Api.Data
import Dict
import Http
import Json.Decode
import Json.Encode



getAemProductInfo : Api.Request 
getAemProductInfo =
    Api.request
        "GET"
        "/system/console/status-productinfo.json"
        []
        []
        []
        Nothing
        



getBundleInfo : String -> Api.Request Api.Data.BundleInfo
getBundleInfo name_path =
    Api.request
        "GET"
        "/system/console/bundles/{name}.json"
        [ ( "name", identity name_path ) ]
        []
        []
        Nothing
        Api.Data.bundleInfoDecoder



getConfigMgr : Api.Request String
getConfigMgr =
    Api.request
        "GET"
        "/system/console/configMgr"
        []
        []
        []
        Nothing
        Json.Decode.string



postBundle : String -> String -> Api.Request 
postBundle name_path action_query =
    Api.request
        "POST"
        "/system/console/bundles/{name}"
        [ ( "name", identity name_path ) ]
        [ ( "action", Just <| identity action_query ) ]
        []
        Nothing
        



postJmxRepository : String -> Api.Request 
postJmxRepository action_path =
    Api.request
        "POST"
        "/system/console/jmx/com.adobe.granite:type&#x3D;Repository/op/{action}"
        [ ( "action", identity action_path ) ]
        []
        []
        Nothing
        



postSamlConfiguration : Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe String -> Maybe String -> Maybe List String -> Maybe Int -> Maybe String -> Maybe String -> Maybe Bool -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe String -> Maybe List String -> Maybe String -> Maybe List String -> Maybe Bool -> Maybe String -> Maybe Int -> Maybe String -> Maybe String -> Maybe String -> Maybe List String -> Api.Request Api.Data.SamlConfigurationInfo
postSamlConfiguration post_query apply_query delete_query action_query Dollarlocation_query path_query servicePeriodranking_query idpUrl_query idpCertAlias_query idpHttpRedirect_query serviceProviderEntityId_query assertionConsumerServiceURL_query spPrivateKeyAlias_query keyStorePassword_query defaultRedirectUrl_query userIDAttribute_query useEncryption_query createUser_query addGroupMemberships_query groupMembershipAttribute_query defaultGroups_query nameIdFormat_query synchronizeAttributes_query handleLogout_query logoutUrl_query clockTolerance_query digestMethod_query signatureMethod_query userIntermediatePath_query propertylist_query =
    Api.request
        "POST"
        "/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler"
        []
        [ ( "post", Maybe.map (\val -> if val then "true" else "false") post_query ), ( "apply", Maybe.map (\val -> if val then "true" else "false") apply_query ), ( "delete", Maybe.map (\val -> if val then "true" else "false") delete_query ), ( "action", Maybe.map identity action_query ), ( "$location", Maybe.map identity Dollarlocation_query ), ( "path", Maybe.map String.join "," << List.map identity path_query ), ( "service.ranking", Maybe.map String.fromInt servicePeriodranking_query ), ( "idpUrl", Maybe.map identity idpUrl_query ), ( "idpCertAlias", Maybe.map identity idpCertAlias_query ), ( "idpHttpRedirect", Maybe.map (\val -> if val then "true" else "false") idpHttpRedirect_query ), ( "serviceProviderEntityId", Maybe.map identity serviceProviderEntityId_query ), ( "assertionConsumerServiceURL", Maybe.map identity assertionConsumerServiceURL_query ), ( "spPrivateKeyAlias", Maybe.map identity spPrivateKeyAlias_query ), ( "keyStorePassword", Maybe.map identity keyStorePassword_query ), ( "defaultRedirectUrl", Maybe.map identity defaultRedirectUrl_query ), ( "userIDAttribute", Maybe.map identity userIDAttribute_query ), ( "useEncryption", Maybe.map (\val -> if val then "true" else "false") useEncryption_query ), ( "createUser", Maybe.map (\val -> if val then "true" else "false") createUser_query ), ( "addGroupMemberships", Maybe.map (\val -> if val then "true" else "false") addGroupMemberships_query ), ( "groupMembershipAttribute", Maybe.map identity groupMembershipAttribute_query ), ( "defaultGroups", Maybe.map String.join "," << List.map identity defaultGroups_query ), ( "nameIdFormat", Maybe.map identity nameIdFormat_query ), ( "synchronizeAttributes", Maybe.map String.join "," << List.map identity synchronizeAttributes_query ), ( "handleLogout", Maybe.map (\val -> if val then "true" else "false") handleLogout_query ), ( "logoutUrl", Maybe.map identity logoutUrl_query ), ( "clockTolerance", Maybe.map String.fromInt clockTolerance_query ), ( "digestMethod", Maybe.map identity digestMethod_query ), ( "signatureMethod", Maybe.map identity signatureMethod_query ), ( "userIntermediatePath", Maybe.map identity userIntermediatePath_query ), ( "propertylist", Maybe.map String.join "," << List.map identity propertylist_query ) ]
        []
        Nothing
        Api.Data.samlConfigurationInfoDecoder
