{-
   Adobe Experience Manager (AEM) API
   Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API

   The version of the OpenAPI document: 3.5.0-pre.0
   Contact: opensource@shinesolutions.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Request.Sling exposing
    ( deleteAgent
    , deleteNode
    , getAgent
    , getAgents
    , getAuthorizableKeystore
    , getKeystore
    , getNode
    , getPackage
    , getPackageFilter
    , getQuery
    , getTruststore
    , getTruststoreInfo
    , postAgent
    , postAuthorizableKeystore
    , postAuthorizables
    , postConfigAdobeGraniteSamlAuthenticationHandler
    , postConfigApacheFelixJettyBasedHttpService
    , postConfigApacheHttpComponentsProxyConfiguration
    , postConfigApacheSlingDavExServlet
    , postConfigApacheSlingGetServlet
    , postConfigApacheSlingReferrerFilter
    , postConfigProperty
    , postNode
    , postNodeRw
    , postPath
    , postQuery
    , postTreeActivation
    , postTruststore
    , postTruststorePKCS12
    )

import Api
import Api.Data
import Dict
import Http
import Json.Decode
import Json.Encode



deleteAgent : String -> String -> Api.Request 
deleteAgent runmode_path name_path =
    Api.request
        "DELETE"
        "/etc/replication/agents.{runmode}/{name}"
        [ ( "runmode", identity runmode_path ), ( "name", identity name_path ) ]
        []
        []
        Nothing
        



deleteNode : String -> String -> Api.Request 
deleteNode path_path name_path =
    Api.request
        "DELETE"
        "/{path}/{name}"
        [ ( "path", identity path_path ), ( "name", identity name_path ) ]
        []
        []
        Nothing
        



getAgent : String -> String -> Api.Request 
getAgent runmode_path name_path =
    Api.request
        "GET"
        "/etc/replication/agents.{runmode}/{name}"
        [ ( "runmode", identity runmode_path ), ( "name", identity name_path ) ]
        []
        []
        Nothing
        



getAgents : String -> Api.Request 
getAgents runmode_path =
    Api.request
        "GET"
        "/etc/replication/agents.{runmode}.-1.json"
        [ ( "runmode", identity runmode_path ) ]
        []
        []
        Nothing
        



getAuthorizableKeystore : String -> String -> Api.Request Api.Data.KeystoreInfo
getAuthorizableKeystore intermediatePath_path authorizableId_path =
    Api.request
        "GET"
        "/{intermediatePath}/{authorizableId}.ks.json"
        [ ( "intermediatePath", identity intermediatePath_path ), ( "authorizableId", identity authorizableId_path ) ]
        []
        []
        Nothing
        Api.Data.keystoreInfoDecoder



getKeystore : String -> String -> Api.Request 
getKeystore intermediatePath_path authorizableId_path =
    Api.request
        "GET"
        "/{intermediatePath}/{authorizableId}/keystore/store.p12"
        [ ( "intermediatePath", identity intermediatePath_path ), ( "authorizableId", identity authorizableId_path ) ]
        []
        []
        Nothing
        



getNode : String -> String -> Api.Request 
getNode path_path name_path =
    Api.request
        "GET"
        "/{path}/{name}"
        [ ( "path", identity path_path ), ( "name", identity name_path ) ]
        []
        []
        Nothing
        



getPackage : String -> String -> String -> Api.Request 
getPackage group_path name_path version_path =
    Api.request
        "GET"
        "/etc/packages/{group}/{name}-{version}.zip"
        [ ( "group", identity group_path ), ( "name", identity name_path ), ( "version", identity version_path ) ]
        []
        []
        Nothing
        



getPackageFilter : String -> String -> String -> Api.Request 
getPackageFilter group_path name_path version_path =
    Api.request
        "GET"
        "/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json"
        [ ( "group", identity group_path ), ( "name", identity name_path ), ( "version", identity version_path ) ]
        []
        []
        Nothing
        



getQuery : String -> Float -> String -> String -> Api.Request 
getQuery path_query pPeriodlimit_query 1Property_query 1PropertyPeriodvalue_query =
    Api.request
        "GET"
        "/bin/querybuilder.json"
        []
        [ ( "path", Just <| identity path_query ), ( "p.limit", Just <| String.fromFloat pPeriodlimit_query ), ( "1_property", Just <| identity 1Property_query ), ( "1_property.value", Just <| identity 1PropertyPeriodvalue_query ) ]
        []
        Nothing
        



getTruststore : Api.Request 
getTruststore =
    Api.request
        "GET"
        "/etc/truststore/truststore.p12"
        []
        []
        []
        Nothing
        



getTruststoreInfo : Api.Request Api.Data.TruststoreInfo
getTruststoreInfo =
    Api.request
        "GET"
        "/libs/granite/security/truststore.json"
        []
        []
        []
        Nothing
        Api.Data.truststoreInfoDecoder



postAgent : String -> String -> Maybe Bool -> Maybe String -> Maybe String -> Maybe String -> Maybe Bool -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe Bool -> Maybe Bool -> Maybe Float -> Maybe Bool -> Maybe String -> Maybe List String -> Maybe String -> Maybe String -> Maybe Bool -> Maybe String -> Maybe Float -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe Float -> Maybe String -> Maybe Float -> Maybe String -> Maybe Float -> Maybe String -> Maybe Bool -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe String -> Maybe String -> Maybe String -> Api.Request 
postAgent runmode_path name_path jcrContentSlashcqDistribute_query jcrContentSlashcqDistributeAtTypeHint_query jcrContentSlashcqName_query jcrContentSlashcqTemplate_query jcrContentSlashenabled_query jcrContentSlashjcrDescription_query jcrContentSlashjcrLastModified_query jcrContentSlashjcrLastModifiedBy_query jcrContentSlashjcrMixinTypes_query jcrContentSlashjcrTitle_query jcrContentSlashlogLevel_query jcrContentSlashnoStatusUpdate_query jcrContentSlashnoVersioning_query jcrContentSlashprotocolConnectTimeout_query jcrContentSlashprotocolHTTPConnectionClosed_query jcrContentSlashprotocolHTTPExpired_query jcrContentSlashprotocolHTTPHeaders_query jcrContentSlashprotocolHTTPHeadersAtTypeHint_query jcrContentSlashprotocolHTTPMethod_query jcrContentSlashprotocolHTTPSRelaxed_query jcrContentSlashprotocolInterface_query jcrContentSlashprotocolSocketTimeout_query jcrContentSlashprotocolVersion_query jcrContentSlashproxyNTLMDomain_query jcrContentSlashproxyNTLMHost_query jcrContentSlashproxyHost_query jcrContentSlashproxyPassword_query jcrContentSlashproxyPort_query jcrContentSlashproxyUser_query jcrContentSlashqueueBatchMaxSize_query jcrContentSlashqueueBatchMode_query jcrContentSlashqueueBatchWaitTime_query jcrContentSlashretryDelay_query jcrContentSlashreverseReplication_query jcrContentSlashserializationType_query jcrContentSlashslingResourceType_query jcrContentSlashssl_query jcrContentSlashtransportNTLMDomain_query jcrContentSlashtransportNTLMHost_query jcrContentSlashtransportPassword_query jcrContentSlashtransportUri_query jcrContentSlashtransportUser_query jcrContentSlashtriggerDistribute_query jcrContentSlashtriggerModified_query jcrContentSlashtriggerOnOffTime_query jcrContentSlashtriggerReceive_query jcrContentSlashtriggerSpecific_query jcrContentSlashuserId_query jcrPrimaryType_query operation_query =
    Api.request
        "POST"
        "/etc/replication/agents.{runmode}/{name}"
        [ ( "runmode", identity runmode_path ), ( "name", identity name_path ) ]
        [ ( "jcr:content/cq:distribute", Maybe.map (\val -> if val then "true" else "false") jcrContentSlashcqDistribute_query ), ( "jcr:content/cq:distribute@TypeHint", Maybe.map identity jcrContentSlashcqDistributeAtTypeHint_query ), ( "jcr:content/cq:name", Maybe.map identity jcrContentSlashcqName_query ), ( "jcr:content/cq:template", Maybe.map identity jcrContentSlashcqTemplate_query ), ( "jcr:content/enabled", Maybe.map (\val -> if val then "true" else "false") jcrContentSlashenabled_query ), ( "jcr:content/jcr:description", Maybe.map identity jcrContentSlashjcrDescription_query ), ( "jcr:content/jcr:lastModified", Maybe.map identity jcrContentSlashjcrLastModified_query ), ( "jcr:content/jcr:lastModifiedBy", Maybe.map identity jcrContentSlashjcrLastModifiedBy_query ), ( "jcr:content/jcr:mixinTypes", Maybe.map identity jcrContentSlashjcrMixinTypes_query ), ( "jcr:content/jcr:title", Maybe.map identity jcrContentSlashjcrTitle_query ), ( "jcr:content/logLevel", Maybe.map identity jcrContentSlashlogLevel_query ), ( "jcr:content/noStatusUpdate", Maybe.map (\val -> if val then "true" else "false") jcrContentSlashnoStatusUpdate_query ), ( "jcr:content/noVersioning", Maybe.map (\val -> if val then "true" else "false") jcrContentSlashnoVersioning_query ), ( "jcr:content/protocolConnectTimeout", Maybe.map String.fromFloat jcrContentSlashprotocolConnectTimeout_query ), ( "jcr:content/protocolHTTPConnectionClosed", Maybe.map (\val -> if val then "true" else "false") jcrContentSlashprotocolHTTPConnectionClosed_query ), ( "jcr:content/protocolHTTPExpired", Maybe.map identity jcrContentSlashprotocolHTTPExpired_query ), ( "jcr:content/protocolHTTPHeaders", Maybe.map String.join "," << List.map identity jcrContentSlashprotocolHTTPHeaders_query ), ( "jcr:content/protocolHTTPHeaders@TypeHint", Maybe.map identity jcrContentSlashprotocolHTTPHeadersAtTypeHint_query ), ( "jcr:content/protocolHTTPMethod", Maybe.map identity jcrContentSlashprotocolHTTPMethod_query ), ( "jcr:content/protocolHTTPSRelaxed", Maybe.map (\val -> if val then "true" else "false") jcrContentSlashprotocolHTTPSRelaxed_query ), ( "jcr:content/protocolInterface", Maybe.map identity jcrContentSlashprotocolInterface_query ), ( "jcr:content/protocolSocketTimeout", Maybe.map String.fromFloat jcrContentSlashprotocolSocketTimeout_query ), ( "jcr:content/protocolVersion", Maybe.map identity jcrContentSlashprotocolVersion_query ), ( "jcr:content/proxyNTLMDomain", Maybe.map identity jcrContentSlashproxyNTLMDomain_query ), ( "jcr:content/proxyNTLMHost", Maybe.map identity jcrContentSlashproxyNTLMHost_query ), ( "jcr:content/proxyHost", Maybe.map identity jcrContentSlashproxyHost_query ), ( "jcr:content/proxyPassword", Maybe.map identity jcrContentSlashproxyPassword_query ), ( "jcr:content/proxyPort", Maybe.map String.fromFloat jcrContentSlashproxyPort_query ), ( "jcr:content/proxyUser", Maybe.map identity jcrContentSlashproxyUser_query ), ( "jcr:content/queueBatchMaxSize", Maybe.map String.fromFloat jcrContentSlashqueueBatchMaxSize_query ), ( "jcr:content/queueBatchMode", Maybe.map identity jcrContentSlashqueueBatchMode_query ), ( "jcr:content/queueBatchWaitTime", Maybe.map String.fromFloat jcrContentSlashqueueBatchWaitTime_query ), ( "jcr:content/retryDelay", Maybe.map identity jcrContentSlashretryDelay_query ), ( "jcr:content/reverseReplication", Maybe.map (\val -> if val then "true" else "false") jcrContentSlashreverseReplication_query ), ( "jcr:content/serializationType", Maybe.map identity jcrContentSlashserializationType_query ), ( "jcr:content/sling:resourceType", Maybe.map identity jcrContentSlashslingResourceType_query ), ( "jcr:content/ssl", Maybe.map identity jcrContentSlashssl_query ), ( "jcr:content/transportNTLMDomain", Maybe.map identity jcrContentSlashtransportNTLMDomain_query ), ( "jcr:content/transportNTLMHost", Maybe.map identity jcrContentSlashtransportNTLMHost_query ), ( "jcr:content/transportPassword", Maybe.map identity jcrContentSlashtransportPassword_query ), ( "jcr:content/transportUri", Maybe.map identity jcrContentSlashtransportUri_query ), ( "jcr:content/transportUser", Maybe.map identity jcrContentSlashtransportUser_query ), ( "jcr:content/triggerDistribute", Maybe.map (\val -> if val then "true" else "false") jcrContentSlashtriggerDistribute_query ), ( "jcr:content/triggerModified", Maybe.map (\val -> if val then "true" else "false") jcrContentSlashtriggerModified_query ), ( "jcr:content/triggerOnOffTime", Maybe.map (\val -> if val then "true" else "false") jcrContentSlashtriggerOnOffTime_query ), ( "jcr:content/triggerReceive", Maybe.map (\val -> if val then "true" else "false") jcrContentSlashtriggerReceive_query ), ( "jcr:content/triggerSpecific", Maybe.map (\val -> if val then "true" else "false") jcrContentSlashtriggerSpecific_query ), ( "jcr:content/userId", Maybe.map identity jcrContentSlashuserId_query ), ( "jcr:primaryType", Maybe.map identity jcrPrimaryType_query ), ( ":operation", Maybe.map identity operation_query ) ]
        []
        Nothing
        



postAuthorizableKeystore : String -> String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Api.Request Api.Data.KeystoreInfo
postAuthorizableKeystore intermediatePath_path authorizableId_path operation_query currentPassword_query newPassword_query rePassword_query keyPassword_query keyStorePass_query alias_query newAlias_query removeAlias_query certChain pk keyStore =
    Api.request
        "POST"
        "/{intermediatePath}/{authorizableId}.ks.html"
        [ ( "intermediatePath", identity intermediatePath_path ), ( "authorizableId", identity authorizableId_path ) ]
        [ ( ":operation", Maybe.map identity operation_query ), ( "currentPassword", Maybe.map identity currentPassword_query ), ( "newPassword", Maybe.map identity newPassword_query ), ( "rePassword", Maybe.map identity rePassword_query ), ( "keyPassword", Maybe.map identity keyPassword_query ), ( "keyStorePass", Maybe.map identity keyStorePass_query ), ( "alias", Maybe.map identity alias_query ), ( "newAlias", Maybe.map identity newAlias_query ), ( "removeAlias", Maybe.map identity removeAlias_query ) ]
        []
        Nothing
        Api.Data.keystoreInfoDecoder



postAuthorizables : String -> String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Api.Request 
postAuthorizables authorizableId_query intermediatePath_query createUser_query createGroup_query repPassword_query profileSlashgivenName_query =
    Api.request
        "POST"
        "/libs/granite/security/post/authorizables"
        []
        [ ( "authorizableId", Just <| identity authorizableId_query ), ( "intermediatePath", Just <| identity intermediatePath_query ), ( "createUser", Maybe.map identity createUser_query ), ( "createGroup", Maybe.map identity createGroup_query ), ( "rep:password", Maybe.map identity repPassword_query ), ( "profile/givenName", Maybe.map identity profileSlashgivenName_query ) ]
        []
        Nothing
        



postConfigAdobeGraniteSamlAuthenticationHandler : Maybe String -> Maybe String -> Maybe Int -> Maybe String -> Maybe Bool -> Maybe String -> Maybe Bool -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe List String -> Maybe String -> Maybe String -> Maybe String -> Maybe Bool -> Maybe String -> Maybe List String -> Maybe String -> Maybe List String -> Maybe String -> Maybe Int -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe Bool -> Maybe String -> Maybe String -> Maybe String -> Maybe Bool -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Api.Request 
postConfigAdobeGraniteSamlAuthenticationHandler keyStorePassword_query keyStorePasswordAtTypeHint_query servicePeriodranking_query servicePeriodrankingAtTypeHint_query idpHttpRedirect_query idpHttpRedirectAtTypeHint_query createUser_query createUserAtTypeHint_query defaultRedirectUrl_query defaultRedirectUrlAtTypeHint_query userIDAttribute_query userIDAttributeAtTypeHint_query defaultGroups_query defaultGroupsAtTypeHint_query idpCertAlias_query idpCertAliasAtTypeHint_query addGroupMemberships_query addGroupMembershipsAtTypeHint_query path_query pathAtTypeHint_query synchronizeAttributes_query synchronizeAttributesAtTypeHint_query clockTolerance_query clockToleranceAtTypeHint_query groupMembershipAttribute_query groupMembershipAttributeAtTypeHint_query idpUrl_query idpUrlAtTypeHint_query logoutUrl_query logoutUrlAtTypeHint_query serviceProviderEntityId_query serviceProviderEntityIdAtTypeHint_query assertionConsumerServiceURL_query assertionConsumerServiceURLAtTypeHint_query handleLogout_query handleLogoutAtTypeHint_query spPrivateKeyAlias_query spPrivateKeyAliasAtTypeHint_query useEncryption_query useEncryptionAtTypeHint_query nameIdFormat_query nameIdFormatAtTypeHint_query digestMethod_query digestMethodAtTypeHint_query signatureMethod_query signatureMethodAtTypeHint_query userIntermediatePath_query userIntermediatePathAtTypeHint_query =
    Api.request
        "POST"
        "/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config"
        []
        [ ( "keyStorePassword", Maybe.map identity keyStorePassword_query ), ( "keyStorePassword@TypeHint", Maybe.map identity keyStorePasswordAtTypeHint_query ), ( "service.ranking", Maybe.map String.fromInt servicePeriodranking_query ), ( "service.ranking@TypeHint", Maybe.map identity servicePeriodrankingAtTypeHint_query ), ( "idpHttpRedirect", Maybe.map (\val -> if val then "true" else "false") idpHttpRedirect_query ), ( "idpHttpRedirect@TypeHint", Maybe.map identity idpHttpRedirectAtTypeHint_query ), ( "createUser", Maybe.map (\val -> if val then "true" else "false") createUser_query ), ( "createUser@TypeHint", Maybe.map identity createUserAtTypeHint_query ), ( "defaultRedirectUrl", Maybe.map identity defaultRedirectUrl_query ), ( "defaultRedirectUrl@TypeHint", Maybe.map identity defaultRedirectUrlAtTypeHint_query ), ( "userIDAttribute", Maybe.map identity userIDAttribute_query ), ( "userIDAttribute@TypeHint", Maybe.map identity userIDAttributeAtTypeHint_query ), ( "defaultGroups", Maybe.map String.join "," << List.map identity defaultGroups_query ), ( "defaultGroups@TypeHint", Maybe.map identity defaultGroupsAtTypeHint_query ), ( "idpCertAlias", Maybe.map identity idpCertAlias_query ), ( "idpCertAlias@TypeHint", Maybe.map identity idpCertAliasAtTypeHint_query ), ( "addGroupMemberships", Maybe.map (\val -> if val then "true" else "false") addGroupMemberships_query ), ( "addGroupMemberships@TypeHint", Maybe.map identity addGroupMembershipsAtTypeHint_query ), ( "path", Maybe.map String.join "," << List.map identity path_query ), ( "path@TypeHint", Maybe.map identity pathAtTypeHint_query ), ( "synchronizeAttributes", Maybe.map String.join "," << List.map identity synchronizeAttributes_query ), ( "synchronizeAttributes@TypeHint", Maybe.map identity synchronizeAttributesAtTypeHint_query ), ( "clockTolerance", Maybe.map String.fromInt clockTolerance_query ), ( "clockTolerance@TypeHint", Maybe.map identity clockToleranceAtTypeHint_query ), ( "groupMembershipAttribute", Maybe.map identity groupMembershipAttribute_query ), ( "groupMembershipAttribute@TypeHint", Maybe.map identity groupMembershipAttributeAtTypeHint_query ), ( "idpUrl", Maybe.map identity idpUrl_query ), ( "idpUrl@TypeHint", Maybe.map identity idpUrlAtTypeHint_query ), ( "logoutUrl", Maybe.map identity logoutUrl_query ), ( "logoutUrl@TypeHint", Maybe.map identity logoutUrlAtTypeHint_query ), ( "serviceProviderEntityId", Maybe.map identity serviceProviderEntityId_query ), ( "serviceProviderEntityId@TypeHint", Maybe.map identity serviceProviderEntityIdAtTypeHint_query ), ( "assertionConsumerServiceURL", Maybe.map identity assertionConsumerServiceURL_query ), ( "assertionConsumerServiceURL@TypeHint", Maybe.map identity assertionConsumerServiceURLAtTypeHint_query ), ( "handleLogout", Maybe.map (\val -> if val then "true" else "false") handleLogout_query ), ( "handleLogout@TypeHint", Maybe.map identity handleLogoutAtTypeHint_query ), ( "spPrivateKeyAlias", Maybe.map identity spPrivateKeyAlias_query ), ( "spPrivateKeyAlias@TypeHint", Maybe.map identity spPrivateKeyAliasAtTypeHint_query ), ( "useEncryption", Maybe.map (\val -> if val then "true" else "false") useEncryption_query ), ( "useEncryption@TypeHint", Maybe.map identity useEncryptionAtTypeHint_query ), ( "nameIdFormat", Maybe.map identity nameIdFormat_query ), ( "nameIdFormat@TypeHint", Maybe.map identity nameIdFormatAtTypeHint_query ), ( "digestMethod", Maybe.map identity digestMethod_query ), ( "digestMethod@TypeHint", Maybe.map identity digestMethodAtTypeHint_query ), ( "signatureMethod", Maybe.map identity signatureMethod_query ), ( "signatureMethod@TypeHint", Maybe.map identity signatureMethodAtTypeHint_query ), ( "userIntermediatePath", Maybe.map identity userIntermediatePath_query ), ( "userIntermediatePath@TypeHint", Maybe.map identity userIntermediatePathAtTypeHint_query ) ]
        []
        Nothing
        



postConfigApacheFelixJettyBasedHttpService : Maybe Bool -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe Bool -> Maybe String -> Maybe String -> Maybe String -> Api.Request 
postConfigApacheFelixJettyBasedHttpService orgPeriodapachePeriodfelixPeriodhttpsPeriodnio_query orgPeriodapachePeriodfelixPeriodhttpsPeriodnioAtTypeHint_query orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore_query orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystoreAtTypeHint_query orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword_query orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpasswordAtTypeHint_query orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkey_query orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyAtTypeHint_query orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword_query orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpasswordAtTypeHint_query orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore_query orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststoreAtTypeHint_query orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword_query orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpasswordAtTypeHint_query orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate_query orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificateAtTypeHint_query orgPeriodapachePeriodfelixPeriodhttpsPeriodenable_query orgPeriodapachePeriodfelixPeriodhttpsPeriodenableAtTypeHint_query orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure_query orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecureAtTypeHint_query =
    Api.request
        "POST"
        "/apps/system/config/org.apache.felix.http"
        []
        [ ( "org.apache.felix.https.nio", Maybe.map (\val -> if val then "true" else "false") orgPeriodapachePeriodfelixPeriodhttpsPeriodnio_query ), ( "org.apache.felix.https.nio@TypeHint", Maybe.map identity orgPeriodapachePeriodfelixPeriodhttpsPeriodnioAtTypeHint_query ), ( "org.apache.felix.https.keystore", Maybe.map identity orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore_query ), ( "org.apache.felix.https.keystore@TypeHint", Maybe.map identity orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystoreAtTypeHint_query ), ( "org.apache.felix.https.keystore.password", Maybe.map identity orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword_query ), ( "org.apache.felix.https.keystore.password@TypeHint", Maybe.map identity orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpasswordAtTypeHint_query ), ( "org.apache.felix.https.keystore.key", Maybe.map identity orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkey_query ), ( "org.apache.felix.https.keystore.key@TypeHint", Maybe.map identity orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyAtTypeHint_query ), ( "org.apache.felix.https.keystore.key.password", Maybe.map identity orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword_query ), ( "org.apache.felix.https.keystore.key.password@TypeHint", Maybe.map identity orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpasswordAtTypeHint_query ), ( "org.apache.felix.https.truststore", Maybe.map identity orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore_query ), ( "org.apache.felix.https.truststore@TypeHint", Maybe.map identity orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststoreAtTypeHint_query ), ( "org.apache.felix.https.truststore.password", Maybe.map identity orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword_query ), ( "org.apache.felix.https.truststore.password@TypeHint", Maybe.map identity orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpasswordAtTypeHint_query ), ( "org.apache.felix.https.clientcertificate", Maybe.map identity orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate_query ), ( "org.apache.felix.https.clientcertificate@TypeHint", Maybe.map identity orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificateAtTypeHint_query ), ( "org.apache.felix.https.enable", Maybe.map (\val -> if val then "true" else "false") orgPeriodapachePeriodfelixPeriodhttpsPeriodenable_query ), ( "org.apache.felix.https.enable@TypeHint", Maybe.map identity orgPeriodapachePeriodfelixPeriodhttpsPeriodenableAtTypeHint_query ), ( "org.osgi.service.http.port.secure", Maybe.map identity orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure_query ), ( "org.osgi.service.http.port.secure@TypeHint", Maybe.map identity orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecureAtTypeHint_query ) ]
        []
        Nothing
        



postConfigApacheHttpComponentsProxyConfiguration : Maybe String -> Maybe String -> Maybe Int -> Maybe String -> Maybe List String -> Maybe String -> Maybe Bool -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Api.Request 
postConfigApacheHttpComponentsProxyConfiguration proxyPeriodhost_query proxyPeriodhostAtTypeHint_query proxyPeriodport_query proxyPeriodportAtTypeHint_query proxyPeriodexceptions_query proxyPeriodexceptionsAtTypeHint_query proxyPeriodenabled_query proxyPeriodenabledAtTypeHint_query proxyPerioduser_query proxyPerioduserAtTypeHint_query proxyPeriodpassword_query proxyPeriodpasswordAtTypeHint_query =
    Api.request
        "POST"
        "/apps/system/config/org.apache.http.proxyconfigurator.config"
        []
        [ ( "proxy.host", Maybe.map identity proxyPeriodhost_query ), ( "proxy.host@TypeHint", Maybe.map identity proxyPeriodhostAtTypeHint_query ), ( "proxy.port", Maybe.map String.fromInt proxyPeriodport_query ), ( "proxy.port@TypeHint", Maybe.map identity proxyPeriodportAtTypeHint_query ), ( "proxy.exceptions", Maybe.map String.join "," << List.map identity proxyPeriodexceptions_query ), ( "proxy.exceptions@TypeHint", Maybe.map identity proxyPeriodexceptionsAtTypeHint_query ), ( "proxy.enabled", Maybe.map (\val -> if val then "true" else "false") proxyPeriodenabled_query ), ( "proxy.enabled@TypeHint", Maybe.map identity proxyPeriodenabledAtTypeHint_query ), ( "proxy.user", Maybe.map identity proxyPerioduser_query ), ( "proxy.user@TypeHint", Maybe.map identity proxyPerioduserAtTypeHint_query ), ( "proxy.password", Maybe.map identity proxyPeriodpassword_query ), ( "proxy.password@TypeHint", Maybe.map identity proxyPeriodpasswordAtTypeHint_query ) ]
        []
        Nothing
        



postConfigApacheSlingDavExServlet : Maybe String -> Maybe String -> Maybe Bool -> Maybe String -> Api.Request 
postConfigApacheSlingDavExServlet alias_query aliasAtTypeHint_query davPeriodcreateAbsoluteUri_query davPeriodcreateAbsoluteUriAtTypeHint_query =
    Api.request
        "POST"
        "/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet"
        []
        [ ( "alias", Maybe.map identity alias_query ), ( "alias@TypeHint", Maybe.map identity aliasAtTypeHint_query ), ( "dav.create-absolute-uri", Maybe.map (\val -> if val then "true" else "false") davPeriodcreateAbsoluteUri_query ), ( "dav.create-absolute-uri@TypeHint", Maybe.map identity davPeriodcreateAbsoluteUriAtTypeHint_query ) ]
        []
        Nothing
        



postConfigApacheSlingGetServlet : Maybe String -> Maybe String -> Maybe Bool -> Maybe String -> Maybe Bool -> Maybe String -> Maybe Bool -> Maybe String -> Api.Request 
postConfigApacheSlingGetServlet jsonPeriodmaximumresults_query jsonPeriodmaximumresultsAtTypeHint_query enablePeriodhtml_query enablePeriodhtmlAtTypeHint_query enablePeriodtxt_query enablePeriodtxtAtTypeHint_query enablePeriodxml_query enablePeriodxmlAtTypeHint_query =
    Api.request
        "POST"
        "/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet"
        []
        [ ( "json.maximumresults", Maybe.map identity jsonPeriodmaximumresults_query ), ( "json.maximumresults@TypeHint", Maybe.map identity jsonPeriodmaximumresultsAtTypeHint_query ), ( "enable.html", Maybe.map (\val -> if val then "true" else "false") enablePeriodhtml_query ), ( "enable.html@TypeHint", Maybe.map identity enablePeriodhtmlAtTypeHint_query ), ( "enable.txt", Maybe.map (\val -> if val then "true" else "false") enablePeriodtxt_query ), ( "enable.txt@TypeHint", Maybe.map identity enablePeriodtxtAtTypeHint_query ), ( "enable.xml", Maybe.map (\val -> if val then "true" else "false") enablePeriodxml_query ), ( "enable.xml@TypeHint", Maybe.map identity enablePeriodxmlAtTypeHint_query ) ]
        []
        Nothing
        



postConfigApacheSlingReferrerFilter : Maybe Bool -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Api.Request 
postConfigApacheSlingReferrerFilter allowPeriodempty_query allowPeriodemptyAtTypeHint_query allowPeriodhosts_query allowPeriodhostsAtTypeHint_query allowPeriodhostsPeriodregexp_query allowPeriodhostsPeriodregexpAtTypeHint_query filterPeriodmethods_query filterPeriodmethodsAtTypeHint_query =
    Api.request
        "POST"
        "/apps/system/config/org.apache.sling.security.impl.ReferrerFilter"
        []
        [ ( "allow.empty", Maybe.map (\val -> if val then "true" else "false") allowPeriodempty_query ), ( "allow.empty@TypeHint", Maybe.map identity allowPeriodemptyAtTypeHint_query ), ( "allow.hosts", Maybe.map identity allowPeriodhosts_query ), ( "allow.hosts@TypeHint", Maybe.map identity allowPeriodhostsAtTypeHint_query ), ( "allow.hosts.regexp", Maybe.map identity allowPeriodhostsPeriodregexp_query ), ( "allow.hosts.regexp@TypeHint", Maybe.map identity allowPeriodhostsPeriodregexpAtTypeHint_query ), ( "filter.methods", Maybe.map identity filterPeriodmethods_query ), ( "filter.methods@TypeHint", Maybe.map identity filterPeriodmethodsAtTypeHint_query ) ]
        []
        Nothing
        



postConfigProperty : String -> Api.Request 
postConfigProperty configNodeName_path =
    Api.request
        "POST"
        "/apps/system/config/{configNodeName}"
        [ ( "configNodeName", identity configNodeName_path ) ]
        []
        []
        Nothing
        



postNode : String -> String -> Maybe String -> Maybe String -> Maybe String -> Api.Request 
postNode path_path name_path operation_query deleteAuthorizable_query file =
    Api.request
        "POST"
        "/{path}/{name}"
        [ ( "path", identity path_path ), ( "name", identity name_path ) ]
        [ ( ":operation", Maybe.map identity operation_query ), ( "deleteAuthorizable", Maybe.map identity deleteAuthorizable_query ) ]
        []
        Nothing
        



postNodeRw : String -> String -> Maybe String -> Api.Request 
postNodeRw path_path name_path addMembers_query =
    Api.request
        "POST"
        "/{path}/{name}.rw.html"
        [ ( "path", identity path_path ), ( "name", identity name_path ) ]
        [ ( "addMembers", Maybe.map identity addMembers_query ) ]
        []
        Nothing
        



postPath : String -> String -> String -> Api.Request 
postPath path_path jcrPrimaryType_query name_query =
    Api.request
        "POST"
        "/{path}/"
        [ ( "path", identity path_path ) ]
        [ ( "jcr:primaryType", Just <| identity jcrPrimaryType_query ), ( ":name", Just <| identity name_query ) ]
        []
        Nothing
        



postQuery : String -> Float -> String -> String -> Api.Request 
postQuery path_query pPeriodlimit_query 1Property_query 1PropertyPeriodvalue_query =
    Api.request
        "POST"
        "/bin/querybuilder.json"
        []
        [ ( "path", Just <| identity path_query ), ( "p.limit", Just <| String.fromFloat pPeriodlimit_query ), ( "1_property", Just <| identity 1Property_query ), ( "1_property.value", Just <| identity 1PropertyPeriodvalue_query ) ]
        []
        Nothing
        



postTreeActivation : Bool -> Bool -> String -> Api.Request 
postTreeActivation ignoredeactivated_query onlymodified_query path_query =
    Api.request
        "POST"
        "/etc/replication/treeactivation.html"
        []
        [ ( "ignoredeactivated", Just <| (\val -> if val then "true" else "false") ignoredeactivated_query ), ( "onlymodified", Just <| (\val -> if val then "true" else "false") onlymodified_query ), ( "path", Just <| identity path_query ) ]
        []
        Nothing
        



postTruststore : Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Api.Request 
postTruststore operation_query newPassword_query rePassword_query keyStoreType_query removeAlias_query certificate =
    Api.request
        "POST"
        "/libs/granite/security/post/truststore"
        []
        [ ( ":operation", Maybe.map identity operation_query ), ( "newPassword", Maybe.map identity newPassword_query ), ( "rePassword", Maybe.map identity rePassword_query ), ( "keyStoreType", Maybe.map identity keyStoreType_query ), ( "removeAlias", Maybe.map identity removeAlias_query ) ]
        []
        Nothing
        



postTruststorePKCS12 : Maybe String -> Api.Request 
postTruststorePKCS12 truststorePeriodp12 =
    Api.request
        "POST"
        "/etc/truststore"
        []
        []
        []
        Nothing
        
