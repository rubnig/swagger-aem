# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule AdobeExperienceManager(AEM)API.Api.Granite do
  @moduledoc """
  API calls for all endpoints tagged `Granite`.
  """

  alias AdobeExperienceManager(AEM)API.Connection
  import AdobeExperienceManager(AEM)API.RequestBuilder


  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - keystore_password (String.t): 
  - keystore_password_confirm (String.t): 
  - truststore_password (String.t): 
  - truststore_password_confirm (String.t): 
  - https_hostname (String.t): 
  - https_port (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :privatekey_file (String.t): 
    - :certificate_file (String.t): 
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec ssl_setup(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def ssl_setup(connection, keystore_password, keystore_password_confirm, truststore_password, truststore_password_confirm, https_hostname, https_port, opts \\ []) do
    optional_params = %{
      :"privatekeyFile" => :form,
      :"certificateFile" => :form
    }
    %{}
    |> method(:post)
    |> url("/libs/granite/security/post/sslSetup.html")
    |> add_param(:query, :"keystorePassword", keystore_password)
    |> add_param(:query, :"keystorePasswordConfirm", keystore_password_confirm)
    |> add_param(:query, :"truststorePassword", truststore_password)
    |> add_param(:query, :"truststorePasswordConfirm", truststore_password_confirm)
    |> add_param(:query, :"httpsHostname", https_hostname)
    |> add_param(:query, :"httpsPort", https_port)
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end
end
