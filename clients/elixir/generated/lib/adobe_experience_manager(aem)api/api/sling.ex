# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule AdobeExperienceManager(AEM)API.Api.Sling do
  @moduledoc """
  API calls for all endpoints tagged `Sling`.
  """

  alias AdobeExperienceManager(AEM)API.Connection
  import AdobeExperienceManager(AEM)API.RequestBuilder


  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - runmode (String.t): 
  - name (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_agent(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_agent(connection, runmode, name, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/etc/replication/agents.#{runmode}/#{name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - path (String.t): 
  - name (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_node(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_node(connection, path, name, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/#{path}/#{name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - runmode (String.t): 
  - name (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_agent(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def get_agent(connection, runmode, name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/etc/replication/agents.#{runmode}/#{name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - runmode (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_agents(Tesla.Env.client, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def get_agents(connection, runmode, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/etc/replication/agents.#{runmode}.-1.json")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - intermediate_path (String.t): 
  - authorizable_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, AdobeExperienceManager(AEM)API.Model.KeystoreInfo.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_authorizable_keystore(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, AdobeExperienceManager(AEM)API.Model.KeystoreInfo.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def get_authorizable_keystore(connection, intermediate_path, authorizable_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{intermediate_path}/#{authorizable_id}.ks.json")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %AdobeExperienceManager(AEM)API.Model.KeystoreInfo{}},
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - intermediate_path (String.t): 
  - authorizable_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_keystore(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def get_keystore(connection, intermediate_path, authorizable_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{intermediate_path}/#{authorizable_id}/keystore/store.p12")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - path (String.t): 
  - name (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_node(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def get_node(connection, path, name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{path}/#{name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - group (String.t): 
  - name (String.t): 
  - version (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_package(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def get_package(connection, group, name, version, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/etc/packages/#{group}/#{name}-#{version}.zip")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - group (String.t): 
  - name (String.t): 
  - version (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_package_filter(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def get_package_filter(connection, group, name, version, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/etc/packages/#{group}/#{name}-#{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - path (String.t): 
  - p_periodlimit (float()): 
  - 1_property (String.t): 
  - 1_property_periodvalue (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_query(Tesla.Env.client, String.t, float(), String.t, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def get_query(connection, path, p_periodlimit, 1_property, 1_property_periodvalue, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/bin/querybuilder.json")
    |> add_param(:query, :"path", path)
    |> add_param(:query, :"p.limit", p_periodlimit)
    |> add_param(:query, :"1_property", 1_property)
    |> add_param(:query, :"1_property.value", 1_property_periodvalue)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_truststore(Tesla.Env.client, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def get_truststore(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/etc/truststore/truststore.p12")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, AdobeExperienceManager(AEM)API.Model.TruststoreInfo.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_truststore_info(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManager(AEM)API.Model.TruststoreInfo.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def get_truststore_info(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/libs/granite/security/truststore.json")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %AdobeExperienceManager(AEM)API.Model.TruststoreInfo{}},
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - runmode (String.t): 
  - name (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :jcr_content_slashcq_distribute (boolean()): 
    - :jcr_content_slashcq_distribute_at_type_hint (String.t): 
    - :jcr_content_slashcq_name (String.t): 
    - :jcr_content_slashcq_template (String.t): 
    - :jcr_content_slashenabled (boolean()): 
    - :jcr_content_slashjcr_description (String.t): 
    - :jcr_content_slashjcr_last_modified (String.t): 
    - :jcr_content_slashjcr_last_modified_by (String.t): 
    - :jcr_content_slashjcr_mixin_types (String.t): 
    - :jcr_content_slashjcr_title (String.t): 
    - :jcr_content_slashlog_level (String.t): 
    - :jcr_content_slashno_status_update (boolean()): 
    - :jcr_content_slashno_versioning (boolean()): 
    - :jcr_content_slashprotocol_connect_timeout (float()): 
    - :jcr_content_slashprotocol_http_connection_closed (boolean()): 
    - :jcr_content_slashprotocol_http_expired (String.t): 
    - :jcr_content_slashprotocol_http_headers ([String.t]): 
    - :jcr_content_slashprotocol_http_headers_at_type_hint (String.t): 
    - :jcr_content_slashprotocol_http_method (String.t): 
    - :jcr_content_slashprotocol_https_relaxed (boolean()): 
    - :jcr_content_slashprotocol_interface (String.t): 
    - :jcr_content_slashprotocol_socket_timeout (float()): 
    - :jcr_content_slashprotocol_version (String.t): 
    - :jcr_content_slashproxy_ntlm_domain (String.t): 
    - :jcr_content_slashproxy_ntlm_host (String.t): 
    - :jcr_content_slashproxy_host (String.t): 
    - :jcr_content_slashproxy_password (String.t): 
    - :jcr_content_slashproxy_port (float()): 
    - :jcr_content_slashproxy_user (String.t): 
    - :jcr_content_slashqueue_batch_max_size (float()): 
    - :jcr_content_slashqueue_batch_mode (String.t): 
    - :jcr_content_slashqueue_batch_wait_time (float()): 
    - :jcr_content_slashretry_delay (String.t): 
    - :jcr_content_slashreverse_replication (boolean()): 
    - :jcr_content_slashserialization_type (String.t): 
    - :jcr_content_slashsling_resource_type (String.t): 
    - :jcr_content_slashssl (String.t): 
    - :jcr_content_slashtransport_ntlm_domain (String.t): 
    - :jcr_content_slashtransport_ntlm_host (String.t): 
    - :jcr_content_slashtransport_password (String.t): 
    - :jcr_content_slashtransport_uri (String.t): 
    - :jcr_content_slashtransport_user (String.t): 
    - :jcr_content_slashtrigger_distribute (boolean()): 
    - :jcr_content_slashtrigger_modified (boolean()): 
    - :jcr_content_slashtrigger_on_off_time (boolean()): 
    - :jcr_content_slashtrigger_receive (boolean()): 
    - :jcr_content_slashtrigger_specific (boolean()): 
    - :jcr_content_slashuser_id (String.t): 
    - :jcr_primary_type (String.t): 
    - :operation (String.t): 
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_agent(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def post_agent(connection, runmode, name, opts \\ []) do
    optional_params = %{
      :"jcr:content/cq:distribute" => :query,
      :"jcr:content/cq:distribute@TypeHint" => :query,
      :"jcr:content/cq:name" => :query,
      :"jcr:content/cq:template" => :query,
      :"jcr:content/enabled" => :query,
      :"jcr:content/jcr:description" => :query,
      :"jcr:content/jcr:lastModified" => :query,
      :"jcr:content/jcr:lastModifiedBy" => :query,
      :"jcr:content/jcr:mixinTypes" => :query,
      :"jcr:content/jcr:title" => :query,
      :"jcr:content/logLevel" => :query,
      :"jcr:content/noStatusUpdate" => :query,
      :"jcr:content/noVersioning" => :query,
      :"jcr:content/protocolConnectTimeout" => :query,
      :"jcr:content/protocolHTTPConnectionClosed" => :query,
      :"jcr:content/protocolHTTPExpired" => :query,
      :"jcr:content/protocolHTTPHeaders" => :query,
      :"jcr:content/protocolHTTPHeaders@TypeHint" => :query,
      :"jcr:content/protocolHTTPMethod" => :query,
      :"jcr:content/protocolHTTPSRelaxed" => :query,
      :"jcr:content/protocolInterface" => :query,
      :"jcr:content/protocolSocketTimeout" => :query,
      :"jcr:content/protocolVersion" => :query,
      :"jcr:content/proxyNTLMDomain" => :query,
      :"jcr:content/proxyNTLMHost" => :query,
      :"jcr:content/proxyHost" => :query,
      :"jcr:content/proxyPassword" => :query,
      :"jcr:content/proxyPort" => :query,
      :"jcr:content/proxyUser" => :query,
      :"jcr:content/queueBatchMaxSize" => :query,
      :"jcr:content/queueBatchMode" => :query,
      :"jcr:content/queueBatchWaitTime" => :query,
      :"jcr:content/retryDelay" => :query,
      :"jcr:content/reverseReplication" => :query,
      :"jcr:content/serializationType" => :query,
      :"jcr:content/sling:resourceType" => :query,
      :"jcr:content/ssl" => :query,
      :"jcr:content/transportNTLMDomain" => :query,
      :"jcr:content/transportNTLMHost" => :query,
      :"jcr:content/transportPassword" => :query,
      :"jcr:content/transportUri" => :query,
      :"jcr:content/transportUser" => :query,
      :"jcr:content/triggerDistribute" => :query,
      :"jcr:content/triggerModified" => :query,
      :"jcr:content/triggerOnOffTime" => :query,
      :"jcr:content/triggerReceive" => :query,
      :"jcr:content/triggerSpecific" => :query,
      :"jcr:content/userId" => :query,
      :"jcr:primaryType" => :query,
      :":operation" => :query
    }
    %{}
    |> method(:post)
    |> url("/etc/replication/agents.#{runmode}/#{name}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - intermediate_path (String.t): 
  - authorizable_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :operation (String.t): 
    - :current_password (String.t): 
    - :new_password (String.t): 
    - :re_password (String.t): 
    - :key_password (String.t): 
    - :key_store_pass (String.t): 
    - :alias (String.t): 
    - :new_alias (String.t): 
    - :remove_alias (String.t): 
    - :cert_chain (String.t): 
    - :pk (String.t): 
    - :key_store (String.t): 
  ## Returns

  {:ok, AdobeExperienceManager(AEM)API.Model.KeystoreInfo.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_authorizable_keystore(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, AdobeExperienceManager(AEM)API.Model.KeystoreInfo.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def post_authorizable_keystore(connection, intermediate_path, authorizable_id, opts \\ []) do
    optional_params = %{
      :":operation" => :query,
      :"currentPassword" => :query,
      :"newPassword" => :query,
      :"rePassword" => :query,
      :"keyPassword" => :query,
      :"keyStorePass" => :query,
      :"alias" => :query,
      :"newAlias" => :query,
      :"removeAlias" => :query,
      :"cert-chain" => :form,
      :"pk" => :form,
      :"keyStore" => :form
    }
    %{}
    |> method(:post)
    |> url("/#{intermediate_path}/#{authorizable_id}.ks.html")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %AdobeExperienceManager(AEM)API.Model.KeystoreInfo{}},
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - authorizable_id (String.t): 
  - intermediate_path (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :create_user (String.t): 
    - :create_group (String.t): 
    - :rep_password (String.t): 
    - :profile_slashgiven_name (String.t): 
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_authorizables(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def post_authorizables(connection, authorizable_id, intermediate_path, opts \\ []) do
    optional_params = %{
      :"createUser" => :query,
      :"createGroup" => :query,
      :"rep:password" => :query,
      :"profile/givenName" => :query
    }
    %{}
    |> method(:post)
    |> url("/libs/granite/security/post/authorizables")
    |> add_param(:query, :"authorizableId", authorizable_id)
    |> add_param(:query, :"intermediatePath", intermediate_path)
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :key_store_password (String.t): 
    - :key_store_password_at_type_hint (String.t): 
    - :service_periodranking (integer()): 
    - :service_periodranking_at_type_hint (String.t): 
    - :idp_http_redirect (boolean()): 
    - :idp_http_redirect_at_type_hint (String.t): 
    - :create_user (boolean()): 
    - :create_user_at_type_hint (String.t): 
    - :default_redirect_url (String.t): 
    - :default_redirect_url_at_type_hint (String.t): 
    - :user_id_attribute (String.t): 
    - :user_id_attribute_at_type_hint (String.t): 
    - :default_groups ([String.t]): 
    - :default_groups_at_type_hint (String.t): 
    - :idp_cert_alias (String.t): 
    - :idp_cert_alias_at_type_hint (String.t): 
    - :add_group_memberships (boolean()): 
    - :add_group_memberships_at_type_hint (String.t): 
    - :path ([String.t]): 
    - :path_at_type_hint (String.t): 
    - :synchronize_attributes ([String.t]): 
    - :synchronize_attributes_at_type_hint (String.t): 
    - :clock_tolerance (integer()): 
    - :clock_tolerance_at_type_hint (String.t): 
    - :group_membership_attribute (String.t): 
    - :group_membership_attribute_at_type_hint (String.t): 
    - :idp_url (String.t): 
    - :idp_url_at_type_hint (String.t): 
    - :logout_url (String.t): 
    - :logout_url_at_type_hint (String.t): 
    - :service_provider_entity_id (String.t): 
    - :service_provider_entity_id_at_type_hint (String.t): 
    - :assertion_consumer_service_url (String.t): 
    - :assertion_consumer_service_urlat_type_hint (String.t): 
    - :handle_logout (boolean()): 
    - :handle_logout_at_type_hint (String.t): 
    - :sp_private_key_alias (String.t): 
    - :sp_private_key_alias_at_type_hint (String.t): 
    - :use_encryption (boolean()): 
    - :use_encryption_at_type_hint (String.t): 
    - :name_id_format (String.t): 
    - :name_id_format_at_type_hint (String.t): 
    - :digest_method (String.t): 
    - :digest_method_at_type_hint (String.t): 
    - :signature_method (String.t): 
    - :signature_method_at_type_hint (String.t): 
    - :user_intermediate_path (String.t): 
    - :user_intermediate_path_at_type_hint (String.t): 
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_config_adobe_granite_saml_authentication_handler(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def post_config_adobe_granite_saml_authentication_handler(connection, opts \\ []) do
    optional_params = %{
      :"keyStorePassword" => :query,
      :"keyStorePassword@TypeHint" => :query,
      :"service.ranking" => :query,
      :"service.ranking@TypeHint" => :query,
      :"idpHttpRedirect" => :query,
      :"idpHttpRedirect@TypeHint" => :query,
      :"createUser" => :query,
      :"createUser@TypeHint" => :query,
      :"defaultRedirectUrl" => :query,
      :"defaultRedirectUrl@TypeHint" => :query,
      :"userIDAttribute" => :query,
      :"userIDAttribute@TypeHint" => :query,
      :"defaultGroups" => :query,
      :"defaultGroups@TypeHint" => :query,
      :"idpCertAlias" => :query,
      :"idpCertAlias@TypeHint" => :query,
      :"addGroupMemberships" => :query,
      :"addGroupMemberships@TypeHint" => :query,
      :"path" => :query,
      :"path@TypeHint" => :query,
      :"synchronizeAttributes" => :query,
      :"synchronizeAttributes@TypeHint" => :query,
      :"clockTolerance" => :query,
      :"clockTolerance@TypeHint" => :query,
      :"groupMembershipAttribute" => :query,
      :"groupMembershipAttribute@TypeHint" => :query,
      :"idpUrl" => :query,
      :"idpUrl@TypeHint" => :query,
      :"logoutUrl" => :query,
      :"logoutUrl@TypeHint" => :query,
      :"serviceProviderEntityId" => :query,
      :"serviceProviderEntityId@TypeHint" => :query,
      :"assertionConsumerServiceURL" => :query,
      :"assertionConsumerServiceURL@TypeHint" => :query,
      :"handleLogout" => :query,
      :"handleLogout@TypeHint" => :query,
      :"spPrivateKeyAlias" => :query,
      :"spPrivateKeyAlias@TypeHint" => :query,
      :"useEncryption" => :query,
      :"useEncryption@TypeHint" => :query,
      :"nameIdFormat" => :query,
      :"nameIdFormat@TypeHint" => :query,
      :"digestMethod" => :query,
      :"digestMethod@TypeHint" => :query,
      :"signatureMethod" => :query,
      :"signatureMethod@TypeHint" => :query,
      :"userIntermediatePath" => :query,
      :"userIntermediatePath@TypeHint" => :query
    }
    %{}
    |> method(:post)
    |> url("/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :org_periodapache_periodfelix_periodhttps_periodnio (boolean()): 
    - :org_periodapache_periodfelix_periodhttps_periodnio_at_type_hint (String.t): 
    - :org_periodapache_periodfelix_periodhttps_periodkeystore (String.t): 
    - :org_periodapache_periodfelix_periodhttps_periodkeystore_at_type_hint (String.t): 
    - :org_periodapache_periodfelix_periodhttps_periodkeystore_periodpassword (String.t): 
    - :org_periodapache_periodfelix_periodhttps_periodkeystore_periodpassword_at_type_hint (String.t): 
    - :org_periodapache_periodfelix_periodhttps_periodkeystore_periodkey (String.t): 
    - :org_periodapache_periodfelix_periodhttps_periodkeystore_periodkey_at_type_hint (String.t): 
    - :org_periodapache_periodfelix_periodhttps_periodkeystore_periodkey_periodpassword (String.t): 
    - :org_periodapache_periodfelix_periodhttps_periodkeystore_periodkey_periodpassword_at_type_hint (String.t): 
    - :org_periodapache_periodfelix_periodhttps_periodtruststore (String.t): 
    - :org_periodapache_periodfelix_periodhttps_periodtruststore_at_type_hint (String.t): 
    - :org_periodapache_periodfelix_periodhttps_periodtruststore_periodpassword (String.t): 
    - :org_periodapache_periodfelix_periodhttps_periodtruststore_periodpassword_at_type_hint (String.t): 
    - :org_periodapache_periodfelix_periodhttps_periodclientcertificate (String.t): 
    - :org_periodapache_periodfelix_periodhttps_periodclientcertificate_at_type_hint (String.t): 
    - :org_periodapache_periodfelix_periodhttps_periodenable (boolean()): 
    - :org_periodapache_periodfelix_periodhttps_periodenable_at_type_hint (String.t): 
    - :org_periodosgi_periodservice_periodhttp_periodport_periodsecure (String.t): 
    - :org_periodosgi_periodservice_periodhttp_periodport_periodsecure_at_type_hint (String.t): 
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_config_apache_felix_jetty_based_http_service(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def post_config_apache_felix_jetty_based_http_service(connection, opts \\ []) do
    optional_params = %{
      :"org.apache.felix.https.nio" => :query,
      :"org.apache.felix.https.nio@TypeHint" => :query,
      :"org.apache.felix.https.keystore" => :query,
      :"org.apache.felix.https.keystore@TypeHint" => :query,
      :"org.apache.felix.https.keystore.password" => :query,
      :"org.apache.felix.https.keystore.password@TypeHint" => :query,
      :"org.apache.felix.https.keystore.key" => :query,
      :"org.apache.felix.https.keystore.key@TypeHint" => :query,
      :"org.apache.felix.https.keystore.key.password" => :query,
      :"org.apache.felix.https.keystore.key.password@TypeHint" => :query,
      :"org.apache.felix.https.truststore" => :query,
      :"org.apache.felix.https.truststore@TypeHint" => :query,
      :"org.apache.felix.https.truststore.password" => :query,
      :"org.apache.felix.https.truststore.password@TypeHint" => :query,
      :"org.apache.felix.https.clientcertificate" => :query,
      :"org.apache.felix.https.clientcertificate@TypeHint" => :query,
      :"org.apache.felix.https.enable" => :query,
      :"org.apache.felix.https.enable@TypeHint" => :query,
      :"org.osgi.service.http.port.secure" => :query,
      :"org.osgi.service.http.port.secure@TypeHint" => :query
    }
    %{}
    |> method(:post)
    |> url("/apps/system/config/org.apache.felix.http")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :proxy_periodhost (String.t): 
    - :proxy_periodhost_at_type_hint (String.t): 
    - :proxy_periodport (integer()): 
    - :proxy_periodport_at_type_hint (String.t): 
    - :proxy_periodexceptions ([String.t]): 
    - :proxy_periodexceptions_at_type_hint (String.t): 
    - :proxy_periodenabled (boolean()): 
    - :proxy_periodenabled_at_type_hint (String.t): 
    - :proxy_perioduser (String.t): 
    - :proxy_perioduser_at_type_hint (String.t): 
    - :proxy_periodpassword (String.t): 
    - :proxy_periodpassword_at_type_hint (String.t): 
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_config_apache_http_components_proxy_configuration(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def post_config_apache_http_components_proxy_configuration(connection, opts \\ []) do
    optional_params = %{
      :"proxy.host" => :query,
      :"proxy.host@TypeHint" => :query,
      :"proxy.port" => :query,
      :"proxy.port@TypeHint" => :query,
      :"proxy.exceptions" => :query,
      :"proxy.exceptions@TypeHint" => :query,
      :"proxy.enabled" => :query,
      :"proxy.enabled@TypeHint" => :query,
      :"proxy.user" => :query,
      :"proxy.user@TypeHint" => :query,
      :"proxy.password" => :query,
      :"proxy.password@TypeHint" => :query
    }
    %{}
    |> method(:post)
    |> url("/apps/system/config/org.apache.http.proxyconfigurator.config")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :alias (String.t): 
    - :alias_at_type_hint (String.t): 
    - :dav_periodcreate_absolute_uri (boolean()): 
    - :dav_periodcreate_absolute_uri_at_type_hint (String.t): 
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_config_apache_sling_dav_ex_servlet(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def post_config_apache_sling_dav_ex_servlet(connection, opts \\ []) do
    optional_params = %{
      :"alias" => :query,
      :"alias@TypeHint" => :query,
      :"dav.create-absolute-uri" => :query,
      :"dav.create-absolute-uri@TypeHint" => :query
    }
    %{}
    |> method(:post)
    |> url("/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :json_periodmaximumresults (String.t): 
    - :json_periodmaximumresults_at_type_hint (String.t): 
    - :enable_periodhtml (boolean()): 
    - :enable_periodhtml_at_type_hint (String.t): 
    - :enable_periodtxt (boolean()): 
    - :enable_periodtxt_at_type_hint (String.t): 
    - :enable_periodxml (boolean()): 
    - :enable_periodxml_at_type_hint (String.t): 
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_config_apache_sling_get_servlet(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def post_config_apache_sling_get_servlet(connection, opts \\ []) do
    optional_params = %{
      :"json.maximumresults" => :query,
      :"json.maximumresults@TypeHint" => :query,
      :"enable.html" => :query,
      :"enable.html@TypeHint" => :query,
      :"enable.txt" => :query,
      :"enable.txt@TypeHint" => :query,
      :"enable.xml" => :query,
      :"enable.xml@TypeHint" => :query
    }
    %{}
    |> method(:post)
    |> url("/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :allow_periodempty (boolean()): 
    - :allow_periodempty_at_type_hint (String.t): 
    - :allow_periodhosts (String.t): 
    - :allow_periodhosts_at_type_hint (String.t): 
    - :allow_periodhosts_periodregexp (String.t): 
    - :allow_periodhosts_periodregexp_at_type_hint (String.t): 
    - :filter_periodmethods (String.t): 
    - :filter_periodmethods_at_type_hint (String.t): 
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_config_apache_sling_referrer_filter(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def post_config_apache_sling_referrer_filter(connection, opts \\ []) do
    optional_params = %{
      :"allow.empty" => :query,
      :"allow.empty@TypeHint" => :query,
      :"allow.hosts" => :query,
      :"allow.hosts@TypeHint" => :query,
      :"allow.hosts.regexp" => :query,
      :"allow.hosts.regexp@TypeHint" => :query,
      :"filter.methods" => :query,
      :"filter.methods@TypeHint" => :query
    }
    %{}
    |> method(:post)
    |> url("/apps/system/config/org.apache.sling.security.impl.ReferrerFilter")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - config_node_name (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_config_property(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def post_config_property(connection, config_node_name, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/apps/system/config/#{config_node_name}")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - path (String.t): 
  - name (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :operation (String.t): 
    - :delete_authorizable (String.t): 
    - :file (String.t): 
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_node(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def post_node(connection, path, name, opts \\ []) do
    optional_params = %{
      :":operation" => :query,
      :"deleteAuthorizable" => :query,
      :"file" => :form
    }
    %{}
    |> method(:post)
    |> url("/#{path}/#{name}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - path (String.t): 
  - name (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :add_members (String.t): 
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_node_rw(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def post_node_rw(connection, path, name, opts \\ []) do
    optional_params = %{
      :"addMembers" => :query
    }
    %{}
    |> method(:post)
    |> url("/#{path}/#{name}.rw.html")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - path (String.t): 
  - jcr_primary_type (String.t): 
  - name (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_path(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def post_path(connection, path, jcr_primary_type, name, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{path}/")
    |> add_param(:query, :"jcr:primaryType", jcr_primary_type)
    |> add_param(:query, :":name", name)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - path (String.t): 
  - p_periodlimit (float()): 
  - 1_property (String.t): 
  - 1_property_periodvalue (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_query(Tesla.Env.client, String.t, float(), String.t, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def post_query(connection, path, p_periodlimit, 1_property, 1_property_periodvalue, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/bin/querybuilder.json")
    |> add_param(:query, :"path", path)
    |> add_param(:query, :"p.limit", p_periodlimit)
    |> add_param(:query, :"1_property", 1_property)
    |> add_param(:query, :"1_property.value", 1_property_periodvalue)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - ignoredeactivated (boolean()): 
  - onlymodified (boolean()): 
  - path (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_tree_activation(Tesla.Env.client, boolean(), boolean(), String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def post_tree_activation(connection, ignoredeactivated, onlymodified, path, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/etc/replication/treeactivation.html")
    |> add_param(:query, :"ignoredeactivated", ignoredeactivated)
    |> add_param(:query, :"onlymodified", onlymodified)
    |> add_param(:query, :"path", path)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :operation (String.t): 
    - :new_password (String.t): 
    - :re_password (String.t): 
    - :key_store_type (String.t): 
    - :remove_alias (String.t): 
    - :certificate (String.t): 
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_truststore(Tesla.Env.client, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def post_truststore(connection, opts \\ []) do
    optional_params = %{
      :":operation" => :query,
      :"newPassword" => :query,
      :"rePassword" => :query,
      :"keyStoreType" => :query,
      :"removeAlias" => :query,
      :"certificate" => :form
    }
    %{}
    |> method(:post)
    |> url("/libs/granite/security/post/truststore")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :truststore_periodp12 (String.t): 
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_truststore_pkcs12(Tesla.Env.client, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def post_truststore_pkcs12(connection, opts \\ []) do
    optional_params = %{
      :"truststore.p12" => :form
    }
    %{}
    |> method(:post)
    |> url("/etc/truststore")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end
end
