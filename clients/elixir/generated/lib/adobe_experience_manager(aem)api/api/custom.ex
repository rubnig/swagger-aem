# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule AdobeExperienceManager(AEM)API.Api.Custom do
  @moduledoc """
  API calls for all endpoints tagged `Custom`.
  """

  alias AdobeExperienceManager(AEM)API.Connection
  import AdobeExperienceManager(AEM)API.RequestBuilder


  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :tags (String.t): 
    - :combine_tags_or (boolean()): 
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_aem_health_check(Tesla.Env.client, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def get_aem_health_check(connection, opts \\ []) do
    optional_params = %{
      :"tags" => :query,
      :"combineTagsOr" => :query
    }
    %{}
    |> method(:get)
    |> url("/system/health")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :bundles_periodignored ([String.t]): 
    - :bundles_periodignored_at_type_hint (String.t): 
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_config_aem_health_check_servlet(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def post_config_aem_health_check_servlet(connection, opts \\ []) do
    optional_params = %{
      :"bundles.ignored" => :query,
      :"bundles.ignored@TypeHint" => :query
    }
    %{}
    |> method(:post)
    |> url("/apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :pwdreset_periodauthorizables ([String.t]): 
    - :pwdreset_periodauthorizables_at_type_hint (String.t): 
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_config_aem_password_reset(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def post_config_aem_password_reset(connection, opts \\ []) do
    optional_params = %{
      :"pwdreset.authorizables" => :query,
      :"pwdreset.authorizables@TypeHint" => :query
    }
    %{}
    |> method(:post)
    |> url("/apps/system/config/com.shinesolutions.aem.passwordreset.Activator")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end
end
