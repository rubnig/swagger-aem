# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule AdobeExperienceManager(AEM)API.Api.Console do
  @moduledoc """
  API calls for all endpoints tagged `Console`.
  """

  alias AdobeExperienceManager(AEM)API.Connection
  import AdobeExperienceManager(AEM)API.RequestBuilder


  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%String{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_aem_product_info(Tesla.Env.client, keyword()) :: {:ok, list(String.t)} | {:error, Tesla.Env.t}
  def get_aem_product_info(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/system/console/status-productinfo.json")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, []}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - name (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, AdobeExperienceManager(AEM)API.Model.BundleInfo.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_bundle_info(Tesla.Env.client, String.t, keyword()) :: {:ok, AdobeExperienceManager(AEM)API.Model.BundleInfo.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def get_bundle_info(connection, name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/system/console/bundles/#{name}.json")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %AdobeExperienceManager(AEM)API.Model.BundleInfo{}},
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_config_mgr(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def get_config_mgr(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/system/console/configMgr")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { "5XX", false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - name (String.t): 
  - action (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_bundle(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def post_bundle(connection, name, action, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/system/console/bundles/#{name}")
    |> add_param(:query, :"action", action)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - action (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_jmx_repository(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def post_jmx_repository(connection, action, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/system/console/jmx/com.adobe.granite:type&#x3D;Repository/op/#{action}")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { :default, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManager(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :path ([String.t]): 
    - :service_periodranking (integer()): 
    - :idp_url (String.t): 
    - :idp_cert_alias (String.t): 
    - :idp_http_redirect (boolean()): 
    - :service_provider_entity_id (String.t): 
    - :assertion_consumer_service_url (String.t): 
    - :sp_private_key_alias (String.t): 
    - :key_store_password (String.t): 
    - :default_redirect_url (String.t): 
    - :user_id_attribute (String.t): 
    - :use_encryption (boolean()): 
    - :create_user (boolean()): 
    - :add_group_memberships (boolean()): 
    - :group_membership_attribute (String.t): 
    - :default_groups ([String.t]): 
    - :name_id_format (String.t): 
    - :synchronize_attributes ([String.t]): 
    - :handle_logout (boolean()): 
    - :logout_url (String.t): 
    - :clock_tolerance (integer()): 
    - :digest_method (String.t): 
    - :signature_method (String.t): 
    - :user_intermediate_path (String.t): 
    - :propertylist ([String.t]): 
  ## Returns

  {:ok, AdobeExperienceManager(AEM)API.Model.SamlConfigurationInfo.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_saml_configuration(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManager(AEM)API.Model.SamlConfigurationInfo.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def post_saml_configuration(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"path" => :query,
      :"service.ranking" => :query,
      :"idpUrl" => :query,
      :"idpCertAlias" => :query,
      :"idpHttpRedirect" => :query,
      :"serviceProviderEntityId" => :query,
      :"assertionConsumerServiceURL" => :query,
      :"spPrivateKeyAlias" => :query,
      :"keyStorePassword" => :query,
      :"defaultRedirectUrl" => :query,
      :"userIDAttribute" => :query,
      :"useEncryption" => :query,
      :"createUser" => :query,
      :"addGroupMemberships" => :query,
      :"groupMembershipAttribute" => :query,
      :"defaultGroups" => :query,
      :"nameIdFormat" => :query,
      :"synchronizeAttributes" => :query,
      :"handleLogout" => :query,
      :"logoutUrl" => :query,
      :"clockTolerance" => :query,
      :"digestMethod" => :query,
      :"signatureMethod" => :query,
      :"userIntermediatePath" => :query,
      :"propertylist" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %AdobeExperienceManager(AEM)API.Model.SamlConfigurationInfo{}},
      { 302, false},
      { :default, false}
    ])
  end
end
