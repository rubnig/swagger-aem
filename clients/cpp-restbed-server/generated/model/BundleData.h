/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BundleData.h
 *
 * 
 */

#ifndef BundleData_H_
#define BundleData_H_



#include "BundleDataProp.h"
#include <string>
#include <vector>
#include <memory>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  BundleData 
{
public:
    BundleData();
    virtual ~BundleData();
    
    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// BundleData members

    /// <summary>
    /// Bundle ID
    /// </summary>
    int32_t getId() const;
    void setId(int32_t value);

    /// <summary>
    /// Bundle name
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// Is bundle a fragment
    /// </summary>
    bool isFragment() const;
    void setFragment(bool value);

    /// <summary>
    /// Numeric raw bundle state value
    /// </summary>
    int32_t getStateRaw() const;
    void setStateRaw(int32_t value);

    /// <summary>
    /// Bundle state value
    /// </summary>
    std::string getState() const;
    void setState(std::string value);

    /// <summary>
    /// Bundle version
    /// </summary>
    std::string getVersion() const;
    void setVersion(std::string value);

    /// <summary>
    /// Bundle symbolic name
    /// </summary>
    std::string getSymbolicName() const;
    void setSymbolicName(std::string value);

    /// <summary>
    /// Bundle category
    /// </summary>
    std::string getCategory() const;
    void setCategory(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BundleDataProp>> getProps() const;
    void setProps(std::vector<std::shared_ptr<BundleDataProp>> value);
protected:
    int32_t m_Id;
    std::string m_Name;
    bool m_Fragment;
    int32_t m_StateRaw;
    std::string m_State;
    std::string m_Version;
    std::string m_SymbolicName;
    std::string m_Category;
    std::vector<std::shared_ptr<BundleDataProp>> m_Props;
};

}
}
}
}

#endif /* BundleData_H_ */
