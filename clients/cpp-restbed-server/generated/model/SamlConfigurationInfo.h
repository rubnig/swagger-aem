/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SamlConfigurationInfo.h
 *
 * 
 */

#ifndef SamlConfigurationInfo_H_
#define SamlConfigurationInfo_H_



#include <string>
#include "SamlConfigurationProperties.h"
#include <memory>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  SamlConfigurationInfo 
{
public:
    SamlConfigurationInfo();
    virtual ~SamlConfigurationInfo();
    
    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// SamlConfigurationInfo members

    /// <summary>
    /// Persistent Identity (PID)
    /// </summary>
    std::string getPid() const;
    void setPid(std::string value);

    /// <summary>
    /// Title
    /// </summary>
    std::string getTitle() const;
    void setTitle(std::string value);

    /// <summary>
    /// Title
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string value);

    /// <summary>
    /// needed for configuration binding
    /// </summary>
    std::string getBundleLocation() const;
    void setBundleLocation(std::string value);

    /// <summary>
    /// needed for configuraiton binding
    /// </summary>
    std::string getServiceLocation() const;
    void setServiceLocation(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SamlConfigurationProperties> getProperties() const;
    void setProperties(std::shared_ptr<SamlConfigurationProperties> value);
protected:
    std::string m_Pid;
    std::string m_Title;
    std::string m_Description;
    std::string m_Bundle_location;
    std::string m_Service_location;
    std::shared_ptr<SamlConfigurationProperties> m_Properties;
};

}
}
}
}

#endif /* SamlConfigurationInfo_H_ */
