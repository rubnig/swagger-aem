/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "KeystoreItems.h"

#include <string>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

KeystoreItems::KeystoreItems()
{
	m_Alias = "";
	m_EntryType = "";
	m_Algorithm = "";
	m_Format = "";
}

KeystoreItems::~KeystoreItems()
{
}

std::string KeystoreItems::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void KeystoreItems::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree KeystoreItems::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	pt.put("alias", m_Alias);
	pt.put("entryType", m_EntryType);
	pt.put("algorithm", m_Algorithm);
	pt.put("format", m_Format);
	// generate tree for Chain
	if (!m_Chain.empty()) {
		for (const auto &childEntry : m_Chain) {
			ptree Chain_node;
			Chain_node.put("", childEntry);
			tmp_node.push_back(std::make_pair("", Chain_node));
		}
		pt.add_child("chain", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void KeystoreItems::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Alias = pt.get("alias", "");
	m_EntryType = pt.get("entryType", "");
	m_Algorithm = pt.get("algorithm", "");
	m_Format = pt.get("format", "");
	// push all items of Chain into member vector
	if (pt.get_child_optional("chain")) {
		for (const auto &childTree : pt.get_child("chain")) {
			m_Chain.emplace_back(childTree.second.data());
		}
	}
}

std::string KeystoreItems::getAlias() const
{
    return m_Alias;
}
void KeystoreItems::setAlias(std::string value)
{
	m_Alias = value;
}
std::string KeystoreItems::getEntryType() const
{
    return m_EntryType;
}
void KeystoreItems::setEntryType(std::string value)
{
	m_EntryType = value;
}
std::string KeystoreItems::getAlgorithm() const
{
    return m_Algorithm;
}
void KeystoreItems::setAlgorithm(std::string value)
{
	m_Algorithm = value;
}
std::string KeystoreItems::getFormat() const
{
    return m_Format;
}
void KeystoreItems::setFormat(std::string value)
{
	m_Format = value;
}
std::vector<std::shared_ptr<KeystoreChainItems>> KeystoreItems::getChain() const
{
    return m_Chain;
}
void KeystoreItems::setChain(std::vector<std::shared_ptr<KeystoreChainItems>> value)
{
	m_Chain = value;
}

}
}
}
}

