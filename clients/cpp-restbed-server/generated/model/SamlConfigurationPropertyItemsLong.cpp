/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SamlConfigurationPropertyItemsLong.h"

#include <string>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

SamlConfigurationPropertyItemsLong::SamlConfigurationPropertyItemsLong()
{
	m_Name = "";
	m_Optional = false;
	m_Is_set = false;
	m_Type = 0;
	m_Value = 0;
	m_Description = "";
}

SamlConfigurationPropertyItemsLong::~SamlConfigurationPropertyItemsLong()
{
}

std::string SamlConfigurationPropertyItemsLong::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void SamlConfigurationPropertyItemsLong::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree SamlConfigurationPropertyItemsLong::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	pt.put("name", m_Name);
	pt.put("optional", m_Optional);
	pt.put("is_set", m_Is_set);
	pt.put("type", m_Type);
	pt.put("value", m_Value);
	pt.put("description", m_Description);
	return pt;
}

void SamlConfigurationPropertyItemsLong::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Name = pt.get("name", "");
	m_Optional = pt.get("optional", false);
	m_Is_set = pt.get("is_set", false);
	m_Type = pt.get("type", 0);
	m_Value = pt.get("value", 0);
	m_Description = pt.get("description", "");
}

std::string SamlConfigurationPropertyItemsLong::getName() const
{
    return m_Name;
}
void SamlConfigurationPropertyItemsLong::setName(std::string value)
{
	m_Name = value;
}
bool SamlConfigurationPropertyItemsLong::isOptional() const
{
    return m_Optional;
}
void SamlConfigurationPropertyItemsLong::setOptional(bool value)
{
	m_Optional = value;
}
bool SamlConfigurationPropertyItemsLong::isIsSet() const
{
    return m_Is_set;
}
void SamlConfigurationPropertyItemsLong::setIsSet(bool value)
{
	m_Is_set = value;
}
int32_t SamlConfigurationPropertyItemsLong::getType() const
{
    return m_Type;
}
void SamlConfigurationPropertyItemsLong::setType(int32_t value)
{
	m_Type = value;
}
int32_t SamlConfigurationPropertyItemsLong::getValue() const
{
    return m_Value;
}
void SamlConfigurationPropertyItemsLong::setValue(int32_t value)
{
	m_Value = value;
}
std::string SamlConfigurationPropertyItemsLong::getDescription() const
{
    return m_Description;
}
void SamlConfigurationPropertyItemsLong::setDescription(std::string value)
{
	m_Description = value;
}

}
}
}
}

