/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BundleInfo.h"

#include <string>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

BundleInfo::BundleInfo()
{
	m_Status = "";
}

BundleInfo::~BundleInfo()
{
}

std::string BundleInfo::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void BundleInfo::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree BundleInfo::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	pt.put("status", m_Status);
	// generate tree for s
	if (!m_s.empty()) {
		for (const auto &childEntry : m_s) {
			ptree s_node;
			s_node.put("", childEntry);
			tmp_node.push_back(std::make_pair("", s_node));
		}
		pt.add_child("s", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Data
	if (!m_Data.empty()) {
		for (const auto &childEntry : m_Data) {
			ptree Data_node;
			Data_node.put("", childEntry);
			tmp_node.push_back(std::make_pair("", Data_node));
		}
		pt.add_child("data", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void BundleInfo::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Status = pt.get("status", "");
	// push all items of s into member vector
	if (pt.get_child_optional("s")) {
		for (const auto &childTree : pt.get_child("s")) {
			m_s.emplace_back(std::stoi(childTree.second.data()));
		}
	}
	// push all items of Data into member vector
	if (pt.get_child_optional("data")) {
		for (const auto &childTree : pt.get_child("data")) {
			m_Data.emplace_back(childTree.second.data());
		}
	}
}

std::string BundleInfo::getStatus() const
{
    return m_Status;
}
void BundleInfo::setStatus(std::string value)
{
	m_Status = value;
}
std::vector<int32_t> BundleInfo::getS() const
{
    return m_s;
}
void BundleInfo::setS(std::vector<int32_t> value)
{
	m_s = value;
}
std::vector<std::shared_ptr<BundleData>> BundleInfo::getData() const
{
    return m_Data;
}
void BundleInfo::setData(std::vector<std::shared_ptr<BundleData>> value)
{
	m_Data = value;
}

}
}
}
}

