/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SamlConfigurationProperties.h"

#include <string>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

SamlConfigurationProperties::SamlConfigurationProperties()
{
}

SamlConfigurationProperties::~SamlConfigurationProperties()
{
}

std::string SamlConfigurationProperties::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void SamlConfigurationProperties::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree SamlConfigurationProperties::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	if (m_Path != nullptr) {
		pt.add_child("path", m_Path->toPropertyTree());
	}
	if (m_Service_ranking != nullptr) {
		pt.add_child("service.ranking", m_Service_ranking->toPropertyTree());
	}
	if (m_IdpUrl != nullptr) {
		pt.add_child("idpUrl", m_IdpUrl->toPropertyTree());
	}
	if (m_IdpCertAlias != nullptr) {
		pt.add_child("idpCertAlias", m_IdpCertAlias->toPropertyTree());
	}
	if (m_IdpHttpRedirect != nullptr) {
		pt.add_child("idpHttpRedirect", m_IdpHttpRedirect->toPropertyTree());
	}
	if (m_ServiceProviderEntityId != nullptr) {
		pt.add_child("serviceProviderEntityId", m_ServiceProviderEntityId->toPropertyTree());
	}
	if (m_AssertionConsumerServiceURL != nullptr) {
		pt.add_child("assertionConsumerServiceURL", m_AssertionConsumerServiceURL->toPropertyTree());
	}
	if (m_SpPrivateKeyAlias != nullptr) {
		pt.add_child("spPrivateKeyAlias", m_SpPrivateKeyAlias->toPropertyTree());
	}
	if (m_KeyStorePassword != nullptr) {
		pt.add_child("keyStorePassword", m_KeyStorePassword->toPropertyTree());
	}
	if (m_DefaultRedirectUrl != nullptr) {
		pt.add_child("defaultRedirectUrl", m_DefaultRedirectUrl->toPropertyTree());
	}
	if (m_UserIDAttribute != nullptr) {
		pt.add_child("userIDAttribute", m_UserIDAttribute->toPropertyTree());
	}
	if (m_UseEncryption != nullptr) {
		pt.add_child("useEncryption", m_UseEncryption->toPropertyTree());
	}
	if (m_CreateUser != nullptr) {
		pt.add_child("createUser", m_CreateUser->toPropertyTree());
	}
	if (m_AddGroupMemberships != nullptr) {
		pt.add_child("addGroupMemberships", m_AddGroupMemberships->toPropertyTree());
	}
	if (m_GroupMembershipAttribute != nullptr) {
		pt.add_child("groupMembershipAttribute", m_GroupMembershipAttribute->toPropertyTree());
	}
	if (m_DefaultGroups != nullptr) {
		pt.add_child("defaultGroups", m_DefaultGroups->toPropertyTree());
	}
	if (m_NameIdFormat != nullptr) {
		pt.add_child("nameIdFormat", m_NameIdFormat->toPropertyTree());
	}
	if (m_SynchronizeAttributes != nullptr) {
		pt.add_child("synchronizeAttributes", m_SynchronizeAttributes->toPropertyTree());
	}
	if (m_HandleLogout != nullptr) {
		pt.add_child("handleLogout", m_HandleLogout->toPropertyTree());
	}
	if (m_LogoutUrl != nullptr) {
		pt.add_child("logoutUrl", m_LogoutUrl->toPropertyTree());
	}
	if (m_ClockTolerance != nullptr) {
		pt.add_child("clockTolerance", m_ClockTolerance->toPropertyTree());
	}
	if (m_DigestMethod != nullptr) {
		pt.add_child("digestMethod", m_DigestMethod->toPropertyTree());
	}
	if (m_SignatureMethod != nullptr) {
		pt.add_child("signatureMethod", m_SignatureMethod->toPropertyTree());
	}
	if (m_UserIntermediatePath != nullptr) {
		pt.add_child("userIntermediatePath", m_UserIntermediatePath->toPropertyTree());
	}
	return pt;
}

void SamlConfigurationProperties::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	if (pt.get_child_optional("path")) {
		m_Path = std::make_shared<SamlConfigurationPropertyItemsArray>();
		m_Path->fromPropertyTree(pt.get_child("path"));
	}
	if (pt.get_child_optional("service.ranking")) {
		m_Service_ranking = std::make_shared<SamlConfigurationPropertyItemsLong>();
		m_Service_ranking->fromPropertyTree(pt.get_child("service.ranking"));
	}
	if (pt.get_child_optional("idpUrl")) {
		m_IdpUrl = std::make_shared<SamlConfigurationPropertyItemsString>();
		m_IdpUrl->fromPropertyTree(pt.get_child("idpUrl"));
	}
	if (pt.get_child_optional("idpCertAlias")) {
		m_IdpCertAlias = std::make_shared<SamlConfigurationPropertyItemsString>();
		m_IdpCertAlias->fromPropertyTree(pt.get_child("idpCertAlias"));
	}
	if (pt.get_child_optional("idpHttpRedirect")) {
		m_IdpHttpRedirect = std::make_shared<SamlConfigurationPropertyItemsBoolean>();
		m_IdpHttpRedirect->fromPropertyTree(pt.get_child("idpHttpRedirect"));
	}
	if (pt.get_child_optional("serviceProviderEntityId")) {
		m_ServiceProviderEntityId = std::make_shared<SamlConfigurationPropertyItemsString>();
		m_ServiceProviderEntityId->fromPropertyTree(pt.get_child("serviceProviderEntityId"));
	}
	if (pt.get_child_optional("assertionConsumerServiceURL")) {
		m_AssertionConsumerServiceURL = std::make_shared<SamlConfigurationPropertyItemsString>();
		m_AssertionConsumerServiceURL->fromPropertyTree(pt.get_child("assertionConsumerServiceURL"));
	}
	if (pt.get_child_optional("spPrivateKeyAlias")) {
		m_SpPrivateKeyAlias = std::make_shared<SamlConfigurationPropertyItemsString>();
		m_SpPrivateKeyAlias->fromPropertyTree(pt.get_child("spPrivateKeyAlias"));
	}
	if (pt.get_child_optional("keyStorePassword")) {
		m_KeyStorePassword = std::make_shared<SamlConfigurationPropertyItemsString>();
		m_KeyStorePassword->fromPropertyTree(pt.get_child("keyStorePassword"));
	}
	if (pt.get_child_optional("defaultRedirectUrl")) {
		m_DefaultRedirectUrl = std::make_shared<SamlConfigurationPropertyItemsString>();
		m_DefaultRedirectUrl->fromPropertyTree(pt.get_child("defaultRedirectUrl"));
	}
	if (pt.get_child_optional("userIDAttribute")) {
		m_UserIDAttribute = std::make_shared<SamlConfigurationPropertyItemsString>();
		m_UserIDAttribute->fromPropertyTree(pt.get_child("userIDAttribute"));
	}
	if (pt.get_child_optional("useEncryption")) {
		m_UseEncryption = std::make_shared<SamlConfigurationPropertyItemsBoolean>();
		m_UseEncryption->fromPropertyTree(pt.get_child("useEncryption"));
	}
	if (pt.get_child_optional("createUser")) {
		m_CreateUser = std::make_shared<SamlConfigurationPropertyItemsBoolean>();
		m_CreateUser->fromPropertyTree(pt.get_child("createUser"));
	}
	if (pt.get_child_optional("addGroupMemberships")) {
		m_AddGroupMemberships = std::make_shared<SamlConfigurationPropertyItemsBoolean>();
		m_AddGroupMemberships->fromPropertyTree(pt.get_child("addGroupMemberships"));
	}
	if (pt.get_child_optional("groupMembershipAttribute")) {
		m_GroupMembershipAttribute = std::make_shared<SamlConfigurationPropertyItemsString>();
		m_GroupMembershipAttribute->fromPropertyTree(pt.get_child("groupMembershipAttribute"));
	}
	if (pt.get_child_optional("defaultGroups")) {
		m_DefaultGroups = std::make_shared<SamlConfigurationPropertyItemsArray>();
		m_DefaultGroups->fromPropertyTree(pt.get_child("defaultGroups"));
	}
	if (pt.get_child_optional("nameIdFormat")) {
		m_NameIdFormat = std::make_shared<SamlConfigurationPropertyItemsString>();
		m_NameIdFormat->fromPropertyTree(pt.get_child("nameIdFormat"));
	}
	if (pt.get_child_optional("synchronizeAttributes")) {
		m_SynchronizeAttributes = std::make_shared<SamlConfigurationPropertyItemsArray>();
		m_SynchronizeAttributes->fromPropertyTree(pt.get_child("synchronizeAttributes"));
	}
	if (pt.get_child_optional("handleLogout")) {
		m_HandleLogout = std::make_shared<SamlConfigurationPropertyItemsBoolean>();
		m_HandleLogout->fromPropertyTree(pt.get_child("handleLogout"));
	}
	if (pt.get_child_optional("logoutUrl")) {
		m_LogoutUrl = std::make_shared<SamlConfigurationPropertyItemsString>();
		m_LogoutUrl->fromPropertyTree(pt.get_child("logoutUrl"));
	}
	if (pt.get_child_optional("clockTolerance")) {
		m_ClockTolerance = std::make_shared<SamlConfigurationPropertyItemsLong>();
		m_ClockTolerance->fromPropertyTree(pt.get_child("clockTolerance"));
	}
	if (pt.get_child_optional("digestMethod")) {
		m_DigestMethod = std::make_shared<SamlConfigurationPropertyItemsString>();
		m_DigestMethod->fromPropertyTree(pt.get_child("digestMethod"));
	}
	if (pt.get_child_optional("signatureMethod")) {
		m_SignatureMethod = std::make_shared<SamlConfigurationPropertyItemsString>();
		m_SignatureMethod->fromPropertyTree(pt.get_child("signatureMethod"));
	}
	if (pt.get_child_optional("userIntermediatePath")) {
		m_UserIntermediatePath = std::make_shared<SamlConfigurationPropertyItemsString>();
		m_UserIntermediatePath->fromPropertyTree(pt.get_child("userIntermediatePath"));
	}
}

std::shared_ptr<SamlConfigurationPropertyItemsArray> SamlConfigurationProperties::getPath() const
{
    return m_Path;
}
void SamlConfigurationProperties::setPath(std::shared_ptr<SamlConfigurationPropertyItemsArray> value)
{
	m_Path = value;
}
std::shared_ptr<SamlConfigurationPropertyItemsLong> SamlConfigurationProperties::getServiceRanking() const
{
    return m_Service_ranking;
}
void SamlConfigurationProperties::setServiceRanking(std::shared_ptr<SamlConfigurationPropertyItemsLong> value)
{
	m_Service_ranking = value;
}
std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getIdpUrl() const
{
    return m_IdpUrl;
}
void SamlConfigurationProperties::setIdpUrl(std::shared_ptr<SamlConfigurationPropertyItemsString> value)
{
	m_IdpUrl = value;
}
std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getIdpCertAlias() const
{
    return m_IdpCertAlias;
}
void SamlConfigurationProperties::setIdpCertAlias(std::shared_ptr<SamlConfigurationPropertyItemsString> value)
{
	m_IdpCertAlias = value;
}
std::shared_ptr<SamlConfigurationPropertyItemsBoolean> SamlConfigurationProperties::getIdpHttpRedirect() const
{
    return m_IdpHttpRedirect;
}
void SamlConfigurationProperties::setIdpHttpRedirect(std::shared_ptr<SamlConfigurationPropertyItemsBoolean> value)
{
	m_IdpHttpRedirect = value;
}
std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getServiceProviderEntityId() const
{
    return m_ServiceProviderEntityId;
}
void SamlConfigurationProperties::setServiceProviderEntityId(std::shared_ptr<SamlConfigurationPropertyItemsString> value)
{
	m_ServiceProviderEntityId = value;
}
std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getAssertionConsumerServiceURL() const
{
    return m_AssertionConsumerServiceURL;
}
void SamlConfigurationProperties::setAssertionConsumerServiceURL(std::shared_ptr<SamlConfigurationPropertyItemsString> value)
{
	m_AssertionConsumerServiceURL = value;
}
std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getSpPrivateKeyAlias() const
{
    return m_SpPrivateKeyAlias;
}
void SamlConfigurationProperties::setSpPrivateKeyAlias(std::shared_ptr<SamlConfigurationPropertyItemsString> value)
{
	m_SpPrivateKeyAlias = value;
}
std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getKeyStorePassword() const
{
    return m_KeyStorePassword;
}
void SamlConfigurationProperties::setKeyStorePassword(std::shared_ptr<SamlConfigurationPropertyItemsString> value)
{
	m_KeyStorePassword = value;
}
std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getDefaultRedirectUrl() const
{
    return m_DefaultRedirectUrl;
}
void SamlConfigurationProperties::setDefaultRedirectUrl(std::shared_ptr<SamlConfigurationPropertyItemsString> value)
{
	m_DefaultRedirectUrl = value;
}
std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getUserIDAttribute() const
{
    return m_UserIDAttribute;
}
void SamlConfigurationProperties::setUserIDAttribute(std::shared_ptr<SamlConfigurationPropertyItemsString> value)
{
	m_UserIDAttribute = value;
}
std::shared_ptr<SamlConfigurationPropertyItemsBoolean> SamlConfigurationProperties::getUseEncryption() const
{
    return m_UseEncryption;
}
void SamlConfigurationProperties::setUseEncryption(std::shared_ptr<SamlConfigurationPropertyItemsBoolean> value)
{
	m_UseEncryption = value;
}
std::shared_ptr<SamlConfigurationPropertyItemsBoolean> SamlConfigurationProperties::getCreateUser() const
{
    return m_CreateUser;
}
void SamlConfigurationProperties::setCreateUser(std::shared_ptr<SamlConfigurationPropertyItemsBoolean> value)
{
	m_CreateUser = value;
}
std::shared_ptr<SamlConfigurationPropertyItemsBoolean> SamlConfigurationProperties::getAddGroupMemberships() const
{
    return m_AddGroupMemberships;
}
void SamlConfigurationProperties::setAddGroupMemberships(std::shared_ptr<SamlConfigurationPropertyItemsBoolean> value)
{
	m_AddGroupMemberships = value;
}
std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getGroupMembershipAttribute() const
{
    return m_GroupMembershipAttribute;
}
void SamlConfigurationProperties::setGroupMembershipAttribute(std::shared_ptr<SamlConfigurationPropertyItemsString> value)
{
	m_GroupMembershipAttribute = value;
}
std::shared_ptr<SamlConfigurationPropertyItemsArray> SamlConfigurationProperties::getDefaultGroups() const
{
    return m_DefaultGroups;
}
void SamlConfigurationProperties::setDefaultGroups(std::shared_ptr<SamlConfigurationPropertyItemsArray> value)
{
	m_DefaultGroups = value;
}
std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getNameIdFormat() const
{
    return m_NameIdFormat;
}
void SamlConfigurationProperties::setNameIdFormat(std::shared_ptr<SamlConfigurationPropertyItemsString> value)
{
	m_NameIdFormat = value;
}
std::shared_ptr<SamlConfigurationPropertyItemsArray> SamlConfigurationProperties::getSynchronizeAttributes() const
{
    return m_SynchronizeAttributes;
}
void SamlConfigurationProperties::setSynchronizeAttributes(std::shared_ptr<SamlConfigurationPropertyItemsArray> value)
{
	m_SynchronizeAttributes = value;
}
std::shared_ptr<SamlConfigurationPropertyItemsBoolean> SamlConfigurationProperties::getHandleLogout() const
{
    return m_HandleLogout;
}
void SamlConfigurationProperties::setHandleLogout(std::shared_ptr<SamlConfigurationPropertyItemsBoolean> value)
{
	m_HandleLogout = value;
}
std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getLogoutUrl() const
{
    return m_LogoutUrl;
}
void SamlConfigurationProperties::setLogoutUrl(std::shared_ptr<SamlConfigurationPropertyItemsString> value)
{
	m_LogoutUrl = value;
}
std::shared_ptr<SamlConfigurationPropertyItemsLong> SamlConfigurationProperties::getClockTolerance() const
{
    return m_ClockTolerance;
}
void SamlConfigurationProperties::setClockTolerance(std::shared_ptr<SamlConfigurationPropertyItemsLong> value)
{
	m_ClockTolerance = value;
}
std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getDigestMethod() const
{
    return m_DigestMethod;
}
void SamlConfigurationProperties::setDigestMethod(std::shared_ptr<SamlConfigurationPropertyItemsString> value)
{
	m_DigestMethod = value;
}
std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getSignatureMethod() const
{
    return m_SignatureMethod;
}
void SamlConfigurationProperties::setSignatureMethod(std::shared_ptr<SamlConfigurationPropertyItemsString> value)
{
	m_SignatureMethod = value;
}
std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getUserIntermediatePath() const
{
    return m_UserIntermediatePath;
}
void SamlConfigurationProperties::setUserIntermediatePath(std::shared_ptr<SamlConfigurationPropertyItemsString> value)
{
	m_UserIntermediatePath = value;
}

}
}
}
}

