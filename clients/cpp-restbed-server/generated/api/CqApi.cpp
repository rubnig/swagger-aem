/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>

#include "CqApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

CqApi::CqApi() {
}

CqApi::~CqApi() {}

void CqApi::startService(int const& port) {
	// A typical pattern is to derive a class from CqApi and allocate the shared pointers for restbed::Resource objects
	// and manipulate them (e.g. binding GET/POST handler functions) before this startService() gets called.
	// In such a case we want to use our m_spXXX variables.
	// However in case these shared pointers are nullptr, then allocate the restbed::Resources now:
	if (!m_spCqApiLibsGraniteCoreContentLogin.htmlResource)
		m_spCqApiLibsGraniteCoreContentLogin.htmlResource = std::make_shared<CqApiLibsGraniteCoreContentLogin.htmlResource>();
	this->publish(m_spCqApiLibsGraniteCoreContentLogin.htmlResource);
	if (!m_spCqApi.cqactions.htmlResource)
		m_spCqApi.cqactions.htmlResource = std::make_shared<CqApi.cqactions.htmlResource>();
	this->publish(m_spCqApi.cqactions.htmlResource);

	std::shared_ptr<restbed::Settings> settings = std::make_shared<restbed::Settings>();
	settings->set_port(port);
	settings->set_root("");
	
	this->start(settings);
}

void CqApi::stopService() {
	this->stop();
}

CqApiLibsGraniteCoreContentLogin.htmlResource::CqApiLibsGraniteCoreContentLogin.htmlResource()
{
	this->set_path("/libs/granite/core/content/login.html/");
	this->set_method_handler("GET",
		std::bind(&CqApiLibsGraniteCoreContentLogin.htmlResource::GET_method_handler, this,
			std::placeholders::_1));
}

CqApiLibsGraniteCoreContentLogin.htmlResource::~CqApiLibsGraniteCoreContentLogin.htmlResource()
{
}

void CqApiLibsGraniteCoreContentLogin.htmlResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		
	)> handler) {
	handler_GET_ = std::move(handler);
}


void CqApiLibsGraniteCoreContentLogin.htmlResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();




			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					
				);
			}

			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



CqApi.cqactions.htmlResource::CqApi.cqactions.htmlResource()
{
	this->set_path("/.cqactions.html/");
	this->set_method_handler("POST",
		std::bind(&CqApi.cqactions.htmlResource::POST_method_handler, this,
			std::placeholders::_1));
}

CqApi.cqactions.htmlResource::~CqApi.cqactions.htmlResource()
{
}

void CqApi.cqactions.htmlResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void CqApi.cqactions.htmlResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const std::string authorizableId = request->get_query_parameter("authorizableId", "");
			const std::string changelog = request->get_query_parameter("changelog", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					authorizableId, changelog
				);
			}

			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}




}
}
}
}

