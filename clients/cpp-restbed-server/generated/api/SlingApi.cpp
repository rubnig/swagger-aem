/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>

#include "SlingApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

SlingApi::SlingApi() {
}

SlingApi::~SlingApi() {}

void SlingApi::startService(int const& port) {
	// A typical pattern is to derive a class from SlingApi and allocate the shared pointers for restbed::Resource objects
	// and manipulate them (e.g. binding GET/POST handler functions) before this startService() gets called.
	// In such a case we want to use our m_spXXX variables.
	// However in case these shared pointers are nullptr, then allocate the restbed::Resources now:
	if (!m_spSlingApiEtcReplicationAgents.{runmode}NameResource)
		m_spSlingApiEtcReplicationAgents.{runmode}NameResource = std::make_shared<SlingApiEtcReplicationAgents.{runmode}NameResource>();
	this->publish(m_spSlingApiEtcReplicationAgents.{runmode}NameResource);
	if (!m_spSlingApiPathNameResource)
		m_spSlingApiPathNameResource = std::make_shared<SlingApiPathNameResource>();
	this->publish(m_spSlingApiPathNameResource);
	if (!m_spSlingApiEtcReplicationAgents.{runmode}.-1.jsonResource)
		m_spSlingApiEtcReplicationAgents.{runmode}.-1.jsonResource = std::make_shared<SlingApiEtcReplicationAgents.{runmode}.-1.jsonResource>();
	this->publish(m_spSlingApiEtcReplicationAgents.{runmode}.-1.jsonResource);
	if (!m_spSlingApiIntermediatePath{authorizableId}.ks.jsonResource)
		m_spSlingApiIntermediatePath{authorizableId}.ks.jsonResource = std::make_shared<SlingApiIntermediatePath{authorizableId}.ks.jsonResource>();
	this->publish(m_spSlingApiIntermediatePath{authorizableId}.ks.jsonResource);
	if (!m_spSlingApiIntermediatePathAuthorizableIdKeystoreStore.p12Resource)
		m_spSlingApiIntermediatePathAuthorizableIdKeystoreStore.p12Resource = std::make_shared<SlingApiIntermediatePathAuthorizableIdKeystoreStore.p12Resource>();
	this->publish(m_spSlingApiIntermediatePathAuthorizableIdKeystoreStore.p12Resource);
	if (!m_spSlingApiEtcPackagesGroup{name}-{version}.zipResource)
		m_spSlingApiEtcPackagesGroup{name}-{version}.zipResource = std::make_shared<SlingApiEtcPackagesGroup{name}-{version}.zipResource>();
	this->publish(m_spSlingApiEtcPackagesGroup{name}-{version}.zipResource);
	if (!m_spSlingApiEtcPackagesGroup{name}-{version}.zipJcr:contentVlt:definitionFilter.tidy.2.jsonResource)
		m_spSlingApiEtcPackagesGroup{name}-{version}.zipJcr:contentVlt:definitionFilter.tidy.2.jsonResource = std::make_shared<SlingApiEtcPackagesGroup{name}-{version}.zipJcr:contentVlt:definitionFilter.tidy.2.jsonResource>();
	this->publish(m_spSlingApiEtcPackagesGroup{name}-{version}.zipJcr:contentVlt:definitionFilter.tidy.2.jsonResource);
	if (!m_spSlingApiBinQuerybuilder.jsonResource)
		m_spSlingApiBinQuerybuilder.jsonResource = std::make_shared<SlingApiBinQuerybuilder.jsonResource>();
	this->publish(m_spSlingApiBinQuerybuilder.jsonResource);
	if (!m_spSlingApiEtcTruststoreTruststore.p12Resource)
		m_spSlingApiEtcTruststoreTruststore.p12Resource = std::make_shared<SlingApiEtcTruststoreTruststore.p12Resource>();
	this->publish(m_spSlingApiEtcTruststoreTruststore.p12Resource);
	if (!m_spSlingApiLibsGraniteSecurityTruststore.jsonResource)
		m_spSlingApiLibsGraniteSecurityTruststore.jsonResource = std::make_shared<SlingApiLibsGraniteSecurityTruststore.jsonResource>();
	this->publish(m_spSlingApiLibsGraniteSecurityTruststore.jsonResource);
	if (!m_spSlingApiIntermediatePath{authorizableId}.ks.htmlResource)
		m_spSlingApiIntermediatePath{authorizableId}.ks.htmlResource = std::make_shared<SlingApiIntermediatePath{authorizableId}.ks.htmlResource>();
	this->publish(m_spSlingApiIntermediatePath{authorizableId}.ks.htmlResource);
	if (!m_spSlingApiLibsGraniteSecurityPostAuthorizablesResource)
		m_spSlingApiLibsGraniteSecurityPostAuthorizablesResource = std::make_shared<SlingApiLibsGraniteSecurityPostAuthorizablesResource>();
	this->publish(m_spSlingApiLibsGraniteSecurityPostAuthorizablesResource);
	if (!m_spSlingApiAppsSystemConfigCom.adobe.granite.auth.saml.SamlAuthenticationHandler.configResource)
		m_spSlingApiAppsSystemConfigCom.adobe.granite.auth.saml.SamlAuthenticationHandler.configResource = std::make_shared<SlingApiAppsSystemConfigCom.adobe.granite.auth.saml.SamlAuthenticationHandler.configResource>();
	this->publish(m_spSlingApiAppsSystemConfigCom.adobe.granite.auth.saml.SamlAuthenticationHandler.configResource);
	if (!m_spSlingApiAppsSystemConfigOrg.apache.felix.httpResource)
		m_spSlingApiAppsSystemConfigOrg.apache.felix.httpResource = std::make_shared<SlingApiAppsSystemConfigOrg.apache.felix.httpResource>();
	this->publish(m_spSlingApiAppsSystemConfigOrg.apache.felix.httpResource);
	if (!m_spSlingApiAppsSystemConfigOrg.apache.http.proxyconfigurator.configResource)
		m_spSlingApiAppsSystemConfigOrg.apache.http.proxyconfigurator.configResource = std::make_shared<SlingApiAppsSystemConfigOrg.apache.http.proxyconfigurator.configResource>();
	this->publish(m_spSlingApiAppsSystemConfigOrg.apache.http.proxyconfigurator.configResource);
	if (!m_spSlingApiAppsSystemConfigOrg.apache.sling.jcr.davex.impl.servlets.SlingDavExServletResource)
		m_spSlingApiAppsSystemConfigOrg.apache.sling.jcr.davex.impl.servlets.SlingDavExServletResource = std::make_shared<SlingApiAppsSystemConfigOrg.apache.sling.jcr.davex.impl.servlets.SlingDavExServletResource>();
	this->publish(m_spSlingApiAppsSystemConfigOrg.apache.sling.jcr.davex.impl.servlets.SlingDavExServletResource);
	if (!m_spSlingApiAppsSystemConfigOrg.apache.sling.servlets.get.DefaultGetServletResource)
		m_spSlingApiAppsSystemConfigOrg.apache.sling.servlets.get.DefaultGetServletResource = std::make_shared<SlingApiAppsSystemConfigOrg.apache.sling.servlets.get.DefaultGetServletResource>();
	this->publish(m_spSlingApiAppsSystemConfigOrg.apache.sling.servlets.get.DefaultGetServletResource);
	if (!m_spSlingApiAppsSystemConfigOrg.apache.sling.security.impl.ReferrerFilterResource)
		m_spSlingApiAppsSystemConfigOrg.apache.sling.security.impl.ReferrerFilterResource = std::make_shared<SlingApiAppsSystemConfigOrg.apache.sling.security.impl.ReferrerFilterResource>();
	this->publish(m_spSlingApiAppsSystemConfigOrg.apache.sling.security.impl.ReferrerFilterResource);
	if (!m_spSlingApiAppsSystemConfigConfigNodeNameResource)
		m_spSlingApiAppsSystemConfigConfigNodeNameResource = std::make_shared<SlingApiAppsSystemConfigConfigNodeNameResource>();
	this->publish(m_spSlingApiAppsSystemConfigConfigNodeNameResource);
	if (!m_spSlingApiPath{name}.rw.htmlResource)
		m_spSlingApiPath{name}.rw.htmlResource = std::make_shared<SlingApiPath{name}.rw.htmlResource>();
	this->publish(m_spSlingApiPath{name}.rw.htmlResource);
	if (!m_spSlingApiPathResource)
		m_spSlingApiPathResource = std::make_shared<SlingApiPathResource>();
	this->publish(m_spSlingApiPathResource);
	if (!m_spSlingApiEtcReplicationTreeactivation.htmlResource)
		m_spSlingApiEtcReplicationTreeactivation.htmlResource = std::make_shared<SlingApiEtcReplicationTreeactivation.htmlResource>();
	this->publish(m_spSlingApiEtcReplicationTreeactivation.htmlResource);
	if (!m_spSlingApiLibsGraniteSecurityPostTruststoreResource)
		m_spSlingApiLibsGraniteSecurityPostTruststoreResource = std::make_shared<SlingApiLibsGraniteSecurityPostTruststoreResource>();
	this->publish(m_spSlingApiLibsGraniteSecurityPostTruststoreResource);
	if (!m_spSlingApiEtcTruststoreResource)
		m_spSlingApiEtcTruststoreResource = std::make_shared<SlingApiEtcTruststoreResource>();
	this->publish(m_spSlingApiEtcTruststoreResource);

	std::shared_ptr<restbed::Settings> settings = std::make_shared<restbed::Settings>();
	settings->set_port(port);
	settings->set_root("");
	
	this->start(settings);
}

void SlingApi::stopService() {
	this->stop();
}

SlingApiEtcReplicationAgents.{runmode}NameResource::SlingApiEtcReplicationAgents.{runmode}NameResource()
{
	this->set_path("/etc/replication/agents.{runmode}/{name: .*}/");
	this->set_method_handler("DELETE",
		std::bind(&SlingApiEtcReplicationAgents.{runmode}NameResource::DELETE_method_handler, this,
			std::placeholders::_1));
	this->set_method_handler("POST",
		std::bind(&SlingApiEtcReplicationAgents.{runmode}NameResource::POST_method_handler, this,
			std::placeholders::_1));
}

SlingApiEtcReplicationAgents.{runmode}NameResource::~SlingApiEtcReplicationAgents.{runmode}NameResource()
{
}

void SlingApiEtcReplicationAgents.{runmode}NameResource::set_handler_DELETE(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &
	)> handler) {
	handler_DELETE_ = std::move(handler);
}

void SlingApiEtcReplicationAgents.{runmode}NameResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, bool const &, std::string const &, std::string const &, std::string const &, bool const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, bool const &, bool const &, double const &, bool const &, std::string const &, std::vector<std::string> const &, std::string const &, std::string const &, bool const &, std::string const &, double const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, double const &, std::string const &, double const &, std::string const &, double const &, std::string const &, bool const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, bool const &, bool const &, bool const &, bool const &, bool const &, std::string const &, std::string const &, std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}

void SlingApiEtcReplicationAgents.{runmode}NameResource::DELETE_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string runmode = request->get_path_parameter("runmode", "");
			const std::string name = request->get_path_parameter("name", "");



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_DELETE_)
			{
				std::tie(status_code, result) = handler_DELETE_(
					runmode, name
				);
			}

			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}

void SlingApiEtcReplicationAgents.{runmode}NameResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string runmode = request->get_path_parameter("runmode", "");
			const std::string name = request->get_path_parameter("name", "");

			// Getting the query params
			const bool jcrContentSlashcqDistribute = request->get_query_parameter("jcrContentSlashcqDistribute", false);
			const std::string jcrContentSlashcqDistributeAtTypeHint = request->get_query_parameter("jcrContentSlashcqDistributeAtTypeHint", "");
			const std::string jcrContentSlashcqName = request->get_query_parameter("jcrContentSlashcqName", "");
			const std::string jcrContentSlashcqTemplate = request->get_query_parameter("jcrContentSlashcqTemplate", "");
			const bool jcrContentSlashenabled = request->get_query_parameter("jcrContentSlashenabled", false);
			const std::string jcrContentSlashjcrDescription = request->get_query_parameter("jcrContentSlashjcrDescription", "");
			const std::string jcrContentSlashjcrLastModified = request->get_query_parameter("jcrContentSlashjcrLastModified", "");
			const std::string jcrContentSlashjcrLastModifiedBy = request->get_query_parameter("jcrContentSlashjcrLastModifiedBy", "");
			const std::string jcrContentSlashjcrMixinTypes = request->get_query_parameter("jcrContentSlashjcrMixinTypes", "");
			const std::string jcrContentSlashjcrTitle = request->get_query_parameter("jcrContentSlashjcrTitle", "");
			const std::string jcrContentSlashlogLevel = request->get_query_parameter("jcrContentSlashlogLevel", "");
			const bool jcrContentSlashnoStatusUpdate = request->get_query_parameter("jcrContentSlashnoStatusUpdate", false);
			const bool jcrContentSlashnoVersioning = request->get_query_parameter("jcrContentSlashnoVersioning", false);
			const double jcrContentSlashprotocolConnectTimeout = request->get_query_parameter("jcrContentSlashprotocolConnectTimeout", 0.0);
			const bool jcrContentSlashprotocolHTTPConnectionClosed = request->get_query_parameter("jcrContentSlashprotocolHTTPConnectionClosed", false);
			const std::string jcrContentSlashprotocolHTTPExpired = request->get_query_parameter("jcrContentSlashprotocolHTTPExpired", "");
			const std::string jcrContentSlashprotocolHTTPHeadersAtTypeHint = request->get_query_parameter("jcrContentSlashprotocolHTTPHeadersAtTypeHint", "");
			const std::string jcrContentSlashprotocolHTTPMethod = request->get_query_parameter("jcrContentSlashprotocolHTTPMethod", "");
			const bool jcrContentSlashprotocolHTTPSRelaxed = request->get_query_parameter("jcrContentSlashprotocolHTTPSRelaxed", false);
			const std::string jcrContentSlashprotocolInterface = request->get_query_parameter("jcrContentSlashprotocolInterface", "");
			const double jcrContentSlashprotocolSocketTimeout = request->get_query_parameter("jcrContentSlashprotocolSocketTimeout", 0.0);
			const std::string jcrContentSlashprotocolVersion = request->get_query_parameter("jcrContentSlashprotocolVersion", "");
			const std::string jcrContentSlashproxyNTLMDomain = request->get_query_parameter("jcrContentSlashproxyNTLMDomain", "");
			const std::string jcrContentSlashproxyNTLMHost = request->get_query_parameter("jcrContentSlashproxyNTLMHost", "");
			const std::string jcrContentSlashproxyHost = request->get_query_parameter("jcrContentSlashproxyHost", "");
			const std::string jcrContentSlashproxyPassword = request->get_query_parameter("jcrContentSlashproxyPassword", "");
			const double jcrContentSlashproxyPort = request->get_query_parameter("jcrContentSlashproxyPort", 0.0);
			const std::string jcrContentSlashproxyUser = request->get_query_parameter("jcrContentSlashproxyUser", "");
			const double jcrContentSlashqueueBatchMaxSize = request->get_query_parameter("jcrContentSlashqueueBatchMaxSize", 0.0);
			const std::string jcrContentSlashqueueBatchMode = request->get_query_parameter("jcrContentSlashqueueBatchMode", "");
			const double jcrContentSlashqueueBatchWaitTime = request->get_query_parameter("jcrContentSlashqueueBatchWaitTime", 0.0);
			const std::string jcrContentSlashretryDelay = request->get_query_parameter("jcrContentSlashretryDelay", "");
			const bool jcrContentSlashreverseReplication = request->get_query_parameter("jcrContentSlashreverseReplication", false);
			const std::string jcrContentSlashserializationType = request->get_query_parameter("jcrContentSlashserializationType", "");
			const std::string jcrContentSlashslingResourceType = request->get_query_parameter("jcrContentSlashslingResourceType", "");
			const std::string jcrContentSlashssl = request->get_query_parameter("jcrContentSlashssl", "");
			const std::string jcrContentSlashtransportNTLMDomain = request->get_query_parameter("jcrContentSlashtransportNTLMDomain", "");
			const std::string jcrContentSlashtransportNTLMHost = request->get_query_parameter("jcrContentSlashtransportNTLMHost", "");
			const std::string jcrContentSlashtransportPassword = request->get_query_parameter("jcrContentSlashtransportPassword", "");
			const std::string jcrContentSlashtransportUri = request->get_query_parameter("jcrContentSlashtransportUri", "");
			const std::string jcrContentSlashtransportUser = request->get_query_parameter("jcrContentSlashtransportUser", "");
			const bool jcrContentSlashtriggerDistribute = request->get_query_parameter("jcrContentSlashtriggerDistribute", false);
			const bool jcrContentSlashtriggerModified = request->get_query_parameter("jcrContentSlashtriggerModified", false);
			const bool jcrContentSlashtriggerOnOffTime = request->get_query_parameter("jcrContentSlashtriggerOnOffTime", false);
			const bool jcrContentSlashtriggerReceive = request->get_query_parameter("jcrContentSlashtriggerReceive", false);
			const bool jcrContentSlashtriggerSpecific = request->get_query_parameter("jcrContentSlashtriggerSpecific", false);
			const std::string jcrContentSlashuserId = request->get_query_parameter("jcrContentSlashuserId", "");
			const std::string jcrPrimaryType = request->get_query_parameter("jcrPrimaryType", "");
			const std::string operation = request->get_query_parameter("operation", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					runmode, name, jcrContentSlashcqDistribute, jcrContentSlashcqDistributeAtTypeHint, jcrContentSlashcqName, jcrContentSlashcqTemplate, jcrContentSlashenabled, jcrContentSlashjcrDescription, jcrContentSlashjcrLastModified, jcrContentSlashjcrLastModifiedBy, jcrContentSlashjcrMixinTypes, jcrContentSlashjcrTitle, jcrContentSlashlogLevel, jcrContentSlashnoStatusUpdate, jcrContentSlashnoVersioning, jcrContentSlashprotocolConnectTimeout, jcrContentSlashprotocolHTTPConnectionClosed, jcrContentSlashprotocolHTTPExpired, jcrContentSlashprotocolHTTPHeaders, jcrContentSlashprotocolHTTPHeadersAtTypeHint, jcrContentSlashprotocolHTTPMethod, jcrContentSlashprotocolHTTPSRelaxed, jcrContentSlashprotocolInterface, jcrContentSlashprotocolSocketTimeout, jcrContentSlashprotocolVersion, jcrContentSlashproxyNTLMDomain, jcrContentSlashproxyNTLMHost, jcrContentSlashproxyHost, jcrContentSlashproxyPassword, jcrContentSlashproxyPort, jcrContentSlashproxyUser, jcrContentSlashqueueBatchMaxSize, jcrContentSlashqueueBatchMode, jcrContentSlashqueueBatchWaitTime, jcrContentSlashretryDelay, jcrContentSlashreverseReplication, jcrContentSlashserializationType, jcrContentSlashslingResourceType, jcrContentSlashssl, jcrContentSlashtransportNTLMDomain, jcrContentSlashtransportNTLMHost, jcrContentSlashtransportPassword, jcrContentSlashtransportUri, jcrContentSlashtransportUser, jcrContentSlashtriggerDistribute, jcrContentSlashtriggerModified, jcrContentSlashtriggerOnOffTime, jcrContentSlashtriggerReceive, jcrContentSlashtriggerSpecific, jcrContentSlashuserId, jcrPrimaryType, operation
				);
			}

			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}


SlingApiPathNameResource::SlingApiPathNameResource()
{
	this->set_path("/{path: .*}/{name: .*}/");
	this->set_method_handler("DELETE",
		std::bind(&SlingApiPathNameResource::DELETE_method_handler, this,
			std::placeholders::_1));
	this->set_method_handler("POST",
		std::bind(&SlingApiPathNameResource::POST_method_handler, this,
			std::placeholders::_1));
}

SlingApiPathNameResource::~SlingApiPathNameResource()
{
}

void SlingApiPathNameResource::set_handler_DELETE(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &
	)> handler) {
	handler_DELETE_ = std::move(handler);
}

void SlingApiPathNameResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}

void SlingApiPathNameResource::DELETE_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string path = request->get_path_parameter("path", "");
			const std::string name = request->get_path_parameter("name", "");



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_DELETE_)
			{
				std::tie(status_code, result) = handler_DELETE_(
					path, name
				);
			}

			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}

void SlingApiPathNameResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string path = request->get_path_parameter("path", "");
			const std::string name = request->get_path_parameter("name", "");

			// Getting the query params
			const std::string operation = request->get_query_parameter("operation", "");
			const std::string deleteAuthorizable = request->get_query_parameter("deleteAuthorizable", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					path, name, operation, deleteAuthorizable, file
				);
			}

			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}


SlingApiEtcReplicationAgents.{runmode}.-1.jsonResource::SlingApiEtcReplicationAgents.{runmode}.-1.jsonResource()
{
	this->set_path("/etc/replication/agents.{runmode}.-1.json/");
	this->set_method_handler("GET",
		std::bind(&SlingApiEtcReplicationAgents.{runmode}.-1.jsonResource::GET_method_handler, this,
			std::placeholders::_1));
}

SlingApiEtcReplicationAgents.{runmode}.-1.jsonResource::~SlingApiEtcReplicationAgents.{runmode}.-1.jsonResource()
{
}

void SlingApiEtcReplicationAgents.{runmode}.-1.jsonResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		std::string const &
	)> handler) {
	handler_GET_ = std::move(handler);
}


void SlingApiEtcReplicationAgents.{runmode}.-1.jsonResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string runmode = request->get_path_parameter("runmode", "");



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					runmode
				);
			}

			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



SlingApiIntermediatePath{authorizableId}.ks.jsonResource::SlingApiIntermediatePath{authorizableId}.ks.jsonResource()
{
	this->set_path("/{intermediatePath: .*}/{authorizableId}.ks.json/");
	this->set_method_handler("GET",
		std::bind(&SlingApiIntermediatePath{authorizableId}.ks.jsonResource::GET_method_handler, this,
			std::placeholders::_1));
}

SlingApiIntermediatePath{authorizableId}.ks.jsonResource::~SlingApiIntermediatePath{authorizableId}.ks.jsonResource()
{
}

void SlingApiIntermediatePath{authorizableId}.ks.jsonResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &
	)> handler) {
	handler_GET_ = std::move(handler);
}


void SlingApiIntermediatePath{authorizableId}.ks.jsonResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string intermediatePath = request->get_path_parameter("intermediatePath", "");
			const std::string authorizableId = request->get_path_parameter("authorizableId", "");



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					intermediatePath, authorizableId
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Retrieved Authorizable Keystore info" : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



SlingApiIntermediatePathAuthorizableIdKeystoreStore.p12Resource::SlingApiIntermediatePathAuthorizableIdKeystoreStore.p12Resource()
{
	this->set_path("/{intermediatePath: .*}/{authorizableId: .*}/keystore/store.p12/");
	this->set_method_handler("GET",
		std::bind(&SlingApiIntermediatePathAuthorizableIdKeystoreStore.p12Resource::GET_method_handler, this,
			std::placeholders::_1));
}

SlingApiIntermediatePathAuthorizableIdKeystoreStore.p12Resource::~SlingApiIntermediatePathAuthorizableIdKeystoreStore.p12Resource()
{
}

void SlingApiIntermediatePathAuthorizableIdKeystoreStore.p12Resource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &
	)> handler) {
	handler_GET_ = std::move(handler);
}


void SlingApiIntermediatePathAuthorizableIdKeystoreStore.p12Resource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string intermediatePath = request->get_path_parameter("intermediatePath", "");
			const std::string authorizableId = request->get_path_parameter("authorizableId", "");



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					intermediatePath, authorizableId
				);
			}

			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



SlingApiEtcPackagesGroup{name}-{version}.zipResource::SlingApiEtcPackagesGroup{name}-{version}.zipResource()
{
	this->set_path("/etc/packages/{group: .*}/{name}-{version}.zip/");
	this->set_method_handler("GET",
		std::bind(&SlingApiEtcPackagesGroup{name}-{version}.zipResource::GET_method_handler, this,
			std::placeholders::_1));
}

SlingApiEtcPackagesGroup{name}-{version}.zipResource::~SlingApiEtcPackagesGroup{name}-{version}.zipResource()
{
}

void SlingApiEtcPackagesGroup{name}-{version}.zipResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &
	)> handler) {
	handler_GET_ = std::move(handler);
}


void SlingApiEtcPackagesGroup{name}-{version}.zipResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string group = request->get_path_parameter("group", "");
			const std::string name = request->get_path_parameter("name", "");
			const std::string version = request->get_path_parameter("version", "");



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					group, name, version
				);
			}

			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



SlingApiEtcPackagesGroup{name}-{version}.zipJcr:contentVlt:definitionFilter.tidy.2.jsonResource::SlingApiEtcPackagesGroup{name}-{version}.zipJcr:contentVlt:definitionFilter.tidy.2.jsonResource()
{
	this->set_path("/etc/packages/{group: .*}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json/");
	this->set_method_handler("GET",
		std::bind(&SlingApiEtcPackagesGroup{name}-{version}.zipJcr:contentVlt:definitionFilter.tidy.2.jsonResource::GET_method_handler, this,
			std::placeholders::_1));
}

SlingApiEtcPackagesGroup{name}-{version}.zipJcr:contentVlt:definitionFilter.tidy.2.jsonResource::~SlingApiEtcPackagesGroup{name}-{version}.zipJcr:contentVlt:definitionFilter.tidy.2.jsonResource()
{
}

void SlingApiEtcPackagesGroup{name}-{version}.zipJcr:contentVlt:definitionFilter.tidy.2.jsonResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &
	)> handler) {
	handler_GET_ = std::move(handler);
}


void SlingApiEtcPackagesGroup{name}-{version}.zipJcr:contentVlt:definitionFilter.tidy.2.jsonResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string group = request->get_path_parameter("group", "");
			const std::string name = request->get_path_parameter("name", "");
			const std::string version = request->get_path_parameter("version", "");



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					group, name, version
				);
			}

			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



SlingApiBinQuerybuilder.jsonResource::SlingApiBinQuerybuilder.jsonResource()
{
	this->set_path("/bin/querybuilder.json/");
	this->set_method_handler("GET",
		std::bind(&SlingApiBinQuerybuilder.jsonResource::GET_method_handler, this,
			std::placeholders::_1));
	this->set_method_handler("POST",
		std::bind(&SlingApiBinQuerybuilder.jsonResource::POST_method_handler, this,
			std::placeholders::_1));
}

SlingApiBinQuerybuilder.jsonResource::~SlingApiBinQuerybuilder.jsonResource()
{
}

void SlingApiBinQuerybuilder.jsonResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		std::string const &, double const &, std::string const &, std::string const &
	)> handler) {
	handler_GET_ = std::move(handler);
}

void SlingApiBinQuerybuilder.jsonResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		std::string const &, double const &, std::string const &, std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}

void SlingApiBinQuerybuilder.jsonResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const std::string path = request->get_query_parameter("path", "");
			const double pPeriodlimit = request->get_query_parameter("pPeriodlimit", 0.0);
			const std::string r_1_property = request->get_query_parameter("r_1_property", "");
			const std::string r_1_property_value = request->get_query_parameter("r_1_property_value", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					path, pPeriodlimit, r_1_property, r_1_property_value
				);
			}

			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}

void SlingApiBinQuerybuilder.jsonResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const std::string path = request->get_query_parameter("path", "");
			const double pPeriodlimit = request->get_query_parameter("pPeriodlimit", 0.0);
			const std::string r_1_property = request->get_query_parameter("r_1_property", "");
			const std::string r_1_property_value = request->get_query_parameter("r_1_property_value", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					path, pPeriodlimit, r_1_property, r_1_property_value
				);
			}

			if (status_code == 0) {
				std::shared_ptr<std::string> response = NULL;
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}


SlingApiEtcTruststoreTruststore.p12Resource::SlingApiEtcTruststoreTruststore.p12Resource()
{
	this->set_path("/etc/truststore/truststore.p12/");
	this->set_method_handler("GET",
		std::bind(&SlingApiEtcTruststoreTruststore.p12Resource::GET_method_handler, this,
			std::placeholders::_1));
}

SlingApiEtcTruststoreTruststore.p12Resource::~SlingApiEtcTruststoreTruststore.p12Resource()
{
}

void SlingApiEtcTruststoreTruststore.p12Resource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		
	)> handler) {
	handler_GET_ = std::move(handler);
}


void SlingApiEtcTruststoreTruststore.p12Resource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();




			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					
				);
			}

			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



SlingApiLibsGraniteSecurityTruststore.jsonResource::SlingApiLibsGraniteSecurityTruststore.jsonResource()
{
	this->set_path("/libs/granite/security/truststore.json/");
	this->set_method_handler("GET",
		std::bind(&SlingApiLibsGraniteSecurityTruststore.jsonResource::GET_method_handler, this,
			std::placeholders::_1));
}

SlingApiLibsGraniteSecurityTruststore.jsonResource::~SlingApiLibsGraniteSecurityTruststore.jsonResource()
{
}

void SlingApiLibsGraniteSecurityTruststore.jsonResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		
	)> handler) {
	handler_GET_ = std::move(handler);
}


void SlingApiLibsGraniteSecurityTruststore.jsonResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();




			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Retrieved AEM Truststore info" : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



SlingApiIntermediatePath{authorizableId}.ks.htmlResource::SlingApiIntermediatePath{authorizableId}.ks.htmlResource()
{
	this->set_path("/{intermediatePath: .*}/{authorizableId}.ks.html/");
	this->set_method_handler("POST",
		std::bind(&SlingApiIntermediatePath{authorizableId}.ks.htmlResource::POST_method_handler, this,
			std::placeholders::_1));
}

SlingApiIntermediatePath{authorizableId}.ks.htmlResource::~SlingApiIntermediatePath{authorizableId}.ks.htmlResource()
{
}

void SlingApiIntermediatePath{authorizableId}.ks.htmlResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void SlingApiIntermediatePath{authorizableId}.ks.htmlResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string intermediatePath = request->get_path_parameter("intermediatePath", "");
			const std::string authorizableId = request->get_path_parameter("authorizableId", "");

			// Getting the query params
			const std::string operation = request->get_query_parameter("operation", "");
			const std::string currentPassword = request->get_query_parameter("currentPassword", "");
			const std::string newPassword = request->get_query_parameter("newPassword", "");
			const std::string rePassword = request->get_query_parameter("rePassword", "");
			const std::string keyPassword = request->get_query_parameter("keyPassword", "");
			const std::string keyStorePass = request->get_query_parameter("keyStorePass", "");
			const std::string alias = request->get_query_parameter("alias", "");
			const std::string newAlias = request->get_query_parameter("newAlias", "");
			const std::string removeAlias = request->get_query_parameter("removeAlias", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					intermediatePath, authorizableId, operation, currentPassword, newPassword, rePassword, keyPassword, keyStorePass, alias, newAlias, removeAlias, certChain, pk, keyStore
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Retrieved Authorizable Keystore info" : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



SlingApiLibsGraniteSecurityPostAuthorizablesResource::SlingApiLibsGraniteSecurityPostAuthorizablesResource()
{
	this->set_path("/libs/granite/security/post/authorizables/");
	this->set_method_handler("POST",
		std::bind(&SlingApiLibsGraniteSecurityPostAuthorizablesResource::POST_method_handler, this,
			std::placeholders::_1));
}

SlingApiLibsGraniteSecurityPostAuthorizablesResource::~SlingApiLibsGraniteSecurityPostAuthorizablesResource()
{
}

void SlingApiLibsGraniteSecurityPostAuthorizablesResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void SlingApiLibsGraniteSecurityPostAuthorizablesResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const std::string authorizableId = request->get_query_parameter("authorizableId", "");
			const std::string intermediatePath = request->get_query_parameter("intermediatePath", "");
			const std::string createUser = request->get_query_parameter("createUser", "");
			const std::string createGroup = request->get_query_parameter("createGroup", "");
			const std::string repPassword = request->get_query_parameter("repPassword", "");
			const std::string profileSlashgivenName = request->get_query_parameter("profileSlashgivenName", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					authorizableId, intermediatePath, createUser, createGroup, repPassword, profileSlashgivenName
				);
			}

			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



SlingApiAppsSystemConfigCom.adobe.granite.auth.saml.SamlAuthenticationHandler.configResource::SlingApiAppsSystemConfigCom.adobe.granite.auth.saml.SamlAuthenticationHandler.configResource()
{
	this->set_path("/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config/");
	this->set_method_handler("POST",
		std::bind(&SlingApiAppsSystemConfigCom.adobe.granite.auth.saml.SamlAuthenticationHandler.configResource::POST_method_handler, this,
			std::placeholders::_1));
}

SlingApiAppsSystemConfigCom.adobe.granite.auth.saml.SamlAuthenticationHandler.configResource::~SlingApiAppsSystemConfigCom.adobe.granite.auth.saml.SamlAuthenticationHandler.configResource()
{
}

void SlingApiAppsSystemConfigCom.adobe.granite.auth.saml.SamlAuthenticationHandler.configResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, int32_t const &, std::string const &, bool const &, std::string const &, bool const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::vector<std::string> const &, std::string const &, std::string const &, std::string const &, bool const &, std::string const &, std::vector<std::string> const &, std::string const &, std::vector<std::string> const &, std::string const &, int32_t const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, bool const &, std::string const &, std::string const &, std::string const &, bool const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void SlingApiAppsSystemConfigCom.adobe.granite.auth.saml.SamlAuthenticationHandler.configResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const std::string keyStorePassword = request->get_query_parameter("keyStorePassword", "");
			const std::string keyStorePasswordAtTypeHint = request->get_query_parameter("keyStorePasswordAtTypeHint", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string servicePeriodrankingAtTypeHint = request->get_query_parameter("servicePeriodrankingAtTypeHint", "");
			const bool idpHttpRedirect = request->get_query_parameter("idpHttpRedirect", false);
			const std::string idpHttpRedirectAtTypeHint = request->get_query_parameter("idpHttpRedirectAtTypeHint", "");
			const bool createUser = request->get_query_parameter("createUser", false);
			const std::string createUserAtTypeHint = request->get_query_parameter("createUserAtTypeHint", "");
			const std::string defaultRedirectUrl = request->get_query_parameter("defaultRedirectUrl", "");
			const std::string defaultRedirectUrlAtTypeHint = request->get_query_parameter("defaultRedirectUrlAtTypeHint", "");
			const std::string userIDAttribute = request->get_query_parameter("userIDAttribute", "");
			const std::string userIDAttributeAtTypeHint = request->get_query_parameter("userIDAttributeAtTypeHint", "");
			const std::string defaultGroupsAtTypeHint = request->get_query_parameter("defaultGroupsAtTypeHint", "");
			const std::string idpCertAlias = request->get_query_parameter("idpCertAlias", "");
			const std::string idpCertAliasAtTypeHint = request->get_query_parameter("idpCertAliasAtTypeHint", "");
			const bool addGroupMemberships = request->get_query_parameter("addGroupMemberships", false);
			const std::string addGroupMembershipsAtTypeHint = request->get_query_parameter("addGroupMembershipsAtTypeHint", "");
			const std::string pathAtTypeHint = request->get_query_parameter("pathAtTypeHint", "");
			const std::string synchronizeAttributesAtTypeHint = request->get_query_parameter("synchronizeAttributesAtTypeHint", "");
			const int32_t clockTolerance = request->get_query_parameter("clockTolerance", 0);
			const std::string clockToleranceAtTypeHint = request->get_query_parameter("clockToleranceAtTypeHint", "");
			const std::string groupMembershipAttribute = request->get_query_parameter("groupMembershipAttribute", "");
			const std::string groupMembershipAttributeAtTypeHint = request->get_query_parameter("groupMembershipAttributeAtTypeHint", "");
			const std::string idpUrl = request->get_query_parameter("idpUrl", "");
			const std::string idpUrlAtTypeHint = request->get_query_parameter("idpUrlAtTypeHint", "");
			const std::string logoutUrl = request->get_query_parameter("logoutUrl", "");
			const std::string logoutUrlAtTypeHint = request->get_query_parameter("logoutUrlAtTypeHint", "");
			const std::string serviceProviderEntityId = request->get_query_parameter("serviceProviderEntityId", "");
			const std::string serviceProviderEntityIdAtTypeHint = request->get_query_parameter("serviceProviderEntityIdAtTypeHint", "");
			const std::string assertionConsumerServiceURL = request->get_query_parameter("assertionConsumerServiceURL", "");
			const std::string assertionConsumerServiceURLAtTypeHint = request->get_query_parameter("assertionConsumerServiceURLAtTypeHint", "");
			const bool handleLogout = request->get_query_parameter("handleLogout", false);
			const std::string handleLogoutAtTypeHint = request->get_query_parameter("handleLogoutAtTypeHint", "");
			const std::string spPrivateKeyAlias = request->get_query_parameter("spPrivateKeyAlias", "");
			const std::string spPrivateKeyAliasAtTypeHint = request->get_query_parameter("spPrivateKeyAliasAtTypeHint", "");
			const bool useEncryption = request->get_query_parameter("useEncryption", false);
			const std::string useEncryptionAtTypeHint = request->get_query_parameter("useEncryptionAtTypeHint", "");
			const std::string nameIdFormat = request->get_query_parameter("nameIdFormat", "");
			const std::string nameIdFormatAtTypeHint = request->get_query_parameter("nameIdFormatAtTypeHint", "");
			const std::string digestMethod = request->get_query_parameter("digestMethod", "");
			const std::string digestMethodAtTypeHint = request->get_query_parameter("digestMethodAtTypeHint", "");
			const std::string signatureMethod = request->get_query_parameter("signatureMethod", "");
			const std::string signatureMethodAtTypeHint = request->get_query_parameter("signatureMethodAtTypeHint", "");
			const std::string userIntermediatePath = request->get_query_parameter("userIntermediatePath", "");
			const std::string userIntermediatePathAtTypeHint = request->get_query_parameter("userIntermediatePathAtTypeHint", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					keyStorePassword, keyStorePasswordAtTypeHint, servicePeriodranking, servicePeriodrankingAtTypeHint, idpHttpRedirect, idpHttpRedirectAtTypeHint, createUser, createUserAtTypeHint, defaultRedirectUrl, defaultRedirectUrlAtTypeHint, userIDAttribute, userIDAttributeAtTypeHint, defaultGroups, defaultGroupsAtTypeHint, idpCertAlias, idpCertAliasAtTypeHint, addGroupMemberships, addGroupMembershipsAtTypeHint, path, pathAtTypeHint, synchronizeAttributes, synchronizeAttributesAtTypeHint, clockTolerance, clockToleranceAtTypeHint, groupMembershipAttribute, groupMembershipAttributeAtTypeHint, idpUrl, idpUrlAtTypeHint, logoutUrl, logoutUrlAtTypeHint, serviceProviderEntityId, serviceProviderEntityIdAtTypeHint, assertionConsumerServiceURL, assertionConsumerServiceURLAtTypeHint, handleLogout, handleLogoutAtTypeHint, spPrivateKeyAlias, spPrivateKeyAliasAtTypeHint, useEncryption, useEncryptionAtTypeHint, nameIdFormat, nameIdFormatAtTypeHint, digestMethod, digestMethodAtTypeHint, signatureMethod, signatureMethodAtTypeHint, userIntermediatePath, userIntermediatePathAtTypeHint
				);
			}

			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



SlingApiAppsSystemConfigOrg.apache.felix.httpResource::SlingApiAppsSystemConfigOrg.apache.felix.httpResource()
{
	this->set_path("/apps/system/config/org.apache.felix.http/");
	this->set_method_handler("POST",
		std::bind(&SlingApiAppsSystemConfigOrg.apache.felix.httpResource::POST_method_handler, this,
			std::placeholders::_1));
}

SlingApiAppsSystemConfigOrg.apache.felix.httpResource::~SlingApiAppsSystemConfigOrg.apache.felix.httpResource()
{
}

void SlingApiAppsSystemConfigOrg.apache.felix.httpResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		bool const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, bool const &, std::string const &, std::string const &, std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void SlingApiAppsSystemConfigOrg.apache.felix.httpResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const bool orgPeriodapachePeriodfelixPeriodhttpsPeriodnio = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpsPeriodnio", false);
			const std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodnioAtTypeHint = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpsPeriodnioAtTypeHint", "");
			const std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore", "");
			const std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystoreAtTypeHint = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystoreAtTypeHint", "");
			const std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword", "");
			const std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpasswordAtTypeHint = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpasswordAtTypeHint", "");
			const std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkey = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkey", "");
			const std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyAtTypeHint = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyAtTypeHint", "");
			const std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword", "");
			const std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpasswordAtTypeHint = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpasswordAtTypeHint", "");
			const std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore", "");
			const std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststoreAtTypeHint = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststoreAtTypeHint", "");
			const std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword", "");
			const std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpasswordAtTypeHint = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpasswordAtTypeHint", "");
			const std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate", "");
			const std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificateAtTypeHint = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificateAtTypeHint", "");
			const bool orgPeriodapachePeriodfelixPeriodhttpsPeriodenable = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpsPeriodenable", false);
			const std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodenableAtTypeHint = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpsPeriodenableAtTypeHint", "");
			const std::string orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure = request->get_query_parameter("orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure", "");
			const std::string orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecureAtTypeHint = request->get_query_parameter("orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecureAtTypeHint", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					orgPeriodapachePeriodfelixPeriodhttpsPeriodnio, orgPeriodapachePeriodfelixPeriodhttpsPeriodnioAtTypeHint, orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore, orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystoreAtTypeHint, orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword, orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpasswordAtTypeHint, orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkey, orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyAtTypeHint, orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword, orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpasswordAtTypeHint, orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore, orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststoreAtTypeHint, orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword, orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpasswordAtTypeHint, orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate, orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificateAtTypeHint, orgPeriodapachePeriodfelixPeriodhttpsPeriodenable, orgPeriodapachePeriodfelixPeriodhttpsPeriodenableAtTypeHint, orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure, orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecureAtTypeHint
				);
			}

			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



SlingApiAppsSystemConfigOrg.apache.http.proxyconfigurator.configResource::SlingApiAppsSystemConfigOrg.apache.http.proxyconfigurator.configResource()
{
	this->set_path("/apps/system/config/org.apache.http.proxyconfigurator.config/");
	this->set_method_handler("POST",
		std::bind(&SlingApiAppsSystemConfigOrg.apache.http.proxyconfigurator.configResource::POST_method_handler, this,
			std::placeholders::_1));
}

SlingApiAppsSystemConfigOrg.apache.http.proxyconfigurator.configResource::~SlingApiAppsSystemConfigOrg.apache.http.proxyconfigurator.configResource()
{
}

void SlingApiAppsSystemConfigOrg.apache.http.proxyconfigurator.configResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, int32_t const &, std::string const &, std::vector<std::string> const &, std::string const &, bool const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void SlingApiAppsSystemConfigOrg.apache.http.proxyconfigurator.configResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const std::string proxyPeriodhost = request->get_query_parameter("proxyPeriodhost", "");
			const std::string proxyPeriodhostAtTypeHint = request->get_query_parameter("proxyPeriodhostAtTypeHint", "");
			const int32_t proxyPeriodport = request->get_query_parameter("proxyPeriodport", 0);
			const std::string proxyPeriodportAtTypeHint = request->get_query_parameter("proxyPeriodportAtTypeHint", "");
			const std::string proxyPeriodexceptionsAtTypeHint = request->get_query_parameter("proxyPeriodexceptionsAtTypeHint", "");
			const bool proxyPeriodenabled = request->get_query_parameter("proxyPeriodenabled", false);
			const std::string proxyPeriodenabledAtTypeHint = request->get_query_parameter("proxyPeriodenabledAtTypeHint", "");
			const std::string proxyPerioduser = request->get_query_parameter("proxyPerioduser", "");
			const std::string proxyPerioduserAtTypeHint = request->get_query_parameter("proxyPerioduserAtTypeHint", "");
			const std::string proxyPeriodpassword = request->get_query_parameter("proxyPeriodpassword", "");
			const std::string proxyPeriodpasswordAtTypeHint = request->get_query_parameter("proxyPeriodpasswordAtTypeHint", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					proxyPeriodhost, proxyPeriodhostAtTypeHint, proxyPeriodport, proxyPeriodportAtTypeHint, proxyPeriodexceptions, proxyPeriodexceptionsAtTypeHint, proxyPeriodenabled, proxyPeriodenabledAtTypeHint, proxyPerioduser, proxyPerioduserAtTypeHint, proxyPeriodpassword, proxyPeriodpasswordAtTypeHint
				);
			}

			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



SlingApiAppsSystemConfigOrg.apache.sling.jcr.davex.impl.servlets.SlingDavExServletResource::SlingApiAppsSystemConfigOrg.apache.sling.jcr.davex.impl.servlets.SlingDavExServletResource()
{
	this->set_path("/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet/");
	this->set_method_handler("POST",
		std::bind(&SlingApiAppsSystemConfigOrg.apache.sling.jcr.davex.impl.servlets.SlingDavExServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

SlingApiAppsSystemConfigOrg.apache.sling.jcr.davex.impl.servlets.SlingDavExServletResource::~SlingApiAppsSystemConfigOrg.apache.sling.jcr.davex.impl.servlets.SlingDavExServletResource()
{
}

void SlingApiAppsSystemConfigOrg.apache.sling.jcr.davex.impl.servlets.SlingDavExServletResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, bool const &, std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void SlingApiAppsSystemConfigOrg.apache.sling.jcr.davex.impl.servlets.SlingDavExServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const std::string alias = request->get_query_parameter("alias", "");
			const std::string aliasAtTypeHint = request->get_query_parameter("aliasAtTypeHint", "");
			const bool davPeriodcreateAbsoluteUri = request->get_query_parameter("davPeriodcreateAbsoluteUri", false);
			const std::string davPeriodcreateAbsoluteUriAtTypeHint = request->get_query_parameter("davPeriodcreateAbsoluteUriAtTypeHint", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					alias, aliasAtTypeHint, davPeriodcreateAbsoluteUri, davPeriodcreateAbsoluteUriAtTypeHint
				);
			}

			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



SlingApiAppsSystemConfigOrg.apache.sling.servlets.get.DefaultGetServletResource::SlingApiAppsSystemConfigOrg.apache.sling.servlets.get.DefaultGetServletResource()
{
	this->set_path("/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet/");
	this->set_method_handler("POST",
		std::bind(&SlingApiAppsSystemConfigOrg.apache.sling.servlets.get.DefaultGetServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

SlingApiAppsSystemConfigOrg.apache.sling.servlets.get.DefaultGetServletResource::~SlingApiAppsSystemConfigOrg.apache.sling.servlets.get.DefaultGetServletResource()
{
}

void SlingApiAppsSystemConfigOrg.apache.sling.servlets.get.DefaultGetServletResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, bool const &, std::string const &, bool const &, std::string const &, bool const &, std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void SlingApiAppsSystemConfigOrg.apache.sling.servlets.get.DefaultGetServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const std::string jsonPeriodmaximumresults = request->get_query_parameter("jsonPeriodmaximumresults", "");
			const std::string jsonPeriodmaximumresultsAtTypeHint = request->get_query_parameter("jsonPeriodmaximumresultsAtTypeHint", "");
			const bool enablePeriodhtml = request->get_query_parameter("enablePeriodhtml", false);
			const std::string enablePeriodhtmlAtTypeHint = request->get_query_parameter("enablePeriodhtmlAtTypeHint", "");
			const bool enablePeriodtxt = request->get_query_parameter("enablePeriodtxt", false);
			const std::string enablePeriodtxtAtTypeHint = request->get_query_parameter("enablePeriodtxtAtTypeHint", "");
			const bool enablePeriodxml = request->get_query_parameter("enablePeriodxml", false);
			const std::string enablePeriodxmlAtTypeHint = request->get_query_parameter("enablePeriodxmlAtTypeHint", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					jsonPeriodmaximumresults, jsonPeriodmaximumresultsAtTypeHint, enablePeriodhtml, enablePeriodhtmlAtTypeHint, enablePeriodtxt, enablePeriodtxtAtTypeHint, enablePeriodxml, enablePeriodxmlAtTypeHint
				);
			}

			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



SlingApiAppsSystemConfigOrg.apache.sling.security.impl.ReferrerFilterResource::SlingApiAppsSystemConfigOrg.apache.sling.security.impl.ReferrerFilterResource()
{
	this->set_path("/apps/system/config/org.apache.sling.security.impl.ReferrerFilter/");
	this->set_method_handler("POST",
		std::bind(&SlingApiAppsSystemConfigOrg.apache.sling.security.impl.ReferrerFilterResource::POST_method_handler, this,
			std::placeholders::_1));
}

SlingApiAppsSystemConfigOrg.apache.sling.security.impl.ReferrerFilterResource::~SlingApiAppsSystemConfigOrg.apache.sling.security.impl.ReferrerFilterResource()
{
}

void SlingApiAppsSystemConfigOrg.apache.sling.security.impl.ReferrerFilterResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		bool const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void SlingApiAppsSystemConfigOrg.apache.sling.security.impl.ReferrerFilterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const bool allowPeriodempty = request->get_query_parameter("allowPeriodempty", false);
			const std::string allowPeriodemptyAtTypeHint = request->get_query_parameter("allowPeriodemptyAtTypeHint", "");
			const std::string allowPeriodhosts = request->get_query_parameter("allowPeriodhosts", "");
			const std::string allowPeriodhostsAtTypeHint = request->get_query_parameter("allowPeriodhostsAtTypeHint", "");
			const std::string allowPeriodhostsPeriodregexp = request->get_query_parameter("allowPeriodhostsPeriodregexp", "");
			const std::string allowPeriodhostsPeriodregexpAtTypeHint = request->get_query_parameter("allowPeriodhostsPeriodregexpAtTypeHint", "");
			const std::string filterPeriodmethods = request->get_query_parameter("filterPeriodmethods", "");
			const std::string filterPeriodmethodsAtTypeHint = request->get_query_parameter("filterPeriodmethodsAtTypeHint", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					allowPeriodempty, allowPeriodemptyAtTypeHint, allowPeriodhosts, allowPeriodhostsAtTypeHint, allowPeriodhostsPeriodregexp, allowPeriodhostsPeriodregexpAtTypeHint, filterPeriodmethods, filterPeriodmethodsAtTypeHint
				);
			}

			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



SlingApiAppsSystemConfigConfigNodeNameResource::SlingApiAppsSystemConfigConfigNodeNameResource()
{
	this->set_path("/apps/system/config/{configNodeName: .*}/");
	this->set_method_handler("POST",
		std::bind(&SlingApiAppsSystemConfigConfigNodeNameResource::POST_method_handler, this,
			std::placeholders::_1));
}

SlingApiAppsSystemConfigConfigNodeNameResource::~SlingApiAppsSystemConfigConfigNodeNameResource()
{
}

void SlingApiAppsSystemConfigConfigNodeNameResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void SlingApiAppsSystemConfigConfigNodeNameResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string configNodeName = request->get_path_parameter("configNodeName", "");



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					configNodeName
				);
			}

			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



SlingApiPath{name}.rw.htmlResource::SlingApiPath{name}.rw.htmlResource()
{
	this->set_path("/{path: .*}/{name}.rw.html/");
	this->set_method_handler("POST",
		std::bind(&SlingApiPath{name}.rw.htmlResource::POST_method_handler, this,
			std::placeholders::_1));
}

SlingApiPath{name}.rw.htmlResource::~SlingApiPath{name}.rw.htmlResource()
{
}

void SlingApiPath{name}.rw.htmlResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void SlingApiPath{name}.rw.htmlResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string path = request->get_path_parameter("path", "");
			const std::string name = request->get_path_parameter("name", "");

			// Getting the query params
			const std::string addMembers = request->get_query_parameter("addMembers", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					path, name, addMembers
				);
			}

			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



SlingApiPathResource::SlingApiPathResource()
{
	this->set_path("/{path: .*}//");
	this->set_method_handler("POST",
		std::bind(&SlingApiPathResource::POST_method_handler, this,
			std::placeholders::_1));
}

SlingApiPathResource::~SlingApiPathResource()
{
}

void SlingApiPathResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void SlingApiPathResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string path = request->get_path_parameter("path", "");

			// Getting the query params
			const std::string jcrPrimaryType = request->get_query_parameter("jcrPrimaryType", "");
			const std::string name = request->get_query_parameter("name", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					path, jcrPrimaryType, name
				);
			}

			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



SlingApiEtcReplicationTreeactivation.htmlResource::SlingApiEtcReplicationTreeactivation.htmlResource()
{
	this->set_path("/etc/replication/treeactivation.html/");
	this->set_method_handler("POST",
		std::bind(&SlingApiEtcReplicationTreeactivation.htmlResource::POST_method_handler, this,
			std::placeholders::_1));
}

SlingApiEtcReplicationTreeactivation.htmlResource::~SlingApiEtcReplicationTreeactivation.htmlResource()
{
}

void SlingApiEtcReplicationTreeactivation.htmlResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		bool const &, bool const &, std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void SlingApiEtcReplicationTreeactivation.htmlResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const bool ignoredeactivated = request->get_query_parameter("ignoredeactivated", false);
			const bool onlymodified = request->get_query_parameter("onlymodified", false);
			const std::string path = request->get_query_parameter("path", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					ignoredeactivated, onlymodified, path
				);
			}

			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



SlingApiLibsGraniteSecurityPostTruststoreResource::SlingApiLibsGraniteSecurityPostTruststoreResource()
{
	this->set_path("/libs/granite/security/post/truststore/");
	this->set_method_handler("POST",
		std::bind(&SlingApiLibsGraniteSecurityPostTruststoreResource::POST_method_handler, this,
			std::placeholders::_1));
}

SlingApiLibsGraniteSecurityPostTruststoreResource::~SlingApiLibsGraniteSecurityPostTruststoreResource()
{
}

void SlingApiLibsGraniteSecurityPostTruststoreResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void SlingApiLibsGraniteSecurityPostTruststoreResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const std::string operation = request->get_query_parameter("operation", "");
			const std::string newPassword = request->get_query_parameter("newPassword", "");
			const std::string rePassword = request->get_query_parameter("rePassword", "");
			const std::string keyStoreType = request->get_query_parameter("keyStoreType", "");
			const std::string removeAlias = request->get_query_parameter("removeAlias", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					operation, newPassword, rePassword, keyStoreType, removeAlias, certificate
				);
			}

			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



SlingApiEtcTruststoreResource::SlingApiEtcTruststoreResource()
{
	this->set_path("/etc/truststore/");
	this->set_method_handler("POST",
		std::bind(&SlingApiEtcTruststoreResource::POST_method_handler, this,
			std::placeholders::_1));
}

SlingApiEtcTruststoreResource::~SlingApiEtcTruststoreResource()
{
}

void SlingApiEtcTruststoreResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void SlingApiEtcTruststoreResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();




			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					truststorePeriodp12
				);
			}

			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}




}
}
}
}

