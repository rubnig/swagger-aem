/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>

#include "CustomApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

CustomApi::CustomApi() {
}

CustomApi::~CustomApi() {}

void CustomApi::startService(int const& port) {
	// A typical pattern is to derive a class from CustomApi and allocate the shared pointers for restbed::Resource objects
	// and manipulate them (e.g. binding GET/POST handler functions) before this startService() gets called.
	// In such a case we want to use our m_spXXX variables.
	// However in case these shared pointers are nullptr, then allocate the restbed::Resources now:
	if (!m_spCustomApiSystemHealthResource)
		m_spCustomApiSystemHealthResource = std::make_shared<CustomApiSystemHealthResource>();
	this->publish(m_spCustomApiSystemHealthResource);
	if (!m_spCustomApiAppsSystemConfigCom.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheckResource)
		m_spCustomApiAppsSystemConfigCom.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheckResource = std::make_shared<CustomApiAppsSystemConfigCom.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheckResource>();
	this->publish(m_spCustomApiAppsSystemConfigCom.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheckResource);
	if (!m_spCustomApiAppsSystemConfigCom.shinesolutions.aem.passwordreset.ActivatorResource)
		m_spCustomApiAppsSystemConfigCom.shinesolutions.aem.passwordreset.ActivatorResource = std::make_shared<CustomApiAppsSystemConfigCom.shinesolutions.aem.passwordreset.ActivatorResource>();
	this->publish(m_spCustomApiAppsSystemConfigCom.shinesolutions.aem.passwordreset.ActivatorResource);

	std::shared_ptr<restbed::Settings> settings = std::make_shared<restbed::Settings>();
	settings->set_port(port);
	settings->set_root("");
	
	this->start(settings);
}

void CustomApi::stopService() {
	this->stop();
}

CustomApiSystemHealthResource::CustomApiSystemHealthResource()
{
	this->set_path("/system/health/");
	this->set_method_handler("GET",
		std::bind(&CustomApiSystemHealthResource::GET_method_handler, this,
			std::placeholders::_1));
}

CustomApiSystemHealthResource::~CustomApiSystemHealthResource()
{
}

void CustomApiSystemHealthResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		std::string const &, bool const &
	)> handler) {
	handler_GET_ = std::move(handler);
}


void CustomApiSystemHealthResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const std::string tags = request->get_query_parameter("tags", "");
			const bool combineTagsOr = request->get_query_parameter("combineTagsOr", false);


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					tags, combineTagsOr
				);
			}

			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



CustomApiAppsSystemConfigCom.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheckResource::CustomApiAppsSystemConfigCom.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheckResource()
{
	this->set_path("/apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&CustomApiAppsSystemConfigCom.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

CustomApiAppsSystemConfigCom.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheckResource::~CustomApiAppsSystemConfigCom.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheckResource()
{
}

void CustomApiAppsSystemConfigCom.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheckResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		std::vector<std::string> const &, std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void CustomApiAppsSystemConfigCom.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const std::string bundlesPeriodignoredAtTypeHint = request->get_query_parameter("bundlesPeriodignoredAtTypeHint", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					bundlesPeriodignored, bundlesPeriodignoredAtTypeHint
				);
			}

			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



CustomApiAppsSystemConfigCom.shinesolutions.aem.passwordreset.ActivatorResource::CustomApiAppsSystemConfigCom.shinesolutions.aem.passwordreset.ActivatorResource()
{
	this->set_path("/apps/system/config/com.shinesolutions.aem.passwordreset.Activator/");
	this->set_method_handler("POST",
		std::bind(&CustomApiAppsSystemConfigCom.shinesolutions.aem.passwordreset.ActivatorResource::POST_method_handler, this,
			std::placeholders::_1));
}

CustomApiAppsSystemConfigCom.shinesolutions.aem.passwordreset.ActivatorResource::~CustomApiAppsSystemConfigCom.shinesolutions.aem.passwordreset.ActivatorResource()
{
}

void CustomApiAppsSystemConfigCom.shinesolutions.aem.passwordreset.ActivatorResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		std::vector<std::string> const &, std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void CustomApiAppsSystemConfigCom.shinesolutions.aem.passwordreset.ActivatorResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const std::string pwdresetPeriodauthorizablesAtTypeHint = request->get_query_parameter("pwdresetPeriodauthorizablesAtTypeHint", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					pwdresetPeriodauthorizables, pwdresetPeriodauthorizablesAtTypeHint
				);
			}

			if (status_code == 0) {
				session->close(0, result.empty() ? "Default response" : std::move(result), { {"Connection", "close"} });
				return;
			}

}




}
}
}
}

