/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CustomApi.h
 *
 * 
 */

#ifndef CustomApi_H_
#define CustomApi_H_


#include <memory>
#include <utility>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/service.hpp>

#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  CustomApiSystemHealthResource: public restbed::Resource
{
public:
	CustomApiSystemHealthResource();
    virtual ~CustomApiSystemHealthResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_GET(
		std::function<std::pair<int, std::string>(
			std::string const &, bool const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &, bool const &
	)> handler_GET_;


	std::string tags{};
	bool combineTagsOr{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  CustomApiAppsSystemConfigCom.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheckResource: public restbed::Resource
{
public:
	CustomApiAppsSystemConfigCom.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheckResource();
    virtual ~CustomApiAppsSystemConfigCom.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheckResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::vector<std::string> const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::vector<std::string> const &, std::string const &
	)> handler_POST_;


	std::vector<std::string> bundlesPeriodignored{};
	std::string bundlesPeriodignoredAtTypeHint{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  CustomApiAppsSystemConfigCom.shinesolutions.aem.passwordreset.ActivatorResource: public restbed::Resource
{
public:
	CustomApiAppsSystemConfigCom.shinesolutions.aem.passwordreset.ActivatorResource();
    virtual ~CustomApiAppsSystemConfigCom.shinesolutions.aem.passwordreset.ActivatorResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::vector<std::string> const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::vector<std::string> const &, std::string const &
	)> handler_POST_;


	std::vector<std::string> pwdresetPeriodauthorizables{};
	std::string pwdresetPeriodauthorizablesAtTypeHint{};
};


//
// The restbed service to actually implement the REST server
//
class  CustomApi: public restbed::Service
{
public:
	CustomApi();
	~CustomApi();
	void startService(int const& port);
	void stopService();
	
protected:
	std::shared_ptr<CustomApiSystemHealthResource> m_spCustomApiSystemHealthResource;
	std::shared_ptr<CustomApiAppsSystemConfigCom.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheckResource> m_spCustomApiAppsSystemConfigCom.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheckResource;
	std::shared_ptr<CustomApiAppsSystemConfigCom.shinesolutions.aem.passwordreset.ActivatorResource> m_spCustomApiAppsSystemConfigCom.shinesolutions.aem.passwordreset.ActivatorResource;
};


}
}
}
}

#endif /* CustomApi_H_ */

