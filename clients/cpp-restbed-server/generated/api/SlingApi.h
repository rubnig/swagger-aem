/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.5.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SlingApi.h
 *
 * 
 */

#ifndef SlingApi_H_
#define SlingApi_H_


#include <memory>
#include <utility>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/service.hpp>

#include "KeystoreInfo.h"
#include "TruststoreInfo.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  SlingApiEtcReplicationAgents.{runmode}NameResource: public restbed::Resource
{
public:
	SlingApiEtcReplicationAgents.{runmode}NameResource();
    virtual ~SlingApiEtcReplicationAgents.{runmode}NameResource();
    void DELETE_method_handler(const std::shared_ptr<restbed::Session> session);
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_DELETE(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &
		)> handler
	);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &, bool const &, std::string const &, std::string const &, std::string const &, bool const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, bool const &, bool const &, double const &, bool const &, std::string const &, std::vector<std::string> const &, std::string const &, std::string const &, bool const &, std::string const &, double const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, double const &, std::string const &, double const &, std::string const &, double const &, std::string const &, bool const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, bool const &, bool const &, bool const &, bool const &, bool const &, std::string const &, std::string const &, std::string const &
		)> handler
	);

private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &
	)> handler_DELETE_;

	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, bool const &, std::string const &, std::string const &, std::string const &, bool const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, bool const &, bool const &, double const &, bool const &, std::string const &, std::vector<std::string> const &, std::string const &, std::string const &, bool const &, std::string const &, double const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, double const &, std::string const &, double const &, std::string const &, double const &, std::string const &, bool const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, bool const &, bool const &, bool const &, bool const &, bool const &, std::string const &, std::string const &, std::string const &
	)> handler_POST_;

	std::string runmode{};
	std::string name{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  SlingApiPathNameResource: public restbed::Resource
{
public:
	SlingApiPathNameResource();
    virtual ~SlingApiPathNameResource();
    void DELETE_method_handler(const std::shared_ptr<restbed::Session> session);
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_DELETE(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &
		)> handler
	);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
		)> handler
	);

private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &
	)> handler_DELETE_;

	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler_POST_;

	std::string path{};
	std::string name{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  SlingApiEtcReplicationAgents.{runmode}.-1.jsonResource: public restbed::Resource
{
public:
	SlingApiEtcReplicationAgents.{runmode}.-1.jsonResource();
    virtual ~SlingApiEtcReplicationAgents.{runmode}.-1.jsonResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_GET(
		std::function<std::pair<int, std::string>(
			std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &
	)> handler_GET_;


	std::string runmode{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  SlingApiIntermediatePath{authorizableId}.ks.jsonResource: public restbed::Resource
{
public:
	SlingApiIntermediatePath{authorizableId}.ks.jsonResource();
    virtual ~SlingApiIntermediatePath{authorizableId}.ks.jsonResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_GET(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &
	)> handler_GET_;


	std::string intermediatePath{};
	std::string authorizableId{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  SlingApiIntermediatePathAuthorizableIdKeystoreStore.p12Resource: public restbed::Resource
{
public:
	SlingApiIntermediatePathAuthorizableIdKeystoreStore.p12Resource();
    virtual ~SlingApiIntermediatePathAuthorizableIdKeystoreStore.p12Resource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_GET(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &
	)> handler_GET_;


	std::string intermediatePath{};
	std::string authorizableId{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  SlingApiEtcPackagesGroup{name}-{version}.zipResource: public restbed::Resource
{
public:
	SlingApiEtcPackagesGroup{name}-{version}.zipResource();
    virtual ~SlingApiEtcPackagesGroup{name}-{version}.zipResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_GET(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &
	)> handler_GET_;


	std::string group{};
	std::string name{};
	std::string version{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  SlingApiEtcPackagesGroup{name}-{version}.zipJcr:contentVlt:definitionFilter.tidy.2.jsonResource: public restbed::Resource
{
public:
	SlingApiEtcPackagesGroup{name}-{version}.zipJcr:contentVlt:definitionFilter.tidy.2.jsonResource();
    virtual ~SlingApiEtcPackagesGroup{name}-{version}.zipJcr:contentVlt:definitionFilter.tidy.2.jsonResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_GET(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &
	)> handler_GET_;


	std::string group{};
	std::string name{};
	std::string version{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  SlingApiBinQuerybuilder.jsonResource: public restbed::Resource
{
public:
	SlingApiBinQuerybuilder.jsonResource();
    virtual ~SlingApiBinQuerybuilder.jsonResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_GET(
		std::function<std::pair<int, std::string>(
			std::string const &, double const &, std::string const &, std::string const &
		)> handler
	);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::string const &, double const &, std::string const &, std::string const &
		)> handler
	);

private:
	std::function<std::pair<int, std::string>(
		std::string const &, double const &, std::string const &, std::string const &
	)> handler_GET_;

	std::function<std::pair<int, std::string>(
		std::string const &, double const &, std::string const &, std::string const &
	)> handler_POST_;

	std::string path{};
	double pPeriodlimit{};
	std::string r_1_property{};
	std::string r_1_property_value{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  SlingApiEtcTruststoreTruststore.p12Resource: public restbed::Resource
{
public:
	SlingApiEtcTruststoreTruststore.p12Resource();
    virtual ~SlingApiEtcTruststoreTruststore.p12Resource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_GET(
		std::function<std::pair<int, std::string>(
			
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		
	)> handler_GET_;


};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  SlingApiLibsGraniteSecurityTruststore.jsonResource: public restbed::Resource
{
public:
	SlingApiLibsGraniteSecurityTruststore.jsonResource();
    virtual ~SlingApiLibsGraniteSecurityTruststore.jsonResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_GET(
		std::function<std::pair<int, std::string>(
			
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		
	)> handler_GET_;


};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  SlingApiIntermediatePath{authorizableId}.ks.htmlResource: public restbed::Resource
{
public:
	SlingApiIntermediatePath{authorizableId}.ks.htmlResource();
    virtual ~SlingApiIntermediatePath{authorizableId}.ks.htmlResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler_POST_;


	std::string intermediatePath{};
	std::string authorizableId{};
	std::string operation{};
	std::string currentPassword{};
	std::string newPassword{};
	std::string rePassword{};
	std::string keyPassword{};
	std::string keyStorePass{};
	std::string alias{};
	std::string newAlias{};
	std::string removeAlias{};
	std::string certChain{};
	std::string pk{};
	std::string keyStore{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  SlingApiLibsGraniteSecurityPostAuthorizablesResource: public restbed::Resource
{
public:
	SlingApiLibsGraniteSecurityPostAuthorizablesResource();
    virtual ~SlingApiLibsGraniteSecurityPostAuthorizablesResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler_POST_;


	std::string authorizableId{};
	std::string intermediatePath{};
	std::string createUser{};
	std::string createGroup{};
	std::string repPassword{};
	std::string profileSlashgivenName{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  SlingApiAppsSystemConfigCom.adobe.granite.auth.saml.SamlAuthenticationHandler.configResource: public restbed::Resource
{
public:
	SlingApiAppsSystemConfigCom.adobe.granite.auth.saml.SamlAuthenticationHandler.configResource();
    virtual ~SlingApiAppsSystemConfigCom.adobe.granite.auth.saml.SamlAuthenticationHandler.configResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &, int32_t const &, std::string const &, bool const &, std::string const &, bool const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::vector<std::string> const &, std::string const &, std::string const &, std::string const &, bool const &, std::string const &, std::vector<std::string> const &, std::string const &, std::vector<std::string> const &, std::string const &, int32_t const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, bool const &, std::string const &, std::string const &, std::string const &, bool const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, int32_t const &, std::string const &, bool const &, std::string const &, bool const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::vector<std::string> const &, std::string const &, std::string const &, std::string const &, bool const &, std::string const &, std::vector<std::string> const &, std::string const &, std::vector<std::string> const &, std::string const &, int32_t const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, bool const &, std::string const &, std::string const &, std::string const &, bool const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler_POST_;


	std::string keyStorePassword{};
	std::string keyStorePasswordAtTypeHint{};
	int32_t servicePeriodranking{};
	std::string servicePeriodrankingAtTypeHint{};
	bool idpHttpRedirect{};
	std::string idpHttpRedirectAtTypeHint{};
	bool createUser{};
	std::string createUserAtTypeHint{};
	std::string defaultRedirectUrl{};
	std::string defaultRedirectUrlAtTypeHint{};
	std::string userIDAttribute{};
	std::string userIDAttributeAtTypeHint{};
	std::vector<std::string> defaultGroups{};
	std::string defaultGroupsAtTypeHint{};
	std::string idpCertAlias{};
	std::string idpCertAliasAtTypeHint{};
	bool addGroupMemberships{};
	std::string addGroupMembershipsAtTypeHint{};
	std::vector<std::string> path{};
	std::string pathAtTypeHint{};
	std::vector<std::string> synchronizeAttributes{};
	std::string synchronizeAttributesAtTypeHint{};
	int32_t clockTolerance{};
	std::string clockToleranceAtTypeHint{};
	std::string groupMembershipAttribute{};
	std::string groupMembershipAttributeAtTypeHint{};
	std::string idpUrl{};
	std::string idpUrlAtTypeHint{};
	std::string logoutUrl{};
	std::string logoutUrlAtTypeHint{};
	std::string serviceProviderEntityId{};
	std::string serviceProviderEntityIdAtTypeHint{};
	std::string assertionConsumerServiceURL{};
	std::string assertionConsumerServiceURLAtTypeHint{};
	bool handleLogout{};
	std::string handleLogoutAtTypeHint{};
	std::string spPrivateKeyAlias{};
	std::string spPrivateKeyAliasAtTypeHint{};
	bool useEncryption{};
	std::string useEncryptionAtTypeHint{};
	std::string nameIdFormat{};
	std::string nameIdFormatAtTypeHint{};
	std::string digestMethod{};
	std::string digestMethodAtTypeHint{};
	std::string signatureMethod{};
	std::string signatureMethodAtTypeHint{};
	std::string userIntermediatePath{};
	std::string userIntermediatePathAtTypeHint{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  SlingApiAppsSystemConfigOrg.apache.felix.httpResource: public restbed::Resource
{
public:
	SlingApiAppsSystemConfigOrg.apache.felix.httpResource();
    virtual ~SlingApiAppsSystemConfigOrg.apache.felix.httpResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			bool const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, bool const &, std::string const &, std::string const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		bool const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, bool const &, std::string const &, std::string const &, std::string const &
	)> handler_POST_;


	bool orgPeriodapachePeriodfelixPeriodhttpsPeriodnio{};
	std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodnioAtTypeHint{};
	std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore{};
	std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystoreAtTypeHint{};
	std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword{};
	std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpasswordAtTypeHint{};
	std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkey{};
	std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyAtTypeHint{};
	std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword{};
	std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpasswordAtTypeHint{};
	std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore{};
	std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststoreAtTypeHint{};
	std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword{};
	std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpasswordAtTypeHint{};
	std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate{};
	std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificateAtTypeHint{};
	bool orgPeriodapachePeriodfelixPeriodhttpsPeriodenable{};
	std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodenableAtTypeHint{};
	std::string orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure{};
	std::string orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecureAtTypeHint{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  SlingApiAppsSystemConfigOrg.apache.http.proxyconfigurator.configResource: public restbed::Resource
{
public:
	SlingApiAppsSystemConfigOrg.apache.http.proxyconfigurator.configResource();
    virtual ~SlingApiAppsSystemConfigOrg.apache.http.proxyconfigurator.configResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &, int32_t const &, std::string const &, std::vector<std::string> const &, std::string const &, bool const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, int32_t const &, std::string const &, std::vector<std::string> const &, std::string const &, bool const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler_POST_;


	std::string proxyPeriodhost{};
	std::string proxyPeriodhostAtTypeHint{};
	int32_t proxyPeriodport{};
	std::string proxyPeriodportAtTypeHint{};
	std::vector<std::string> proxyPeriodexceptions{};
	std::string proxyPeriodexceptionsAtTypeHint{};
	bool proxyPeriodenabled{};
	std::string proxyPeriodenabledAtTypeHint{};
	std::string proxyPerioduser{};
	std::string proxyPerioduserAtTypeHint{};
	std::string proxyPeriodpassword{};
	std::string proxyPeriodpasswordAtTypeHint{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  SlingApiAppsSystemConfigOrg.apache.sling.jcr.davex.impl.servlets.SlingDavExServletResource: public restbed::Resource
{
public:
	SlingApiAppsSystemConfigOrg.apache.sling.jcr.davex.impl.servlets.SlingDavExServletResource();
    virtual ~SlingApiAppsSystemConfigOrg.apache.sling.jcr.davex.impl.servlets.SlingDavExServletResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &, bool const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, bool const &, std::string const &
	)> handler_POST_;


	std::string alias{};
	std::string aliasAtTypeHint{};
	bool davPeriodcreateAbsoluteUri{};
	std::string davPeriodcreateAbsoluteUriAtTypeHint{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  SlingApiAppsSystemConfigOrg.apache.sling.servlets.get.DefaultGetServletResource: public restbed::Resource
{
public:
	SlingApiAppsSystemConfigOrg.apache.sling.servlets.get.DefaultGetServletResource();
    virtual ~SlingApiAppsSystemConfigOrg.apache.sling.servlets.get.DefaultGetServletResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &, bool const &, std::string const &, bool const &, std::string const &, bool const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, bool const &, std::string const &, bool const &, std::string const &, bool const &, std::string const &
	)> handler_POST_;


	std::string jsonPeriodmaximumresults{};
	std::string jsonPeriodmaximumresultsAtTypeHint{};
	bool enablePeriodhtml{};
	std::string enablePeriodhtmlAtTypeHint{};
	bool enablePeriodtxt{};
	std::string enablePeriodtxtAtTypeHint{};
	bool enablePeriodxml{};
	std::string enablePeriodxmlAtTypeHint{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  SlingApiAppsSystemConfigOrg.apache.sling.security.impl.ReferrerFilterResource: public restbed::Resource
{
public:
	SlingApiAppsSystemConfigOrg.apache.sling.security.impl.ReferrerFilterResource();
    virtual ~SlingApiAppsSystemConfigOrg.apache.sling.security.impl.ReferrerFilterResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			bool const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		bool const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler_POST_;


	bool allowPeriodempty{};
	std::string allowPeriodemptyAtTypeHint{};
	std::string allowPeriodhosts{};
	std::string allowPeriodhostsAtTypeHint{};
	std::string allowPeriodhostsPeriodregexp{};
	std::string allowPeriodhostsPeriodregexpAtTypeHint{};
	std::string filterPeriodmethods{};
	std::string filterPeriodmethodsAtTypeHint{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  SlingApiAppsSystemConfigConfigNodeNameResource: public restbed::Resource
{
public:
	SlingApiAppsSystemConfigConfigNodeNameResource();
    virtual ~SlingApiAppsSystemConfigConfigNodeNameResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &
	)> handler_POST_;


	std::string configNodeName{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  SlingApiPath{name}.rw.htmlResource: public restbed::Resource
{
public:
	SlingApiPath{name}.rw.htmlResource();
    virtual ~SlingApiPath{name}.rw.htmlResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &
	)> handler_POST_;


	std::string path{};
	std::string name{};
	std::string addMembers{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  SlingApiPathResource: public restbed::Resource
{
public:
	SlingApiPathResource();
    virtual ~SlingApiPathResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &
	)> handler_POST_;


	std::string path{};
	std::string jcrPrimaryType{};
	std::string name{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  SlingApiEtcReplicationTreeactivation.htmlResource: public restbed::Resource
{
public:
	SlingApiEtcReplicationTreeactivation.htmlResource();
    virtual ~SlingApiEtcReplicationTreeactivation.htmlResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			bool const &, bool const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		bool const &, bool const &, std::string const &
	)> handler_POST_;


	bool ignoredeactivated{};
	bool onlymodified{};
	std::string path{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  SlingApiLibsGraniteSecurityPostTruststoreResource: public restbed::Resource
{
public:
	SlingApiLibsGraniteSecurityPostTruststoreResource();
    virtual ~SlingApiLibsGraniteSecurityPostTruststoreResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler_POST_;


	std::string operation{};
	std::string newPassword{};
	std::string rePassword{};
	std::string keyStoreType{};
	std::string removeAlias{};
	std::string certificate{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  SlingApiEtcTruststoreResource: public restbed::Resource
{
public:
	SlingApiEtcTruststoreResource();
    virtual ~SlingApiEtcTruststoreResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &
	)> handler_POST_;


	std::string truststorePeriodp12{};
};


//
// The restbed service to actually implement the REST server
//
class  SlingApi: public restbed::Service
{
public:
	SlingApi();
	~SlingApi();
	void startService(int const& port);
	void stopService();
	
protected:
	std::shared_ptr<SlingApiEtcReplicationAgents.{runmode}NameResource> m_spSlingApiEtcReplicationAgents.{runmode}NameResource;
	std::shared_ptr<SlingApiPathNameResource> m_spSlingApiPathNameResource;
	std::shared_ptr<SlingApiEtcReplicationAgents.{runmode}.-1.jsonResource> m_spSlingApiEtcReplicationAgents.{runmode}.-1.jsonResource;
	std::shared_ptr<SlingApiIntermediatePath{authorizableId}.ks.jsonResource> m_spSlingApiIntermediatePath{authorizableId}.ks.jsonResource;
	std::shared_ptr<SlingApiIntermediatePathAuthorizableIdKeystoreStore.p12Resource> m_spSlingApiIntermediatePathAuthorizableIdKeystoreStore.p12Resource;
	std::shared_ptr<SlingApiEtcPackagesGroup{name}-{version}.zipResource> m_spSlingApiEtcPackagesGroup{name}-{version}.zipResource;
	std::shared_ptr<SlingApiEtcPackagesGroup{name}-{version}.zipJcr:contentVlt:definitionFilter.tidy.2.jsonResource> m_spSlingApiEtcPackagesGroup{name}-{version}.zipJcr:contentVlt:definitionFilter.tidy.2.jsonResource;
	std::shared_ptr<SlingApiBinQuerybuilder.jsonResource> m_spSlingApiBinQuerybuilder.jsonResource;
	std::shared_ptr<SlingApiEtcTruststoreTruststore.p12Resource> m_spSlingApiEtcTruststoreTruststore.p12Resource;
	std::shared_ptr<SlingApiLibsGraniteSecurityTruststore.jsonResource> m_spSlingApiLibsGraniteSecurityTruststore.jsonResource;
	std::shared_ptr<SlingApiIntermediatePath{authorizableId}.ks.htmlResource> m_spSlingApiIntermediatePath{authorizableId}.ks.htmlResource;
	std::shared_ptr<SlingApiLibsGraniteSecurityPostAuthorizablesResource> m_spSlingApiLibsGraniteSecurityPostAuthorizablesResource;
	std::shared_ptr<SlingApiAppsSystemConfigCom.adobe.granite.auth.saml.SamlAuthenticationHandler.configResource> m_spSlingApiAppsSystemConfigCom.adobe.granite.auth.saml.SamlAuthenticationHandler.configResource;
	std::shared_ptr<SlingApiAppsSystemConfigOrg.apache.felix.httpResource> m_spSlingApiAppsSystemConfigOrg.apache.felix.httpResource;
	std::shared_ptr<SlingApiAppsSystemConfigOrg.apache.http.proxyconfigurator.configResource> m_spSlingApiAppsSystemConfigOrg.apache.http.proxyconfigurator.configResource;
	std::shared_ptr<SlingApiAppsSystemConfigOrg.apache.sling.jcr.davex.impl.servlets.SlingDavExServletResource> m_spSlingApiAppsSystemConfigOrg.apache.sling.jcr.davex.impl.servlets.SlingDavExServletResource;
	std::shared_ptr<SlingApiAppsSystemConfigOrg.apache.sling.servlets.get.DefaultGetServletResource> m_spSlingApiAppsSystemConfigOrg.apache.sling.servlets.get.DefaultGetServletResource;
	std::shared_ptr<SlingApiAppsSystemConfigOrg.apache.sling.security.impl.ReferrerFilterResource> m_spSlingApiAppsSystemConfigOrg.apache.sling.security.impl.ReferrerFilterResource;
	std::shared_ptr<SlingApiAppsSystemConfigConfigNodeNameResource> m_spSlingApiAppsSystemConfigConfigNodeNameResource;
	std::shared_ptr<SlingApiPath{name}.rw.htmlResource> m_spSlingApiPath{name}.rw.htmlResource;
	std::shared_ptr<SlingApiPathResource> m_spSlingApiPathResource;
	std::shared_ptr<SlingApiEtcReplicationTreeactivation.htmlResource> m_spSlingApiEtcReplicationTreeactivation.htmlResource;
	std::shared_ptr<SlingApiLibsGraniteSecurityPostTruststoreResource> m_spSlingApiLibsGraniteSecurityPostTruststoreResource;
	std::shared_ptr<SlingApiEtcTruststoreResource> m_spSlingApiEtcTruststoreResource;
};


}
}
}
}

#endif /* SlingApi_H_ */

